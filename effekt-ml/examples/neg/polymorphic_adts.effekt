module polymorphic_adts

type List[T] {
  Cons(el: T, rest: List[T]);
  Nil()
}

type Tuple[A, B] {
  Pair(a: A, b: B);
  Pair2(b: B, a: A)
}

effect Raise[A](): A

def f[A, B](a : A, b: B) { block: => A } : A = {
  val b2: B = b;
  block()
}

def id[A](a : A) : A = a

def g[A, B](a: A, b: B): B = b


// def raiseInt(): List[Int] = do Raise()

def main() = {
    id(true) || id(false);

    g(g(4, true), true);

    val p = Pair(1, true);

    p match {
        case Pair(n, t) => if (t) { n + 1 } else { 0 }
        case Pair2(n, t) => if (t) { n + 1 } else { 0 }
    }
}
