def twice { someBlock: () => Unit / {} } = {
  fun() { someBlock(); someBlock() }
}
effect Yield(): Unit
def main() = {
  val f = try { // @Yield =>
    val g = fun(){ do Yield() }
    twice {
      def unboxed() = { (unbox g)() };
      unboxed()// (@Yield)
    }
  } with Yield { println("yielded!"); resume(()) }
  f()
}