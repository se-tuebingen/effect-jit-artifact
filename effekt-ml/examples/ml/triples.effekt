module triples

effect Flip(): Bool
effect Fail(): Nothing

type Triple {
  MkTriple(x: Int, y: Int, z: Int)
}

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}
def concat[A](l1: List[A], l2: List[A]): List[A] = l1 match {
  case Nil() => l2
  case Cons(a, rest) => Cons(a, concat(rest, l2))
}

def choice(n : Int): Int / { Flip, Fail } =
  if (n < 1) {
    do Fail() match {}
  } else if (do Flip()) {
    n
  } else {
    choice(n - 1)
  }

def triple(n: Int, s: Int) = {
  val i = choice(n);
  val j = choice(i - 1);
  val k = choice(j - 1);
  if ((i + j + k) == s) {
    MkTriple(i, j ,k)
  } else {
    do Fail(); MkTriple(-1, -1 , -1)
  }
}

def handledTriple(n : Int, s : Int) =
  try {
    // lift inference infers two lifts here, which is not necessary!
    // but how can we tell functions like `triple` apart from capabilities?
    // what if a local function closes over some capabilities and receives a few others?
    // what if that function is used under a handler?
    try { Cons(triple(n, s), Nil[Triple]()) }
    with Fail { () => Nil[Triple]() }
  } with Flip { () => concat(resume(true), resume(false)) }

def show(t: Triple): String = {
  val MkTriple(x, y, z) = t;
  "MkTriple(" ++ show(x) ++ ", " ++ show(y) ++ ", " ++ show(z) ++ ")"
}

def show(triples: List[Triple]): String = triples match {
  case Nil() => "Nil()"
  case Cons(x, xs) => "Cons(" ++ show(x) ++ ", " ++ show(xs) ++ ")"
}

def main() = println(show(handledTriple(10, 15)))
