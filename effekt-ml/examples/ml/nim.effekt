module examples/pos/nim

// Example from "Liberating effects with rows and handlers"
// Translated from Koka https://github.com/koka-lang/koka/blob/master/test/algeff/nim.kk

type Player {
  Bob();
  Alice()
}

def show(p: Player) = p match {
  case Bob() => "Bob()"
  case Alice() => "Alice()"
}

def println(p: Player) = println(show(p))

effect Move(p: Player, sticks: Int): Int

def nextTurn(p: Player): Player = p match {
  case Bob() => Alice()
  case Alice() => Bob()
}

def turn(p: Player, n: Int): Player / Move =
  if (n <= 0) nextTurn(p) else turn(nextTurn(p), n - do Move(p, n))

def game(n: Int) = turn(Alice(), n)

// ----------------
// Perfect Strategy
// ----------------

def max(n: Int, m: Int): Int =
  if (n > m) n else m

def perfect[R] { prog: => R / Move } =
  try { prog() } with Move { (p, n) =>
    resume(max(1, mod(n, 4)))
  }

def testPerfect1() = perfect { game(7) }

// ----------------
// Game Trees
// ----------------

type Moves[R] {
  Done();
  Step(n: Int, g: R, rest: Moves[R])
}

type GTree {
  Take(p: Player, moves: Moves[GTree]);
  Winner(p: Player)
}

def show[R](moves: Moves[R]) { showR: R => String }: String = moves match {
  case Step(n, r, rs) => "Step(" ++ n.show ++ ", " ++ showR(r) ++ ", " ++ show(rs) {showR} ++ ")"
  case Done() => "Done()"
}

def show(tree: GTree): String = tree match {
  case Winner(p) => "Winner(" ++ p.show ++ ")"
  case Take(p, m) => "Take(" ++ p.show ++ ", " ++ m.show {m => show(m) } ++ ")"
}


def range(from: Int, to: Int) { block: Int => Unit } = {
  var i = from;
  while (i <= to) {
    block(i);
    i = i + 1
  }
}

def gametree { prog: => Player / Move } = try { Winner(prog()) } with Move { (p, n) =>
  var subtrees = Done[GTree]();
  range(1, n) { i =>
    subtrees = Step(i, resume(i), subtrees)
  };
  Take(p, subtrees)
}

// ----------------
// Cheating
// ----------------
effect Cheat[A](p: Player): A
effect Error(msg: String): Unit

def printError { prog: => Unit / Error } = try { prog() } with Error { (msg) =>
  println(msg)
}

def cheatReport[R] { prog: => R / Cheat }: R / Error =
  try { prog() } with Cheat[A] { (p) =>
    do Error(show(p) ++ " cheated!"); <>
  }

def check { prog: => Player / Move } = try { prog() } with Move { (p, n) =>
  val m = do Move(p, n);
  if (m <= 3) { resume(m) } else { do Cheat(p) }
}

def pc  { prog: => Player / Move } = try { prog() } with Move { (p, n) =>
  p match {
    case Alice() => resume(max(1, mod(n, 4)))
    case Bob()   => resume(n)
  }
}

effect Choose(): Bool

def bobChooses { prog: => Player / Move } =
  if (do Choose()) {
    pc { prog() }
  } else {
    perfect { prog() }
  }

def allResults[R] { prog: => R / Choose } = try { [prog()] } with Choose { () =>
  append(resume(true), resume(false))
}

def coin[R] { prog: => R / Choose } = try { prog() } with Choose { () =>
  resume(random() > 0.5)
}

def deterministic[R] { prog: => R / Choose } = {
  val allFlips = [true, false, true, true, false];
  var flips = allFlips;
  try { prog() } with Choose { () =>
    flips match {
      case Nil() => flips = allFlips; resume(true)
      case Cons(b, rest) => flips = rest; resume(b)
    }
  }
}

// ----------------
// Scoreboard
// ----------------
type Scoreboard {
  Board(alice: Int, bob: Int)
}

def show(s: Scoreboard) = s match {
  case Board(alice, bob) => "Board(" ++ show(alice) ++ ", " ++ show(bob) ++ ")"
}

def println(s: Scoreboard) = println(show(s))

effect GetScore(): Scoreboard
effect UpdateScore(p: Player): Unit

def updatedScore(p: Player, board: Scoreboard) = board match {
  case Board(a, b) => p match {
    case Alice() => Board(a + 1, b)
    case Bob() => Board(a, b + 1)
  }
}

def withScore[R] { prog: => R / { GetScore, UpdateScore } }: R = {
  var s: Scoreboard = Board(0, 0);
  try { prog()
  } with GetScore { () =>
    resume(s)
  } with UpdateScore { (p) =>
    s = updatedScore(p, s); resume(())
  }
}

def replay(n: Int) { action: => Unit }: Unit =
  if (n > 0) { action(); replay(n - 1) { action() } } else { () }

// This function causes an issue with the ML backend:
//
// def testPrint2() = {
//   withScore {
//     deterministic {
//       replay(10) {
//         bobChooses { val p = game(7); do UpdateScore(p); p }; ()
//       }
//     };
//     println(show(do GetScore()))
//   }
// }

def main() = {
  println(perfect { game(7) }); // Alice
  println(perfect { game(12) }); // Bob
  println(show(gametree { game(3) })); // Figure 1 in the paper
  printError {
    val result = perfect { cheatReport { check { game(7) } } }; // alice
    println("result is " ++ show(result))
  };
  printError {
    pc { cheatReport { check { game(12) } } }; () // bob cheats
  };
  printError { perfect {
    val result = cheatReport { check { pc { game(12) } } }; // bob
    println("result is " ++ show(result))
  }};
  println(show(allResults { bobChooses { game(7) } }) { p => show(p) }); // List(Bob, Alice)
  deterministic {
    println(do Choose()); // true
    println(do Choose()); // false
    println(do Choose())  // false
  };
  //testPrint2();
  ()
}
