interface Lexer {
  def peek(): Option[String]
  def next(s1: String, s2: String): String
  def bail(): Nothing
}

def main() = {
    val s = try {
        do peek() match {
            case Some(v) => do next(v, "b")
            case None() => do bail()
        }
    } with Lexer {
        def peek() = resume(Some("a"))
        def next(s1, s2) = resume(s1)
        def bail() = "bail"
    };
    println(s)
}
