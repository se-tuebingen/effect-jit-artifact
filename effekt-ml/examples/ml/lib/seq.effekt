import seq

def main() = {

  def generate(to: Int, acc: Seq[Int]): Seq[Int] =
    if (to <= 0) acc
    else generate(to - 1, cons(to, acc))

  def printAll(s: Seq[Int]): Unit =
    uncons(s) match {
      case IsEmpty() => ()
      case View(a, tail) =>
        println(a);
        printAll(tail)
    }

  def printAll(s: Seq[Bool]): Unit =
    uncons(s) match {
      case IsEmpty() => ()
      case View(a, tail) =>
        println(a);
        printAll(tail)
    }

  def printN(s: Seq[Int], n: Int): Unit =
    if (n == 0) () else
      uncons(s) match {
        case IsEmpty() => ()
        case View(a, tail) =>
          println(a);
          printN(tail, n - 1)
      }

  def sumAll(s: Seq[Int], acc: Int): Int =
    uncons(s) match {
      case IsEmpty() => acc
      case View(a, tail) =>
        sumAll(tail, mod(acc + a, 1337))
    }

  def indexAll(s: Seq[Int], n: Int): Unit / Exception[NoSuchElement] = {
    println(s.index(n))
    indexAll(s, n + 1)
  }

  def testSplit(size: Int, index: Int) = ignore[IndexOutOfBounds] {
    val seq = generate(size, Empty());
    val (s1, s2) = seq.splitAt(index)
    s1.printAll()
    println("----")
    s2.printAll()
  }

  val seq15 = generate(15, Empty());


  def appendOften(l: Seq[Int], n: Int): Seq[Int] =
    if (n == 0) l
    else appendOften(l.concat(l), n - 1)

  println("\nTesting cons and uncons")
  val ex1 = generate(10000, Empty())
  println(ex1.size)
  println(sumAll(ex1, 0))

  println("\nTesting concat")
  val ex2 = appendOften(generate(10, Empty()), 12)
  println(ex2.size)
  printN(ex2, 17)

  println("\nTesting random access")
  printN(seq15, 15)
  ignore[NoSuchElement] { indexAll(seq15, 0) }

  println("\nTesting update")
  ignore[NoSuchElement] {
    indexAll(seq15.update(7, 1337), 0)
  }

  println("\nTesting iteration")
  seq15.each { (el) {label} =>
    if (el == 7 || el == 9) label.continue() else if (el == 13) label.break()
    println(el)
  }

  println("\nTesting reverse iteration")
  seq15.eachReverse { (el) {label} =>
    if (el == 7 || el == 9) label.continue() else if (el == 3) label.break()
    println(el)
  }
  seq15.reverse.each { (el) {label} =>
    if (el == 7 || el == 9) label.continue() else if (el == 3) label.break()
    println(el)
  }

  println("\nTesting splitting")
  testSplit(0, 0)
  println("-------")
  testSplit(1, 0)
  println("-------")
  testSplit(1, 1)
  println("-------")
  testSplit(1, 2)
  println("-------")
  testSplit(27, 13)
  println("-------")

  println("\nTesting mapping")
  val mapped = seq15.map { (n) {label} =>
    if (n == 7 || n == 9) label.continue() else if (n == 11) label.break()
    n > 5
  }
  mapped.printAll
}