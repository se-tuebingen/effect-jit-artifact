module examples/pos/genericcompare

type Value {
  Two();
  Three();
  Four();
  Five();
  Six();
  Seven();
  Eight();
  Nine();
  Ten();
  Jack();
  Queen();
  King();
  Ace()
}

type Suit {
  Clubs(); Spades(); Hearts(); Diamonds()
}

record Card(value: Value, suit: Suit)

def test(name: String) { prog: => Unit }: Unit = {
  prog()
  println("")
}

def main() = {
  test("integers") {
    println(genericCompare(0, 1))
    println(genericCompare(1, 0))
    println(genericCompare(1, 1))
  }

  test("lists") {
    println(genericCompare([1, 2, 3], [1, 2, 3]))
    println(genericCompare([1, 2, 1], [1, 2, 3]))
    println(genericCompare([1, 2, 4], [1, 2, 3]))
    println(genericCompare([1, 3, 2], [1, 2, 3]))
    println(genericCompare([1, 2, 3], [1, 2]))
    println(genericCompare([1, 2], [1, 2, 3]))
    println(genericCompare([1, 2, 3], [1, 3, 2]))
    println(genericCompare([1, 2, 3], [1, 1, 2, 3]))
  }

  test("sum types") {
    println(genericCompare(Two(), Two()))
    println(genericCompare(Two(), Three()))
    println(genericCompare(Three(), Two()))
    println(genericCompare(Three(), Ace()))
    println(genericCompare(Ace(), Ten()))
    println(genericCompare(Ten(), Ace()))
  }

  test("complex ADTs") {
    println(genericCompare(Card(Ace(), Hearts()), Card(King(), Diamonds())))
    println(genericCompare(Card(King(), Spades()), Card(King(), Spades())))
    println(genericCompare(Card(Two(), Clubs()), Card(Six(), Hearts())))
  }

  test("list of complex ADTs") {
    println(genericCompare(
      [Card(King(), Spades()), Card(Six(), Hearts())],
      [Card(King(), Spades()), Card(Two(), Clubs()), Card(Ace(), Hearts())]
    ))
  }
}
