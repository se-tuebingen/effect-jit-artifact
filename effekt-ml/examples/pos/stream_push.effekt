module stream_push

effect Emit(n: Int) : Unit
// type alias PushStream = Unit / Emit

def sum { stream: => Unit / Emit } : Int = {
  var sum = 0;
  try { stream() } with Emit { (n: Int) =>
    sum = sum + n; resume(())
  };
  sum
}


def map { stream: => Unit / Emit } { f : Int => Int } : Unit / Emit =
  try { stream() } with Emit { (n: Int) =>
    do Emit(f(n)); resume(())
  }

def range(from: Int, to: Int): Unit / Emit = {
  var n = from;
  while (n < to) {
    do Emit(n);
    n = n + 1
  }
}

def main() = {
  val res = sum { map { range(1, 10) } { n => n + 1 } };
  println(res)
}
