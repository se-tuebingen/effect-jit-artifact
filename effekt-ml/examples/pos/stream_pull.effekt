module stream_pull

// effect Done() : Void
effect Done() : Int
// type alias PullStream = Int / Done
// type alias PullStream = { R / Read } => R

effect Read() : Int

interface State {
  def get() : Int
  def put(n : Int) : Unit
}

def sum() = {
  while (true) {
    do put(do get() + do Read())
  }
}

def map { f : Int => Int } { prog : => Unit / Read } : Unit / {Read} = {
  try {
    prog()
  } with Read { () =>
    resume(f(do Read()))
  }
}

def range(from : Int, to : Int) { prog : => Unit / Read } = {
  var n = from;
  try {
    prog()
  } with Read { () =>
    val x = n;
    if (x < to) {
      n = x + 1;
      resume(x)
    } else {
      ()
    }
  }
}

def state { prog: => Unit / State } = {
  var s = 0;
  try {
    prog()
  } with State {
    def get() = resume(s)
    def put(n) = {
      s = n;
      resume(())
    }
  };
  s
}

def main() = {
  val res = state { range(1, 10) { map { n => n + 1 } { sum() } } };
  println(res)
}
