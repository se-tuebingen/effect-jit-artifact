import string
import process

interface Assertion {
  def assert(condition: Bool, msg: String): Unit
}

def assertTrue(condition: Bool, msg: String) =
  do assert(condition, msg)

def assertTrue(condition: Bool) =
  do assert(condition, "Assertion failed")

def assertFalse(condition: Bool, msg: String) =
  do assert(not(condition), msg)

def assertFalse(condition: Bool) =
  do assert(not(condition), "Assertion failed")

def assert(obtained: Int, expected: Int, msg: String): Unit / Assertion =
  assertEqual(obtained, expected, msg) { (x, y) => x == y }

def assert(obtained: Bool, expected: Bool, msg: String): Unit / Assertion =
  assertEqual(obtained, expected, msg) { (x, y) => x == y }

def assert(obtained: Char, expected: Char, msg: String): Unit / Assertion =
  assertEqual(obtained, expected, msg) { (x, y) => x == y }

def assert(obtained: String, expected: String, msg: String): Unit / Assertion =
  assertEqual(obtained, expected, msg) { (x, y) => x == y }

def assert(obtained: Int, expected: Int): Unit / Assertion =
  assertEqual(obtained, expected) { (x, y) => x == y } { x => show(x) }

def assert(obtained: Bool, expected: Bool): Unit / Assertion =
  assertEqual(obtained, expected) { (x, y) => x == y } { x => show(x) }

def assert(obtained: Char, expected: Char): Unit / Assertion =
  assertEqual(obtained, expected) { (x, y) => x == y } { x => show(x) }

def assert(obtained: String, expected: String): Unit / Assertion =
  assertEqual(obtained, expected) { (x, y) => x == y } { x => show(x) }

def assertEqual[A](obtained: A, expected: A, msg: String): Unit / Assertion =
  assertEqual(obtained, expected, msg) { (x, y) => x.equals(y) }

def assertEqual[A](obtained: A, expected: A): Unit / Assertion =
  assertEqual(obtained, expected) { (x, y) => x.equals(y) } { x => x.genericShow }

def assertEqual[A](obtained: A, expected: A, msg: String) { equals: (A, A) => Bool }: Unit / Assertion =
  do assert(equals(obtained, expected), msg)

def assertEqual[A](obtained: A, expected: A) { equals: (A, A) => Bool } { show: A => String }: Unit / Assertion =
  do assert(equals(obtained, expected), "Obtained: " ++ show(obtained) ++ "\n but expected:" ++ show(expected))


interface Test {
  def success(name: String): Unit
  def failure(name: String, msg: String): Unit
}

def test(name: String) { body: => Unit / Assertion } =
  try { body(); do success(name) } with Assertion {
    def assert(condition, msg) = if (condition) resume(()) else do failure(name, msg)
  }

def suite(name: String) { body: => Unit / Test }: Bool = {
  println("Running suite: " ++ name);
  var failed = 0
  var passed = 0

  try { body() } with Test {
    def success(name) = {
      passed = passed + 1
      println(ANSI::GREEN ++ "+ " ++ name ++ "" ++ ANSI::RESET);
      resume(())
    }
    def failure(name, msg) = {
      failed = failed + 1
      println(ANSI::RED ++ "- (FAIL) " ++ name ++ "\n    " ++ msg ++ ANSI::RESET);
      resume(())
    }
  }
  if (failed > 0) {
    println(ANSI::RED ++ "Some tests failed (" ++ passed.show ++ " passed, " ++ failed.show ++ " failed)" ++ ANSI::RESET)
    false
  } else {
    println(ANSI::GREEN ++ "All tests passed (" ++ passed.show ++ " passed)" ++ ANSI::RESET)
    true
  }
}

/// Use as `def main() = mainSuite("...") { ... }`
def mainSuite(name: String) { body: => Unit / Test }: Unit = {
  val result = suite(name) { body() }
  val exitCode = if (result) 0 else 1
  exit(exitCode)
}
