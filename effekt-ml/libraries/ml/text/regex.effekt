module text/regex

import internal/mllist
import internal/mloption

extern type Char // TODO move to text/string
type Chars = MLList[Char]


extern pure def chars(str: String): Chars = ml "String.explode ${str}"
extern pure def toString(chars: Chars): String = ml "String.implode ${chars}"

extern ml """

(** The RegExp module is created by choosing a parser (P) and an engine (E)
  * for regular expressions.
  *
  * There is no big choice for the parser, since only Awk syntax is supported.
  * For the regular expression engine, we choose Ken Thompson's algorighm.
  *
  * Also see:
  *   <https://stackoverflow.com/questions/35462919/how-to-use-regex-in-smlnj>
  *   <https://www.smlnj.org/doc/smlnj-lib/RegExp/fun-RegExpFn.html>
  *)
structure RegExp = RegExpFn(
  structure P = AwkSyntax
  structure E = ThompsonEngine
  (* structure E = BackTrackEngine *)
  (* structure E = DfaEngine *)
)
"""

// The type of regular expressions (ML representation)
extern type Regex

record Match(matched: String)

// TODO handle CannotParse and CannotCompile ml exceptions.
extern pure def regex(regexString: String): Regex =
  ml "RegExp.compileString ${regexString}"


// A stream of elements of type Elem, read from a source of type Source
extern type MLStream[Elem, Source] // = ('elem, 'source) StringCvt.reader

// Internal ml type that represents matches
//   <https://www.smlnj.org/doc/smlnj-lib/RegExp/str-MatchTree.html>
extern type MLMatchResult // = match * char list

extern ml """
type regex_match = {len: int, pos: char list} MatchTree.match_tree;
fun matchedString (match : regex_match * char list) =
  let val res = MatchTree.root (#1 match)
  in String.implode (List.take (#pos res, #len res)) end;

fun remainderChars (match : regex_match * char list) =
  let val res = MatchTree.root (#1 match)
  in List.drop (#pos res, #len res) end;

(** The remainder is just a draft and doesn't work yet...) *)

(** MatchTree -> string list **)
fun allMatched (matchtree: regex_match) =
  MatchTree.foldl (fn (m, b) => (String.implode (List.take (#pos m, #len m))) :: b) nil matchtree
fun allBut str = RegExp.compileString ("[^" ^ str ^ "]+");

fun unsafeSplit str sep =
  case (RegExp.find (allBut str) List.getItem (String.explode str)) of
      NONE => nil
    | SOME v => allMatched (#1 v);
"""

extern pure def getMatch(result: MLMatchResult): String =
  ml "matchedString ${result}"
extern pure def getRemainder(result: MLMatchResult): Chars =
  ml "remainderChars ${result}"

extern pure def unsafeSplit(str: String, ch: Char): MLList[String] =
  ml "String.fields (fn c => c = ${ch}) ${str}"

extern pure def unsafeMatchPrefix(r: Regex, str: Chars): MLOption[MLMatchResult] =
  ml "RegExp.prefix ${r} List.getItem ${str}"

extern pure def unsafeSplit(str: String, sep: String): MLList[String] =
  ml "unsafeSplit ${str} ${sep}"

extern ml """
val NEWLINE_CHAR = #"\n";
"""

extern pure def unsafeLines(str: String): MLList[String] =
  ml "String.fields (fn c => c = NEWLINE_CHAR) ${str}"

def lines(str: String): List[String] = unsafeLines(str).toList

def split(str: String, sep: String): List[String] = unsafeSplit(str, sep).toList

def exec(reg: Regex, str: String): Option[Match] = {
  val matched = reg.unsafeMatchPrefix(str.chars)
  if (matched.isDefined) { Some(Match(matched.force.getMatch())) }
  else { None() }
}