import list
import option
import args
import string

effect Get() : Int
effect Set(i: Int): Unit
effect Yield(i: Int): Unit

def ignore[R] { body: => R / Yield }: R = try { body() } with Yield { (i) => resume(()) }

def countdown(): Int / {Get, Set} = {
  val i = do Get();
  if (i == 0) {
    i
  } else {
    do Set(i - 1);
    countdown()
  }
}

def handled(n: Int, d: Int): Int / {Get, Set} = {
  if (d == 0) {
    countdown()
  } else {
    ignore {
      handled(n, d - 1)
    }
  }
}

def run(n: Int, d: Int) = {
  var s = n;
  try {
    handled(n, d)
  } with Get { () => resume(s)
  } with Set { (i: Int) => s = i; resume(()) }
}

def main() = {
  val n = on[WrongFormat].default{5}{ commandLineArgs().headOption.getOrElse{ "" }.toInt };
  val d = on[WrongFormat].default{10}{ on[OutOfBounds].default{10}{ commandLineArgs().get(1).toInt } };
  val r = run(n, d);
  println(r)
}