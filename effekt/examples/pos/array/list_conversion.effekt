module examples/pos/list/collect

def listToArrayAndBack[A](list: List[A]): Unit = {
  list.foreach { x => inspect(x) }
  println("")

  val arr = fromList(list)
  println("size " ++ show(arr.size))
  arr.foreachIndex { (i, x) =>
    println(i)
    inspect(x)
  }
  println("")

  val reconstructedList = arr.toList()
  reconstructedList.foreach { x => inspect(x) }
  println("")
}

def arrayToListAndBack[A](arr: Array[A]): Unit = {
  println("size " ++ show(arr.size))
  arr.foreachIndex { (i, x) =>
    println(i)
    inspect(x)
  }
  println("")

  val list = arr.toList
  list.foreach { x => inspect(x) }
  println("")

  val reconstructedArray = fromList(list)
  println("size " ++ show(reconstructedArray.size))
  reconstructedArray.foreachIndex { (i, x) =>
    println(i)
    inspect(x)
  }
  println("")
}

def main() = {
  println("empty list")
  val emptyList = Nil[Int]()
  listToArrayAndBack(emptyList)

  println("nonempty list")
  val list = [1, 2, 3]
  listToArrayAndBack(list)

  println("empty array")
  val emptyArray = array::allocate[Int](0)
  arrayToListAndBack(emptyArray)

  println("nonempty array")
  val array: Array[Int] = build(3) { i => i + 1 } // Array(1, 2, 3)
  arrayToListAndBack(array)
}
