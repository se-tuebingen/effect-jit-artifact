module examples/pos/polymorphic/exceptions

interface Exception[E] {
  def raise[A](e: E): A
}

record DivByZero()

def saveDiv(x: Int, y: Int): Int / Exception[DivByZero] =
  if (y == 0) {
    do raise(DivByZero())
  } else {
    x / y
  }

def report[E] { show: E => String } { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] {
    def raise[A](e) = println(show(e))
  }

def main() = report[DivByZero] { d => "DivByZero()" } {
  println(saveDiv(4, 2))
  println(saveDiv(1, 0))
  println(saveDiv(1, 3))
}
