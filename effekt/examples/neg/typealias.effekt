module typealias

type Foo = Int
type Bar = String

type IntList = List[Int]

def intListUser() = {
  val l: IntList = [1, 2, 3];
  ()
}

type Vector[T] = List[T]

def typeConstructorAlias() = {
  val l: Vector[Int] = [1, 2, 3];
  ()
}

type Matrix[T] = Vector[Vector[T]]

def nestedAlias() = {
  val l: Matrix[Int] = [[1, 2, 3], [4, 5, 6]];
  ()
}

def nestedAlias[A](el: A) = {
  val l: Matrix[A] = [[el, el, el], [el, el, el]];
  ()
}

// should not typecheck
def add(x: Foo, y: Foo): Bar = x + y

def main() = ()