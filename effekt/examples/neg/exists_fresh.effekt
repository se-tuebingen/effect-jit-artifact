type Exists {
  Op[Z](el: Z, combine: (Z, Z) => Z at {})
}

def test2fresh() = {
  val intBox = Op(1, box { (x, y) => x + y });

  def twoBoxes(b1: Exists, b2: Exists) = (b1, b2) match {
    case (Op(el1, combine1), Op(el2, combine2)) =>
      combine2(el2, el1) // ERROR Expected Z but got Z
  }
  twoBoxes(intBox, intBox)
}


def main() = test2fresh()