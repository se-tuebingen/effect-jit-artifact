type Exists {
  Op[Z](el: Z, combine: (Z, Z) => Z at {})
}

def test2extruding() = {
  val intBox = Op(1, box { (x, y) => x + y });

  val x = intBox match {
    case Op(el, combine) => el
  }
  x + 2 // ERROR Cannot typecheck
}


def main() = test2extruding()