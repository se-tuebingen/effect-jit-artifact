module immutable/cslist

import list
import array

// a chez scheme cons list
extern type CSList[A]
extern pure def cons[A](el: A, rest: CSList[A]): CSList[A] =
  chez "(cons ${el} ${rest})"

extern pure def nil[A](): CSList[A] =
  chez "(list)"

extern pure def isEmpty[A](l: CSList[A]): Bool =
  chez "(null? ${l})"

// unsafe!
extern pure def head[A](l: CSList[A]): A =
  chez "(car ${l})"

// unsafe!
extern pure def tail[A](l: CSList[A]): CSList[A] =
  chez "(cdr ${l})"


def toChez[A](l: List[A]): CSList[A] = l match {
  case Nil() => nil()
  case Cons(a, rest) => cons(a, rest.toChez)
}

def fromChez[A](l: CSList[A]): List[A] =
  if (l.isEmpty) Nil() else Cons(l.head, l.tail.fromChez)

// Old From Chez
// -------------
extern pure def toArray[A](l: CSList[A]): Array[A] =
  chez "(list->vector ${l})"
