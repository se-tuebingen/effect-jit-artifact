import args
import bench
import array

def run(size: Int) = {
  var primeCount: Int = 0;
  val flags: Array[Bool] = array(size, true);
  each(2, size) { i =>
    if (flags.unsafeGet(i - 1)) {
      primeCount = primeCount + 1;
      var k = i + i;
      while (k <= size) {
        flags.unsafeSet(k - 1, false);
        k = k + i;
      }
    }
  }
  primeCount
}

def main() = {
  val n = on[WrongFormat].default{10}{ commandLineArgs().headOption.getOrElse{ "" }.toInt };
  each(0, n - 1) { i => relevant(run(5000)) }
  val r = run(5000)
  println(r)
}

/**
 * The inliner might remove unused computation (if pure), which is not desired
 * for benchmarking. Since externs are opaque to the optimizer, just wrap the
 * result of the computation to benchmark in `relevant`.
 */
extern io def relevant(value: Int): Unit =
  default { () }