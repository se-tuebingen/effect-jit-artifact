import args
import bench
import array

type Tree {
  Leaf(arr: Array[Int])
  Node(i0: Tree, i1: Tree, i2: Tree, i3: Tree)
}

interface Random {
  def next(): Int
}

def bitAnd(x: Int, y: Int) = mod(x, y + 1)

def withRandom[R]{ program: { Random } => R }: R = {
  var seed = 74755;
  def rand = new Random {
    def next() = {
      seed = bitAnd((seed * 1309) + 13849, 65535);
      seed;
    }
  }
  program{rand}
}

def run(n: Int) = {
  var count in global = 0;

  def buildTreeDepth(depth: Int) { rand: Random }: Tree = {
    count = count + 1;
    if (depth == 1) {
      Leaf(allocate(mod(rand.next, 10) + 1))
    } else {
      Node(
        buildTreeDepth(depth - 1){ rand },
        buildTreeDepth(depth - 1){ rand },
        buildTreeDepth(depth - 1){ rand },
        buildTreeDepth(depth - 1){ rand })
    }
  }

  withRandom { { rand: Random } => buildTreeDepth(n) {rand}; () }

  count
}

def main() =  {
  val n = on[WrongFormat].default{10}{ commandLineArgs().headOption.getOrElse{ "" }.toInt };
  each(0, n - 1) { i => relevant(run(7)) }
  val r = run(7)
  println(r)
}

/**
 * The inliner might remove unused computation (if pure), which is not desired
 * for benchmarking. Since externs are opaque to the optimizer, just wrap the
 * result of the computation to benchmark in `relevant`.
 */
extern io def relevant(value: Int): Unit =
  default { () }

