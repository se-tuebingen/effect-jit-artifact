import args
import bench
import array

def swap(arr: Array[Int], i: Int, j: Int) = {
  val tmp = arr.unsafeGet(i);
  arr.unsafeSet(i, arr.unsafeGet(j));
  arr.unsafeSet(j, tmp)
}

def run(n: Int) = {
  var count in global = 0;

  def permute(arr: Array[Int], n: Int): Unit = {
    count = count + 1;
    if (n != 0) {
      val n1 = n - 1;
      permute(arr, n1);
      var i = n1;
      while (i >= 0){
        arr.swap(n1, i);
        arr.permute(n1);
        arr.swap(n1, i);
        i = i - 1;
      }
    }
  }

  array(n, 0).permute(n);

  count
}

def main() = {
  val n = on[WrongFormat].default{10}{ commandLineArgs().headOption.getOrElse{ "" }.toInt };
  each(0, n - 1) { i => relevant(run(6)) }
  val r = run(6)
  println(r)
}

/**
 * The inliner might remove unused computation (if pure), which is not desired
 * for benchmarking. Since externs are opaque to the optimizer, just wrap the
 * result of the computation to benchmark in `relevant`.
 */
extern io def relevant(value: Int): Unit =
  default { () }

