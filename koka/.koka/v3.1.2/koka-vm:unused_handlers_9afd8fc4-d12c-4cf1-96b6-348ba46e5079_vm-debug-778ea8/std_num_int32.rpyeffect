{"blocks":[{"label":"0([mcore:[#229]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1 ^ #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([switch case for Bool(true)#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([k@[switch case for Bool(false)#13]#16])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"3([switch case for Bool(true)#18])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([switch case for Bool(false)#25])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Eq"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([switch default case#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"6([switch default case#23])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[4],"default":5}]},
{"label":"7([switch case for Bool(false)#13])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[3],"default":6}]},
{"label":"8([switch default case#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"9([switch default case#11])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[7],"default":8}]},
{"label":"10([mcore:[#237]#4])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[1],"default":9}]},
{"label":"11([mcore:[#238]#32])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/@extern-imul"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([switch case for Bool(true)#37])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([switch case for Bool(false)#40])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([switch default case#41])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([switch default case#38])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[13],"default":14}]},
{"label":"16([mcore:[#241]#35])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[12],"default":15}]},
{"label":"17([switch case for Bool(true)#44])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([switch case for Bool(false)#47])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([switch default case#48])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([switch default case#45])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[18],"default":19}]},
{"label":"21([mcore:[#244]#42])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[17],"default":20}]},
{"label":"22([switch case for Bool(true)#51])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([k@[switch case for Bool(false)#58]#61])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"24([switch case for Bool(true)#63])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([switch case for Bool(false)#70])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Eq"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([switch default case#75])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([switch default case#68])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[25],"default":26}]},
{"label":"28([switch case for Bool(false)#58])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/is-neg(i))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/is-neg(i))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[24],"default":27}]},
{"label":"29([switch default case#76])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([switch default case#56])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"0 < #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Switch","arg":1,"values":[false],"targets":[28],"default":29}]},
{"label":"31([mcore:[#252]#49])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 < #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[22],"default":30}]},
{"label":"32([mcore:[#253]#77])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/@extern-umul"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([switch case for Bool(true)#81])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/one)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([switch case for Bool(false)#85])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([switch default case#88])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([switch default case#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[34],"default":35}]},
{"label":"37([mcore:[#254]#80])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[33],"default":36}]},
{"label":"38([mcore:[#259]#89])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/or((std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))), (std/num/int32/and(lo@0, (std/num/int32/int32(65535)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/shl32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/and(lo@0, (std/num/int32/int32(65535)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(65535)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":65535},
{"op":"PrimOp","name":"(#1 & #2)","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"PrimOp","name":"(#1 | #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(65535)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/and(lo@0, (std/num/int32/int32(65535)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/or((std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))), (std/num/int32/and(lo@0, (std/num/int32/int32(65535)))))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([switch case for Bool(true)#99])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"40([k@[switch case for Bool(false)#101]#105])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"41([k@[switch case for Bool(true)#107]#113])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([switch case for Bool(true)#115])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([k@[switch case for Bool(false)#123]#127])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([switch case for Bool(true)#129])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"45([k@[switch case for Bool(false)#131]#135])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([switch case for Bool(true)#137])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(r, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(r, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([switch case for Bool(false)#140])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(r, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(r, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([switch default case#142])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([switch default case#139])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[47],"default":48}]},
{"label":"50([switch case for Bool(false)#131])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/num/int32/(+)(r, y);\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/num/int32/(-)(r, y);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/num/int32/(+)(r, y);\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/num/int32/(-)(r, y);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[46],"default":49}]},
{"label":"51([switch default case#143])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([switch default case#130])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[50],"default":51}]},
{"label":"53([switch case for Bool(false)#123])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val r : int32\n      = std/num/int32/unsafe-cmod(x, y);\nmatch ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> r;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(+)(r, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(-)(r, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> r;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(+)(r, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(-)(r, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>=)(r, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>=)(r, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> r;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(+)(r, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(-)(r, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val r : int32\n      = std/num/int32/unsafe-cmod(x, y);\nmatch ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> r;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(+)(r, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(-)(r, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[44],"default":52}]},
{"label":"54([switch default case#144])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"55([switch default case#118])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[53],"default":54}]},
{"label":"56([switch case for Bool(true)#107])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/num/int32/int32(0);\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val r : int32\n              = std/num/int32/unsafe-cmod(x, y);\n    (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> r;\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/num/int32/(+)(r, y);\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/num/int32/(-)(r, y);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/num/int32/int32(0);\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val r : int32\n              = std/num/int32/unsafe-cmod(x, y);\n    (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> r;\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/num/int32/(+)(r, y);\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/num/int32/(-)(r, y);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[42],"default":55}]},
{"label":"57([k@[switch default case#145]#149])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([switch case for Bool(true)#151])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([k@[switch case for Bool(false)#153]#157])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([switch case for Bool(true)#159])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(r@0, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(r@0, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"61([switch case for Bool(false)#162])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(r@0, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(r@0, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([switch default case#164])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([switch default case#161])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[61],"default":62}]},
{"label":"64([switch case for Bool(false)#153])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/num/int32/(+)(r@0, y);\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/num/int32/(-)(r@0, y);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/num/int32/(+)(r@0, y);\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/num/int32/(-)(r@0, y);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[60],"default":63}]},
{"label":"65([switch default case#165])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"66([switch default case#152])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[64],"default":65}]},
{"label":"67([switch default case#145])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val r@0 : int32\n      = std/num/int32/unsafe-cmod(x, y);\nmatch ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> r@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(+)(r@0, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(-)(r@0, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> r@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(+)(r@0, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(-)(r@0, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>=)(r@0, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>=)(r@0, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> r@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(+)(r@0, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(-)(r@0, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val r@0 : int32\n      = std/num/int32/unsafe-cmod(x, y);\nmatch ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> r@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(+)(r@0, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(-)(r@0, y);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[58],"default":66}]},
{"label":"68([switch case for Bool(false)#101])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/num/int32/int32(0);\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val r : int32\n                  = std/num/int32/unsafe-cmod(x, y);\n        (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> r;\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/num/int32/(+)(r, y);\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/num/int32/(-)(r, y);\n            });\n        });\n    });\n  (@pat@2: bool)\n     -> val r@0 : int32\n              = std/num/int32/unsafe-cmod(x, y);\n    (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> r@0;\n      ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/num/int32/(+)(r@0, y);\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/num/int32/(-)(r@0, y);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":-1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/num/int32/int32(0);\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val r : int32\n                  = std/num/int32/unsafe-cmod(x, y);\n        (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> r;\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/num/int32/(+)(r, y);\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/num/int32/(-)(r, y);\n            });\n        });\n    });\n  (@pat@2: bool)\n     -> val r@0 : int32\n              = std/num/int32/unsafe-cmod(x, y);\n    (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> r@0;\n      ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/num/int32/(+)(r@0, y);\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/num/int32/(-)(r@0, y);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[56],"default":67}]},
{"label":"69([switch default case#166])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([switch default case#100])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[68],"default":69}]},
{"label":"71([mcore:[#274]#96])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[39],"default":70}]},
{"label":"72([switch case for Bool(true)#170])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"73([k@[switch case for Bool(false)#174]#178])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([k@[switch case for Bool(true)#180]#186])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([switch case for Bool(true)#188])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([k@[switch case for Bool(false)#194]#198])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([switch case for Bool(true)#200])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x8\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x8\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([k@[switch case for Bool(false)#202]#206])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"79([switch case for Bool(true)#208])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x9\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x9\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"80([switch case for Bool(false)#213])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x9\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x9\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"81([switch default case#217])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"82([switch default case#212])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[80],"default":81}]},
{"label":"83([switch case for Bool(false)#202])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x8\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x8\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[79],"default":82}]},
{"label":"84([switch default case#218])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"85([switch default case#201])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[83],"default":84}]},
{"label":"86([switch case for Bool(false)#194])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val q : int32;\nval r : int32;\nmatch ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> q;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 / #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> q;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>=)(r, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>=)(r, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> q;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val q : int32;\nval r : int32;\nmatch ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> q;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[77],"default":85}]},
{"label":"87([switch default case#219])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"88([switch default case#189])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[86],"default":87}]},
{"label":"89([switch case for Bool(true)#180])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> x;\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val q : int32;\n        val r : int32;\n    (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> q;\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> x;\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val q : int32;\n        val r : int32;\n    (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> q;\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[75],"default":88}]},
{"label":"90([k@[switch default case#220]#224])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"91([switch case for Bool(true)#226])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([k@[switch case for Bool(false)#228]#232])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"93([switch case for Bool(true)#234])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([switch case for Bool(false)#239])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"95([switch default case#243])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"96([switch default case#238])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[94],"default":95}]},
{"label":"97([switch case for Bool(false)#228])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[93],"default":96}]},
{"label":"98([switch default case#244])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"99([switch default case#227])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[97],"default":98}]},
{"label":"100([switch default case#220])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val q@0 : int32;\nval r@0 : int32;\nmatch ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> q@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"q@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 / #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> q@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(>=)(r@0, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(>=)(r@0, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> q@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"q@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val q@0 : int32;\nval r@0 : int32;\nmatch ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> q@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[91],"default":99}]},
{"label":"101([switch case for Bool(false)#174])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> x;\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val q : int32;\n            val r : int32;\n        (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> q;\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n            });\n        });\n    });\n  (@pat@2: bool)\n     -> val q@0 : int32;\n        val r@0 : int32;\n    (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> q@0;\n      ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":-1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> x;\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val q : int32;\n            val r : int32;\n        (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> q;\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n            });\n        });\n    });\n  (@pat@2: bool)\n     -> val q@0 : int32;\n        val r@0 : int32;\n    (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> q@0;\n      ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[89],"default":100}]},
{"label":"102([switch default case#245])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"103([switch default case#173])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[101],"default":102}]},
{"label":"104([mcore:[#297]#167])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[72],"default":103}]},
{"label":"105([mcore:[#300]#246])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"106([mcore:[#301]#249])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"107([switch case for Bool(true)#256])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([switch case for Bool(false)#260])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"109([switch default case#263])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"110([switch default case#259])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[108],"default":109}]},
{"label":"111([mcore:[#303]#255])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[107],"default":110}]},
{"label":"112([mcore:[#310]#264])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"113([method_apply@[mcore:[#315]#270]#273])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":111}]},
{"label":"114([switch case for Bool(true)#281])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x12\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x12\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([k@[switch case for Bool(false)#283]#289])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"116([switch case for Bool(true)#291])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"117([k@[switch case for Bool(false)#300]#311])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"118([switch case for Bool(false)#300])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":112}]},
{"label":"119([switch default case#313])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"120([switch default case#295])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[118],"default":119}]},
{"label":"121([switch case for Bool(false)#283])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x12\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x12\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[116],"default":120}]},
{"label":"122([switch default case#314])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"123([switch default case#282])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[121],"default":122}]},
{"label":"124([k@[mcore:[#315]#270]#280])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[114],"default":123}]},
{"label":"125([mcore:[#315]#270])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10035\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/is-neg(i)","traced":{"any":[]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<bool,bool,(total :: E),(exn :: (E, V) -> V)>((fn(b: bool){\n    (match (b) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/True;\n    });\n  }), @x-x1@10035)","traced":{"any":[]}},
{"op":"New","out":2,"targets":[113],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":124,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<bool,bool,(total :: E),(exn :: (E, V) -> V)>((fn(b: bool){\n    (match (b) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/True;\n    });\n  }), @x-x1@10035)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/is-neg(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10035\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Jump","target":106}]},
{"label":"126([k@[switch case for Bool(true)#316]#322])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"127([switch case for Bool(true)#324])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"128([switch case for Bool(false)#333])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"129([switch default case#336])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"130([switch default case#328])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[128],"default":129}]},
{"label":"131([switch case for Bool(true)#316])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/num/int32/int32(0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/num/int32/int32(0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[127],"default":130}]},
{"label":"132([switch case for Bool(false)#338])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"133([switch default case#339])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"134([switch default case#337])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[132],"default":133}]},
{"label":"135([mcore:[#320]#315])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/is-neg(i)","traced":{"any":[]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/is-neg(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[131],"default":134}]},
{"label":"136([mcore:[#321]#340])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"PrimOp","name":"infixNeq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"137([mcore:[#323]#344])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"138([mcore:[#332]#350])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"139([k@[switch case for Bool(true)#358]#369])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"140([switch case for Bool(true)#358])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus by zero\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/num/int32/cdiv: modulus by zero\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/cdiv: modulus by zero"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/num/int32/cdiv: modulus by zero\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus by zero\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":137}]},
{"label":"141([k@[switch case for Bool(false)#373]#377])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"142([k@[switch case for Bool(true)#379]#385])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"143([k@[switch case for Bool(true)#387]#398])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"144([switch case for Bool(true)#387])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":138}]},
{"label":"145([switch case for Bool(false)#405])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cdiv(i, j)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 / #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cdiv(i, j)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"146([switch default case#407])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"147([switch default case#400])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[145],"default":146}]},
{"label":"148([switch case for Bool(true)#379])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/num/int32/unsafe-cdiv(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/num/int32/unsafe-cdiv(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[144],"default":147}]},
{"label":"149([switch default case#408])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cdiv(i, j)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 / #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cdiv(i, j)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"150([switch case for Bool(false)#373])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/num/int32/unsafe-cdiv(i, j);\n    });\n  (@pat@2: bool)\n     -> std/num/int32/unsafe-cdiv(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(j, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":-1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(j, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/num/int32/unsafe-cdiv(i, j);\n    });\n  (@pat@2: bool)\n     -> std/num/int32/unsafe-cdiv(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[148],"default":149}]},
{"label":"151([switch default case#410])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"152([switch default case#371])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"0 == #1","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[150],"default":151}]},
{"label":"153([mcore:[#338]#356])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 == #1","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[140],"default":152}]},
{"label":"154([mcore:[#340]#411])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"155([mcore:[#349]#417])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"156([k@[switch case for Bool(true)#425]#436])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"157([switch case for Bool(true)#425])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus by zero\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/num/int32/cmod: modulus by zero\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/cmod: modulus by zero"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/num/int32/cmod: modulus by zero\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus by zero\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":154}]},
{"label":"158([k@[switch case for Bool(false)#440]#444])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"159([k@[switch case for Bool(true)#446]#452])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"160([k@[switch case for Bool(true)#454]#465])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"161([switch case for Bool(true)#454])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":155}]},
{"label":"162([switch case for Bool(false)#472])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(i, j)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(i, j)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"163([switch default case#474])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"164([switch default case#467])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[162],"default":163}]},
{"label":"165([switch case for Bool(true)#446])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/num/int32/unsafe-cmod(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/num/int32/unsafe-cmod(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[161],"default":164}]},
{"label":"166([switch default case#475])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(i, j)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(i, j)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"167([switch case for Bool(false)#440])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/num/int32/unsafe-cmod(i, j);\n    });\n  (@pat@2: bool)\n     -> std/num/int32/unsafe-cmod(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(j, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":-1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(j, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/num/int32/unsafe-cmod(i, j);\n    });\n  (@pat@2: bool)\n     -> std/num/int32/unsafe-cmod(i, j);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[165],"default":166}]},
{"label":"168([switch default case#477])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"169([switch default case#438])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"0 == #1","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[167],"default":168}]},
{"label":"170([mcore:[#355]#423])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 == #1","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[157],"default":169}]},
{"label":"171([mcore:[#358]#478])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"172([mcore:[#361]#481])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"173([mcore:[#363]#484])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"174([mcore:[#371]#490])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"175([mcore:[#377]#496])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"176([mcore:[#384]#502])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"177([mcore:[#390]#508])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"178([mcore:[#395]#514])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"179([mcore:[#402]#520])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"180([mcore:[#408]#526])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"181([k@[switch case for Bool(true)#534]#542])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"182([switch case for Bool(true)#534])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>(std/num/int32/zero, x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>(std/num/int32/zero, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":173}]},
{"label":"183([k@[switch case for Bool(false)#546]#550])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"184([k@[switch case for Bool(true)#552]#558])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"185([k@[switch case for Bool(true)#560]#567])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"186([switch case for Bool(true)#560])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":174}]},
{"label":"187([k@[switch case for Bool(false)#574]#576])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"188([k@[switch case for Bool(true)#578]#581])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"189([k@[switch case for Bool(true)#583]#592])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"190([switch case for Bool(true)#583])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(r, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(r, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":175}]},
{"label":"191([k@[switch case for Bool(false)#596]#605])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"192([switch case for Bool(false)#596])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(r, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(r, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(q, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":176}]},
{"label":"193([switch default case#607])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"194([switch default case#594])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"0 < #1","out":{"any":[3]},"in":{"any":[2]}},
{"op":"Switch","arg":3,"values":[false],"targets":[192],"default":193}]},
{"label":"195([switch case for Bool(true)#578])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/is-pos(y))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 < #1","out":{"any":[0]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/is-pos(y))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[190],"default":194}]},
{"label":"196([k@[switch case for Bool(false)#609]#614])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"197([switch case for Bool(false)#609])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>(q, r)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>(q, r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":177}]},
{"label":"198([switch default case#616])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"199([switch default case#608])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[197],"default":198}]},
{"label":"200([switch case for Bool(false)#574])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val q : int32;\nval r : int32;\nval b@10002 : bool;\nmatch (b@10002) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int32,int32>(q, r);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 / #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/is-neg(r)","traced":{"any":[]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[3]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (b@10002) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int32,int32>(q, r);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (b@10002) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int32,int32>(q, r);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/is-neg(r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val q : int32;\nval r : int32;\nval b@10002 : bool;\nmatch (b@10002) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int32,int32>(q, r);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[195],"default":199}]},
{"label":"201([switch default case#617])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"202([switch default case#569])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[200],"default":201}]},
{"label":"203([switch case for Bool(true)#552])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val q : int32;\n        val r : int32;\n        val b@10002 : bool;\n    (match (b@10002) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> (match ((std/num/int32/is-pos(y))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n        });\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> std/core/types/Tuple2<int32,int32>(q, r);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/min-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val q : int32;\n        val r : int32;\n        val b@10002 : bool;\n    (match (b@10002) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> (match ((std/num/int32/is-pos(y))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n        });\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> std/core/types/Tuple2<int32,int32>(q, r);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[186],"default":202}]},
{"label":"204([k@[switch default case#618]#620])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"205([k@[switch case for Bool(true)#622]#625])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"206([k@[switch case for Bool(true)#627]#636])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"207([switch case for Bool(true)#627])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(r@0, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(r@0, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":178}]},
{"label":"208([k@[switch case for Bool(false)#640]#649])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"209([switch case for Bool(false)#640])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(r@0, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(r@0, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(q@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":179}]},
{"label":"210([switch default case#651])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"211([switch default case#638])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"0 < #1","out":{"any":[3]},"in":{"any":[2]}},
{"op":"Switch","arg":3,"values":[false],"targets":[209],"default":210}]},
{"label":"212([switch case for Bool(true)#622])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/is-pos(y))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 < #1","out":{"any":[0]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/is-pos(y))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[207],"default":211}]},
{"label":"213([k@[switch case for Bool(false)#653]#658])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"214([switch case for Bool(false)#653])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<int32,int32>(q@0, r@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<int32,int32>(q@0, r@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":180}]},
{"label":"215([switch default case#660])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"216([switch default case#652])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[214],"default":215}]},
{"label":"217([switch default case#618])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val q@0 : int32;\nval r@0 : int32;\nval b@0@10005 : bool;\nmatch (b@0@10005) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"q@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 / #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 % #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/is-neg(r@0)","traced":{"any":[]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[3]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (b@0@10005) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (b@0@10005) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/is-neg(r@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cmod(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/unsafe-cdiv(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"q@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val q@0 : int32;\nval r@0 : int32;\nval b@0@10005 : bool;\nmatch (b@0@10005) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[212],"default":216}]},
{"label":"218([switch case for Bool(false)#546])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val q : int32;\n            val r : int32;\n            val b@10002 : bool;\n        (match (b@10002) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> (match ((std/num/int32/is-pos(y))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n            });\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/Tuple2<int32,int32>(q, r);\n        });\n    });\n  (@pat@2@0: bool)\n     -> val q@0 : int32;\n        val r@0 : int32;\n        val b@0@10005 : bool;\n    (match (b@0@10005) {\n      ((std/core/types/True() : bool ) as @pat@9: bool)\n         -> (match ((std/num/int32/is-pos(y))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n        });\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":-1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(-1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val q : int32;\n            val r : int32;\n            val b@10002 : bool;\n        (match (b@10002) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> (match ((std/num/int32/is-pos(y))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n            });\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/Tuple2<int32,int32>(q, r);\n        });\n    });\n  (@pat@2@0: bool)\n     -> val q@0 : int32;\n        val r@0 : int32;\n        val b@0@10005 : bool;\n    (match (b@0@10005) {\n      ((std/core/types/True() : bool ) as @pat@9: bool)\n         -> (match ((std/num/int32/is-pos(y))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n        });\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[203],"default":217}]},
{"label":"219([switch default case#661])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"220([switch default case#544])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"0 == #1","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[218],"default":219}]},
{"label":"221([mcore:[#412]#532])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 == #1","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[182],"default":220}]},
{"label":"222([switch case for Bool(true)#664])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"223([#674])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"224([k@[switch case for Bool(false)#667]#669])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(start, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[3]},"in":{"any":[3,4]}},
{"op":"Swap","a":0,"b":3},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(start, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"225([switch case for Bool(false)#667])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x : a\n      = f(start, init);\nstd/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Push","target":224,"args":{"any":[0,1,3]}},
{"op":"Copy","from":3,"to":0},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x : a\n      = f(start, init);\nstd/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"226([switch default case#676])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"227([switch default case#665])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,0]}},
{"op":"Switch","arg":4,"values":[false],"targets":[225],"default":226}]},
{"label":"228([mcore:[#425]#662])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[222],"default":227}]},
{"label":"229([mcore:[#433]#677])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/fold-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/fold-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f)","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"230([switch case for Bool(true)#686])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"231([#693])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"232([match_def@[#695]#696])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"233([match_std/core/types/Nothing@[#695]#697])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"234([#695])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":233,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1308]","target":232,"args":{"any":[]}}}]},
{"label":"235([k@[#698]#703])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"236([#698])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1519) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(start, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[4,0]}},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":5,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(start, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1519) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":241}]},
{"label":"237([k@[switch case for Bool(false)#689]#691])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":236,"args":{"any":[5]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1309]","target":234,"args":{"any":[]}}}]},
{"label":"238([switch case for Bool(false)#689])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((f(start, init))) {\n  ((std/core/types/Just((x: 1519) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1519>))\n     -> std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<1519>))\n     -> init;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Push","target":237,"args":{"any":[0,1,2,3]}},
{"op":"Copy","from":3,"to":0},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((f(start, init))) {\n  ((std/core/types/Just((x: 1519) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1519>))\n     -> std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<1519>))\n     -> init;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"239([switch default case#705])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"240([switch default case#687])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,0]}},
{"op":"Switch","arg":4,"values":[false],"targets":[238],"default":239}]},
{"label":"241([mcore:[#446]#684])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[230],"default":240}]},
{"label":"242([mcore:[#454]#706])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f)","traced":{"any":[]}},
{"op":"Jump","target":241}]},
{"label":"243([mcore:[#464]#713])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"244([#724])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"245([match_def@[#726]#727])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"246([#733])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"247([match_std/core/types/Just@[#726]#728])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1594) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1594) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":243}]},
{"label":"248([#726])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":247,"args":{"any":[0]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1310]","target":245,"args":{"any":[]}}}]},
{"label":"249([k@[#735]#742])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"250([#735])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val i@0@10008 : int32\n      = std/num/int32/(+)(i, (std/num/int32/int32(1)));\nstd/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10008\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10008\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val i@0@10008 : int32\n      = std/num/int32/(+)(i, (std/num/int32/int32(1)));\nstd/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":256}]},
{"label":"251([k@[switch case for Bool(true)#720]#722])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":250,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1311]","target":248,"args":{"any":[]}}}]},
{"label":"252([switch case for Bool(true)#720])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1594>))\n     -> val i@0@10008 : int32\n              = std/num/int32/(+)(i, (std/num/int32/int32(1)));\n    std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008);\n  ((@skip std/core/types/Just((x: 1594) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1594>))\n     -> std/core/types/Just<a>(x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(i)","traced":{"any":[]}},
{"op":"Push","target":251,"args":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1594>))\n     -> val i@0@10008 : int32\n              = std/num/int32/(+)(i, (std/num/int32/int32(1)));\n    std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008);\n  ((@skip std/core/types/Just((x: 1594) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1594>))\n     -> std/core/types/Just<a>(x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"253([switch case for Bool(false)#746])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"254([switch default case#751])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"255([switch default case#744])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[2,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[253],"default":254}]},
{"label":"256([mcore:[#469]#718])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[252],"default":255}]},
{"label":"257([mcore:[#474]#752])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Jump","target":256}]},
{"label":"258([mcore:[#481]#756])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"end@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end@10010, std/num/int32/zero)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end@10010, std/num/int32/zero)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"end@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":256}]},
{"label":"259([#773])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"260([k@[switch case for Bool(true)#767]#769])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10012\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10012\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":265}]},
{"label":"261([switch case for Bool(true)#767])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _ : ();\nval i@0@10012 : int32;\nstd/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(i)","traced":{"any":[]}},
{"op":"Push","target":260,"args":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _ : ();\nval i@0@10012 : int32;\nstd/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"262([switch case for Bool(false)#777])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"263([switch default case#780])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"264([switch default case#775])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[2,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[262],"default":263}]},
{"label":"265([mcore:[#492]#765])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[261],"default":264}]},
{"label":"266([mcore:[#497]#781])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Jump","target":265}]},
{"label":"267([mcore:[#504]#782])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"end@10014\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end@10014, std/num/int32/zero)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/num/int32/zero)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end@10014, std/num/int32/zero)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"end@10014\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":265}]},
{"label":"268([mcore:[#505]#788])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/sar32(i, (std/num/int32/int32(16)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/sar32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/sar32(i, (std/num/int32/int32(16)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"269([mcore:[#506]#791])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"270([mcore:[#511]#792])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/and(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"(#1 & #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/and(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"271([mcore:[#516]#798])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/and(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"(#1 & #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/and(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"272([mcore:[#518]#804])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"273([#826])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"274([k@[switch case for Bool(true)#812]#820])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":272}]},
{"label":"275([switch case for Bool(true)#812])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo@0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi@0\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<int32>(lo@0, (std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":274,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<int32>(lo@0, (std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo@0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi@0\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":279}]},
{"label":"276([switch case for Bool(false)#830])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo@0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi@0\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<int32>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<int32>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo@0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi@0\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"277([switch default case#835])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"278([switch default case#828])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[276],"default":277}]},
{"label":"279([mcore:[#529]#810])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[275],"default":278}]},
{"label":"280([mcore:[#532]#836])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/and(i, (std/num/int32/int32(65535)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(65535)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":65535},
{"op":"PrimOp","name":"(#1 & #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(65535)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/and(i, (std/num/int32/int32(65535)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"281([mcore:[#533]#839])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/rotl32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/rotl32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/rotl32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"282([mcore:[#534]#842])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/rotr32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/rotr32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/rotr32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"283([mcore:[#535]#845])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/sar32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/sar32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/sar32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"284([mcore:[#536]#848])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/shl32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/shl32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/shl32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"285([switch case for Bool(true)#853])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val y@10018 : int\n      = std/num/int32/int(i);\nstd/core/int/int-add(4294967296, y@10018)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(4294967296, y@10018)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(4294967296, y@10018)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val y@10018 : int\n      = std/num/int32/int(i);\nstd/core/int/int-add(4294967296, y@10018)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"286([switch case for Bool(false)#859])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"287([switch default case#860])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"288([switch default case#857])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Switch","arg":1,"values":[false],"targets":[286],"default":287}]},
{"label":"289([mcore:[#540]#851])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"0 > #1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[285],"default":288}]},
{"label":"290([match_def@[mcore:[#545]#861]#862])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"291([k@[#863]#867])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10019, y@10020)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10019, y@10020)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"292([#863])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x405_19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(hi@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (hi@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(lo@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (lo@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@10019 : int;\nval y@10020 : int;\nstd/core/int/int-add(x@10019, y@10020)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)((std/num/int32/int(hi@0)), 4294967296)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 4294967296","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10020\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/uint(lo@0)","traced":{"any":[]}},
{"op":"Push","target":291,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/uint(lo@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10020\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 4294967296","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)((std/num/int32/int(hi@0)), 4294967296)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@10019 : int;\nval y@10020 : int;\nstd/core/int/int-add(x@10019, y@10020)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x405_19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(hi@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (hi@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(lo@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (lo@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":289}]},
{"label":"293([mcore:[#545]#861])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x405_19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x405_19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":292,"args":{"any":[0,1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1312]","target":290,"args":{"any":[]}}}]},
{"label":"294([match_def@[mcore:[#552]#869]#870])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"295([k@[k@[#871]#873]#878])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10021, y@10022)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10021, y@10022)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"296([k@[#871]#873])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 4294967296","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10022\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/uint(lo@0)","traced":{"any":[]}},
{"op":"Push","target":295,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/uint(lo@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10022\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 4294967296","traced":{"any":[]}},
{"op":"Jump","target":289}]},
{"label":"297([#871])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x410_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(hi@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (hi@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(lo@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (lo@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@10021 : int;\nval y@10022 : int;\nstd/core/int/int-add(x@10021, y@10022)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10021\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)((std/num/int32/uint(hi@0)), 4294967296)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/uint(hi@0)","traced":{"any":[]}},
{"op":"Push","target":296,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/uint(hi@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)((std/num/int32/uint(hi@0)), 4294967296)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10021\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@10021 : int;\nval y@10022 : int;\nstd/core/int/int-add(x@10021, y@10022)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x410_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(hi@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (hi@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(lo@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (lo@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":289}]},
{"label":"298([mcore:[#552]#869])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x410_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x410_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":297,"args":{"any":[0,1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1313]","target":294,"args":{"any":[]}}}]},
{"label":"299([mcore:[#553]#880])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"300([mcore:[#556]#885])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/show((std/num/int32/int(i)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/show((std/num/int32/int(i)))","traced":{"any":[]}},
{"op":"Jump","target":299}]},
{"label":"301([mcore:[#557]#889])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/show/show-hex"}]},
{"label":"302([mcore:[#560]#897])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"303([mcore:[#564]#902])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"304([mcore:[#568]#907])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"305([k@[k@[#929]#932]#938])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":301}]},
{"label":"306([k@[#929]#932])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":305,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":304}]},
{"label":"307([match_def@[match_def@[#929]#943]#944])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"308([#945])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"0x\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"0x"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"0x\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"309([match_def@[#929]#943])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":308,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1314]","target":307,"args":{"any":[]}}}]},
{"label":"310([match_std/core/types/@Optional@[#929]#948])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@2092,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@2092: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@2092,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@2092: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"311([#929])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>((match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2092;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2092;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":306,"args":{"any":[1,3,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2092;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>((match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2092;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":310,"args":{"any":[1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1315]","target":309,"args":{"any":[]}}}]},
{"label":"312([k@[k@[k@[mcore:[#572]#912]#914]#920]#923])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":311,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":303}]},
{"label":"313([match_def@[#949]#950])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"314([match_std/core/types/@None@[#949]#951])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"315([#949])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":314,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1316]","target":313,"args":{"any":[]}}}]},
{"label":"316([#954])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@2088,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@2088: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@2088,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@2088: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"317([k@[k@[mcore:[#572]#912]#914]#920])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<bool>((match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2088;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2088;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":312,"args":{"any":[1,2,0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2088;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<bool>((match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2088;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":316,"args":{"any":[1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1317]","target":315,"args":{"any":[]}}}]},
{"label":"318([k@[mcore:[#572]#912]#914])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":317,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":302}]},
{"label":"319([#956])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"320([#957])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"321([match_def@[mcore:[#572]#912]#955])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":320,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1318]","target":319,"args":{"any":[]}}}]},
{"label":"322([#960])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@2084,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@2084: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@2084,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@2084: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"323([mcore:[#572]#912])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex((std/num/int32/int(i)), (std/core/types/@Optional<int>((match (width) {\n    ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@2084;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@2088;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))), (std/core/types/@Optional<string>((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@2092;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>((match (width) {\n  ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2084;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2084;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":318,"args":{"any":[0,3,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2084;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>((match (width) {\n  ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2084;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex((std/num/int32/int(i)), (std/core/types/@Optional<int>((match (width) {\n    ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@2084;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@2088;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))), (std/core/types/@Optional<string>((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@2092;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }))))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":322,"args":{"any":[1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1319]","target":321,"args":{"any":[]}}}]},
{"label":"324([mcore:[#573]#961])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/show/show-hex"}]},
{"label":"325([mcore:[#578]#969])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"326([mcore:[#582]#974])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"327([mcore:[#586]#979])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"328([k@[k@[k@[#998]#1004]#1007]#1013])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":324}]},
{"label":"329([k@[k@[#998]#1004]#1007])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":328,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":327}]},
{"label":"330([#1019])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"331([#1020])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"0x\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"0x"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"0x\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"332([match_def@[k@[#998]#1004]#1018])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":331,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1320]","target":330,"args":{"any":[]}}}]},
{"label":"333([#1023])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@2139,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@2139: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@2139,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@2139: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"334([k@[#998]#1004])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>((match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2139;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2139;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":329,"args":{"any":[2,3,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2139;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>((match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2139;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":333,"args":{"any":[1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1321]","target":332,"args":{"any":[]}}}]},
{"label":"335([#998])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":334,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":326}]},
{"label":"336([match_def@[#1024]#1025])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"337([match_std/core/types/@None@[#1024]#1026])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"338([#1024])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":337,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1322]","target":336,"args":{"any":[]}}}]},
{"label":"339([#1029])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@2135,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@2135: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@2135,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@2135: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"340([k@[k@[k@[mcore:[#590]#984]#986]#989]#995])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<bool>((match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2135;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2135;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":335,"args":{"any":[1,3,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2135;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<bool>((match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2135;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":339,"args":{"any":[1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1323]","target":338,"args":{"any":[]}}}]},
{"label":"341([k@[k@[mcore:[#590]#984]#986]#989])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":340,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":325}]},
{"label":"342([#1031])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"343([#1032])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 8","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":8},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 8","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"344([match_def@[k@[mcore:[#590]#984]#986]#1030])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":343,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1324]","target":342,"args":{"any":[]}}}]},
{"label":"345([#1035])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@2131,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@2131: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@2131,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@2131: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"346([k@[mcore:[#590]#984]#986])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>((match (width) {\n  ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2131;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 8;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2131;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 8;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":341,"args":{"any":[1,2,0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2131;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 8;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>((match (width) {\n  ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2131;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 8;\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":345,"args":{"any":[1]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1325]","target":344,"args":{"any":[]}}}]},
{"label":"347([mcore:[#590]#984])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex((std/num/int32/uint(i)), (std/core/types/@Optional<int>((match (width) {\n    ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@2131;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 8;\n  }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@2135;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))), (std/core/types/@Optional<string>((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@2139;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/uint(i)","traced":{"any":[]}},
{"op":"Push","target":346,"args":{"any":[3,2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/uint(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex((std/num/int32/uint(i)), (std/core/types/@Optional<int>((match (width) {\n    ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@2131;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 8;\n  }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@2135;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))), (std/core/types/@Optional<string>((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@2139;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":289}]},
{"label":"348([mcore:[#591]#1036])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/shr32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/num/int32/shr32"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/shr32(i, (std/num/int32/int32(shift)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"349([#1041])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"350([#1042])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"351([match_def@[mcore:[#596]#1039]#1040])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":350,"args":{"any":[]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1326]","target":349,"args":{"any":[]}}}]},
{"label":"352([k@[#1043]#1046])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"353([#1043])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int32>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/sumacc32(xx, (std/num/int32/(+)(acc, x)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(acc, x)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(acc, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/sumacc32(xx, (std/num/int32/(+)(acc, x)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int32>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":354}]},
{"label":"354([mcore:[#596]#1039])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":353,"args":{"any":[2,3]}}],"default":{"tag":"b7312fbe-9884-4d68-88f6-65a558c8beeb#[Missing Tag#1327]","target":351,"args":{"any":[]}}}]},
{"label":"355([mcore:[#600]#1048])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/sumacc32(xs, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/sumacc32(xs, (std/num/int32/int32(0)))","traced":{"any":[]}},
{"op":"Jump","target":354}]},
{"label":"356([k@[mcore:[#604]#1051]#1056])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"357([switch case for Bool(true)#1057])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x32\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(i, 4294967296)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(i, 4294967296)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x32\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"358([switch case for Bool(false)#1062])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x32\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x32\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"359([switch default case#1063])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"360([switch default case#1061])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[358],"default":359}]},
{"label":"361([mcore:[#604]#1051])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32((match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/int/int-sub(i, 4294967296);\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> i;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/int/int-sub(i, 4294967296);\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> i;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/num/int32/max-int32)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/int/int-sub(i, 4294967296);\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> i;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32((match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/int/int-sub(i, 4294967296);\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> i;\n}))","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[357],"default":360}]},
{"label":"362([mcore:[#607]#1064])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"363([k@[k@[k@[k@[#1227]#1237]#1247]#1257]#1267])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/one)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/one\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/one"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/zero)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/zero"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/min-int32)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(-2147483648)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":-2147483648},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/min-int32"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/bits-int32)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/bits-int32\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(32)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":32},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/bits-int32"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/num/int32/max-int32)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/max-int32\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(2147483647)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":2147483647},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/max-int32"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_eeab8a73-4f38-4dfe-947e-f441890c0e18"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(2147483647)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/max-int32\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(32)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/bits-int32\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(-2147483648)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/num/int32/one\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"364([k@[k@[k@[#1227]#1237]#1247]#1257])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#228]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_undiv.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/undiv)"},
{"op":"Push","target":363,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"365([k@[k@[#1227]#1237]#1247])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#227]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":364,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"366([k@[#1227]#1237])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#226]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":365,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"367([#1227])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#225]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":366,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"368([k@[k@[k@[k@[#1177]#1187]#1197]#1207]#1217])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#224]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":367,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"369([k@[k@[k@[#1177]#1187]#1197]#1207])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#223]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":368,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"370([k@[k@[#1177]#1187]#1197])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#222]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":369,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"371([k@[#1177]#1187])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#221]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":370,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"372([#1177])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#220]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":371,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"373([k@[k@[k@[k@[#1127]#1137]#1147]#1157]#1167])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#219]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":372,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"374([k@[k@[k@[#1127]#1137]#1147]#1157])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#218]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":373,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"375([k@[k@[#1127]#1137]#1147])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#217]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":374,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"376([k@[#1127]#1137])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#216]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":375,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"377([#1127])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#215]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":376,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"378([k@[k@[k@[k@[#1077]#1087]#1097]#1107]#1117])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#214]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":377,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"379([k@[k@[k@[#1077]#1087]#1097]#1107])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#213]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":378,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"380([k@[k@[#1077]#1087]#1097])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#212]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":379,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"381([k@[#1077]#1087])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#211]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":380,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"382([#1077])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#210]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":381,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"383([mcore:[static initializers#612]#1067])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#209]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":382,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"384([k@[main entrypoint#2]#1305])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"385([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":384,"args":{"any":[]}},
{"op":"Jump","target":383}]}],
"symbols":[{"name":"std/num/int32/(^)","position":0},
{"name":"std/num/int32/cmp","position":10},
{"name":"std/num/int32/imul","position":11},
{"name":"std/num/int32/max","position":16},
{"name":"std/num/int32/min","position":21},
{"name":"std/num/int32/sign","position":31},
{"name":"std/num/int32/umul","position":32},
{"name":"std/num/int32/bool/int32","position":37},
{"name":"std/num/int32/hilo/int32","position":38},
{"name":"std/num/int32/(%)","position":71},
{"name":"std/num/int32/(/)","position":104},
{"name":"std/num/int32/negate","position":105},
{"name":"std/num/int32/abs","position":125},
{"name":"std/num/int32/abs0","position":135},
{"name":"std/num/int32/bool","position":136},
{"name":"std/num/int32/cdiv","position":153},
{"name":"std/num/int32/cmod","position":170},
{"name":"std/num/int32/dec","position":171},
{"name":"std/num/int32/inc","position":172},
{"name":"std/num/int32/divmod","position":221},
{"name":"std/num/int32/range/fold-int32","position":228},
{"name":"std/num/int32/fold-int32","position":229},
{"name":"std/num/int32/range/fold-while-int32","position":241},
{"name":"std/num/int32/fold-while-int32","position":242},
{"name":"std/num/int32/range/@lift-for-while32@2275","position":256},
{"name":"std/num/int32/range/for-while32","position":257},
{"name":"std/num/int32/for-while32","position":258},
{"name":"std/num/int32/range/@lift-for32@2276","position":265},
{"name":"std/num/int32/range/for32","position":266},
{"name":"std/num/int32/for32","position":267},
{"name":"std/num/int32/hi","position":268},
{"name":"std/num/int32/i32","position":269},
{"name":"std/num/int32/is-even","position":270},
{"name":"std/num/int32/is-odd","position":271},
{"name":"std/num/int32/list32","position":279},
{"name":"std/num/int32/lo","position":280},
{"name":"std/num/int32/rotl","position":281},
{"name":"std/num/int32/rotr","position":282},
{"name":"std/num/int32/sar","position":283},
{"name":"std/num/int32/shl","position":284},
{"name":"std/num/int32/uint","position":289},
{"name":"std/num/int32/hilo/int","position":293},
{"name":"std/num/int32/hilo/uint","position":298},
{"name":"std/num/int32/show","position":300},
{"name":"std/num/int32/show-hex","position":323},
{"name":"std/num/int32/show-hex32","position":347},
{"name":"std/num/int32/shr","position":348},
{"name":"std/num/int32/sumacc32","position":354},
{"name":"std/num/int32/sum32","position":355},
{"name":"std/num/int32/uint32","position":361},
{"name":"std/num/int32/(~)","position":362},
{"name":"$static-init","position":383},
{"name":"$entrypoint","position":385}],
"frameSize":{"regs_any":16}}