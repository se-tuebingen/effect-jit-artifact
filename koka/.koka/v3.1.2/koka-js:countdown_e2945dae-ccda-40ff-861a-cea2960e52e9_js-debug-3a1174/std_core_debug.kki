// Core debugging functions.
module interface std/core/debug
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/unsafe = std/core/unsafe = "";
import std/core/hnd = std/core/hnd = "";
import std/core/string = std/core/string = "";
import std/core/console = std/core/console = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// Stateful functions can manipulate heap `:h` using allocations, reads and writes.
local alias std/core/types/st[139,1,139,47]<(h :: H)> :: H -> E = <(std/core/types/read :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(h :: H)>,(std/core/types/alloc :: H -> X)<(h :: H)>> = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
 fun unsafe-assert-fail[75,17,75,34] : (msg : std/core/types/string) -> ();
// Compilation constant that is replaced with the current file name
pub val file/kk-file[32,9,32,20] : std/core/types/string;
// Compilation constant that is replaced with the current line number
pub val file/kk-line[29,9,29,20] : std/core/types/string;
// Explicitly trigger a breakpoint
pub  fun breakpoint[83,12,83,21] : () -> <(std/core/types/ndet :: X)> ();
val trace-enabled[51,5,51,17] : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),std/core/types/bool>;
 fun xtrace[41,8,41,13] : (message : std/core/types/string) -> ();
 fun xtrace-any[46,8,46,17] : forall<a> (message : std/core/types/string, x : a) -> ();
// Compilation constant that is replaced with the current file's module name
pub val file/kk-module[26,9,26,22] : std/core/types/string;
pub  fun file/kk-file-line[34,9,34,25] : (?kk-file : std/core/types/string, ?kk-line : std/core/types/string) -> std/core/types/string;
pub  fun assert[79,9,79,14] : (message : std/core/types/string, condition : std/core/types/bool, ?kk-file-line : std/core/types/string) -> ();
// Disable tracing completely.
pub  fun notrace[72,18,72,24] : () -> <(std/core/types/st :: H -> E)<(std/core/types/global :: H)>> ();
// Trace a message used for debug purposes.
// The behaviour is system dependent. On a browser and node it uses
// `console.log`  by default.
// Disabled if `notrace` is called.
pub  fun trace[57,9,57,13] : (message : std/core/types/string) -> ();
pub  fun trace-any[67,9,67,17] : forall<a> (message : std/core/types/string, x : a) -> ();
pub  fun trace-info[61,9,61,18] : (message : std/core/types/string, ?kk-file-line : std/core/types/string) -> ();
pub  fun trace-show[64,9,64,18] : forall<a> (x : a, ?show : (a) -> std/core/types/string, ?kk-file-line : std/core/types/string) -> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline val file/kk-file // inline size: 0
  = "";
inline val file/kk-line // inline size: 0
  = "";
inline val file/kk-module // inline size: 0
  = "";
 fun file/kk-file-line // inline size: 3
  = fn(@implicit/kk-file: std/core/types/string, @implicit/kk-line: std/core/types/string){
    std/core/types/(++)(@implicit/kk-file, (std/core/types/(++)("(", (std/core/types/(++)(@implicit/kk-line, ")")))));
  };
 fun assert // inline size: 4
  = fn(message: std/core/types/string, condition: std/core/types/bool, @implicit/kk-file-line: std/core/types/string){
    match (condition) {
      ((std/core/types/True() : std/core/types/bool ) as @pat: std/core/types/bool)
         -> std/core/types/Unit;
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0: std/core/types/bool)
         -> std/core/debug/unsafe-assert-fail((std/core/types/(++)(@implicit/kk-file-line, (std/core/types/(++)(": ", message)))));
    };
  };