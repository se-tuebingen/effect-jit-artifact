// Unsafe primitives to dismiss effects.
module interface std/core/unsafe
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// _Unsafe_. This function pretends the given `action` is deterministic
pub  fun pretend-no-ndet[42,9,42,23] : forall<a,(e :: E)> (action : () -> <(std/core/types/ndet :: X)|(e :: E)> a) -> (e :: E) a;
// _Unsafe_. This function calls a function and pretends it did not have any effect at all.
// Use with utmost care as it should not be used to dismiss user-defined effects that need
// a handler and can cause a segfault at runtime in such cases!
//
// You can use `unsafe-total` to dismiss built-in effects without handlers which include:
//
// - behavioral: `:div` (non-termination/divergence), `:ndet` (non-determinism)
// - state: `:alloc`, `:read`, `:write`, `:st`
// - external: `:ui`, `:fsys`, `:net`, `:blocking`
// - combinations: `:io-total` and `:io-noexn`
//
// Do _not_ dismiss `:io` since it has the `:exn` effect that should be handled (and an evidence
// vector should be passed in).
//
// Try to avoid using `unsafe-total` to initialize global values that have a side-effect, but
// use `std/core/delayed/delay` instead:
// ```
// val myglobal = delay( fn() initialize() )
// fun get-global() : e int
//   myglobal.force
// ```
pub  fun unsafe-total[35,9,35,20] : forall<a,(e :: E)> (action : () -> (e :: E) a) -> a;
 
//------------------------------
//#kki: external declarations
 
fip extern unsafe-total-cast[38,19,38,35] : forall<(e :: E),a> (action : () -> (e :: E) a) -> (() -> a) = inline "#1";
// _Unsafe_. This function checks if two objects have the same address in the heap.
// The results may vary on the backend or compiler optimizations but the function pretends to be `:total`.
// Note also that value types always compare unequal since each value will be boxed fresh in the heap
// when calling this function.
pub  extern unsafe-ptr-eq[49,19,49,31] : forall<a> (x : a, y : a) -> std/core/types/bool {
  c inline "kk_box_eq(#1,#2)";
  cs inline "Object.ReferenceEquals(#1,#2)";
  js inline "Object.is(#1,#2)";
};
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
 fun pretend-no-ndet // inline size: 4
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(std/core/types/ndet :: X)|(e :: E)> a){
    std/core/types/@open<(std/core/types/total :: E),(e :: E),() -> a,() -> (e :: E) a>((std/core/types/@open<(std/core/types/total :: E),(e :: E),(action : () -> <(std/core/types/ndet :: X)|(e :: E)> a) -> (() -> a),(action : () -> <(std/core/types/ndet :: X)|(e :: E)> a) -> (e :: E) (() -> a)>((std/core/unsafe/unsafe-total-cast<<(std/core/types/ndet :: X)|(e :: E)>,a>))(action)))();
  };
 fun unsafe-total // inline size: 2
  = forall<a,(e :: E)> fn(action: () -> (e :: E) a){
    std/core/unsafe/unsafe-total-cast<(e :: E),a>(action)();
  };