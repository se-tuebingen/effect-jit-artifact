// Standard `:maybe` functions.
module interface std/core/maybe
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core/exn = std/core/exn = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// Convert a maybe type to a boolean, equivalent to `is-just`.
pub  fun bool[86,9,86,12] : forall<a> (mb : (std/core/types/maybe :: V -> V)<a>) -> std/core/types/bool;
// Convert a `:maybe<a>` value to `:a`, using the `nothing` parameter for `Nothing`.
pub  fun default[23,9,23,15] : forall<a> (m : (std/core/types/maybe :: V -> V)<a>, nothing : a) -> a;
// monadic lift
 fun @mlift-map@10008[1,0,1,0] : forall<a,(e :: E)> (@y-x10000 : a) -> (e :: E) (std/core/types/maybe :: V -> V)<a>;
pub  fun map[34,9,34,11] : forall<a,b,(e :: E)> (m : (std/core/types/maybe :: V -> V)<a>, f : (a) -> (e :: E) b) -> (e :: E) (std/core/types/maybe :: V -> V)<b>;
// Match a `:maybe` value and either return a default value on `Nothing` or apply a function to the value on `Just`
pub  fun maybe[17,9,17,13] : forall<a,b,(e :: E)> (m : (std/core/types/maybe :: V -> V)<a>, onNothing : b, onJust : (a) -> (e :: E) b) -> (e :: E) b;
// Get the value of the `Just` constructor or raise an exception
pub  fun unjust[29,9,29,14] : forall<a> (m : (std/core/types/maybe :: V -> V)<a>) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(std/core/exn/exn :: (E, V) -> V)>> a;
pub  fun (||)[39,9,39,12] : forall<a> (m1 : (std/core/types/maybe :: V -> V)<a>, m2 : (std/core/types/maybe :: V -> V)<a>) -> (std/core/types/maybe :: V -> V)<a>;
// Equality on `:maybe`
pub  fun (==)[45,9,45,12] : forall<a> (mb1 : (std/core/types/maybe :: V -> V)<a>, mb2 : (std/core/types/maybe :: V -> V)<a>, ?(==) : (a, a) -> std/core/types/bool) -> std/core/types/bool;
// Order on `:maybe` values
pub  fun cmp[56,9,56,11] : forall<a> (mb1 : (std/core/types/maybe :: V -> V)<a>, mb2 : (std/core/types/maybe :: V -> V)<a>, ?cmp : (a, a) -> std/core/types/order) -> std/core/types/order;
// Order two `:maybe` values in ascending order
pub fip fun order2[67,13,67,18] : forall<a> (mb1 : (std/core/types/maybe :: V -> V)<a>, mb2 : (std/core/types/maybe :: V -> V)<a>, ^ ?order2 : (a, a) -> (std/core/types/order2 :: V -> V)<a>) -> (std/core/types/order2 :: V -> V)<(std/core/types/maybe :: V -> V)<a>>;
// monadic lift
 fun @mlift-show@10009[1,0,1,0] : forall<(e :: E)> (@y-x10006 : std/core/types/string) -> (e :: E) std/core/types/string;
// Show a `:maybe` type
pub  fun show[80,9,80,12] : forall<a,(e :: E)> (mb : (std/core/types/maybe :: V -> V)<a>, ?show : (a) -> (e :: E) std/core/types/string) -> (e :: E) std/core/types/string;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
 fun bool // inline size: 1
  = forall<a> fn(mb: (std/core/types/maybe :: V -> V)<a>){
    (match (mb) {
      ((std/core/types/Just((@pat@0: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/True;
      ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@1: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/False;
    });
  };
 fun default // inline size: 1
  = forall<a> fn(m: (std/core/types/maybe :: V -> V)<a>, nothing: a){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> nothing;
      ((@skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat@0: ((std/core/types/maybe :: V -> V)<a>))
         -> x;
    });
  };
 fun map // inline size: 3
  = forall<a,b,(e :: E)> fn<(e :: E)>(m: (std/core/types/maybe :: V -> V)<a>, f: (a) -> (e :: E) b){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/Nothing<b>;
      ((@skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat@0: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/types/Just<b>((f(x)));
    });
  };
 fun maybe // inline size: 2
  = forall<a,b,(e :: E)> fn<(e :: E)>(m: (std/core/types/maybe :: V -> V)<a>, onNothing: b, onJust: (a) -> (e :: E) b){
    (match (m) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> onNothing;
      ((@skip std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat@0: ((std/core/types/maybe :: V -> V)<a>))
         -> onJust(x);
    });
  };
 fun unjust // inline size: 2
  = forall<a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(std/core/exn/exn :: (E, V) -> V)>>>(m: (std/core/types/maybe :: V -> V)<a>){
    (match (m) {
      ((std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> x;
      ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@0: ((std/core/types/maybe :: V -> V)<a>))
         -> std/core/exn/throw<a>("unexpected Nothing in std/core/maybe/unjust", (std/core/types/@None<std/core/exn/exception-info>));
    });
  };
 fun (||) // inline size: 1
  = forall<a> fn(m1: (std/core/types/maybe :: V -> V)<a>, m2: (std/core/types/maybe :: V -> V)<a>){
    (match (m1) {
      ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> m2;
      (@pat@0: ((std/core/types/maybe :: V -> V)<a>))
         -> m1;
    });
  };
 fun (==) // inline size: 4
  = forall<a> fn(mb1: (std/core/types/maybe :: V -> V)<a>, mb2: (std/core/types/maybe :: V -> V)<a>, @implicit/(==): (a, a) -> std/core/types/bool){
    (match (mb1) {
      ((std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> (match (mb2) {
          ((std/core/types/Just((y: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat@0: ((std/core/types/maybe :: V -> V)<a>))
             -> @implicit/(==)(x, y);
          ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@1: ((std/core/types/maybe :: V -> V)<a>))
             -> std/core/types/False;
        });
      ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@2: ((std/core/types/maybe :: V -> V)<a>))
         -> (match (mb2) {
          ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@3: ((std/core/types/maybe :: V -> V)<a>))
             -> std/core/types/True;
          (@pat@4: ((std/core/types/maybe :: V -> V)<a>))
             -> std/core/types/False;
        });
    });
  };
 fun cmp // inline size: 4
  = forall<a> fn(mb1: (std/core/types/maybe :: V -> V)<a>, mb2: (std/core/types/maybe :: V -> V)<a>, @implicit/cmp: (a, a) -> std/core/types/order){
    (match (mb1) {
      ((std/core/types/Just((x: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat: ((std/core/types/maybe :: V -> V)<a>))
         -> (match (mb2) {
          ((std/core/types/Just((y: a) : a) : (std/core/types/maybe :: V -> V)<a> ) as @pat@0: ((std/core/types/maybe :: V -> V)<a>))
             -> @implicit/cmp(x, y);
          ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@1: ((std/core/types/maybe :: V -> V)<a>))
             -> std/core/types/Gt;
        });
      ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@2: ((std/core/types/maybe :: V -> V)<a>))
         -> (match (mb2) {
          ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<a> ) as @pat@3: ((std/core/types/maybe :: V -> V)<a>))
             -> std/core/types/Eq;
          (@pat@4: ((std/core/types/maybe :: V -> V)<a>))
             -> std/core/types/Lt;
        });
    });
  };