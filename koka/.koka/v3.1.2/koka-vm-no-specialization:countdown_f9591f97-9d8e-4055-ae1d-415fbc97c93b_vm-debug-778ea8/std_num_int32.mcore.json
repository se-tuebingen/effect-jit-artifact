{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/num/int32"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "std/num/int32/(^)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "(#1 ^ #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int32, y: int32){\n  std/num/int32/xor(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/(^)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/(^)"]}, {"name": {"op": "Var","id": "std/num/int32/cmp","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int32, y: int32){\n  match ((std/num/int32/(<)(x, y))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Lt;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/(>)(x, y))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Gt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Eq;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/cmp"]}, {"name": {"op": "Var","id": "std/num/int32/imul","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/num/int32/@extern-imul","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, j: int32){\n  std/num/int32/@extern-imul(i, j);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/imul\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/imul"]}, {"name": {"op": "Var","id": "std/num/int32/max","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, j: int32){\n  match ((std/num/int32/(>=)(i, j))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> i;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> j;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/max\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/max"]}, {"name": {"op": "Var","id": "std/num/int32/min","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, j: int32){\n  match ((std/num/int32/(<=)(i, j))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> i;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> j;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/min\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/min"]}, {"name": {"op": "Var","id": "std/num/int32/sign","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 < #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 < #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/is-neg(i))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  match ((std/num/int32/is-pos(i))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Gt;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/is-neg(i))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Lt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Eq;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/sign\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/sign"]}, {"name": {"op": "Var","id": "std/num/int32/umul","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/num/int32/@extern-umul","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, j: int32){\n  std/num/int32/@extern-umul(i, j);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/umul\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/umul"]}, {"name": {"op": "Var","id": "std/num/int32/one","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/one\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["std/num/int32/one"]}, {"name": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["std/num/int32/zero"]}, {"name": {"op": "Var","id": "std/num/int32/bool/int32","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "b","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/one","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/one"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/zero"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(b: bool){\n  match (b) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/num/int32/one;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/num/int32/zero;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/bool/int32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/bool/int32"]}, {"name": {"op": "Var","id": "std/num/int32/hilo/int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hi@0","type": {"op": "Int"}}, {"op": "Var","id": "lo@0","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 | #2)","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/shl32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "hi@0","type": {"op": "Int"}},"annotation": "genExpr: hi@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 16},"annotation": "genExpr: std/num/int32/int32(16)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 & #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo@0","type": {"op": "Int"}},"annotation": "genExpr: lo@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 65535},"annotation": "genExpr: std/num/int32/int32(65535)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/and(lo@0, (std/num/int32/int32(65535)))"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/or((std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))), (std/num/int32/and(lo@0, (std/num/int32/int32(65535)))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(hi@0: int32, lo@0: int32){\n  std/num/int32/or((std/num/int32/shl32(hi@0, (std/num/int32/int32(16)))), (std/num/int32/and(lo@0, (std/num/int32/int32(65535)))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/hilo/int32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/hilo/int32"]}, {"name": {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -2147483648},"annotation": "genExpr: std/num/int32/int32(-2147483648)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["std/num/int32/min-int32"]}, {"name": {"op": "Var","id": "std/num/int32/(%)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(y, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: std/num/int32/int32(-1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "r","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x2","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Int"}},"annotation": "genExpr: r"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>=)(r, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x2","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Int"}},"annotation": "genExpr: r"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x2","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "r","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(r, y)"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "r","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(r, y)"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/num/int32/(+)(r, y);\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/num/int32/(-)(r, y);\n}"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> r;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(+)(r, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(-)(r, y);\n    });\n}"}},"annotation": "genExpr: val r : int32\n      = std/num/int32/unsafe-cmod(x, y);\nmatch ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> r;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(+)(r, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(-)(r, y);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/num/int32/int32(0);\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val r : int32\n              = std/num/int32/unsafe-cmod(x, y);\n    (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> r;\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/num/int32/(+)(r, y);\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/num/int32/(-)(r, y);\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "r@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r@0"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x4","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r@0","type": {"op": "Int"}},"annotation": "genExpr: r@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>=)(r@0, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x4","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "r@0","type": {"op": "Int"}},"annotation": "genExpr: r@0"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x4","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x5","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "r@0","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(r@0, y)"}}]},"annotation": "genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "r@0","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(r@0, y)"}}]},"annotation": "genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/num/int32/(+)(r@0, y);\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/num/int32/(-)(r@0, y);\n}"}}]},"annotation": "genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> r@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(+)(r@0, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(-)(r@0, y);\n    });\n}"}},"annotation": "genExpr: val r@0 : int32\n      = std/num/int32/unsafe-cmod(x, y);\nmatch ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> r@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(+)(r@0, y);\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(-)(r@0, y);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/num/int32/int32(0);\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val r : int32\n                  = std/num/int32/unsafe-cmod(x, y);\n        (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> r;\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/num/int32/(+)(r, y);\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/num/int32/(-)(r, y);\n            });\n        });\n    });\n  (@pat@2: bool)\n     -> val r@0 : int32\n              = std/num/int32/unsafe-cmod(x, y);\n    (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> r@0;\n      ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/num/int32/(+)(r@0, y);\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/num/int32/(-)(r@0, y);\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int32, y: int32){\n  match ((std/num/int32/(==)(y, (std/num/int32/int32(0))))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> x;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/num/int32/int32(0);\n            ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n               -> val r : int32\n                        = std/num/int32/unsafe-cmod(x, y);\n              (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n                ((std/core/types/True() : bool ) as @pat@5: bool)\n                   -> r;\n                ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n                   -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n                    ((std/core/types/True() : bool ) as @pat@7: bool)\n                       -> std/num/int32/(+)(r, y);\n                    ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                       -> std/num/int32/(-)(r, y);\n                  });\n              });\n          });\n        (@pat@2: bool)\n           -> val r@0 : int32\n                    = std/num/int32/unsafe-cmod(x, y);\n          (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n            ((std/core/types/True() : bool ) as @pat@5@0: bool)\n               -> r@0;\n            ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n               -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n                ((std/core/types/True() : bool ) as @pat@7@0: bool)\n                   -> std/num/int32/(+)(r@0, y);\n                ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n                   -> std/num/int32/(-)(r@0, y);\n              });\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/(%)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/(%)"]}, {"name": {"op": "Var","id": "std/num/int32/(/)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x6","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(y, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x6","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x6","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x7","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: std/num/int32/int32(-1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x7","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "q","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 / #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cdiv(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["q"]}, {"name": {"op": "Var","id": "r","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x8","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Int"}},"annotation": "genExpr: r"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>=)(r, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x8","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "q","type": {"op": "Int"}},"annotation": "genExpr: q"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x8\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x8","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x9","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x9","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q","type": {"op": "Int"}},"annotation": "genExpr: q"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(q, (std/num/int32/int32(1)))"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x9\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x9","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q","type": {"op": "Int"}},"annotation": "genExpr: q"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(q, (std/num/int32/int32(1)))"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x9\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n}"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x8\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> q;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n    });\n}"}},"annotation": "genExpr: val q : int32;\nval r : int32;\nmatch ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> q;\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n    });\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> x;\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val q : int32;\n        val r : int32;\n    (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> q;\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "q@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 / #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cdiv(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"q@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["q@0"]}, {"name": {"op": "Var","id": "r@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r@0"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x10","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r@0","type": {"op": "Int"}},"annotation": "genExpr: r@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>=)(r@0, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x10","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "q@0","type": {"op": "Int"}},"annotation": "genExpr: q@0"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x10","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x11","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(>)(y, (std/num/int32/int32(0)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x11","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q@0","type": {"op": "Int"}},"annotation": "genExpr: q@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(q@0, (std/num/int32/int32(1)))"}}]},"annotation": "genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x11","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q@0","type": {"op": "Int"}},"annotation": "genExpr: q@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(q@0, (std/num/int32/int32(1)))"}}]},"annotation": "genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n}"}}]},"annotation": "genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> q@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n    });\n}"}},"annotation": "genExpr: val q@0 : int32;\nval r@0 : int32;\nmatch ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> q@0;\n  ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n     -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> x;\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val q : int32;\n            val r : int32;\n        (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> q;\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n            });\n        });\n    });\n  (@pat@2: bool)\n     -> val q@0 : int32;\n        val r@0 : int32;\n    (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> q@0;\n      ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n         -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int32, y: int32){\n  match ((std/num/int32/(==)(y, (std/num/int32/int32(0))))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/num/int32/int32(0);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> x;\n            ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n               -> val q : int32;\n                  val r : int32;\n              (match ((std/num/int32/(>=)(r, (std/num/int32/int32(0))))) {\n                ((std/core/types/True() : bool ) as @pat@5: bool)\n                   -> q;\n                ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n                   -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n                    ((std/core/types/True() : bool ) as @pat@7: bool)\n                       -> std/num/int32/(-)(q, (std/num/int32/int32(1)));\n                    ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                       -> std/num/int32/(+)(q, (std/num/int32/int32(1)));\n                  });\n              });\n          });\n        (@pat@2: bool)\n           -> val q@0 : int32;\n              val r@0 : int32;\n          (match ((std/num/int32/(>=)(r@0, (std/num/int32/int32(0))))) {\n            ((std/core/types/True() : bool ) as @pat@5@0: bool)\n               -> q@0;\n            ((@skip std/core/types/False() : bool ) as @pat@6@0: bool)\n               -> (match ((std/num/int32/(>)(y, (std/num/int32/int32(0))))) {\n                ((std/core/types/True() : bool ) as @pat@7@0: bool)\n                   -> std/num/int32/(-)(q@0, (std/num/int32/int32(1)));\n                ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n                   -> std/num/int32/(+)(q@0, (std/num/int32/int32(1)));\n              });\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/(/)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/(/)"]}, {"name": {"op": "Var","id": "std/num/int32/negate","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(-)((std/num/int32/int32(0)), i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/negate\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/negate"]}, {"name": {"op": "Var","id": "std/num/int32/abs","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10035","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/is-neg(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10035\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["@x-x1@10035"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x12","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<bool,bool,(total :: E),(exn :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "b","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(b: bool){\n  match (b) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10035","type": {"op": "Bool"}},"annotation": "genExpr: @x-x1@10035"}]},"annotation": "genExpr: std/core/hnd/@open-none1<bool,bool,(total :: E),(exn :: (E, V) -> V)>((fn(b: bool){\n    (match (b) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/True;\n    });\n  }), @x-x1@10035)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x12","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x12\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x12","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow"},"annotation": "genExpr: \"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>));\n}"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x12\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(exn :: (E, V) -> V)>(i: int32){\n  val @x-x1@10035 : bool\n        = std/num/int32/is-neg(i);\n  match ((std/core/hnd/@open-none1<bool,bool,(total :: E),(exn :: (E, V) -> V)>((fn(b: bool){\n      (match (b) {\n        ((std/core/types/True() : bool ) as @pat: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n           -> std/core/types/True;\n      });\n    }), @x-x1@10035))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> i;\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> (match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n           -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/exn/throw<int32>(\"std/num/int32/abs: cannot make min-int32 into a positive int32 without overflow\", (std/core/types/@None<exception-info>));\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/abs\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/abs"]}, {"name": {"op": "Var","id": "std/num/int32/abs0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10000","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/is-neg(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10000"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10000","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/num/int32/int32(0);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10000","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  val b@10000 : bool\n        = std/num/int32/is-neg(i);\n  match (b@10000) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((std/num/int32/(>)(i, std/num/int32/min-int32))) {\n        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n           -> std/num/int32/(-)((std/num/int32/int32(0)), i);\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/num/int32/int32(0);\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> i;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/abs0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/abs0"]}, {"name": {"op": "Var","id": "std/num/int32/bits-int32","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 32},"annotation": "genExpr: std/num/int32/int32(32)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/bits-int32\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["std/num/int32/bits-int32"]}, {"name": {"op": "Var","id": "std/num/int32/bool","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixNeq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(!=)(i, std/num/int32/zero);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/bool\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/bool"]}, {"name": {"op": "Var","id": "std/num/int32/cdiv","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 == #1","args": [{"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/num/int32/cdiv: modulus by zero"},"annotation": "genExpr: \"std/num/int32/cdiv: modulus by zero\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus by zero\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 == #1","args": [{"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x13","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: std/num/int32/int32(-1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(j, (std/num/int32/int32(-1)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x13","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)"},"annotation": "genExpr: \"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 / #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cdiv(i, j)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/num/int32/unsafe-cdiv(i, j);\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 / #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cdiv(i, j)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/num/int32/unsafe-cdiv(i, j);\n    });\n  (@pat@2: bool)\n     -> std/num/int32/unsafe-cdiv(i, j);\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(exn :: (E, V) -> V)>(i: int32, j: int32){\n  match ((std/num/int32/is-zero(j))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus by zero\", (std/core/types/@None<exception-info>));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/core/exn/throw<int32>(\"std/num/int32/cdiv: modulus overflow in cdiv(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n            ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n               -> std/num/int32/unsafe-cdiv(i, j);\n          });\n        (@pat@2: bool)\n           -> std/num/int32/unsafe-cdiv(i, j);\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/cdiv\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/cdiv"]}, {"name": {"op": "Var","id": "std/num/int32/cmod","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 == #1","args": [{"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/num/int32/cmod: modulus by zero"},"annotation": "genExpr: \"std/num/int32/cmod: modulus by zero\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus by zero\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 == #1","args": [{"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x14","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: std/num/int32/int32(-1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(j, (std/num/int32/int32(-1)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x14","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)"},"annotation": "genExpr: \"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(i, j)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/num/int32/unsafe-cmod(i, j);\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(i, j)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/num/int32/unsafe-cmod(i, j);\n    });\n  (@pat@2: bool)\n     -> std/num/int32/unsafe-cmod(i, j);\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(exn :: (E, V) -> V)>(i: int32, j: int32){\n  match ((std/num/int32/is-zero(j))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus by zero\", (std/core/types/@None<exception-info>));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/(==)(j, (std/num/int32/int32(-1))))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/num/int32/(==)(i, std/num/int32/min-int32))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/core/exn/throw<int32>(\"std/num/int32/cmod: modulus overflow in cmod(min-int32, -1.int32)\", (std/core/types/@None<exception-info>));\n            ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n               -> std/num/int32/unsafe-cmod(i, j);\n          });\n        (@pat@2: bool)\n           -> std/num/int32/unsafe-cmod(i, j);\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/cmod\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/cmod"]}, {"name": {"op": "Var","id": "std/num/int32/dec","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(i, (std/num/int32/int32(1)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(-)(i, (std/num/int32/int32(1)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/dec\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/dec"]}, {"name": {"op": "Var","id": "std/num/int32/inc","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(+)(i, (std/num/int32/int32(1)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/inc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/inc"]}, {"name": {"op": "Var","id": "std/num/int32/divmod","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 == #1","args": [{"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/zero"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>(std/num/int32/zero, x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 == #1","args": [{"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x15","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: std/num/int32/int32(-1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)(y, (std/num/int32/int32(-1)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x15","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "std/num/int32/min-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "q","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 / #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cdiv(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["q"]}, {"name": {"op": "Var","id": "r","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r"]}, {"name": {"op": "Var","id": "b@10002","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "r","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/is-neg(r)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10002"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10002","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 < #1","args": [{"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q","type": {"op": "Int"}},"annotation": "genExpr: q"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(q, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "r","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(r, y)"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)))"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 < #1","args": [{"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q","type": {"op": "Int"}},"annotation": "genExpr: q"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(q, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "r","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(r, y)"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)))"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/is-pos(y))) {\n  ((std/core/types/True() : bool ) as @pat@7: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10002","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q","type": {"op": "Int"}},"annotation": "genExpr: q"}, {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Int"}},"annotation": "genExpr: r"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>(q, r)"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10002\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@10002) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int32,int32>(q, r);\n}"}},"annotation": "genExpr: val q : int32;\nval r : int32;\nval b@10002 : bool;\nmatch (b@10002) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int32,int32>(q, r);\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"std/num/int32/min-int32\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> val q : int32;\n        val r : int32;\n        val b@10002 : bool;\n    (match (b@10002) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> (match ((std/num/int32/is-pos(y))) {\n          ((std/core/types/True() : bool ) as @pat@7: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n          ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n        });\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> std/core/types/Tuple2<int32,int32>(q, r);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "q@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 / #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cdiv(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"q@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["q@0"]}, {"name": {"op": "Var","id": "r@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 % #2)","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/unsafe-cmod(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r@0"]}, {"name": {"op": "Var","id": "b@0@10005","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "r@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/is-neg(r@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@0@10005"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@0@10005","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 < #1","args": [{"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q@0","type": {"op": "Int"}},"annotation": "genExpr: q@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(q@0, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "r@0","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(r@0, y)"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)))"}}]},"annotation": "genBranch: [(@pat@7@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 < #1","args": [{"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q@0","type": {"op": "Int"}},"annotation": "genExpr: q@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(q@0, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "r@0","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(r@0, y)"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)))"}}]},"annotation": "genBranch: [(@pat@8@0,{\"op\": \"Primitive\",\"name\": \"0 < #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/is-pos(y))) {\n  ((std/core/types/True() : bool ) as @pat@7@0: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n  ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n     -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n}"}}]},"annotation": "genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@0@10005","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "q@0","type": {"op": "Int"}},"annotation": "genExpr: q@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "r@0","type": {"op": "Int"}},"annotation": "genExpr: r@0"}]},"annotation": "genExpr: std/core/types/Tuple2<int32,int32>(q@0, r@0)"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@0@10005\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@0@10005) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n}"}},"annotation": "genExpr: val q@0 : int32;\nval r@0 : int32;\nval b@0@10005 : bool;\nmatch (b@0@10005) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> (match ((std/num/int32/is-pos(y))) {\n      ((std/core/types/True() : bool ) as @pat@7@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n      ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n         -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> val q : int32;\n            val r : int32;\n            val b@10002 : bool;\n        (match (b@10002) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> (match ((std/num/int32/is-pos(y))) {\n              ((std/core/types/True() : bool ) as @pat@7: bool)\n                 -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n              ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                 -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n            });\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/Tuple2<int32,int32>(q, r);\n        });\n    });\n  (@pat@2@0: bool)\n     -> val q@0 : int32;\n        val r@0 : int32;\n        val b@0@10005 : bool;\n    (match (b@0@10005) {\n      ((std/core/types/True() : bool ) as @pat@9: bool)\n         -> (match ((std/num/int32/is-pos(y))) {\n          ((std/core/types/True() : bool ) as @pat@7@0: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n          ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n             -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n        });\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 == #1\",\"args\": [{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int32, y: int32){\n  match ((std/num/int32/is-zero(y))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Tuple2<int32,int32>(std/num/int32/zero, x);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/num/int32/(==)(y, (std/num/int32/int32(-1))))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/num/int32/(==)(x, std/num/int32/min-int32))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/core/types/Tuple2<int32,int32>(x, (std/num/int32/int32(0)));\n            ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n               -> val q : int32;\n                  val r : int32;\n                  val b@10002 : bool;\n              (match (b@10002) {\n                ((std/core/types/True() : bool ) as @pat@2: bool)\n                   -> (match ((std/num/int32/is-pos(y))) {\n                    ((std/core/types/True() : bool ) as @pat@7: bool)\n                       -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q, (std/num/int32/int32(1)))), (std/num/int32/(+)(r, y)));\n                    ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n                       -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q, (std/num/int32/int32(1)))), (std/num/int32/(-)(r, y)));\n                  });\n                ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n                   -> std/core/types/Tuple2<int32,int32>(q, r);\n              });\n          });\n        (@pat@2@0: bool)\n           -> val q@0 : int32;\n              val r@0 : int32;\n              val b@0@10005 : bool;\n          (match (b@0@10005) {\n            ((std/core/types/True() : bool ) as @pat@9: bool)\n               -> (match ((std/num/int32/is-pos(y))) {\n                ((std/core/types/True() : bool ) as @pat@7@0: bool)\n                   -> std/core/types/Tuple2<int32,int32>((std/num/int32/(-)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(+)(r@0, y)));\n                ((@skip std/core/types/False() : bool ) as @pat@8@0: bool)\n                   -> std/core/types/Tuple2<int32,int32>((std/num/int32/(+)(q@0, (std/num/int32/int32(1)))), (std/num/int32/(-)(r@0, y)));\n              });\n            ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n               -> std/core/types/Tuple2<int32,int32>(q@0, r@0);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/divmod\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/divmod"]}, {"name": {"op": "Var","id": "std/num/int32/range/fold-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}]},"annotation": "genExpr: f(start, init)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/fold-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/fold-int32<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(start, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)"}},"annotation": "genExpr: val x : a\n      = f(start, init);\nstd/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(start: int32, end: int32, init: a, f: (int32, a) -> (e :: E) a){\n  (match ((std/num/int32/(>)(start, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> init;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val x : a\n                = f(start, init);\n      std/num/int32/range/fold-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/range/fold-int32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/range/fold-int32"]}, {"name": {"op": "Var","id": "std/num/int32/fold-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/fold-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/fold-int32<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/zero"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/num/int32/range/fold-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int32, init: a, f: (int32, a) -> (e :: E) a){\n  std/num/int32/range/fold-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/fold-int32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/fold-int32"]}, {"name": {"op": "Var","id": "std/num/int32/range/fold-while-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x16","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}]},"annotation": "genExpr: f(start, init)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x16","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"17","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/fold-while-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(start, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"17","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1519) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1519) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x16","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((f(start, init))) {\n  ((std/core/types/Just((x: 1519) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1519>))\n     -> std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<1519>))\n     -> init;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(start: int32, end: int32, init: a, f: (int32, a) -> (e :: E) (maybe :: V -> V)<a>){\n  (match ((std/num/int32/(>)(start, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> init;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((f(start, init))) {\n        ((std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n           -> std/num/int32/range/fold-while-int32<a,(e :: E)>((std/num/int32/(+)(start, (std/num/int32/int32(1)))), end, x, f);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<a>))\n           -> init;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/range/fold-while-int32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/range/fold-while-int32"]}, {"name": {"op": "Var","id": "std/num/int32/fold-while-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/fold-while-int32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/zero"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/num/int32/range/fold-while-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int32, init: a, f: (int32, a) -> (e :: E) (maybe :: V -> V)<a>){\n  std/num/int32/range/fold-while-int32<a,(e :: E)>(std/num/int32/zero, (std/num/int32/(-)(n, (std/num/int32/int32(1)))), init, f);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/fold-while-int32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/fold-while-int32"]}, {"name": {"op": "Var","id": "std/num/int32/range/@lift-for-while32@2275","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x18","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: action(i)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x18","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10008","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10008\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10008"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/@lift-for-while32@2275","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10008","type": {"op": "Int"}},"annotation": "genExpr: i@0@10008"}]},"annotation": "genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008)"}},"annotation": "genExpr: val i@0@10008 : int32\n      = std/num/int32/(+)(i, (std/num/int32/int32(1)));\nstd/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x18","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"19","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"19","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1594) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1594) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1594>))\n     -> val i@0@10008 : int32\n              = std/num/int32/(+)(i, (std/num/int32/int32(1)));\n    std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008);\n  ((@skip std/core/types/Just((x: 1594) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1594>))\n     -> std/core/types/Just<a>(x);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: (int32) -> (e :: E) (maybe :: V -> V)<a>, end: int32, i: int32){\n  (match ((std/num/int32/(<=)(i, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((action(i))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<a>))\n           -> val i@0@10008 : int32\n                    = std/num/int32/(+)(i, (std/num/int32/int32(1)));\n          std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, i@0@10008);\n        ((@skip std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n           -> std/core/types/Just<a>(x);\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/range/@lift-for-while32@2275\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/range/@lift-for-while32@2275"]}, {"name": {"op": "Var","id": "std/num/int32/range/for-while32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/@lift-for-while32@2275","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, start)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(start: int32, end: int32, action: (int32) -> (e :: E) (maybe :: V -> V)<a>){\n  std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end, start);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/range/for-while32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/range/for-while32"]}, {"name": {"op": "Var","id": "std/num/int32/for-while32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "end@10010","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"end@10010\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["end@10010"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/@lift-for-while32@2275","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end@10010","type": {"op": "Int"}},"annotation": "genExpr: end@10010"}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/zero"}]},"annotation": "genExpr: std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end@10010, std/num/int32/zero)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int32, action: (int32) -> (e :: E) (maybe :: V -> V)<a>){\n  val end@10010 : int32\n        = std/num/int32/(-)(n, (std/num/int32/int32(1)));\n  std/num/int32/range/@lift-for-while32@2275<a,(e :: E)>(action, end@10010, std/num/int32/zero);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/for-while32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/for-while32"]}, {"name": {"op": "Var","id": "std/num/int32/range/@lift-for32@2276","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: action(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "i@0@10012","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(i, (std/num/int32/int32(1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10012\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10012"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/@lift-for32@2276","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10012","type": {"op": "Int"}},"annotation": "genExpr: i@0@10012"}]},"annotation": "genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012)"}},"annotation": "genExpr: val _ : ();\nval i@0@10012 : int32;\nstd/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(action: (int32) -> (e :: E) (), end: int32, i: int32){\n  (match ((std/num/int32/(<=)(i, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val _ : ();\n          val i@0@10012 : int32;\n      std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, i@0@10012);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/range/@lift-for32@2276\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/range/@lift-for32@2276"]}, {"name": {"op": "Var","id": "std/num/int32/range/for32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/@lift-for32@2276","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, start)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(start: int32, end: int32, action: (int32) -> (e :: E) ()){\n  std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end, start);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/range/for32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/range/for32"]}, {"name": {"op": "Var","id": "std/num/int32/for32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "end@10014","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)(n, (std/num/int32/int32(1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"end@10014\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["end@10014"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/range/@lift-for32@2276","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end@10014","type": {"op": "Int"}},"annotation": "genExpr: end@10014"}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/zero","type": {"op": "Int"}},"annotation": "genExpr: std/num/int32/zero"}]},"annotation": "genExpr: std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end@10014, std/num/int32/zero)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(n: int32, action: (int32) -> (e :: E) ()){\n  val end@10014 : int32\n        = std/num/int32/(-)(n, (std/num/int32/int32(1)));\n  std/num/int32/range/@lift-for32@2276<(e :: E)>(action, end@10014, std/num/int32/zero);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/for32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/for32"]}, {"name": {"op": "Var","id": "std/num/int32/hi","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/sar32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 16},"annotation": "genExpr: std/num/int32/int32(16)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/sar32(i, (std/num/int32/int32(16)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/sar32(i, (std/num/int32/int32(16)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/hi\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/hi"]}, {"name": {"op": "Var","id": "std/num/int32/i32","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/num/int32/int32(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/i32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/i32"]}, {"name": {"op": "Var","id": "std/num/int32/is-even","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 & #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/and(i, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(0)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(0)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/is-even\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/is-even"]}, {"name": {"op": "Var","id": "std/num/int32/is-odd","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 & #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/and(i, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(1)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(==)((std/num/int32/and(i, (std/num/int32/int32(1)))), (std/num/int32/int32(1)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/is-odd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/is-odd"]}, {"name": {"op": "Var","id": "std/num/int32/list32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lo@0","type": {"op": "Int"}}, {"op": "Var","id": "hi@0","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo@0","type": {"op": "Int"}}, {"op": "Var","id": "hi@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<int32>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo@0","type": {"op": "Int"}},"annotation": "genExpr: lo@0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/list32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/list32"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo@0","type": {"op": "Int"}},"annotation": "genExpr: lo@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/num/int32/int32(1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hi@0","type": {"op": "Int"}},"annotation": "genExpr: hi@0"}]},"annotation": "genExpr: std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)"}]},"annotation": "genExpr: std/core/types/Cons<int32>(lo@0, (std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo@0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi@0\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo@0","type": {"op": "Int"}}, {"op": "Var","id": "hi@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<int32>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo@0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi@0\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(lo@0: int32, hi@0: int32){\n  match ((std/num/int32/(<=)(lo@0, hi@0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Cons<int32>(lo@0, (std/num/int32/list32((std/num/int32/(+)(lo@0, (std/num/int32/int32(1)))), hi@0)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nil<int32>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/list32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/list32"]}, {"name": {"op": "Var","id": "std/num/int32/lo","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 & #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 65535},"annotation": "genExpr: std/num/int32/int32(65535)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/and(i, (std/num/int32/int32(65535)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/and(i, (std/num/int32/int32(65535)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/lo\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/lo"]}, {"name": {"op": "Var","id": "std/num/int32/max-int32","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 2147483647},"annotation": "genExpr: std/num/int32/int32(2147483647)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/max-int32\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["std/num/int32/max-int32"]}, {"name": {"op": "Var","id": "std/num/int32/rotl","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "shift","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/rotl32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "shift","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int32(shift)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/rotl32(i, (std/num/int32/int32(shift)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, shift: int){\n  std/num/int32/rotl32(i, (std/num/int32/int32(shift)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/rotl\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/rotl"]}, {"name": {"op": "Var","id": "std/num/int32/rotr","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "shift","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/rotr32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "shift","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int32(shift)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/rotr32(i, (std/num/int32/int32(shift)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, shift: int){\n  std/num/int32/rotr32(i, (std/num/int32/int32(shift)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/rotr\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/rotr"]}, {"name": {"op": "Var","id": "std/num/int32/sar","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "shift","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/sar32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "shift","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int32(shift)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/sar32(i, (std/num/int32/int32(shift)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, shift: int){\n  std/num/int32/sar32(i, (std/num/int32/int32(shift)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/sar\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/sar"]}, {"name": {"op": "Var","id": "std/num/int32/shl","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "shift","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/shl32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "shift","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int32(shift)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/shl32(i, (std/num/int32/int32(shift)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, shift: int){\n  std/num/int32/shl32(i, (std/num/int32/int32(shift)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/shl\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/shl"]}, {"name": {"op": "Var","id": "std/num/int32/uint","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "y@10018","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10018\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10018"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 4294967296}, {"op": "Var","id": "y@10018","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(4294967296, y@10018)"}},"annotation": "genExpr: val y@10018 : int\n      = std/num/int32/int(i);\nstd/core/int/int-add(4294967296, y@10018)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "0 > #1","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int(i)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"0 > #1\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  match ((std/num/int32/is-neg(i))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val y@10018 : int\n                = std/num/int32/int(i);\n      std/core/int/int-add(4294967296, y@10018);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/num/int32/int(i);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/uint\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/uint"]}, {"name": {"op": "Var","id": "std/num/int32/hilo/int","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x405_19","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x405_19","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"20","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"21","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10019","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"20","type": {"op": "Top"}},"annotation": "genTest: normal: (hi@0: int32) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int(hi@0)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 4294967296},"annotation": "genExpr: 4294967296"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)((std/num/int32/int(hi@0)), 4294967296)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10019"]}, {"name": {"op": "Var","id": "y@10020","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/uint","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/uint"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"21","type": {"op": "Top"}},"annotation": "genTest: normal: (lo@0: int32) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: lo@0"}]},"annotation": "genExpr: std/num/int32/uint(lo@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10020\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10020"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10019","type": {"op": "Int"}}, {"op": "Var","id": "y@10020","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10019, y@10020)"}},"annotation": "genExpr: val x@10019 : int;\nval y@10020 : int;\nstd/core/int/int-add(x@10019, y@10020)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x405_19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(hi@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (hi@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(lo@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (lo@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x405_19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"20\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"21\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@pat-x405_19: (int32, int32)){\n  match (@pat-x405_19) {\n    ((@skip std/core/types/Tuple2((hi@0: int32) : int32, (lo@0: int32) : int32) : (int32, int32) ) as @pat: (int32, int32))\n       -> val x@10019 : int;\n          val y@10020 : int;\n      std/core/int/int-add(x@10019, y@10020);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/hilo/int\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/hilo/int"]}, {"name": {"op": "Var","id": "std/num/int32/hilo/uint","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x410_20","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x410_20","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"22","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"23","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10021","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/uint","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/uint"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"22","type": {"op": "Top"}},"annotation": "genTest: normal: (hi@0: int32) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: hi@0"}]},"annotation": "genExpr: std/num/int32/uint(hi@0)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 4294967296},"annotation": "genExpr: 4294967296"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)((std/num/int32/uint(hi@0)), 4294967296)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10021\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10021"]}, {"name": {"op": "Var","id": "y@10022","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/uint","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/uint"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"23","type": {"op": "Top"}},"annotation": "genTest: normal: (lo@0: int32) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: lo@0"}]},"annotation": "genExpr: std/num/int32/uint(lo@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10022\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10022"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10021","type": {"op": "Int"}}, {"op": "Var","id": "y@10022","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10021, y@10022)"}},"annotation": "genExpr: val x@10021 : int;\nval y@10022 : int;\nstd/core/int/int-add(x@10021, y@10022)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x410_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(hi@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (hi@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(lo@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (lo@0: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x410_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@pat-x410_20: (int32, int32)){\n  match (@pat-x410_20) {\n    ((@skip std/core/types/Tuple2((hi@0: int32) : int32, (lo@0: int32) : int32) : (int32, int32) ) as @pat: (int32, int32))\n       -> val x@10021 : int;\n          val y@10022 : int;\n      std/core/int/int-add(x@10021, y@10022);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/hilo/uint\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/hilo/uint"]}, {"name": {"op": "Var","id": "std/num/int32/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/show"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int(i)"}]},"annotation": "genExpr: std/core/int/show((std/num/int32/int(i)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/core/int/show((std/num/int32/int(i)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/show"]}, {"name": {"op": "Var","id": "std/num/int32/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"name": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int(i)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"24","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"24","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-width@2084: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-width@2084"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@2084,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@2084: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2084;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}]},"annotation": "genExpr: std/core/types/@Optional<int>((match (width) {\n  ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2084;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"25","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"25","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-use-capitals@2088: bool) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-use-capitals@2088"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@2088,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@2088: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2088;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}"}]},"annotation": "genExpr: std/core/types/@Optional<bool>((match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2088;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"26","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"26","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-pre@2092: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-pre@2092"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@2092,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@2092: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"26\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "0x"},"annotation": "genExpr: \"0x\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2092;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}"}]},"annotation": "genExpr: std/core/types/@Optional<string>((match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2092;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}))"}]},"annotation": "genExpr: std/core/show/show-hex((std/num/int32/int(i)), (std/core/types/@Optional<int>((match (width) {\n    ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@2084;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@2088;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))), (std/core/types/@Optional<string>((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@2092;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, width: ? int, use-capitals: ? bool, pre: ? string){\n  std/core/show/show-hex((std/num/int32/int(i)), (std/core/types/@Optional<int>((match (width) {\n      ((std/core/types/@Optional((@uniq-width@2084: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-width@2084;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n      ((std/core/types/@Optional((@uniq-use-capitals@2088: bool) : bool) : ? bool ) as @pat@1: ? bool)\n         -> @uniq-use-capitals@2088;\n      ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n         -> std/core/types/True;\n    }))), (std/core/types/@Optional<string>((match (pre) {\n      ((std/core/types/@Optional((@uniq-pre@2092: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-pre@2092;\n      ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n         -> \"0x\";\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/show-hex\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/show-hex"]}, {"name": {"op": "Var","id": "std/num/int32/show-hex32","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"name": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/uint","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/uint"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/num/int32/uint(i)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"27","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"27","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-width@2131: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-width@2131"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@2131,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@2131: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 8},"annotation": "genExpr: 8"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2131;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 8;\n}"}]},"annotation": "genExpr: std/core/types/@Optional<int>((match (width) {\n  ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@2131;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 8;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"28","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"28","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-use-capitals@2135: bool) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-use-capitals@2135"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@2135,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@2135: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"28\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2135;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}"}]},"annotation": "genExpr: std/core/types/@Optional<bool>((match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@2135;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"29","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"29","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-pre@2139: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-pre@2139"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@2139,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@2139: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"29\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "0x"},"annotation": "genExpr: \"0x\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2139;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}"}]},"annotation": "genExpr: std/core/types/@Optional<string>((match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@2139;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}))"}]},"annotation": "genExpr: std/core/show/show-hex((std/num/int32/uint(i)), (std/core/types/@Optional<int>((match (width) {\n    ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@2131;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 8;\n  }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@2135;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))), (std/core/types/@Optional<string>((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@2139;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, width: ? int, use-capitals: ? bool, pre: ? string){\n  std/core/show/show-hex((std/num/int32/uint(i)), (std/core/types/@Optional<int>((match (width) {\n      ((std/core/types/@Optional((@uniq-width@2131: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-width@2131;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 8;\n    }))), (std/core/types/@Optional<bool>((match (use-capitals) {\n      ((std/core/types/@Optional((@uniq-use-capitals@2135: bool) : bool) : ? bool ) as @pat@1: ? bool)\n         -> @uniq-use-capitals@2135;\n      ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n         -> std/core/types/True;\n    }))), (std/core/types/@Optional<string>((match (pre) {\n      ((std/core/types/@Optional((@uniq-pre@2139: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-pre@2139;\n      ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n         -> \"0x\";\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/show-hex32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/show-hex32"]}, {"name": {"op": "Var","id": "std/num/int32/shr","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "shift","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/num/int32/shr32","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "shift","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int32(shift)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/shr32(i, (std/num/int32/int32(shift)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32, shift: int){\n  std/num/int32/shr32(i, (std/num/int32/int32(shift)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/shr\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/shr"]}, {"name": {"op": "Var","id": "std/num/int32/sumacc32","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"30","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"31","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/sumacc32","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/sumacc32"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"31","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<int32>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "acc","type": {"op": "Int"}}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"30","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int32) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(+)(acc, x)"}]},"annotation": "genExpr: std/num/int32/sumacc32(xx, (std/num/int32/(+)(acc, x)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int32>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"30\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Int"}},"annotation": "genExpr: acc"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<int32>, acc: int32){\n  match (xs) {\n    ((std/core/types/Cons((x: int32) : int32, (xx: (list :: V -> V)<int32>) : (list :: V -> V)<int32>) : (list :: V -> V)<int32> ) as @pat: ((list :: V -> V)<int32>))\n       -> std/num/int32/sumacc32(xx, (std/num/int32/(+)(acc, x)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<int32> ) as @pat@0: ((list :: V -> V)<int32>))\n       -> acc;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/sumacc32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/sumacc32"]}, {"name": {"op": "Var","id": "std/num/int32/sum32","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/num/int32/sumacc32","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/num/int32/sumacc32"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}]},"annotation": "genExpr: std/num/int32/sumacc32(xs, (std/num/int32/int32(0)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<int32>){\n  std/num/int32/sumacc32(xs, (std/num/int32/int32(0)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/sum32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/sum32"]}, {"name": {"op": "Var","id": "std/num/int32/uint32","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x32","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:$arg0:num","args": [{"op": "Var","id": "std/num/int32/max-int32","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int(std/num/int32/max-int32)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x32","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 4294967296}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(i, 4294967296)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x32\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x32","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x32\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/int/int-sub(i, 4294967296);\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> i;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/int32((match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/int/int-sub(i, 4294967296);\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> i;\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/num/int32/int32((match ((std/core/int/(>)(i, (std/num/int32/int(std/num/int32/max-int32))))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/int/int-sub(i, 4294967296);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> i;\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/uint32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/uint32"]}, {"name": {"op": "Var","id": "std/num/int32/(~)","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/num/int32/int32(0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/num/int32/(-)((std/num/int32/int32(0)), i)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int32){\n  std/num/int32/(-)((std/num/int32/int32(0)), i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/num/int32/(~)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/num/int32/(~)"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}