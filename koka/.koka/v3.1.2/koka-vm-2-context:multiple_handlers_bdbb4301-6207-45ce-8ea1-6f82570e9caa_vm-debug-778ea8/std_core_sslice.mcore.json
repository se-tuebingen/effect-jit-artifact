{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/sslice"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/unsafe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_unsafe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/sslice/sslice/str","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "sslice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "sslice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"0","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"1","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"2","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"0","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"1\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"1\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"2\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(sslice: sslice/sslice){\n  match (sslice) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/sslice/str\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/sslice/str"]}, {"name": {"op": "Var","id": "std/core/sslice/sslice/start","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "sslice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "sslice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"3","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"4","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"5","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"4","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"3\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"3\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"5\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(sslice: sslice/sslice){\n  match (sslice) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/sslice/start\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/sslice/start"]}, {"name": {"op": "Var","id": "std/core/sslice/sslice/len","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "sslice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "sslice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"6","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"7","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"8","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"8","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"6\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"7\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"6\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"7\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(sslice: sslice/sslice){\n  match (sslice) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/sslice/len\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/sslice/len"]}, {"name": {"op": "Var","id": "std/core/sslice/sslice/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "str","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "start","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "len","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "str","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"9","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"9","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-str@143: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-str@143"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-str@143,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-str@143: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "str","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"10","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"11","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"12","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"10","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"11\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"11\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"12\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (str) {\n  ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-str@143;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "start","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"13","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"13","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-start@150: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-start@150"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-start@150,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-start@150: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "start","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"14","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"15","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"16","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"15","type": {"op": "Int"}},"annotation": "genTest: normal: (@x@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"14\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"14\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"16\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (start) {\n  ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n     -> @uniq-start@150;\n  ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "len","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"17","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"17","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-len@157: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-len@157"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-len@157,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-len@157: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "len","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"18","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"19","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"20","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"20","type": {"op": "Int"}},"annotation": "genTest: normal: (@x@1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"18\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"18\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n     -> @x@1;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (len) {\n  ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n     -> @uniq-len@157;\n  ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n         -> @x@1;\n    });\n}"}]},"annotation": "genExpr: std/core/sslice/Sslice((match (str) {\n    ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-str@143;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n           -> @x;\n      });\n  }), (match (start) {\n    ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n       -> @uniq-start@150;\n    ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> @x@0;\n      });\n  }), (match (len) {\n    ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n       -> @uniq-len@157;\n    ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n           -> @x@1;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@this: sslice/sslice, str: ? string, start: ? int, len: ? int){\n  std/core/sslice/Sslice((match (str) {\n      ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n         -> @uniq-str@143;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n         -> (match (@this) {\n          ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n             -> @x;\n        });\n    }), (match (start) {\n      ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n         -> @uniq-start@150;\n      ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n         -> (match (@this) {\n          ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n             -> @x@0;\n        });\n    }), (match (len) {\n      ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n         -> @uniq-len@157;\n      ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n         -> (match (@this) {\n          ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n             -> @x@1;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/sslice/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/sslice/@copy"]}, {"name": {"op": "Var","id": "std/core/sslice/@new-sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "str","type": {"op": "String"}}, {"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "len","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "str","type": {"op": "String"}},"annotation": "genExpr: str"}, {"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Var","id": "len","type": {"op": "Int"}},"annotation": "genExpr: len"}]},"annotation": "genExpr: std/core/sslice/Sslice(str, start, len)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(str: string, start: int, len: int){\n  std/core/sslice/Sslice(str, start, len);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/@new-sslice\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/@new-sslice"]}, {"name": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-string","args": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  std/core/sslice/@extern-string(slice@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/string\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/string"]}, {"name": {"op": "Var","id": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-next","args": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  std/core/sslice/@extern-next(slice@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/next\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/next"]}, {"name": {"op": "Var","id": "std/core/sslice/slice","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/slice\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/slice"]}, {"name": {"op": "Var","id": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"21","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"22","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"23","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@0@10005","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"21","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10005\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10005"]}, {"name": {"op": "Var","id": "y@0@10006","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"22","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"23","type": {"op": "Int"}},"annotation": "genTest: normal: (len: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, len)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0@10006\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@0@10006"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"21","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"22","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"23","type": {"op": "Int"}},"annotation": "genTest: normal: (len: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, len)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@0@10005","type": {"op": "Int"}}, {"op": "Var","id": "y@0@10006","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@0@10005, y@0@10006)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)))"}},"annotation": "genExpr: val x@0@10005 : int;\nval y@0@10006 : int;\nstd/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  match (slice@0) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> val x@0@10005 : int;\n          val y@0@10006 : int;\n      std/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/after\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/after"]}, {"name": {"op": "Var","id": "std/core/sslice/before","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"24","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"25","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"26","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"24","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"25","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"26\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  match (slice@0) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/before\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/before"]}, {"name": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-first1","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/sslice/@extern-first1(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/first1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/first1"]}, {"name": {"op": "Var","id": "std/core/sslice/common-prefix","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "t","type": {"op": "String"}}, {"op": "Var","id": "upto","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-common-prefix","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Var","id": "t","type": {"op": "String"}},"annotation": "genExpr: t"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "upto","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"27","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"27","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-upto@252: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-upto@252"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"upto\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-upto@252,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-upto@252: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"upto\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "upto","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"upto\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"upto\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (upto) {\n  ((std/core/types/@Optional((@uniq-upto@252: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-upto@252;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> -1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}},"annotation": "genExpr: std/core/sslice/@extern-common-prefix(s, t, (match (upto) {\n    ((std/core/types/@Optional((@uniq-upto@252: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-upto@252;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> -1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, t: string, upto: ? int){\n  std/core/sslice/@extern-common-prefix(s, t, (match (upto) {\n      ((std/core/types/@Optional((@uniq-upto@252: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-upto@252;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> -1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/common-prefix\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/common-prefix"]}, {"name": {"op": "Var","id": "std/core/sslice/count","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-count","args": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  std/core/sslice/@extern-count(slice@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/count\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/count"]}, {"name": {"op": "Var","id": "std/core/sslice/truncate","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"28","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"29","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"30","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"28","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"29\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"30\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"29\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"30\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"31","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"32","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"33","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"32","type": {"op": "Int"}},"annotation": "genTest: normal: (@x@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"31\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"31\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"33\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/sslice/Sslice((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), (match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  std/core/sslice/Sslice((match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n         -> @x;\n    }), (match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/truncate\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/truncate"]}, {"name": {"op": "Var","id": "std/core/sslice/empty","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/sslice/Sslice(\"\", 0, 0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/empty\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["std/core/sslice/empty"]}, {"name": {"op": "Var","id": "std/core/sslice/xends-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "post","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-xends-with","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "post","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, post: string){\n  std/core/sslice/@extern-xends-with(s, post);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/xends-with\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/xends-with"]}, {"name": {"op": "Var","id": "std/core/sslice/find","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sub","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/xindex-of","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sub","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/xindex-of(s, sub)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int((std/core/sslice/xindex-of(s, sub)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:(\"infixEq(Int, Int): Boolean\" $arg0:int 0)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<sslice/sslice>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:(\"infixEq(Int, Int): Boolean\" $arg0:int 0)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(i, 1)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "sub","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(sub)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))"}]},"annotation": "genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, sub: string){\n  val i : int\n        = std/core/int/ssize_t/int((std/core/sslice/xindex-of(s, sub)));\n  match ((std/core/int/is-zero(i))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Nothing<sslice/sslice>;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/find\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/find"]}, {"name": {"op": "Var","id": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sub","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/xlast-index-of","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sub","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/xlast-index-of(s, sub)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int((std/core/sslice/xlast-index-of(s, sub)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:(\"infixEq(Int, Int): Boolean\" $arg0:int 0)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<sslice/sslice>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:(\"infixEq(Int, Int): Boolean\" $arg0:int 0)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(i, 1)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "sub","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(sub)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))"}]},"annotation": "genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, sub: string){\n  val i : int\n        = std/core/int/ssize_t/int((std/core/sslice/xlast-index-of(s, sub)));\n  match ((std/core/int/is-zero(i))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Nothing<sslice/sslice>;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/find-last\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/find-last"]}, {"name": {"op": "Var","id": "std/core/sslice/invalid","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/sslice/Sslice(\"\", -1, 0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/invalid\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["std/core/sslice/invalid"]}, {"name": {"op": "Var","id": "std/core/sslice/is-empty","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10013","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"34","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"35","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"36","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"36","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), 0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10013"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10013","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10013","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  val b@10013 : bool\n        = std/core/int/(>)((match (slice@0) {\n            ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n               -> @x;\n          }), 0);\n  match (b@10013) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/is-empty\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/is-empty"]}, {"name": {"op": "Var","id": "std/core/sslice/is-notempty","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"34","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"35","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"36","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"36","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  std/core/int/(>)((match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n         -> @x;\n    }), 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/is-notempty\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/is-notempty"]}, {"name": {"op": "Var","id": "std/core/sslice/is-valid","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"37","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"38","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"39","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"38","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>=)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice){\n  std/core/int/(>=)((match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n         -> @x;\n    }), 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/is-valid\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/is-valid"]}, {"name": {"op": "Var","id": "std/core/sslice/last1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-last1","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/sslice/@extern-last1(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/last1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/last1"]}, {"name": {"op": "Var","id": "std/core/sslice/starts-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "pre","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!undefined: std/core/sslice/xstarts-with","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "pre","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10019","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10019"]}, {"name": {"op": "Var","id": "y@10020","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "pre","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(pre)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10020\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10020"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "pre","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(pre)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@10019","type": {"op": "Int"}}, {"op": "Var","id": "y@10020","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@10019, y@10020)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))"}]},"annotation": "genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))))"}},"annotation": "genExpr: val x@10019 : int;\nval y@10020 : int;\nstd/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!undefined: std/core/sslice/xstarts-with\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"String\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!undefined: std/core/sslice/xstarts-with","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "pre","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<sslice/sslice>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!undefined: std/core/sslice/xstarts-with\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"String\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, pre: string){\n  match ((std/core/sslice/xstarts-with(s, pre))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val x@10019 : int;\n          val y@10020 : int;\n      std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nothing<sslice/sslice>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/starts-with\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/starts-with"]}, {"name": {"op": "Var","id": "std/core/sslice/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"40","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"41","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"42","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"43","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"44","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"45","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/unsafe/unsafe-ptr-eq","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"40","type": {"op": "String"}},"annotation": "genTest: normal: (s1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"43","type": {"op": "String"}},"annotation": "genTest: normal: (s2: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s2"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/unsafe/unsafe-ptr-eq<string>(s1, s2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"41","type": {"op": "Int"}},"annotation": "genTest: normal: (start1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"44","type": {"op": "Int"}},"annotation": "genTest: normal: (start2: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"42","type": {"op": "Int"}},"annotation": "genTest: normal: (len1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"45","type": {"op": "Int"}},"annotation": "genTest: normal: (len2: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"42","type": {"op": "Int"}},"annotation": "genTest: normal: (len1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"45","type": {"op": "Int"}},"annotation": "genTest: normal: (len2: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice1"}]},"annotation": "genExpr: std/core/sslice/string(slice1)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice2"}]},"annotation": "genExpr: std/core/sslice/string(slice2)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)(len1, len2))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice1"}]},"annotation": "genExpr: std/core/sslice/string(slice1)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice2"}]},"annotation": "genExpr: std/core/sslice/string(slice2)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)(start1, start2))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match ((std/core/int/(==)(len1, len2))) {\n      ((std/core/types/True() : bool ) as @pat@6: bool)\n         -> std/core/types/True;\n      ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n         -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n    });\n  (@pat@4: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice1"}]},"annotation": "genExpr: std/core/sslice/string(slice1)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice2"}]},"annotation": "genExpr: std/core/sslice/string(slice2)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/unsafe/unsafe-ptr-eq<string>(s1, s2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(==)(start1, start2))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match ((std/core/int/(==)(len1, len2))) {\n          ((std/core/types/True() : bool ) as @pat@6: bool)\n             -> std/core/types/True;\n          ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n             -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n        });\n      (@pat@4: bool)\n         -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n    });\n  (@pat@5: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice1: sslice/sslice, slice2: sslice/sslice){\n  match (slice1, slice2) {\n    ((@skip std/core/sslice/Sslice((s2: string) : string, (start2: int) : int, (len2: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice), ((@skip std/core/sslice/Sslice((s1: string) : string, (start1: int) : int, (len1: int) : int) : sslice/sslice ) as @pat@0: sslice/sslice)\n       -> (match ((std/core/unsafe/unsafe-ptr-eq<string>(s1, s2))) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> (match ((std/core/int/(==)(start1, start2))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> (match ((std/core/int/(==)(len1, len2))) {\n                ((std/core/types/True() : bool ) as @pat@6: bool)\n                   -> std/core/types/True;\n                ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n                   -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n              });\n            (@pat@4: bool)\n               -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n          });\n        (@pat@5: bool)\n           -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/(==)"]}, {"name": {"op": "Var","id": "std/core/sslice/(!=)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10021","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice2"}]},"annotation": "genExpr: std/core/sslice/(==)(slice1, slice2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10021"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10021","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10021","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice1: sslice/sslice, slice2: sslice/sslice){\n  val b@10021 : bool\n        = std/core/sslice/(==)(slice1, slice2);\n  match (b@10021) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/(!=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/(!=)"]}, {"name": {"op": "Var","id": "std/core/sslice/(===)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"47","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"48","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"49","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"50","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"51","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"52","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"48","type": {"op": "Int"}},"annotation": "genTest: normal: (start1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"51","type": {"op": "Int"}},"annotation": "genTest: normal: (start2: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"49","type": {"op": "Int"}},"annotation": "genTest: normal: (len1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"52","type": {"op": "Int"}},"annotation": "genTest: normal: (len2: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"47","type": {"op": "String"}},"annotation": "genTest: normal: (s1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"50","type": {"op": "String"}},"annotation": "genTest: normal: (s2: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)(s1, s2)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)(len1, len2))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/string/(==)(s1, s2);\n  (@pat@4: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)(start1, start2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(==)(len1, len2))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/string/(==)(s1, s2);\n      (@pat@4: bool)\n         -> std/core/types/False;\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice1: sslice/sslice, slice2: sslice/sslice){\n  match (slice1, slice2) {\n    ((@skip std/core/sslice/Sslice((s2: string) : string, (start2: int) : int, (len2: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice), ((@skip std/core/sslice/Sslice((s1: string) : string, (start1: int) : int, (len1: int) : int) : sslice/sslice ) as @pat@0: sslice/sslice)\n       -> (match ((std/core/int/(==)(start1, start2))) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> (match ((std/core/int/(==)(len1, len2))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/core/string/(==)(s1, s2);\n            (@pat@4: bool)\n               -> std/core/types/False;\n          });\n        (@pat@5: bool)\n           -> std/core/types/False;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/(===)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/(===)"]}, {"name": {"op": "Var","id": "std/core/sslice/(!==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10022","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/(===)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/(===)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "slice2","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice2"}]},"annotation": "genExpr: std/core/sslice/(===)(slice1, slice2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10022"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10022","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10022","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice1: sslice/sslice, slice2: sslice/sslice){\n  val b@10022 : bool\n        = std/core/sslice/(===)(slice1, slice2);\n  match (b@10022) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/(!==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/(!==)"]}, {"name": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x53","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}]},"annotation": "genExpr: std/core/sslice/next(slice@0)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x53","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x53","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"54","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"54","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"55","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"57","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"58","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"59","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"55","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: action(c)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/sslice/foreach-while<a,(e :: E)>(rest, action)"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: res"}}]},"annotation": "genBranch: [(res,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((action(c))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@5: ((maybe :: V -> V)<690>))\n     -> std/core/sslice/foreach-while<a,(e :: E)>(rest, action);\n  (res: ((maybe :: V -> V)<690>))\n     -> res;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"57\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"58\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"59\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"57\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"58\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"59\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(slice@0: sslice/sslice, action: (c : char) -> (e :: E) (maybe :: V -> V)<a>){\n  (match ((std/core/sslice/next(slice@0))) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n    ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((c: char) : char, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat@0: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> (match ((action(c))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@5: ((maybe :: V -> V)<a>))\n           -> std/core/sslice/foreach-while<a,(e :: E)>(rest, action);\n        (res: ((maybe :: V -> V)<a>))\n           -> res;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/foreach-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/foreach-while"]}, {"name": {"op": "Var","id": "std/core/sslice/string/foreach-while","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/sslice/foreach-while<a,(e :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(s: string, action: (c : char) -> (e :: E) (maybe :: V -> V)<a>){\n  std/core/sslice/foreach-while<a,(e :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/string/foreach-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/string/foreach-while"]}, {"name": {"op": "Var","id": "std/core/sslice/foreach","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<_a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: action(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(c: char){\n  val _ : ()\n        = action(c);\n  std/core/types/Nothing<_a>;\n}"}]},"annotation": "genExpr: std/core/sslice/foreach-while<_a,(e :: E)>(slice@0, (fn<(e :: E)>(c: char){\n    val _ : ()\n          = (action(c));\n    (std/core/types/Nothing<_a>);\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["_@0"]}],"body": {"op": "Literal","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(slice@0: sslice/sslice, action: (c : char) -> (e :: E) ()){\n  val _@0 : (maybe :: V -> V)<_a>\n        = std/core/sslice/foreach-while<_a,(e :: E)>(slice@0, (fn<(e :: E)>(c: char){\n            val _ : ()\n                  = (action(c));\n            (std/core/types/Nothing<_a>);\n          }));\n  std/core/types/Unit;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/foreach\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/foreach"]}, {"name": {"op": "Var","id": "std/core/sslice/string/foreach","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0@10023","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@10023"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<_a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0@10023","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0@10023"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: action(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(c: char){\n  val _ : ()\n        = action(c);\n  std/core/types/Nothing<_a>;\n}"}]},"annotation": "genExpr: std/core/sslice/foreach-while<_a,(e :: E)>(slice@0@10023, (fn<(e :: E)>(c: char){\n    val _ : ()\n          = (action(c));\n    (std/core/types/Nothing<_a>);\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["_@0"]}],"body": {"op": "Literal","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(s: string, action: (c : char) -> (e :: E) ()){\n  val slice@0@10023 : sslice/sslice;\n  val _@0 : (maybe :: V -> V)<_a>;\n  std/core/types/Unit;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/string/foreach\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/string/foreach"]}, {"name": {"op": "Var","id": "std/core/sslice/pred/count","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cnt","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0@10028","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@10028\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@10028"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<_a,<(local :: H -> X)<(h :: H)>|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0@10028","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0@10028"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: pred(c)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10095","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "cnt","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: cnt"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(cnt)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10095\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10095"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "cnt","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: cnt"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10095","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10095, 1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)))"}},"annotation": "genExpr: val x@10095 : int\n      = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\nstd/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((pred(c))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> val x@10095 : int\n              = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n    std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> std/core/types/Unit;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(c: char){\n  val _ : ()\n        = match ((pred(c))) {\n          ((std/core/types/True() : bool ) as @pat: bool)\n             -> val x@10095 : int\n                      = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n            std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n          ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n             -> std/core/types/Unit;\n        };\n  std/core/types/Nothing<_a>;\n}"}]},"annotation": "genExpr: std/core/sslice/foreach-while<_a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(slice@0@10028, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(c: char){\n    val _ : ()\n          = (match ((pred(c))) {\n            ((std/core/types/True() : bool ) as @pat: bool)\n               -> val x@10095 : int\n                        = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n              std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n            ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n               -> std/core/types/Unit;\n          });\n    (std/core/types/Nothing<_a>);\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "cnt","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: cnt"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(cnt)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(887 :: H),int>){\n  val slice@0@10028 : sslice/sslice;\n  val _@0 : (maybe :: V -> V)<_a>;\n  std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(887 :: H),int>){\n    val slice@0@10028 : sslice/sslice;\n    val _@0 : ((maybe :: V -> V)<_a>);\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(h :: H),int>){\n      val slice@0@10028 : sslice/sslice;\n      val _@0 : ((maybe :: V -> V)<_a>);\n      (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(h :: H),int>){\n      val slice@0@10028 : sslice/sslice;\n      val _@0 : ((maybe :: V -> V)<_a>);\n      (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n    }));\n})()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(s: string, pred: (char) -> (e :: E) bool){\n  (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(h :: H),int>){\n        val slice@0@10028 : sslice/sslice;\n        val _@0 : ((maybe :: V -> V)<_a>);\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n      }));\n  })();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/pred/count\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/pred/count"]}, {"name": {"op": "Var","id": "std/core/sslice/advance","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "count@0","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-advance","args": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "count@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice, count@0: int){\n  std/core/sslice/@extern-advance(slice@0, count@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/advance\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/advance"]}, {"name": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "count@0","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/sslice/@extern-extend","args": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "count@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice, count@0: int){\n  std/core/sslice/@extern-extend(slice@0, count@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/extend\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/extend"]}, {"name": {"op": "Var","id": "std/core/sslice/first","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/first1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/first1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"62","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"62","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match (n) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"63","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"63","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match (n) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match (n) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, n: ? int){\n  val slice@0 : sslice/sslice\n        = std/core/sslice/first1(s);\n  match ((std/core/int/(==)((match (n) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match (n) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/first\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/first"]}, {"name": {"op": "Var","id": "std/core/sslice/capitalize","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0@1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/first1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/first1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@1"]}, {"name": {"op": "Var","id": "slice@0@0@10036","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x65","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x65","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"66","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"66","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x65","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0@1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0@1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0@1","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0@1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"68","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"68","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@0@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@0@0"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n     -> @uniq-n@914@0@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n       -> @uniq-n@914@0@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend(slice@0@1, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n         -> @uniq-n@914@0@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> slice@0@1;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0: bool)\n     -> std/core/sslice/extend(slice@0@1, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n             -> @uniq-n@914@0@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n             -> 1;\n        }), 1)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@0@10036"]}, {"name": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/first1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/first1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/to-upper","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/to-upper"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x65","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x65","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"66","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"66","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x65","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"68","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"68","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@1"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@1;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@1;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@1;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}"}]},"annotation": "genExpr: std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}))"}]},"annotation": "genExpr: std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}))))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0@0@10036","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"69","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"70","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"71","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@1@10043","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"69","type": {"op": "String"}},"annotation": "genTest: normal: (s@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s@1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@1@10043\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@1@10043"]}, {"name": {"op": "Var","id": "y@1@10044","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"70","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"71","type": {"op": "Int"}},"annotation": "genTest: normal: (len: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, len)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@1@10044\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@1@10044"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"69","type": {"op": "String"}},"annotation": "genTest: normal: (s@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s@1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"70","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"71","type": {"op": "Int"}},"annotation": "genTest: normal: (len: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, len)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@1@10043","type": {"op": "Int"}}, {"op": "Var","id": "y@1@10044","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@1@10043, y@1@10044)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)))"}},"annotation": "genExpr: val x@1@10043 : int;\nval y@1@10044 : int;\nstd/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)))"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0@0@10036) {\n  ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> val x@1@10043 : int;\n        val y@1@10044 : int;\n    std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice@0@0@10036) {\n  ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> val x@1@10043 : int;\n        val y@1@10044 : int;\n    std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n}))"}]},"annotation": "genExpr: std/core/types/(++)((std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@1;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n               -> 1;\n          }), 1)));\n  }))))), (std/core/sslice/string((match (slice@0@0@10036) {\n    ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n       -> val x@1@10043 : int;\n          val y@1@10044 : int;\n      std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n  }))))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  val slice@0@1 : sslice/sslice;\n  val slice@0@0@10036 : sslice/sslice;\n  val slice@0 : sslice/sslice;\n  std/core/types/(++)((std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n        ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-n@914;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 1;\n      }), 1))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> slice@0;\n      ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n         -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n              ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n                 -> @uniq-n@914@1;\n              ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n                 -> 1;\n            }), 1)));\n    }))))), (std/core/sslice/string((match (slice@0@0@10036) {\n      ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n         -> val x@1@10043 : int;\n            val y@1@10044 : int;\n        std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/capitalize\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/capitalize"]}, {"name": {"op": "Var","id": "std/core/sslice/string/truncate","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "count@0","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/first1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/first1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x72","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x73","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x73","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"74","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"74","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x73","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x72","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x72","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x75","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x75","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"76","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"76","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x75","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "count@0","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(count@0, 1)"}]},"annotation": "genExpr: std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }), (std/core/int/int-sub(count@0, 1)))"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }), (std/core/int/int-sub(count@0, 1)))))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, count@0: int){\n  val slice@0 : sslice/sslice\n        = std/core/sslice/first1(s);\n  std/core/sslice/string((std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n        ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-n@914;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 1;\n      }), 1))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> slice@0;\n      ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n         -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n              ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n                 -> @uniq-n@914@0;\n              ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n                 -> 1;\n            }), 1)));\n    }), (std/core/int/int-sub(count@0, 1)))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/string/truncate\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/string/truncate"]}, {"name": {"op": "Var","id": "std/core/sslice/drop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0@0@10053","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/advance","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/advance"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/sslice/advance(slice@0, n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@0@10053"]}, {"name": {"op": "Var","id": "x@10056","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/count","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/count"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}]},"annotation": "genExpr: std/core/sslice/count(slice@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10056\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10056"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0@0@10053","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"77","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"78","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"79","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"77","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"78\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"78\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"79\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0@0@10053) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0@0@10053","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"80","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"81","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"82","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"81","type": {"op": "Int"}},"annotation": "genTest: normal: (@x@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"80\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"82\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"80\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"82\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0@0@10053) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/sslice/Sslice((match (slice@0@0@10053) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), (match (slice@0@0@10053) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@10056","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@10056, n)"}]},"annotation": "genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(x@10056, n)))"}},"annotation": "genExpr: val slice@0@0@10053 : sslice/sslice;\nval x@10056 : int;\nstd/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(x@10056, n)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice, n: int){\n  match ((std/core/int/(<=)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val slice@0@0@10053 : sslice/sslice;\n          val x@10056 : int;\n      std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n            ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n               -> @x;\n          }), (match (slice@0@0@10053) {\n            ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n               -> @x@0;\n          }), 0)), (std/core/int/int-sub(x@10056, n)));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/drop\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/drop"]}, {"name": {"op": "Var","id": "std/core/sslice/ends-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "post","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x83","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/xends-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/xends-with"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Var","id": "post","type": {"op": "String"}},"annotation": "genExpr: post"}]},"annotation": "genExpr: std/core/sslice/xends-with(s, post)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x83","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10058","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10058\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10058"]}, {"name": {"op": "Var","id": "y@10059","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "post","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(post)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10059\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10059"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@10058","type": {"op": "Int"}}, {"op": "Var","id": "y@10059","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@10058, y@10059)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))"}]},"annotation": "genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))))"}},"annotation": "genExpr: val x@10058 : int;\nval y@10059 : int;\nstd/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x83","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<sslice/sslice>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, post: string){\n  match ((std/core/sslice/xends-with(s, post))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val x@10058 : int;\n          val y@10059 : int;\n      std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nothing<sslice/sslice>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/ends-with\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/ends-with"]}, {"name": {"op": "Var","id": "std/core/sslice/head","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/first1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/first1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x84","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x85","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x85","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"86","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"86","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x85","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x84","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x84","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x87","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x87","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"88","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"88","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x87","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}"}]},"annotation": "genExpr: std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  val slice@0 : sslice/sslice\n        = std/core/sslice/first1(s);\n  std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/head\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/head"]}, {"name": {"op": "Var","id": "std/core/sslice/head-char","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<char>"}]},"annotation": "genExpr: std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), (std/core/types/Just<char>))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), (std/core/types/Just<char>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/head-char\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/head-char"]}, {"name": {"op": "Var","id": "std/core/sslice/last","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/last1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/last1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/last1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x89","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"90","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"90","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@1115: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@1115"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@1115;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@1115;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x89","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x89\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x89","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/advance","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/advance"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"91","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"91","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@1115@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@1115@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@1115@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(1, (match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@1115@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }))"}]},"annotation": "genExpr: std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@1115@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }))))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"92","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"92","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@1115@1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@1115@1"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "n","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n     -> @uniq-n@1115@1;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@1115@1;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend((std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n        ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n           -> @uniq-n@1115@0;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n           -> 1;\n      }))))), (std/core/int/int-sub((match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n         -> @uniq-n@1115@1;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x89\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, n: ? int){\n  val slice@0 : sslice/sslice\n        = std/core/sslice/last1(s);\n  match ((std/core/int/(==)((match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@1115;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend((std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n              ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n                 -> @uniq-n@1115@0;\n              ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n                 -> 1;\n            }))))), (std/core/int/int-sub((match (n) {\n            ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n               -> @uniq-n@1115@1;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n               -> 1;\n          }), 1)));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/last\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/last"]}, {"name": {"op": "Var","id": "std/core/sslice/subslice","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0@0@10070","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/advance","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/advance"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/advance(slice@0, start)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@0@10070"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0@0@10070","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"93","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"94","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"95","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"93","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"94\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"95\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"94\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"95\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0@0@10070) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0@0@10070","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"96","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"97","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"98","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"97","type": {"op": "Int"}},"annotation": "genTest: normal: (@x@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"96\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"98\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"96\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"98\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0@0@10070) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n     -> @x@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/sslice/Sslice((match (slice@0@0@10070) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> @x;\n  }), (match (slice@0@0@10070) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n       -> @x@0;\n  }), 0)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "start","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(end, start)"}]},"annotation": "genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(end, start)))"}},"annotation": "genExpr: val slice@0@0@10070 : sslice/sslice\n      = std/core/sslice/advance(slice@0, start);\nstd/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(end, start)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<)(end, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val slice@0@0@10070 : sslice/sslice\n              = std/core/sslice/advance(slice@0, start);\n    std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n          ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n             -> @x;\n        }), (match (slice@0@0@10070) {\n          ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n             -> @x@0;\n        }), 0)), (std/core/int/int-sub(end, start)));\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice, start: int, end: int){\n  match ((std/core/int/(<)(start, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> slice@0;\n    (@pat@0: bool)\n       -> (match ((std/core/int/(<)(end, 0))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> slice@0;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> val slice@0@0@10070 : sslice/sslice\n                    = std/core/sslice/advance(slice@0, start);\n          std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n                ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n                   -> @x;\n              }), (match (slice@0@0@10070) {\n                ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n                   -> @x@0;\n              }), 0)), (std/core/int/int-sub(end, start)));\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/subslice\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/subslice"]}, {"name": {"op": "Var","id": "std/core/sslice/tail","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "slice@0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/first1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/first1"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/first1(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@0"]}, {"name": {"op": "Var","id": "slice@0@10075","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x99","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x100","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x100","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"101","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"101","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x100","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x99","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x99\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x99","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice@0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x102","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x102","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"103","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"103","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-n@914@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-n@914@0"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x102","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n       -> 1;\n  }), 1)"}]},"annotation": "genExpr: std/core/sslice/extend(slice@0@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n         -> 1;\n    }), 1)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x99\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n             -> 1;\n        }), 1)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["slice@0@10075"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0@10075","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"99","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"100","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"101","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@0@10082","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"99","type": {"op": "String"}},"annotation": "genTest: normal: (s@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10082\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10082"]}, {"name": {"op": "Var","id": "y@0@10083","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"100","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"101","type": {"op": "Int"}},"annotation": "genTest: normal: (len: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, len)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0@10083\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@0@10083"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"99","type": {"op": "String"}},"annotation": "genTest: normal: (s@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"100","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"101","type": {"op": "Int"}},"annotation": "genTest: normal: (len: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, len)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@0@10082","type": {"op": "Int"}}, {"op": "Var","id": "y@0@10083","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@0@10082, y@0@10083)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)))"}},"annotation": "genExpr: val x@0@10082 : int;\nval y@0@10083 : int;\nstd/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0@10075) {\n  ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> val x@0@10082 : int;\n        val y@0@10083 : int;\n    std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice@0@10075) {\n  ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> val x@0@10082 : int;\n        val y@0@10083 : int;\n    std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n}))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  val slice@0@0 : sslice/sslice;\n  val slice@0@10075 : sslice/sslice;\n  std/core/sslice/string((match (slice@0@10075) {\n    ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> val x@0@10082 : int;\n          val y@0@10083 : int;\n      std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/tail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/tail"]}, {"name": {"op": "Var","id": "std/core/sslice/take","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice@0"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/extend","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/extend"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"102","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"103","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"104","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"102","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"103\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"104\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"103\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"104\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "slice@0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"105","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"106","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"107","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"106","type": {"op": "Int"}},"annotation": "genTest: normal: (@x@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"105\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"107\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"105\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"107\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/sslice/Sslice((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), (match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), n)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice@0: sslice/sslice, n: int){\n  match ((std/core/int/(<=)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0) {\n            ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n               -> @x;\n          }), (match (slice@0) {\n            ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n               -> @x@0;\n          }), 0)), n);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/take\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/take"]}, {"name": {"op": "Var","id": "std/core/sslice/trim-left","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sub","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "sub","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "sub","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/starts-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/starts-with"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Var","id": "sub","type": {"op": "String"}},"annotation": "genExpr: sub"}]},"annotation": "genExpr: std/core/sslice/starts-with(s, sub)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"109","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"109","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"110","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"111","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"112","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/trim-left","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/trim-left"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"109","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice@0"}]},"annotation": "genExpr: std/core/sslice/string(slice@0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "sub","type": {"op": "String"}},"annotation": "genExpr: sub"}]},"annotation": "genExpr: std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"110\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"111\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"112\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"110\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"111\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"112\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/starts-with(s, sub))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> s;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, sub: string){\n  match ((std/core/string/(==)(sub, \"\"))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> s;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/sslice/starts-with(s, sub))) {\n        ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n           -> std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n           -> s;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/trim-left\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/trim-left"]}, {"name": {"op": "Var","id": "std/core/sslice/trim-right","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sub","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "sub","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "sub","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x113","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/ends-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/ends-with"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Var","id": "sub","type": {"op": "String"}},"annotation": "genExpr: sub"}]},"annotation": "genExpr: std/core/sslice/ends-with(s, sub)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x113","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"114","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"114","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"115","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"116","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"117","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/trim-right","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/trim-right"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"114","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice@0"}]},"annotation": "genExpr: std/core/sslice/string(slice@0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "sub","type": {"op": "String"}},"annotation": "genExpr: sub"}]},"annotation": "genExpr: std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x113","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/ends-with(s, sub))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> s;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, sub: string){\n  match ((std/core/string/(==)(sub, \"\"))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> s;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/sslice/ends-with(s, sub))) {\n        ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n           -> std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n           -> s;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/trim-right\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/sslice/trim-right"]}, {"name": {"op": "Var","id": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "str","type": {"op": "String"}}, {"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "len","type": {"op": "Int"}}],"body": {"op": "Construct","type_tag": "std/core/sslice/sslice","tag": "std/core/sslice/Sslice","args": [{"op": "Var","id": "str","type": {"op": "String"}}, {"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "len","type": {"op": "Int"}}]}},"annotation": "genConstr"},"export_as": ["std/core/sslice/Sslice"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}