{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/show"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/show/gshow","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@arg-x1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/show/@extern-gshow","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x1","type": {"op": "Top"}},"annotation": "genExpr: @arg-x1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}},"annotation": "genExpr: std/core/show/@extern-gshow<a>(@arg-x1)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(@arg-x1: a){\n  std/core/show/@extern-gshow<a>(@arg-x1);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/gshow\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/gshow"]}, {"name": {"op": "Var","id": "std/core/show/int-show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "use-capitals","type": {"op": "Bool"}}],"body": {"op": "Primitive","name": "!undefined: std/core/show/@extern-int-show-hex","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "use-capitals","type": {"op": "Bool"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, use-capitals: bool){\n  std/core/show/@extern-int-show-hex(i, use-capitals);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/int-show-hex\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/int-show-hex"]}, {"name": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "-"},"annotation": "genExpr: \"-\""}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<)(i, 0))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> \"-\";\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-pre@66: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-pre@66"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@66,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@66: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "pre","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "0x"},"annotation": "genExpr: \"0x\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@66;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/pad-left","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/pad-left"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/int-show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/int-show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "abs(Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/abs(i)"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"1","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-use-capitals@62: bool) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-use-capitals@62"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@62,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@62: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "use-capitals","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@62;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}"}]},"annotation": "genExpr: std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@62;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-width@58: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-width@58"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@58,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@58: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "width","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@58;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "0"},"annotation": "genExpr: '0'"}]},"annotation": "genExpr: std/core/types/@Optional<char>('0')"}]},"annotation": "genExpr: std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n      ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n         -> @uniq-use-capitals@62;\n      ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n         -> std/core/types/True;\n    }))), (match (width) {\n    ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@58;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), (std/core/types/@Optional<char>('0')))"}]},"annotation": "genExpr: std/core/types/(++)((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@66;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n        ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n           -> @uniq-use-capitals@62;\n        ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n           -> std/core/types/True;\n      }))), (match (width) {\n      ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-width@58;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), (std/core/types/@Optional<char>('0')))))"}]},"annotation": "genExpr: std/core/types/(++)((match ((std/core/int/(<)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> \"-\";\n    ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n       -> \"\";\n  }), (std/core/types/(++)((match (pre) {\n      ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-pre@66;\n      ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n         -> \"0x\";\n    }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n          ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n             -> @uniq-use-capitals@62;\n          ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n             -> std/core/types/True;\n        }))), (match (width) {\n        ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-width@58;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 1;\n      }), (std/core/types/@Optional<char>('0')))))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, width: ? int, use-capitals: ? bool, pre: ? string){\n  std/core/types/(++)((match ((std/core/int/(<)(i, 0))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> \"-\";\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> \"\";\n    }), (std/core/types/(++)((match (pre) {\n        ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n           -> @uniq-pre@66;\n        ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n           -> \"0x\";\n      }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n            ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n               -> @uniq-use-capitals@62;\n            ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n               -> std/core/types/True;\n          }))), (match (width) {\n          ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n             -> @uniq-width@58;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n             -> 1;\n        }), (std/core/types/@Optional<char>('0')))))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/show-hex\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/show-hex"]}, {"name": {"op": "Var","id": "std/core/show/show-char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": " "}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\n"},"annotation": "genExpr: \"\\x5Cn\""}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\r"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\r"},"annotation": "genExpr: \"\\x5Cr\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\r"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\t"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\t"},"annotation": "genExpr: \"\\x5Ct\""}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\t"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 255},"annotation": "genExpr: 255"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<=)((std/core/char/int(c)), 255)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@arg-x229","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@arg-x229\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@arg-x229"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\x"},"annotation": "genExpr: \"\\x5Cx\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x229","type": {"op": "Int"}},"annotation": "genExpr: @arg-x229"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 2},"annotation": "genExpr: 2"}]},"annotation": "genExpr: std/core/types/@Optional<int>(2)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/@Optional<string>(\"\")"}]},"annotation": "genExpr: std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}},"annotation": "genExpr: val @arg-x229 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x4","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 65535},"annotation": "genExpr: 65535"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<=)((std/core/char/int(c)), 65535)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x4","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@arg-x281","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@arg-x281\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@arg-x281"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\u"},"annotation": "genExpr: \"\\x5Cu\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x281","type": {"op": "Int"}},"annotation": "genExpr: @arg-x281"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 4},"annotation": "genExpr: 4"}]},"annotation": "genExpr: std/core/types/@Optional<int>(4)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/@Optional<string>(\"\")"}]},"annotation": "genExpr: std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}},"annotation": "genExpr: val @arg-x281 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}}]},"annotation": "genBranch: [(@pat@10,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x4","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@arg-x323","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@arg-x323\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@arg-x323"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\U"},"annotation": "genExpr: \"\\x5CU\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x323","type": {"op": "Int"}},"annotation": "genExpr: @arg-x323"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 6},"annotation": "genExpr: 6"}]},"annotation": "genExpr: std/core/types/@Optional<int>(6)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/@Optional<string>(\"\")"}]},"annotation": "genExpr: std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}},"annotation": "genExpr: val @arg-x323 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}}]},"annotation": "genBranch: [(@pat@11,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n  ((std/core/types/True() : bool ) as @pat@10: bool)\n     -> val @arg-x281 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n     -> val @arg-x323 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n}"}}]},"annotation": "genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n  ((std/core/types/True() : bool ) as @pat@8: bool)\n     -> val @arg-x229 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n      ((std/core/types/True() : bool ) as @pat@10: bool)\n         -> val @arg-x281 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n         -> val @arg-x323 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n    });\n}"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> \"\\x5Ct\";\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n      ((std/core/types/True() : bool ) as @pat@8: bool)\n         -> val @arg-x229 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n          ((std/core/types/True() : bool ) as @pat@10: bool)\n             -> val @arg-x281 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n             -> val @arg-x323 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x0D'))) {\n  ((std/core/types/True() : bool ) as @pat@4: bool)\n     -> \"\\x5Cr\";\n  ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n     -> (match ((std/core/char/(==)(c, '\\x09'))) {\n      ((std/core/types/True() : bool ) as @pat@6: bool)\n         -> \"\\x5Ct\";\n      ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n          ((std/core/types/True() : bool ) as @pat@8: bool)\n             -> val @arg-x229 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n              ((std/core/types/True() : bool ) as @pat@10: bool)\n                 -> val @arg-x281 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                 -> val @arg-x323 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n            });\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> \"\\x5Cn\";\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n      ((std/core/types/True() : bool ) as @pat@4: bool)\n         -> \"\\x5Cr\";\n      ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n         -> (match ((std/core/char/(==)(c, '\\x09'))) {\n          ((std/core/types/True() : bool ) as @pat@6: bool)\n             -> \"\\x5Ct\";\n          ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n              ((std/core/types/True() : bool ) as @pat@8: bool)\n                 -> val @arg-x229 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                  ((std/core/types/True() : bool ) as @pat@10: bool)\n                     -> val @arg-x281 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                     -> val @arg-x323 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                });\n            });\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 > #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "~"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\n"},"annotation": "genExpr: \"\\x5Cn\""}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\r"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\r"},"annotation": "genExpr: \"\\x5Cr\""}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\r"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\t"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\t"},"annotation": "genExpr: \"\\x5Ct\""}}]},"annotation": "genBranch: [(@pat@6@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\t"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x5","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 255},"annotation": "genExpr: 255"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<=)((std/core/char/int(c)), 255)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@arg-x229@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@arg-x229@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@arg-x229@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\x"},"annotation": "genExpr: \"\\x5Cx\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x229@0","type": {"op": "Int"}},"annotation": "genExpr: @arg-x229@0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 2},"annotation": "genExpr: 2"}]},"annotation": "genExpr: std/core/types/@Optional<int>(2)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/@Optional<string>(\"\")"}]},"annotation": "genExpr: std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}},"annotation": "genExpr: val @arg-x229@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}}]},"annotation": "genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x6","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 65535},"annotation": "genExpr: 65535"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<=)((std/core/char/int(c)), 65535)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x6","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@arg-x281@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@arg-x281@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@arg-x281@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\u"},"annotation": "genExpr: \"\\x5Cu\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x281@0","type": {"op": "Int"}},"annotation": "genExpr: @arg-x281@0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 4},"annotation": "genExpr: 4"}]},"annotation": "genExpr: std/core/types/@Optional<int>(4)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/@Optional<string>(\"\")"}]},"annotation": "genExpr: std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}},"annotation": "genExpr: val @arg-x281@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}}]},"annotation": "genBranch: [(@pat@10@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x6","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@arg-x323@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@arg-x323@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@arg-x323@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\U"},"annotation": "genExpr: \"\\x5CU\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-hex","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-hex"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@arg-x323@0","type": {"op": "Int"}},"annotation": "genExpr: @arg-x323@0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 6},"annotation": "genExpr: 6"}]},"annotation": "genExpr: std/core/types/@Optional<int>(6)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/@Optional<string>(\"\")"}]},"annotation": "genExpr: std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}},"annotation": "genExpr: val @arg-x323@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))"}}]},"annotation": "genBranch: [(@pat@11@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n  ((std/core/types/True() : bool ) as @pat@10@0: bool)\n     -> val @arg-x281@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n     -> val @arg-x323@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n}"}}]},"annotation": "genBranch: [(@pat@9@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n  ((std/core/types/True() : bool ) as @pat@8@0: bool)\n     -> val @arg-x229@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n      ((std/core/types/True() : bool ) as @pat@10@0: bool)\n         -> val @arg-x281@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n         -> val @arg-x323@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n    });\n}"}}]},"annotation": "genBranch: [(@pat@7@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@6@0: bool)\n     -> \"\\x5Ct\";\n  ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n      ((std/core/types/True() : bool ) as @pat@8@0: bool)\n         -> val @arg-x229@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n          ((std/core/types/True() : bool ) as @pat@10@0: bool)\n             -> val @arg-x281@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n             -> val @arg-x323@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x0D'))) {\n  ((std/core/types/True() : bool ) as @pat@4@0: bool)\n     -> \"\\x5Cr\";\n  ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n     -> (match ((std/core/char/(==)(c, '\\x09'))) {\n      ((std/core/types/True() : bool ) as @pat@6@0: bool)\n         -> \"\\x5Ct\";\n      ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n          ((std/core/types/True() : bool ) as @pat@8@0: bool)\n             -> val @arg-x229@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n              ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                 -> val @arg-x281@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                 -> val @arg-x323@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n            });\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> \"\\x5Cn\";\n  ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n      ((std/core/types/True() : bool ) as @pat@4@0: bool)\n         -> \"\\x5Cr\";\n      ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n         -> (match ((std/core/char/(==)(c, '\\x09'))) {\n          ((std/core/types/True() : bool ) as @pat@6@0: bool)\n             -> \"\\x5Ct\";\n          ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n              ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                 -> val @arg-x229@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                  ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                     -> val @arg-x281@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                     -> val @arg-x323@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                });\n            });\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"~\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 > #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "~"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\'"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\\'"},"annotation": "genExpr: \"\\x5C\\x27\""}}]},"annotation": "genBranch: [(@pat@13,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\'\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\'"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\\""},"annotation": "genExpr: \"\\x5C\\x22\""}}]},"annotation": "genBranch: [(@pat@15,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\\"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\\\\"},"annotation": "genExpr: \"\\x5C\\x5C\""}}]},"annotation": "genBranch: [(@pat@17,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\\\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\\"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/string/char/string(c)"}}]},"annotation": "genBranch: [(@pat@18,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\\\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x5C'))) {\n  ((std/core/types/True() : bool ) as @pat@17: bool)\n     -> \"\\x5C\\x5C\";\n  ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n     -> std/core/string/char/string(c);\n}"}}]},"annotation": "genBranch: [(@pat@16,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x22'))) {\n  ((std/core/types/True() : bool ) as @pat@15: bool)\n     -> \"\\x5C\\x22\";\n  ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n     -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n      ((std/core/types/True() : bool ) as @pat@17: bool)\n         -> \"\\x5C\\x5C\";\n      ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n         -> std/core/string/char/string(c);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@14,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\'\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x27'))) {\n  ((std/core/types/True() : bool ) as @pat@13: bool)\n     -> \"\\x5C\\x27\";\n  ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n     -> (match ((std/core/char/(==)(c, '\\x22'))) {\n      ((std/core/types/True() : bool ) as @pat@15: bool)\n         -> \"\\x5C\\x22\";\n      ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n         -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n          ((std/core/types/True() : bool ) as @pat@17: bool)\n             -> \"\\x5C\\x5C\";\n          ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n             -> std/core/string/char/string(c);\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@12,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"~\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>)(c, '~'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n      ((std/core/types/True() : bool ) as @pat@2@0: bool)\n         -> \"\\x5Cn\";\n      ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n         -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n          ((std/core/types/True() : bool ) as @pat@4@0: bool)\n             -> \"\\x5Cr\";\n          ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n             -> (match ((std/core/char/(==)(c, '\\x09'))) {\n              ((std/core/types/True() : bool ) as @pat@6@0: bool)\n                 -> \"\\x5Ct\";\n              ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n                  ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                     -> val @arg-x229@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                      ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                         -> val @arg-x281@0 : int\n                                  = std/core/char/int(c);\n                        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                      ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                         -> val @arg-x323@0 : int\n                                  = std/core/char/int(c);\n                        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                    });\n                });\n            });\n        });\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@12: bool)\n     -> (match ((std/core/char/(==)(c, '\\x27'))) {\n      ((std/core/types/True() : bool ) as @pat@13: bool)\n         -> \"\\x5C\\x27\";\n      ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n         -> (match ((std/core/char/(==)(c, '\\x22'))) {\n          ((std/core/types/True() : bool ) as @pat@15: bool)\n             -> \"\\x5C\\x22\";\n          ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n             -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n              ((std/core/types/True() : bool ) as @pat@17: bool)\n                 -> \"\\x5C\\x5C\";\n              ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n                 -> std/core/string/char/string(c);\n            });\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(<)(c, ' '))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> \"\\x5Cn\";\n        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n           -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n            ((std/core/types/True() : bool ) as @pat@4: bool)\n               -> \"\\x5Cr\";\n            ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n               -> (match ((std/core/char/(==)(c, '\\x09'))) {\n                ((std/core/types/True() : bool ) as @pat@6: bool)\n                   -> \"\\x5Ct\";\n                ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n                   -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n                    ((std/core/types/True() : bool ) as @pat@8: bool)\n                       -> val @arg-x229 : int\n                                = std/core/char/int(c);\n                      std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                    ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n                       -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                        ((std/core/types/True() : bool ) as @pat@10: bool)\n                           -> val @arg-x281 : int\n                                    = std/core/char/int(c);\n                          std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                        ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                           -> val @arg-x323 : int\n                                    = std/core/char/int(c);\n                          std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                      });\n                  });\n              });\n          });\n      });\n    (@pat@0: bool)\n       -> (match ((std/core/char/(>)(c, '~'))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n            ((std/core/types/True() : bool ) as @pat@2@0: bool)\n               -> \"\\x5Cn\";\n            ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n               -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n                ((std/core/types/True() : bool ) as @pat@4@0: bool)\n                   -> \"\\x5Cr\";\n                ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n                   -> (match ((std/core/char/(==)(c, '\\x09'))) {\n                    ((std/core/types/True() : bool ) as @pat@6@0: bool)\n                       -> \"\\x5Ct\";\n                    ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n                       -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n                        ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                           -> val @arg-x229@0 : int\n                                    = std/core/char/int(c);\n                          std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                        ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                           -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                            ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                               -> val @arg-x281@0 : int\n                                        = std/core/char/int(c);\n                              std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                            ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                               -> val @arg-x323@0 : int\n                                        = std/core/char/int(c);\n                              std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                          });\n                      });\n                  });\n              });\n          });\n        ((@skip std/core/types/False() : bool ) as @pat@12: bool)\n           -> (match ((std/core/char/(==)(c, '\\x27'))) {\n            ((std/core/types/True() : bool ) as @pat@13: bool)\n               -> \"\\x5C\\x27\";\n            ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n               -> (match ((std/core/char/(==)(c, '\\x22'))) {\n                ((std/core/types/True() : bool ) as @pat@15: bool)\n                   -> \"\\x5C\\x22\";\n                ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n                   -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n                    ((std/core/types/True() : bool ) as @pat@17: bool)\n                       -> \"\\x5C\\x5C\";\n                    ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n                       -> std/core/string/char/string(c);\n                  });\n              });\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/show-char\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/show-char"]}, {"name": {"op": "Var","id": "std/core/show/char/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\'"},"annotation": "genExpr: \"\\x27\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-char"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/show/show-char(c)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\'"},"annotation": "genExpr: \"\\x27\""}]},"annotation": "genExpr: std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/char/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/char/show"]}, {"name": {"op": "Var","id": "std/core/show/string/show","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10000","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/map<char,string,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/list","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/list"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/string/list(s)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/show-char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-char"}]},"annotation": "genExpr: std/core/list/map<char,string,(total :: E)>((std/core/string/list(s)), std/core/show/show-char)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10000"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\""},"annotation": "genExpr: \"\\x22\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10000","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10000","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"7","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"8","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"8","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"7","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10000) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\""},"annotation": "genExpr: \"\\x22\""}]},"annotation": "genExpr: std/core/types/(++)((match (xs@10000) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n  }), \"\\x22\")"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x22\", (std/core/types/(++)((match (xs@10000) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n    }), \"\\x22\")))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  val xs@10000 : (list :: V -> V)<string>\n        = std/core/list/map<char,string,(total :: E)>((std/core/string/list(s)), std/core/show/show-char);\n  std/core/types/(++)(\"\\x22\", (std/core/types/(++)((match (xs@10000) {\n        ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> \"\";\n        ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n           -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n      }), \"\\x22\")));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/string/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/string/show"]}, {"name": {"op": "Var","id": "std/core/show/sslice/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/show/string/show","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/string/show"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/sslice/string(s)"}]},"annotation": "genExpr: std/core/show/string/show((std/core/sslice/string(s)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: sslice/sslice){\n  std/core/show/string/show((std/core/sslice/string(s)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/show/sslice/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/show/sslice/show"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}