{"blocks":[{"label":"0([match_def@[mcore:[#139]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_main/@Hnd-fail@[mcore:[#139]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause0<a,main/fail,105,106>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause0<a,main/fail,105,106>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#139]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/fail","scrutinee":0,"clauses":[{"tag":"main/@Hnd-fail","target":1,"args":{"any":[0,1]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#944]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#140]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_main/@Hnd-fail@[mcore:[#140]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause0<a,main/fail,134,135>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause0<a,main/fail,134,135>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#140]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/fail","scrutinee":0,"clauses":[{"tag":"main/@Hnd-fail","target":4,"args":{"any":[0,1]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#945]","target":3,"args":{"any":[]}}}]},
{"label":"6([match_def@[mcore:[#141]#9]#10])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([match_main/@Hnd-flip@[mcore:[#141]#9]#11])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<bool,main/flip,162,163>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<bool,main/flip,162,163>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([mcore:[#141]#9])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/flip","scrutinee":0,"clauses":[{"tag":"main/@Hnd-flip","target":7,"args":{"any":[0,1]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#946]","target":6,"args":{"any":[]}}}]},
{"label":"9([match_def@[mcore:[#142]#12]#13])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_main/@Hnd-flip@[mcore:[#142]#12]#14])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,main/flip,186,187>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,main/flip,186,187>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([mcore:[#142]#12])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/flip","scrutinee":0,"clauses":[{"tag":"main/@Hnd-flip","target":10,"args":{"any":[0,1]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#947]","target":9,"args":{"any":[]}}}]},
{"label":"12([mcore:[#143]#15])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"13([mcore:[#146]#20])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"14([mcore:[#152]#28])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/fail :: (E, V) -> V)|(e :: E)>,(main/fail :: (E, V) -> V),a>(main/@tag-fail, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-fail)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/fail :: (E, V) -> V)|(e :: E)>,(main/fail :: (E, V) -> V),a>(main/@tag-fail, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"15([mcore:[#153]#35])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"16([mcore:[#156]#40])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"17([mcore:[#162]#48])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/flip :: (E, V) -> V)|(e :: E)>,(main/flip :: (E, V) -> V),a>(main/@tag-flip, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-flip)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/flip :: (E, V) -> V)|(e :: E)>,(main/flip :: (E, V) -> V),a>(main/@tag-flip, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":16}]},
{"label":"18([match_def@[mcore:[#163]#55]#56])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([match_main/@Hnd-fail@[mcore:[#163]#55]#57])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,314,315>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,314,315>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([mcore:[#163]#55])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/fail","scrutinee":0,"clauses":[{"tag":"main/@Hnd-fail","target":19,"args":{"any":[0,1]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#948]","target":18,"args":{"any":[]}}}]},
{"label":"21([match_def@[mcore:[#164]#58]#59])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([match_main/@Hnd-flip@[mcore:[#164]#58]#60])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,341,342>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,341,342>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([mcore:[#164]#58])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/flip","scrutinee":0,"clauses":[{"tag":"main/@Hnd-flip","target":22,"args":{"any":[0,1]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#949]","target":21,"args":{"any":[]}}}]},
{"label":"24([match_def@[mcore:[#173]#61]#62])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([#63])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(a,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (a: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(b,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (b: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@0@10002 : int;\nval y@0@10003 : int;\nval x@10000 : int;\nval y@10001 : int;\nstd/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(53, a)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":53},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@0@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(2809, b)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":2809},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[3,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@0@10002, y@0@10003)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10001\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(148877, c)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":148877},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10000, y@10001)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: 1000000007","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1000000007},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1000000007","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10000, y@10001)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(148877, c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10001\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@0@10002, y@0@10003)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(2809, b)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@0@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(53, a)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@0@10002 : int;\nval y@0@10003 : int;\nval x@10000 : int;\nval y@10001 : int;\nstd/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(a,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (a: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(b,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (b: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([mcore:[#173]#61])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple3","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple3","target":25,"args":{"any":[0,1,2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#950]","target":24,"args":{"any":[]}}}]},
{"label":"27([mcore:[#174]#74])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"28([mcore:[#175]#80])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"29([#99])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([k@[#100]#102])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"31([match_def@[#100]#104])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"32([k@[match_main/@Hnd-fail@[#100]#105]#107])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([#109])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([k@[#110]#112])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([#110])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 429) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 429) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"36([match_main/@Hnd-fail@[#100]#105])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) 429) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<429,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) 429) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<429,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":35,"args":{"any":[2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#951]","target":33,"args":{"any":[]}}}]},
{"label":"37([#100])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@0: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) 429) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<429,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@0: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) 429) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<429,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/fail","scrutinee":3,"clauses":[{"tag":"main/@Hnd-fail","target":36,"args":{"any":[2,3]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#952]","target":31,"args":{"any":[]}}}]},
{"label":"38([k@[k@[mcore:[#182]#84]#90]#98])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":37,"args":{"any":[1,2,3,4]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#953]","target":29,"args":{"any":[]}}}]},
{"label":"39([k@[mcore:[#182]#84]#90])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":38,"args":{"any":[]}},
{"op":"Jump","target":27}]},
{"label":"40([mcore:[#182]#84])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":39,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"41([mcore:[#183]#114])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"42([mcore:[#184]#120])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"43([#139])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([k@[#140]#142])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"45([match_def@[#140]#144])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([k@[match_main/@Hnd-flip@[#140]#145]#147])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([#149])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([k@[#150]#152])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([#150])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"50([match_main/@Hnd-flip@[#140]#145])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-flip) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-flip) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":49,"args":{"any":[2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#954]","target":47,"args":{"any":[]}}}]},
{"label":"51([#140])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/flip>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-flip((@pat@0@0: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/flip :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-flip) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-flip((@pat@0@0: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/flip :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-flip) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/flip>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/flip","scrutinee":3,"clauses":[{"tag":"main/@Hnd-flip","target":50,"args":{"any":[2,3]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#955]","target":45,"args":{"any":[]}}}]},
{"label":"52([k@[k@[mcore:[#192]#124]#130]#138])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":51,"args":{"any":[1,2,3,4]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#956]","target":43,"args":{"any":[]}}}]},
{"label":"53([k@[mcore:[#192]#124]#130])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":52,"args":{"any":[]}},
{"op":"Jump","target":41}]},
{"label":"54([mcore:[#192]#124])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":53,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":42}]},
{"label":"55([mcore:[#195]#154])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"56([mcore:[#198]#160])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"57([mcore:[#199]#166])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"58([#185])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([k@[#186]#188])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([match_def@[#186]#190])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"61([k@[match_main/@Hnd-fail@[#186]#191]#193])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([#195])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([k@[#196]#198])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([#196])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"65([match_main/@Hnd-fail@[#186]#191])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<int>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<int>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":64,"args":{"any":[2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#957]","target":62,"args":{"any":[]}}}]},
{"label":"66([#186])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<int>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"34\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"34\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<int>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/fail","scrutinee":3,"clauses":[{"tag":"main/@Hnd-fail","target":65,"args":{"any":[2,3]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#958]","target":60,"args":{"any":[]}}}]},
{"label":"67([k@[k@[mcore:[#206]#170]#176]#184])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":66,"args":{"any":[1,2,3,4]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#959]","target":58,"args":{"any":[]}}}]},
{"label":"68([k@[mcore:[#206]#170]#176])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":67,"args":{"any":[]}},
{"op":"Jump","target":56}]},
{"label":"69([mcore:[#206]#170])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":68,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":57}]},
{"label":"70([mcore:[#210]#200])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"71([mcore:[#213]#206])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"72([mcore:[#214]#212])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"73([#231])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([k@[#232]#234])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([match_def@[#232]#236])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([k@[match_main/@Hnd-flip@[#232]#237]#239])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([#241])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([k@[#242]#244])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"79([#242])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"80([match_main/@Hnd-flip@[#232]#237])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"43\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-flip) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-flip) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"43\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":79,"args":{"any":[2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#960]","target":77,"args":{"any":[]}}}]},
{"label":"81([#232])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<main/flip>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-flip) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"43\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"43\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-flip) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<main/flip>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/flip","scrutinee":3,"clauses":[{"tag":"main/@Hnd-flip","target":80,"args":{"any":[2,3]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#961]","target":75,"args":{"any":[]}}}]},
{"label":"82([k@[k@[mcore:[#222]#216]#222]#230])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":81,"args":{"any":[1,2,3,4]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#962]","target":73,"args":{"any":[]}}}]},
{"label":"83([k@[mcore:[#222]#216]#222])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":82,"args":{"any":[]}},
{"op":"Jump","target":71}]},
{"label":"84([mcore:[#222]#216])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":83,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":72}]},
{"label":"85([#254])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":69}]},
{"label":"86([k@[switch case for Bool(true)#250]#264])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"87([switch case for Bool(true)#250])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 1}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<int,(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n    val ev@10037 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10037) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<int>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"New","out":1,"targets":[85],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<int,(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n    val ev@10037 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10037) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<int>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 1}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":55}]},
{"label":"88([#274])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":84}]},
{"label":"89([#286])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([switch case for Bool(true)#288])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x38\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x38\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"91([k@[switch case for Bool(false)#290]#298])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([switch case for Bool(false)#290])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x38\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/choice((std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/choice((std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x38\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":99}]},
{"label":"93([switch default case#300])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([switch default case#289])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[92],"default":93}]},
{"label":"95([k@[switch case for Bool(false)#270]#284])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[90],"default":94}]},
{"label":"96([switch case for Bool(false)#270])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 1}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n    val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-flip) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> n;\n  ((@skip std/core/types/False() : bool ) as @pat@2@1: bool)\n     -> main/choice((std/core/int/int-sub(n, 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n    val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-flip) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"New","out":2,"targets":[88],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":95,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n    val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-flip) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n    val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-flip) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> n;\n  ((@skip std/core/types/False() : bool ) as @pat@2@1: bool)\n     -> main/choice((std/core/int/int-sub(n, 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 1}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":70}]},
{"label":"97([switch default case#301])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"98([switch default case#266])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[96],"default":97}]},
{"label":"99([mcore:[#227]#246])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[87],"default":98}]},
{"label":"100([mcore:[#238]#302])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/types/Tuple3"}]},
{"label":"101([mcore:[#243]#309])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"102([mcore:[#246]#315])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"103([mcore:[#247]#321])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"104([#340])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([k@[#341]#343])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"106([match_def@[#341]#345])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([k@[match_main/@Hnd-fail@[#341]#346]#348])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([#350])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"109([k@[#351]#353])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"110([#351])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 (int, int, int)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 (int, int, int)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"111([match_main/@Hnd-fail@[#341]#346])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<(int, int, int)>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<(int, int, int)>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":110,"args":{"any":[2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#963]","target":108,"args":{"any":[]}}}]},
{"label":"112([#341])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<(int, int, int)>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"51\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"51\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<(int, int, int)>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/fail","scrutinee":3,"clauses":[{"tag":"main/@Hnd-fail","target":111,"args":{"any":[2,3]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#964]","target":106,"args":{"any":[]}}}]},
{"label":"113([k@[k@[mcore:[#254]#325]#331]#339])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":112,"args":{"any":[1,2,3,4]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#965]","target":104,"args":{"any":[]}}}]},
{"label":"114([k@[mcore:[#254]#325]#331])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":113,"args":{"any":[]}},
{"op":"Jump","target":102}]},
{"label":"115([mcore:[#254]#325])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":114,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":103}]},
{"label":"116([k@[switch case for Bool(true)#378]#383])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"117([switch case for Bool(true)#378])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple3<int,int,int>(i, j, k)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple3<int,int,int>(i, j, k)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":100}]},
{"label":"118([#390])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":115}]},
{"label":"119([k@[switch case for Bool(false)#386]#400])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"120([switch case for Bool(false)#386])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<(int, int, int),(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n    val ev@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10041) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<(int, int, int)>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"New","out":1,"targets":[118],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<(int, int, int),(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n    val ev@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10041) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<(int, int, int)>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":101}]},
{"label":"121([switch default case#402])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"122([switch default case#385])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Switch","arg":0,"values":[false],"targets":[120],"default":121}]},
{"label":"123([k@[k@[k@[mcore:[#256]#355]#360]#368]#376])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@1@10024\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, j)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[4]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((std/core/int/int-add(x@1@10024, k)), s)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@1@10024, k)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[4]},"in":{"any":[4,0]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[4,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@1@10024, k)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((std/core/int/int-add(x@1@10024, k)), s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, j)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@1@10024\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[117],"default":122}]},
{"label":"124([k@[k@[mcore:[#256]#355]#360]#368])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/choice((std/core/int/int-sub(j, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(j, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[3]},"in":{"any":[0,3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":123,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(j, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/choice((std/core/int/int-sub(j, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":99}]},
{"label":"125([k@[mcore:[#256]#355]#360])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/choice((std/core/int/int-sub(i, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":124,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/choice((std/core/int/int-sub(i, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":99}]},
{"label":"126([mcore:[#256]#355])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/choice(n)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":125,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/choice(n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":99}]},
{"label":"127([mcore:[#260]#403])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause0"}]},
{"label":"128([mcore:[#262]#408])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to"}]},
{"label":"129([mcore:[#265]#414])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/protect"}]},
{"label":"130([k@[k@[mcore:[#274]#421]#425]#429])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10004, y@10005)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"BGN: genExpr: 1000000007","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1000000007},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1000000007","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10004, y@10005)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"131([k@[mcore:[#274]#421]#425])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":2,"value":false},
{"op":"Push","target":130,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"132([mcore:[#274]#421])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10004\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/True)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Push","target":131,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/True)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10004\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"133([method_apply@[mcore:[#277]#433]#439])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":132}]},
{"label":"134([mcore:[#277]#433])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n    val x@10004 : int;\n    val y@10005 : int;\n    (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n  }), k)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"New","out":2,"targets":[133],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n    val x@10004 : int;\n    val y@10005 : int;\n    (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n  }), k)","traced":{"any":[]}},
{"op":"Jump","target":129}]},
{"label":"135([method_apply@[mcore:[#279]#445]#448])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":134}]},
{"label":"136([mcore:[#279]#445])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n    (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n        val x@10004 : int;\n        val y@10005 : int;\n        (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n      }), k));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[135],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n    (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n        val x@10004 : int;\n        val y@10005 : int;\n        (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n      }), k));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":128}]},
{"label":"137([mcore:[#283]#457])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([mcore:[#288]#458])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause0"}]},
{"label":"139([mcore:[#290]#463])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to"}]},
{"label":"140([mcore:[#293]#469])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/protect"}]},
{"label":"141([mcore:[#296]#476])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"142([method_apply@[mcore:[#299]#478]#484])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":141}]},
{"label":"143([mcore:[#299]#478])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n    0;\n  }), k@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"New","out":2,"targets":[142],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n    0;\n  }), k@0)","traced":{"any":[]}},
{"op":"Jump","target":140}]},
{"label":"144([method_apply@[mcore:[#301]#490]#493])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":143}]},
{"label":"145([mcore:[#301]#490])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n    (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n        0;\n      }), k@0));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[144],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n    (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n        0;\n      }), k@0));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":139}]},
{"label":"146([mcore:[#305]#502])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"147([mcore:[#310]#503])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"148([match_def@[mcore:[#320]#509]#510])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"149([#511])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(a,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (a: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(b,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (b: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@1@10008 : int;\nval y@1@10009 : int;\nval x@0@10006 : int;\nval y@0@10007 : int;\nstd/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@1@10008\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(53, a)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":53},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@1@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(2809, b)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":2809},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[3,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10006\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@1@10008, y@1@10009)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@0@10007\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(148877, c)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":148877},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@0@10006, y@0@10007)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: 1000000007","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1000000007},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1000000007","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@0@10006, y@0@10007)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(148877, c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@0@10007\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@1@10008, y@1@10009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10006\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(2809, b)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@1@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(53, a)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@1@10008\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@1@10008 : int;\nval y@1@10009 : int;\nval x@0@10006 : int;\nval y@0@10007 : int;\nstd/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(a,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (a: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(b,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (b: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"150([mcore:[#320]#509])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple3","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple3","target":149,"args":{"any":[0,1,2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#966]","target":148,"args":{"any":[]}}}]},
{"label":"151([method_apply@[k@[mcore:[#323]#522]#530]#533])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":150}]},
{"label":"152([k@[mcore:[#323]#522]#530])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n    (match (@pat-x25_10) {\n      ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n         -> val x@1@10008 : int;\n            val y@1@10009 : int;\n            val x@0@10006 : int;\n            val y@0@10007 : int;\n        std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n    });\n  }), @x-x1@10030)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[151],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n    (match (@pat-x25_10) {\n      ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n         -> val x@1@10008 : int;\n            val y@1@10009 : int;\n            val x@0@10006 : int;\n            val y@0@10007 : int;\n        std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n    });\n  }), @x-x1@10030)","traced":{"any":[]}},
{"op":"Jump","target":147}]},
{"label":"153([mcore:[#323]#522])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/triple(n, s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":152,"args":{"any":[]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/triple(n, s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":126}]},
{"label":"154([method_apply@[mcore:[#325]#539]#545])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":145}]},
{"label":"155([#562])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":146}]},
{"label":"156([#566])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Jump","target":153}]},
{"label":"157([k@[k@[mcore:[#325]#539]#555]#558])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":3,"targets":[155],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[156],"args":{"any":[1,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-fail)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":14}]},
{"label":"158([k@[mcore:[#325]#539]#555])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":157,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":190}]},
{"label":"159([mcore:[#325]#539])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n              0;\n            }), k@0));\n        })));\n    }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n    @x@0;\n  }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n    val @x-x1@10030 : (int, int, int)\n          = (main/triple(n, s));\n    (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n        (match (@pat-x25_10) {\n          ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n             -> val x@1@10008 : int;\n                val y@1@10009 : int;\n                val x@0@10006 : int;\n                val y@0@10007 : int;\n            std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n        });\n      }), @x-x1@10030));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n        (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n            0;\n          }), k@0));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 3","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":3},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[154],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":158,"args":{"any":[3,4,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 3","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n        (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n            0;\n          }), k@0));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n              0;\n            }), k@0));\n        })));\n    }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n    @x@0;\n  }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n    val @x-x1@10030 : (int, int, int)\n          = (main/triple(n, s));\n    (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n        (match (@pat-x25_10) {\n          ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n             -> val x@1@10008 : int;\n                val y@1@10009 : int;\n                val x@0@10006 : int;\n                val y@0@10007 : int;\n            std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n        });\n      }), @x-x1@10030));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":138}]},
{"label":"160([method_apply@[mcore:[#327]#582]#588])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":136}]},
{"label":"161([#605])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":137}]},
{"label":"162([#609])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-fail)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":0,"b":4},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Jump","target":159}]},
{"label":"163([k@[k@[mcore:[#327]#582]#598]#601])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":3,"targets":[161],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[162],"args":{"any":[1,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-flip)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":17}]},
{"label":"164([k@[mcore:[#327]#582]#598])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":163,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":191}]},
{"label":"165([mcore:[#327]#582])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-flip<int,(div :: X),int>((main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n          (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n              val x@10004 : int;\n              val y@10005 : int;\n              (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n            }), k));\n        })));\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/flip :: (E, V) -> V),(div :: X)>>(){\n    (main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n              (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n                  0;\n                }), k@0));\n            })));\n        }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n        @x@0;\n      }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n        val @x-x1@10030 : (int, int, int)\n              = (main/triple(n, s));\n        (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n            (match (@pat-x25_10) {\n              ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n                 -> val x@1@10008 : int;\n                    val y@1@10009 : int;\n                    val x@0@10006 : int;\n                    val y@0@10007 : int;\n                std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n            });\n          }), @x-x1@10030));\n      })));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n        (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n            val x@10004 : int;\n            val y@10005 : int;\n            (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n          }), k));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 3","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":3},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n          val x@10004 : int;\n          val y@10005 : int;\n          (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n        }), k));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":3,"targets":[160],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":164,"args":{"any":[0,1,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n          val x@10004 : int;\n          val y@10005 : int;\n          (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n        }), k));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 3","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n        (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n            val x@10004 : int;\n            val y@10005 : int;\n            (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n          }), k));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-flip<int,(div :: X),int>((main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n          (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n              val x@10004 : int;\n              val y@10005 : int;\n              (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n            }), k));\n        })));\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/flip :: (E, V) -> V),(div :: X)>>(){\n    (main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n              (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n                  0;\n                }), k@0));\n            })));\n        }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n        @x@0;\n      }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n        val @x-x1@10030 : (int, int, int)\n              = (main/triple(n, s));\n        (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n            (match (@pat-x25_10) {\n              ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n                 -> val x@1@10008 : int;\n                    val y@1@10009 : int;\n                    val x@0@10006 : int;\n                    val y@0@10007 : int;\n                std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n            });\n          }), @x-x1@10030));\n      })));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":127}]},
{"label":"166([mcore:[#328]#628])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/os/env/get-args"}]},
{"label":"167([mcore:[#330]#632])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/parse-int"}]},
{"label":"168([mcore:[#338]#638])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"169([mcore:[#340]#643])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"170([k@[k@[k@[#667]#670]#685]#690])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":168}]},
{"label":"171([k@[k@[#667]#670]#685])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":170,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Jump","target":169}]},
{"label":"172([k@[#667]#670])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-fail)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(main/@tag-flip)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":171,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":165}]},
{"label":"173([match_def@[match_def@[#667]#695]#696])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"174([#697])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"175([match_def@[#667]#695])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":174,"args":{"any":[0]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#967]","target":173,"args":{"any":[]}}}]},
{"label":"176([match_std/core/types/Nothing@[#667]#698])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 10","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":10},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 10","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"177([#667])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (m@10010) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":172,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10010) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":176,"args":{"any":[]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#968]","target":175,"args":{"any":[]}}}]},
{"label":"178([match_def@[#701]#702])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"179([match_std/core/types/Just@[#701]#703])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"180([#701])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":179,"args":{"any":[0]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#969]","target":178,"args":{"any":[]}}}]},
{"label":"181([#704])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 10","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":10},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 10","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"182([k@[k@[k@[mcore:[#344]#648]#653]#655]#665])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/run((match (m@10010) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x;\n  }), (match (m@10010) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n       -> x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (m@10010) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":177,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10010) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/run((match (m@10010) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x;\n  }), (match (m@10010) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n       -> x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":181,"args":{"any":[]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#970]","target":180,"args":{"any":[]}}}]},
{"label":"183([k@[k@[mcore:[#344]#648]#653]#655])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":182,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":167}]},
{"label":"184([#708])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"185([#709])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"186([match_def@[k@[mcore:[#344]#648]#653]#707])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":185,"args":{"any":[]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#971]","target":184,"args":{"any":[]}}}]},
{"label":"187([#712])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"188([k@[mcore:[#344]#648]#653])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/parse-int((match (xs@10012) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10012) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":183,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10012) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/parse-int((match (xs@10012) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":187,"args":{"any":[1,2]}}],"default":{"tag":"65c40995-8f08-43c6-9c65-3df0d6cd9f99#[Missing Tag#972]","target":186,"args":{"any":[]}}}]},
{"label":"189([mcore:[#344]#648])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":188,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":166}]},
{"label":"190([mcore:[#345]#581])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"main/fail","tag":"main/@Hnd-fail","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"191([mcore:[#346]#627])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"main/flip","tag":"main/@Hnd-flip","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"192([#931])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"main/@tag-flip"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_d3a99ad8-925d-4c32-b7e3-e008802a3500"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"193([k@[k@[k@[k@[#885]#895]#905]#915]#922])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[2]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":2,"value":"main/@tag-fail"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/@tag-flip)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"main/@tag-flip\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(main/flip :: (E, V) -> V)>(\"flip@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"flip@main\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"flip@main"},
{"op":"Push","target":192,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"flip@main\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(main/flip :: (E, V) -> V)>(\"flip@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"main/@tag-flip\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":15}]},
{"label":"194([k@[k@[k@[#885]#895]#905]#915])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/@tag-fail)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"main/@tag-fail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(main/fail :: (E, V) -> V)>(\"fail@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"fail@main\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"fail@main"},
{"op":"Push","target":193,"args":{"any":[1,0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"fail@main\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(main/fail :: (E, V) -> V)>(\"fail@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"main/@tag-fail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":12}]},
{"label":"195([k@[k@[#885]#895]#905])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#138]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_os_env.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"Push","target":194,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"196([k@[#885]#895])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#137]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":195,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"197([#885])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#136]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":196,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"198([k@[k@[k@[k@[#835]#845]#855]#865]#875])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#135]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":197,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"199([k@[k@[k@[#835]#845]#855]#865])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#134]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":198,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"200([k@[k@[#835]#845]#855])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#133]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":199,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"201([k@[#835]#845])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#132]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":200,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"202([#835])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#131]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":201,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"203([k@[k@[k@[k@[#785]#795]#805]#815]#825])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#130]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":202,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"204([k@[k@[k@[#785]#795]#805]#815])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#129]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":203,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"205([k@[k@[#785]#795]#805])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#128]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":204,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"206([k@[#785]#795])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#127]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":205,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"207([#785])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#126]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":206,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"208([k@[k@[k@[k@[#735]#745]#755]#765]#775])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#125]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":207,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"209([k@[k@[k@[#735]#745]#755]#765])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#124]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":208,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"210([k@[k@[#735]#745]#755])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#123]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":209,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"211([k@[#735]#745])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#122]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":210,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"212([#735])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#121]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":211,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"213([k@[mcore:[static initializers#389]#715]#725])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#120]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":212,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"214([mcore:[static initializers#389]#715])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#119]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":213,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"215([k@[main entrypoint#2]#941])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"216([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":215,"args":{"any":[]}},
{"op":"Jump","target":214}]}],
"symbols":[{"name":"main/fail/@cfc","position":2},
{"name":"main/fail/@ctl-fail","position":5},
{"name":"main/flip/@cfc","position":8},
{"name":"main/flip/@ctl-flip","position":11},
{"name":"main/@handle-fail","position":14},
{"name":"main/@handle-flip","position":17},
{"name":"main/@select-fail","position":20},
{"name":"main/@select-flip","position":23},
{"name":"main/hash","position":26},
{"name":"main/fail","position":40},
{"name":"main/flip","position":54},
{"name":"main/choice","position":99},
{"name":"main/triple","position":126},
{"name":"main/run","position":165},
{"name":"main/main","position":189},
{"name":"main/@Hnd-fail","position":190},
{"name":"main/@Hnd-flip","position":191},
{"name":"$static-init","position":214},
{"name":"$entrypoint","position":216}],
"frameSize":{"regs_any":16}}