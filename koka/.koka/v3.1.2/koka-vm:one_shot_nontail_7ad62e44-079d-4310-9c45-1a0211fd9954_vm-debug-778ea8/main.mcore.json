{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "main"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_os_env.rpyeffect"}}}, {"name": {"op": "Var","id": "main/func/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/func"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "func@0","type": {"op": "Ptr","extern_ptr_name": "main/func"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "func@0","type": {"op": "Ptr","extern_ptr_name": "main/func"}},"type_tag": "main/func","clauses": [{"tag": "main/@Hnd-func","params": [{"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-func\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"func@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<(),main/func,71,72>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"func@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}}: \"main/func\".\"main/@Hnd-func\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(func@0: (main/func :: (E, V) -> V)<(e :: E),a>){\n  (match (func@0) {\n    ((@skip main/@Hnd-func((@x: int) : int, (@pat@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/func :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/func/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/func/@cfc"]}, {"name": {"op": "Var","id": "main/func/@ctl-func","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/func"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "func@0","type": {"op": "Ptr","extern_ptr_name": "main/func"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "func@0","type": {"op": "Ptr","extern_ptr_name": "main/func"}},"type_tag": "main/func","clauses": [{"tag": "main/@Hnd-func","params": [{"op": "Var","id": "@\"@cfc\"2","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-func\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-func\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: hnd/clause0<(),main/func,95,96>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"func@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<(),main/func,95,96>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"func@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}}: \"main/func\".\"main/@Hnd-func\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(func@0: (main/func :: (E, V) -> V)<(e :: E),a>){\n  (match (func@0) {\n    ((@skip main/@Hnd-func((@pat@0: int) : int, (@x: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/func :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/func/@ctl-func\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/func/@ctl-func"]}, {"name": {"op": "Var","id": "main/@tag-func","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/func :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "func@main"},"annotation": "genExpr: \"func@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/func :: (E, V) -> V)>(\"func@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-func\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-func"]}, {"name": {"op": "Var","id": "main/@handle-func","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/func"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/func"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/func :: (E, V) -> V)|(e :: E)>,(main/func :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-func","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-func"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/func"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/func :: (E, V) -> V)|(e :: E)>,(main/func :: (E, V) -> V),a>(main/@tag-func, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/func :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/func :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/func :: (E, V) -> V)|(e :: E)>,(main/func :: (E, V) -> V),b>(main/@tag-func, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-func\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-func"]}, {"name": {"op": "Var","id": "main/@select-func","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/func"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/func"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/func"}},"type_tag": "main/func","clauses": [{"tag": "main/@Hnd-func","params": [{"op": "Var","id": "@\"@cfc\"4","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-func\"5","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-func\"5","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-func: hnd/clause0<(),main/func,168,169>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-func"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-func,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,168,169>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}}: \"main/func\".\"main/@Hnd-func\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (main/func :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip main/@Hnd-func((@pat@0: int) : int, (@ctl-func: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/func :: (E, V) -> V)<(e :: E),a>))\n       -> @ctl-func;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-func\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/func\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-func"]}, {"name": {"op": "Var","id": "main/after","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  std/core/types/Unit;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/after\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/after"]}, {"name": {"op": "Var","id": "main/func","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10010","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/func :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10010"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10010","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"6","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"8","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"8","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/func<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/func","clauses": [{"tag": "main/@Hnd-func","params": [{"op": "Var","id": "@\"@cfc\"10","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-func\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-func\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"12","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"12","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/func>) -> 1005 ()) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10010","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10010"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10010)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/func>) -> 1005 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-func) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (1005 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10010);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/func<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-func,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/func<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/func\".\"main/@Hnd-func\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-func((@pat@0@0: int) : int, (@ctl-func: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/func :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-func) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (1005 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10010);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/func>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/func<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/func :: (E, V) -> V)>(){\n  val ev@10010 : (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/func :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10010) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/func :: (E, V) -> V)<(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-func((@pat@0@0: int) : int, (@ctl-func: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/func :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-func) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10010);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/func\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/func"]}, {"name": {"op": "Var","id": "main/inner","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10012","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/func :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10012"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10012","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"15","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"15","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/func<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/func","clauses": [{"tag": "main/@Hnd-func","params": [{"op": "Var","id": "@\"@cfc\"17","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-func\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-func\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"19","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"19","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/func>) -> 1005 ()) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10012","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10012"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10012)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/func>) -> 1005 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-func) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (1005 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10012);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/func<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-func,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-func: hnd/clause0<(),main/func,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-func\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/func<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/func\".\"main/@Hnd-func\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-func\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-func((@pat@0@0: int) : int, (@ctl-func: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/func :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-func) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (1005 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10012);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/func>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/func<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/func :: (E, V) -> V)>(){\n  val ev@10012 : (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/func :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10012) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/func :: (E, V) -> V)<(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-func((@pat@0@0: int) : int, (@ctl-func: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>) : (main/func :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/func :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-func) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>) -> (e :: E) ()) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(main/func :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<(),(main/func :: (E, V) -> V),(e :: E),(main/func :: (E, V) -> V),a>(f)(m, ev@10012);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/inner\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/inner"]}, {"name": {"op": "Var","id": "main/loop","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/inner","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/inner"},"args": []},"annotation": "genExpr: main/inner()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/loop","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/loop"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: main/loop((std/core/int/int-sub(n, 1)))"}},"annotation": "genExpr: val _ : ()\n      = main/inner();\nmain/loop((std/core/int/int-sub(n, 1)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/func :: (E, V) -> V),(div :: X)>>(n: int){\n  match ((std/core/int/(>)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val _ : ()\n                = main/inner();\n      main/loop((std/core/int/int-sub(n, 1)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/loop\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/loop"]}, {"name": {"op": "Var","id": "main/outer","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-func","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/func"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-func<(),(div :: X),()>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-func","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/func"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-func<(div :: X),()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<(),(main/func :: (E, V) -> V),(div :: X),()>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<(),(div :: X),()>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),(),(div :: X),()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Unit"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Unit"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}]},"annotation": "genExpr: r(std/core/types/Unit)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/after","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/after"},"args": []},"annotation": "genExpr: main/after()"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n  val _ : ()\n        = r(std/core/types/Unit);\n  main/after();\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n    val _ : ()\n          = (r(std/core/types/Unit));\n    (main/after());\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n  std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n      val _ : ()\n            = (r(std/core/types/Unit));\n      (main/after());\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<(),(div :: X),()>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n    (std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n        val _ : ()\n              = (r(std/core/types/Unit));\n        (main/after());\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>){\n  std/core/hnd/yield-to<(),(div :: X),()>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n      (std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n          val _ : ()\n                = (r(std/core/types/Unit));\n          (main/after());\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<(),(main/func :: (E, V) -> V),(div :: X),()>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<(),(div :: X),()>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n      (std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n          val _ : ()\n                = (r(std/core/types/Unit));\n          (main/after());\n        }), k));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-func<(div :: X),()>(3, (std/core/hnd/Clause0<(),(main/func :: (E, V) -> V),(div :: X),()>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<(),(div :: X),()>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n        (std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n            val _ : ()\n                  = (r(std/core/types/Unit));\n            (main/after());\n          }), k));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Unit"}}],"body": {"op": "Var","id": "x","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(x: ()){\n  x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/loop","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/loop"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: main/loop(n)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/func :: (E, V) -> V),(div :: X)>>(){\n  main/loop(n);\n}"}]},"annotation": "genExpr: main/@handle-func<(),(div :: X),()>((main/@Hnd-func<(div :: X),()>(3, (std/core/hnd/Clause0<(),(main/func :: (E, V) -> V),(div :: X),()>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<(),(div :: X),()>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n          (std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n              val _ : ()\n                    = (r(std/core/types/Unit));\n              (main/after());\n            }), k));\n        })));\n    }))))), (fn<(div :: X)>(x: ()){\n    x;\n  }), (fn<<(main/func :: (E, V) -> V),(div :: X)>>(){\n    (main/loop(n));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int){\n  main/@handle-func<(),(div :: X),()>((main/@Hnd-func<(div :: X),()>(3, (std/core/hnd/Clause0<(),(main/func :: (E, V) -> V),(div :: X),()>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/func :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<(),(div :: X),()>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<(),()>) -> (div :: X) ()){\n            (std/core/hnd/protect<(),(),(div :: X),()>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (()) -> (div :: X) ()){\n                val _ : ()\n                      = (r(std/core/types/Unit));\n                (main/after());\n              }), k));\n          })));\n      }))))), (fn<(div :: X)>(x: ()){\n      x;\n    }), (fn<<(main/func :: (E, V) -> V),(div :: X)>>(){\n      (main/loop(n));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/outer\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/outer"]}, {"name": {"op": "Var","id": "main/run","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/outer","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/outer"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: main/outer(n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Literal","type": {"op": "Int"},"value": 0}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int){\n  val _ : ()\n        = main/outer(n);\n  0;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/run\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/run"]}, {"name": {"op": "Var","id": "main/main","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10002","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"name": "std/os/env/get-args","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/get-args"},"args": []},"annotation": "genExpr: std/os/env/get-args()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10002"]}, {"name": {"op": "Var","id": "m@10000","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/parse-int"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10002","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"20","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"21","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"20","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"20\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"20\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10002","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10002) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}]},"annotation": "genExpr: std/core/int/parse-int((match (xs@10002) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["m@10000"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/outer","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/outer"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10000","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 5},"annotation": "genExpr: 5"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10000","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"22","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"22","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"22\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"22\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10000) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}"}]},"annotation": "genExpr: main/outer((match (m@10000) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/show"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/int/show(0)"}]},"annotation": "genExpr: std/core/console/printsln((std/core/int/show(0)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X),(div :: X),(ndet :: X)>>(){\n  val xs@10002 : (list :: V -> V)<string>;\n  val m@10000 : (maybe :: V -> V)<int>;\n  val _ : ();\n  std/core/console/printsln((std/core/int/show(0)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/main\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/main"]}, {"name": {"op": "Var","id": "main/@Hnd-func","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/func"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-func","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "Construct","type_tag": "main/func","tag": "main/@Hnd-func","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-func","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-func"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}