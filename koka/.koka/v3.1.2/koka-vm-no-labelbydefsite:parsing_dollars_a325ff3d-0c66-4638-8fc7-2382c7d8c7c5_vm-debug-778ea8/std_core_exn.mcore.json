{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/exn"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/exn/is-exnError","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnError","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnError\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnError() : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@0: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnError\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnError"]}, {"name": {"op": "Var","id": "std/core/exn/is-exnAssert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnAssert","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnAssert\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnAssert() : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@0: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnAssert\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnAssert"]}, {"name": {"op": "Var","id": "std/core/exn/is-exnTodo","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnTodo","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnTodo\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnTodo() : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@0: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnTodo\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnTodo"]}, {"name": {"op": "Var","id": "std/core/exn/is-exnRange","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnRange","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnRange\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnRange() : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@0: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnRange\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnRange"]}, {"name": {"op": "Var","id": "std/core/exn/is-exnPattern","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnPattern","params": [{"op": "Var","id": "@\"location\"0","type": {"op": "String"}}, {"op": "Var","id": "@\"definition\"1","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"location\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"location\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"definition\\\"1\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"definition\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnPattern\"(({\"op\": \"Var\",\"id\": \"@\\\"location\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"definition\\\"1\",\"type\": {\"op\": \"String\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnPattern((@pat@0: string) : string, (@pat@1: string) : string) : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@2: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnPattern\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnPattern"]}, {"name": {"op": "Var","id": "std/core/exn/is-exnSystem","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnSystem","params": [{"op": "Var","id": "@\"errno\"2","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"errno\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"errno\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnSystem\"(({\"op\": \"Var\",\"id\": \"@\\\"errno\\\"2\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnSystem((@pat@0: int) : int) : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@1: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnSystem\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnSystem"]}, {"name": {"op": "Var","id": "std/core/exn/is-exnInternal","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception-info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"type_tag": "std/core/exn/exception-info","clauses": [{"tag": "std/core/exn/ExnInternal","params": [{"op": "Var","id": "@\"name\"3","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"name\\\"3\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"name\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnInternal\"(({\"op\": \"Var\",\"id\": \"@\\\"name\\\"3\",\"type\": {\"op\": \"String\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception-info: exception-info){\n  match (exception-info) {\n    ((std/core/exn/ExnInternal((@pat@0: string) : string) : exception-info ) as @pat: exception-info)\n       -> std/core/types/True;\n    (@pat@1: exception-info)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-exnInternal\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-exnInternal"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnError","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnError"},"annotation": "genExpr: \"std/core/exn/ExnError\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnError\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnError"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnAssert","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnAssert"},"annotation": "genExpr: \"std/core/exn/ExnAssert\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnAssert\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnAssert"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnTodo","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnTodo"},"annotation": "genExpr: \"std/core/exn/ExnTodo\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnTodo\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnTodo"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnRange","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnRange"},"annotation": "genExpr: \"std/core/exn/ExnRange\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnRange\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnRange"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnPattern","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnPattern"},"annotation": "genExpr: \"std/core/exn/ExnPattern\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnPattern\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnPattern"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnSystem","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnSystem"},"annotation": "genExpr: \"std/core/exn/ExnSystem\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnSystem\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnSystem"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-ExnInternal","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "std/core/exn/ExnInternal"},"annotation": "genExpr: \"std/core/exn/ExnInternal\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnInternal\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/exn/@tag-ExnInternal"]}, {"name": {"op": "Var","id": "std/core/exn/exception/message","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"4","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"5","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"message\"4","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception: exception){\n  match (exception) {\n    ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0: exception-info) : exception-info) : exception ) as @pat: exception)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exception/message\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exception/message"]}, {"name": {"op": "Var","id": "std/core/exn/exception/info","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exception","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"6","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"info\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"annotation": "genTest: normal: (@x: exception-info) -> {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"6\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@x: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"6\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exception: exception){\n  match (exception) {\n    ((@skip std/core/exn/Exception((@pat@0: string) : string, (@x: exception-info) : exception-info) : exception ) as @pat: exception)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exception/info\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exception/info"]}, {"name": {"op": "Var","id": "std/core/exn/exception/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}, {"op": "Var","id": "message","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/Exception","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/Exception"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "message","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"8","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"8","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-message@229: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-message@229"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-message@229,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-message@229: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "message","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"9","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"10","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"message\"9","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (message) {\n  ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-message@229;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"11","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"11","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-info@236: exception-info) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-info@236"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-info@236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-info@236: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"12","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"info\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"annotation": "genTest: normal: (@x@0: exception-info) -> {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"12\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@x@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"12\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (info) {\n  ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n     -> @uniq-info@236;\n  ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n     -> (match (@this) {\n      ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n         -> @x@0;\n    });\n}"}]},"annotation": "genExpr: std/core/exn/Exception((match (message) {\n    ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-message@229;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n           -> @x;\n      });\n  }), (match (info) {\n    ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n       -> @uniq-info@236;\n    ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n       -> (match (@this) {\n        ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n           -> @x@0;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@this: exception, message: ? string, info: ? exception-info){\n  std/core/exn/Exception((match (message) {\n      ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n         -> @uniq-message@229;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n         -> (match (@this) {\n          ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n             -> @x;\n        });\n    }), (match (info) {\n      ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n         -> @uniq-info@236;\n      ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n         -> (match (@this) {\n          ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n             -> @x@0;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exception/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exception/@copy"]}, {"name": {"op": "Var","id": "std/core/exn/is-error","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "error","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "error","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Error","params": [{"op": "Var","id": "@\"exception\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"15","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"15\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"15\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(error: (error :: V -> V)<a>){\n  (match (error) {\n    ((std/core/exn/Error(((@skip std/core/exn/Exception((@pat@1: string) : string, (@pat@2: exception-info) : exception-info) : exception ) as @pat@0: exception) : exception) : (error :: V -> V)<a> ) as @pat: ((error :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@3: ((error :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-error\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-error"]}, {"name": {"op": "Var","id": "std/core/exn/is-ok","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "error","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "error","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Ok","params": [{"op": "Var","id": "@\"result\"17","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 265) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"17\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(error: (error :: V -> V)<a>){\n  (match (error) {\n    ((std/core/exn/Ok((@pat@0: a) : a) : (error :: V -> V)<a> ) as @pat: ((error :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@1: ((error :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/is-ok\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/is-ok"]}, {"name": {"op": "Var","id": "std/core/exn/exn/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"18","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"19","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"18","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause1<exception,a,exn,292,293>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(exn@0: (exn :: (E, V) -> V)<(e :: E),a>){\n  (match (exn@0) {\n    ((@skip std/core/exn/@Hnd-exn((@x: int) : int, (@pat@0: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat: ((exn :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exn/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exn/@cfc"]}, {"name": {"op": "Var","id": "std/core/exn/exn/@brk-throw-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"20","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@x: forall<a> hnd/clause1<exception,a,exn,321,322>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @x<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<exception,a,exn,321,322>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,b> fn(exn@0: (exn :: (E, V) -> V)<(e :: E),a>){\n  (match (exn@0) {\n    ((@skip std/core/exn/@Hnd-exn((@pat@0: int) : int, (@x: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat: ((exn :: (E, V) -> V)<(e :: E),a>))\n       -> @x<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exn/@brk-throw-exn\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exn/@brk-throw-exn"]}, {"name": {"op": "Var","id": "std/core/exn/@tag-exn","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(exn :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "exn@exn"},"annotation": "genExpr: \"exn@exn\""}]},"annotation": "genExpr: std/core/hnd/Htag<(exn :: (E, V) -> V)>(\"exn@exn\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-exn\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["std/core/exn/@tag-exn"]}, {"name": {"op": "Var","id": "std/core/exn/@handle-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@tag-exn","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/core/exn/@tag-exn"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V),a>(std/core/exn/@tag-exn, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (exn :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(exn :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V),b>(std/core/exn/@tag-exn, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@handle-exn\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/@handle-exn"]}, {"name": {"op": "Var","id": "std/core/exn/@select-throw-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"22","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,404,405>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @brk-throw-exn<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,404,405>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(hnd: (exn :: (E, V) -> V)<(e :: E),b>){\n  (match (hnd) {\n    ((@skip std/core/exn/@Hnd-exn((@pat@0: int) : int, (@brk-throw-exn: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (exn :: (E, V) -> V)<(e :: E),b> ) as @pat: ((exn :: (E, V) -> V)<(e :: E),b>))\n       -> @brk-throw-exn<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@select-throw-exn\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/@select-throw-exn"]}, {"name": {"op": "Var","id": "std/core/exn/default","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}, {"op": "Var","id": "def","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Error","params": [{"op": "Var","id": "@\"exception\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"25","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"26","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "def","type": {"op": "Top"}},"annotation": "genExpr: def"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"25\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"25\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Ok","params": [{"op": "Var","id": "@\"result\"27","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"27","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 431) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 431) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(t: (error :: V -> V)<a>, def: a){\n  (match (t) {\n    ((std/core/exn/Error(((@skip std/core/exn/Exception((@pat@1: string) : string, (@pat@2: exception-info) : exception-info) : exception ) as @pat@0: exception) : exception) : (error :: V -> V)<a> ) as @pat: ((error :: V -> V)<a>))\n       -> def;\n    ((@skip std/core/exn/Ok((x: a) : a) : (error :: V -> V)<a> ) as @pat@3: ((error :: V -> V)<a>))\n       -> x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/default\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/default"]}, {"name": {"op": "Var","id": "std/core/exn/either","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Error","params": [{"op": "Var","id": "@\"exception\"28","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"28","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"29","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"30","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Left","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Left<exception,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"28","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"annotation": "genExpr: exn@0"}]},"annotation": "genExpr: std/core/types/Left<exception,a>(exn@0)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(exn@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"29\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@1: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"29\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Ok","params": [{"op": "Var","id": "@\"result\"31","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Right","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Right<exception,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"31","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 469) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Right<exception,a>(x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 469) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(t: (error :: V -> V)<a>){\n  (match (t) {\n    ((std/core/exn/Error(((@skip std/core/exn/Exception((@pat@0: string) : string, (@pat@1: exception-info) : exception-info) : exception ) as exn@0: exception) : exception) : (error :: V -> V)<a> ) as @pat: ((error :: V -> V)<a>))\n       -> std/core/types/Left<exception,a>(exn@0);\n    ((@skip std/core/exn/Ok((x: a) : a) : (error :: V -> V)<a> ) as @pat@2: ((error :: V -> V)<a>))\n       -> std/core/types/Right<exception,a>(x);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/either\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/either"]}, {"name": {"op": "Var","id": "std/core/exn/maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Error","params": [{"op": "Var","id": "@\"exception\"32","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"32","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"33","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"34","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"33\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"33\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Ok","params": [{"op": "Var","id": "@\"result\"35","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"35","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 497) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(t: (error :: V -> V)<a>){\n  (match (t) {\n    ((std/core/exn/Error(((@skip std/core/exn/Exception((@pat@1: string) : string, (@pat@2: exception-info) : exception-info) : exception ) as @pat@0: exception) : exception) : (error :: V -> V)<a> ) as @pat: ((error :: V -> V)<a>))\n       -> std/core/types/Nothing<a>;\n    ((@skip std/core/exn/Ok((x: a) : a) : (error :: V -> V)<a> ) as @pat@3: ((error :: V -> V)<a>))\n       -> std/core/types/Just<a>(x);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/maybe"]}, {"name": {"op": "Var","id": "std/core/exn/on-exit","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hndler","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/finally-prompt","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/finally-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "hndler","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: hndler"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/hnd/finally-prompt<a,(e :: E)>(hndler, (action()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(hndler: () -> (e :: E) (), action: () -> (e :: E) a){\n  std/core/hnd/finally-prompt<a,(e :: E)>(hndler, (action()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/on-exit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/on-exit"]}, {"name": {"op": "Var","id": "std/core/exn/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"36","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"37","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"message\"36","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exn@0: exception){\n  match (exn@0) {\n    ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0: exception-info) : exception-info) : exception ) as @pat: exception)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/show"]}, {"name": {"op": "Var","id": "std/core/exn/throw-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10018","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10018"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10018","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"38","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"39","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"40","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"41","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"40","type": {"op": "Top"}},"annotation": "genTest: normal: (h: exn<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"42","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"43","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"43","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 581) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"39","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10018","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10018"}, {"op": "DebugWrap","inner": {"op": "Var","id": "exn@0","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genExpr: exn@0"}]},"annotation": "genExpr: f(m, ev@10018, exn@0)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 581) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 581) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,581,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10018, exn@0);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"42\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 581) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,581,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10018, exn@0);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(exn@0: exception){\n  val ev@10018 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10018) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (exn :: (E, V) -> V)<(e :: E),b>) : (exn :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (exn :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((exn :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@brk-throw-exn<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b>))\n               -> f(m, ev@10018, exn@0);\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/throw-exn\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/throw-exn"]}, {"name": {"op": "Var","id": "std/core/exn/exn/try","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "hndl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@handle-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@handle-exn<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@Hnd-exn","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@Hnd-exn<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "hndl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: hndl"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: hndl(x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n  hndl(x);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n    (hndl(x));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n      (hndl(x));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n      (hndl(x));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n      (hndl(x));\n    })));\n}))"}]},"annotation": "genExpr: std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n        (hndl(x));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Top"}}],"body": {"op": "Var","id": "@x","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@x: 661){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n          (hndl(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: 661){\n    @x;\n  }), action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(exn :: (E, V) -> V)|(e :: E)> a, hndl: (exception) -> (e :: E) a){\n  std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<b> std/core/hnd/Clause1<exception,b,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n        (std/core/hnd/yield-to-final<b,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<b,a>) -> (e :: E) a){\n            (hndl(x));\n          })));\n      }))))), (fn<(e :: E)>(@x: a){\n      @x;\n    }), action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exn/try\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exn/try"]}, {"name": {"op": "Var","id": "std/core/exn/try","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@handle-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@handle-exn<(error :: V -> V)<a>,(e :: E),(error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@Hnd-exn","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/Error","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/Error<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/exn/Error<a>(x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n  std/core/exn/Error<a>(x);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n    (std/core/exn/Error<a>(x));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<a>(x));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<a>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<a>(x));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<b>(x));\n    })));\n}))"}]},"annotation": "genExpr: std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n        (std/core/exn/Error<b>(x));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "Var","id": "@x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@x: (error :: V -> V)<701>){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/Ok","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/Ok<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/exn/Ok<a>((action()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(exn :: (E, V) -> V)|(e :: E)>>(){\n  std/core/exn/Ok<a>((action()));\n}"}]},"annotation": "genExpr: std/core/exn/@handle-exn<(error :: V -> V)<a>,(e :: E),(error :: V -> V)<a>>((std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n          (std/core/exn/Error<b>(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: (error :: V -> V)<701>){\n    @x;\n  }), (fn<<(exn :: (E, V) -> V)|(e :: E)>>(){\n    (std/core/exn/Ok<a>((action())));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(exn :: (E, V) -> V)|(e :: E)> a){\n  std/core/exn/@handle-exn<(error :: V -> V)<a>,(e :: E),(error :: V -> V)<a>>((std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<b> std/core/hnd/Clause1<exception,b,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<a>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),(error :: V -> V)<a>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n        (std/core/hnd/yield-to-final<b,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<b,(error :: V -> V)<a>>) -> (e :: E) (error :: V -> V)<a>){\n            (std/core/exn/Error<a>(x));\n          })));\n      }))))), (fn<(e :: E)>(@x: (error :: V -> V)<a>){\n      @x;\n    }), (fn<<(exn :: (E, V) -> V)|(e :: E)>>(){\n      (std/core/exn/Ok<a>((action())));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/try\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/try"]}, {"name": {"op": "Var","id": "std/core/exn/catch","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "hndl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@handle-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@handle-exn<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/@Hnd-exn","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@Hnd-exn<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "hndl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: hndl"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: hndl(x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n  hndl(x);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n    (hndl(x));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n      (hndl(x));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n      (hndl(x));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n      (hndl(x));\n    })));\n}))"}]},"annotation": "genExpr: std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n        (hndl(x));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Top"}}],"body": {"op": "Var","id": "@x","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@x: 731){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n          (hndl(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: 731){\n    @x;\n  }), action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(exn :: (E, V) -> V)|(e :: E)> a, hndl: (exception) -> (e :: E) a){\n  std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<b> std/core/hnd/Clause1<exception,b,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n        (std/core/hnd/yield-to-final<b,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<b,a>) -> (e :: E) a){\n            (hndl(x));\n          })));\n      }))))), (fn<(e :: E)>(@x: a){\n      @x;\n    }), action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/catch\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/catch"]}, {"name": {"op": "Var","id": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10024","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10024"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10024","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"46","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"48","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"49","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"48","type": {"op": "Top"}},"annotation": "genTest: normal: (h: exn<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"50","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x52","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x52","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"53","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"53","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 759) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10024","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10024"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/Exception","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/Exception"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message","type": {"op": "String"}},"annotation": "genExpr: message"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"54","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"54","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-info@743: exception-info) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-info@743"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-info@743,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-info@743: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/ExnError","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"annotation": "genExpr: std/core/exn/ExnError"}}]},"annotation": "genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (info) {\n  ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n     -> @uniq-info@743;\n  ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n     -> std/core/exn/ExnError;\n}"}]},"annotation": "genExpr: std/core/exn/Exception(message, (match (info) {\n    ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n       -> @uniq-info@743;\n    ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n       -> std/core/exn/ExnError;\n  }))"}]},"annotation": "genExpr: f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n      ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n         -> @uniq-info@743;\n      ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n         -> std/core/exn/ExnError;\n    }))))"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 759) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 759) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,759,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n          ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n             -> @uniq-info@743;\n          ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n             -> std/core/exn/ExnError;\n        }))));\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 759) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,759,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n              ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n                 -> @uniq-info@743;\n              ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n                 -> std/core/exn/ExnError;\n            }))));\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(message: string, info: ? exception-info){\n  val ev@10024 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10024) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (exn :: (E, V) -> V)<(e :: E),b>) : (exn :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (exn :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((exn :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@brk-throw-exn<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b>))\n               -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n                    ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n                       -> @uniq-info@743;\n                    ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n                       -> std/core/exn/ExnError;\n                  }))));\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/throw\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/throw"]}, {"name": {"op": "Var","id": "std/core/exn/error-pattern","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "location","type": {"op": "String"}}, {"op": "Var","id": "definition","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "message@10008","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "location","type": {"op": "String"}},"annotation": "genExpr: location"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ": "},"annotation": "genExpr: \": \""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "definition","type": {"op": "String"}},"annotation": "genExpr: definition"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ": pattern match failure"},"annotation": "genExpr: \": pattern match failure\""}]},"annotation": "genExpr: std/core/types/(++)(definition, \": pattern match failure\")"}]},"annotation": "genExpr: std/core/types/(++)(\": \", (std/core/types/(++)(definition, \": pattern match failure\")))"}]},"annotation": "genExpr: std/core/types/(++)(location, (std/core/types/(++)(\": \", (std/core/types/(++)(definition, \": pattern match failure\")))))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"message@10008\",\"type\": {\"op\": \"String\"}}"},"export_as": ["message@10008"]}, {"name": {"op": "Var","id": "ev@10027","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10027"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10027","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"57","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"58","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"57","type": {"op": "Top"}},"annotation": "genTest: normal: (h: exn<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"59","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x61","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"62","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"62","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 820) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10027","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10027"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/Exception","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/Exception"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message@10008","type": {"op": "String"}},"annotation": "genExpr: message@10008"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/ExnPattern","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/ExnPattern"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "location","type": {"op": "String"}},"annotation": "genExpr: location"}, {"op": "DebugWrap","inner": {"op": "Var","id": "definition","type": {"op": "String"}},"annotation": "genExpr: definition"}]},"annotation": "genExpr: std/core/exn/ExnPattern(location, definition)"}]},"annotation": "genExpr: std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))"}]},"annotation": "genExpr: f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))))"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 820) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 820) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,820,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"59\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"59\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 820) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,820,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(location: string, definition: string){\n  val message@10008 : string;\n  val ev@10027 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>;\n  (match (ev@10027) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (exn :: (E, V) -> V)<(e :: E),b>) : (exn :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (exn :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((exn :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@brk-throw-exn<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b>))\n               -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/error-pattern\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/error-pattern"]}, {"name": {"op": "Var","id": "std/core/exn/untry","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "err","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "err","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Error","params": [{"op": "Var","id": "@\"exception\"63","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"63","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"type_tag": "std/core/exn/exception","clauses": [{"tag": "std/core/exn/Exception","params": [{"op": "Var","id": "@\"message\"64","type": {"op": "String"}}, {"op": "Var","id": "@\"info\"65","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10030","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10030"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10030","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"66","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"67","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"68","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"69","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"68","type": {"op": "Top"}},"annotation": "genTest: normal: (h: exn<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"70","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"71","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x72","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"71","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x72","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"73","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"73","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 846) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"67","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10030","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10030"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"exception\"63","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}"},"annotation": "genExpr: exn@0"}]},"annotation": "genExpr: f(m, ev@10030, exn@0)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10030, exn@0);\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"70\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"70\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10030, exn@0);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev@10030) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (exn :: (E, V) -> V)<(e :: E),a>) : (exn :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@brk-throw-exn<b>)) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10030, exn@0);\n        });\n    });\n}"}},"annotation": "genExpr: val ev@10030 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@10030) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (exn :: (E, V) -> V)<(e :: E),a>) : (exn :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@brk-throw-exn<b>)) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10030, exn@0);\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(exn@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"64\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@1: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"64\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "err","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"type_tag": "std/core/exn/error","clauses": [{"tag": "std/core/exn/Ok","params": [{"op": "Var","id": "@\"result\"74","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"74","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: 846) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(err: (error :: V -> V)<a>){\n  (match (err) {\n    ((std/core/exn/Error(((@skip std/core/exn/Exception((@pat@0: string) : string, (@pat@1: exception-info) : exception-info) : exception ) as exn@0: exception) : exception) : (error :: V -> V)<a> ) as @pat: ((error :: V -> V)<a>))\n       -> val ev@10030 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n                = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n      (match (ev@10030) {\n        ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (exn :: (E, V) -> V)<(e :: E),b>) : (exn :: (E, V) -> V)<(e :: E),b>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n           -> (match (h) {\n            ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (exn :: (E, V) -> V)<(e :: E),b> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),b>))\n               -> (match ((@brk-throw-exn<a>)) {\n                ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b>))\n                   -> f(m, ev@10030, exn@0);\n              });\n          });\n      });\n    ((@skip std/core/exn/Ok((x@0: a) : a) : (error :: V -> V)<a> ) as @pat@2@1: ((error :: V -> V)<a>))\n       -> x@0;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/untry\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/untry"]}, {"name": {"op": "Var","id": "std/core/exn/exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "err","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/untry","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/error"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/untry<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "err","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"}},"annotation": "genExpr: err"}]},"annotation": "genExpr: std/core/exn/untry<a>(err)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(err: (error :: V -> V)<a>){\n  std/core/exn/untry<a>(err);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exn\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exn"]}, {"name": {"op": "Var","id": "std/core/exn/exn-error-range","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10033","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10033"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10033","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"75","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"76","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"77","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"78","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"77","type": {"op": "Top"}},"annotation": "genTest: normal: (h: exn<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/exn/exn","clauses": [{"tag": "std/core/exn/@Hnd-exn","params": [{"op": "Var","id": "@\"@cfc\"79","type": {"op": "Int"}}, {"op": "Var","id": "@\"@brk-throw-exn\"80","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x81","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@brk-throw-exn\"80","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x81","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"82","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"82","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 887) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"76","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10033","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10033"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/Exception","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/Exception"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "index out-of-range"},"annotation": "genExpr: \"index out-of-range\""}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/exn/ExnRange","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"annotation": "genExpr: std/core/exn/ExnRange"}]},"annotation": "genExpr: std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)"}]},"annotation": "genExpr: f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)))"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 887) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 887) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,887,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 887) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,887,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(){\n  val ev@10033 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10033) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (exn :: (E, V) -> V)<(e :: E),b>) : (exn :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,c,(exn :: (E, V) -> V),(e :: E),b>)) : (exn :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((exn :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@brk-throw-exn<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b>))\n               -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/exn/exn-error-range\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/exn/exn-error-range"]}, {"name": {"op": "Var","id": "std/core/exn/ExnError","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnError","args": []},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnError"]}, {"name": {"op": "Var","id": "std/core/exn/ExnAssert","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnAssert","args": []},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnAssert"]}, {"name": {"op": "Var","id": "std/core/exn/ExnTodo","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnTodo","args": []},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnTodo"]}, {"name": {"op": "Var","id": "std/core/exn/ExnRange","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnRange","args": []},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnRange"]}, {"name": {"op": "Var","id": "std/core/exn/ExnPattern","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "location","type": {"op": "String"}}, {"op": "Var","id": "definition","type": {"op": "String"}}],"body": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnPattern","args": [{"op": "Var","id": "location","type": {"op": "String"}}, {"op": "Var","id": "definition","type": {"op": "String"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnPattern"]}, {"name": {"op": "Var","id": "std/core/exn/ExnSystem","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "errno","type": {"op": "Int"}}],"body": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnSystem","args": [{"op": "Var","id": "errno","type": {"op": "Int"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnSystem"]}, {"name": {"op": "Var","id": "std/core/exn/ExnInternal","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "name","type": {"op": "String"}}],"body": {"op": "Construct","type_tag": "std/core/exn/exception-info","tag": "std/core/exn/ExnInternal","args": [{"op": "Var","id": "name","type": {"op": "String"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/ExnInternal"]}, {"name": {"op": "Var","id": "std/core/exn/Exception","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}],"body": {"op": "Construct","type_tag": "std/core/exn/exception","tag": "std/core/exn/Exception","args": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "info","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/Exception"]}, {"name": {"op": "Var","id": "std/core/exn/Error","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exception","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "Construct","type_tag": "std/core/exn/error","tag": "std/core/exn/Error","args": [{"op": "Var","id": "exception","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/Error"]}, {"name": {"op": "Var","id": "std/core/exn/Ok","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "result","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/exn/error","tag": "std/core/exn/Ok","args": [{"op": "Var","id": "result","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/Ok"]}, {"name": {"op": "Var","id": "std/core/exn/@Hnd-exn","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@brk-throw-exn","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "Construct","type_tag": "std/core/exn/exn","tag": "std/core/exn/@Hnd-exn","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@brk-throw-exn","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}]}},"annotation": "genConstr"},"export_as": ["std/core/exn/@Hnd-exn"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}