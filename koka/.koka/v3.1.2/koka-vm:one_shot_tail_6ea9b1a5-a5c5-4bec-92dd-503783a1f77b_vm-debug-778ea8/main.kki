module interface main
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/os/env = std/os/env = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// ctl func
// ```
recursive effect type func[5,1,5,11] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-func[5,1,5,11](@cfc: std/core/types/int, @ctl-func: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) -> (func :: (E, V) -> V)<(e :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:func` type.
 fun func/@cfc[5,1,5,11] : forall<(e :: E),a> (^ func : (func :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@ctl-func` constructor field of the `:func` type.
 fun func/@ctl-func[6,7,6,18] : forall<(e :: E),a> (^ func : (func :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:func`
val @tag-func[5,1,5,11] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(func :: (E, V) -> V)>;
// handler for the effect `:func`
 fun @handle-func[5,8,5,11] : forall<a,(e :: E),b> (hnd : (func :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `func` operation out of effect `:func`
 fun @select-func[6,7,6,18] : forall<(e :: E),a> (^ hnd : (func :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>;
// Call the `ctl func` operation of the effect `:func`
 fun func[6,7,6,10] : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>> ();
 fun inner[8,14,8,18] : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>> ();
 fun loop[11,14,11,17] : (n : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>> ();
 fun outer[18,14,18,18] : (n : std/core/types/int) -> <(std/core/types/div :: X)> ();
 fun run[25,5,25,7] : (n : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
pub  fun main[29,9,29,12] : () -> <(std/core/console/console :: X),(std/core/types/div :: X),(std/core/types/ndet :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun func/@cfc // inline size: 0
  = forall<(e :: E),a> fn(func@0: (func :: (E, V) -> V)<(e :: E),a>){
    (match (func@0) {
      ((@skip main/@Hnd-func((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) : (func :: (E, V) -> V)<(e :: E),a> ) as @pat: ((func :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun func/@ctl-func // inline size: 0
  = forall<(e :: E),a> fn(func@0: (func :: (E, V) -> V)<(e :: E),a>){
    (match (func@0) {
      ((@skip main/@Hnd-func((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) : (func :: (E, V) -> V)<(e :: E),a> ) as @pat: ((func :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-func // inline size: 0
  = forall<(e :: E),a> fn(hnd: (func :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip main/@Hnd-func((@pat@0: std/core/types/int) : std/core/types/int, (@ctl-func: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(func :: (E, V) -> V),(e :: E),a>) : (func :: (E, V) -> V)<(e :: E),a> ) as @pat: ((func :: (E, V) -> V)<(e :: E),a>))
         -> @ctl-func;
    });
  };
inline  fun func // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>>>(){
    std/core/hnd/@perform0<(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>>,(func :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(func :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(func :: (E, V) -> V)>>((std/core/hnd/@evv-at<(func :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(func :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), main/@select-func);
  };
 fun run // inline size: 1
  = fn<<(std/core/types/div :: X)>>(n: std/core/types/int){
    val _[26,3,26,10] : ()
          = main/outer(n);
    0;
  };