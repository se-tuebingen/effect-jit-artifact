{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "main"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_os_env.rpyeffect"}}}, {"name": {"op": "Var","id": "main/fail/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/fail"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fail@0","type": {"op": "Ptr","extern_ptr_name": "main/fail"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fail@0","type": {"op": "Ptr","extern_ptr_name": "main/fail"}},"type_tag": "main/fail","clauses": [{"tag": "main/@Hnd-fail","params": [{"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause0<a,main/fail,105,106>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(fail@0: (main/fail :: (E, V) -> V)<(e :: E),a>){\n  (match (fail@0) {\n    ((@skip main/@Hnd-fail((@x: int) : int, (@pat@0: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/fail/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/fail/@cfc"]}, {"name": {"op": "Var","id": "main/fail/@ctl-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/fail"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fail@0","type": {"op": "Ptr","extern_ptr_name": "main/fail"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fail@0","type": {"op": "Ptr","extern_ptr_name": "main/fail"}},"type_tag": "main/fail","clauses": [{"tag": "main/@Hnd-fail","params": [{"op": "Var","id": "@\"@cfc\"2","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: forall<a> hnd/clause0<a,main/fail,134,135>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause0<a,main/fail,134,135>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fail@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,b> fn(fail@0: (main/fail :: (E, V) -> V)<(e :: E),a>){\n  (match (fail@0) {\n    ((@skip main/@Hnd-fail((@pat@0: int) : int, (@x: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n       -> @x<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/fail/@ctl-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/fail/@ctl-fail"]}, {"name": {"op": "Var","id": "main/flip/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/flip"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "flip@0","type": {"op": "Ptr","extern_ptr_name": "main/flip"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "flip@0","type": {"op": "Ptr","extern_ptr_name": "main/flip"}},"type_tag": "main/flip","clauses": [{"tag": "main/@Hnd-flip","params": [{"op": "Var","id": "@\"@cfc\"4","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-flip\"5","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"4","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<bool,main/flip,162,163>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(flip@0: (main/flip :: (E, V) -> V)<(e :: E),a>){\n  (match (flip@0) {\n    ((@skip main/@Hnd-flip((@x: int) : int, (@pat@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/flip/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/flip/@cfc"]}, {"name": {"op": "Var","id": "main/flip/@ctl-flip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/flip"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "flip@0","type": {"op": "Ptr","extern_ptr_name": "main/flip"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "flip@0","type": {"op": "Ptr","extern_ptr_name": "main/flip"}},"type_tag": "main/flip","clauses": [{"tag": "main/@Hnd-flip","params": [{"op": "Var","id": "@\"@cfc\"6","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-flip\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-flip\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: hnd/clause0<bool,main/flip,186,187>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,main/flip,186,187>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"flip@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(flip@0: (main/flip :: (E, V) -> V)<(e :: E),a>){\n  (match (flip@0) {\n    ((@skip main/@Hnd-flip((@pat@0: int) : int, (@x: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/flip/@ctl-flip\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/flip/@ctl-flip"]}, {"name": {"op": "Var","id": "main/@tag-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/fail :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "fail@main"},"annotation": "genExpr: \"fail@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/fail :: (E, V) -> V)>(\"fail@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-fail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-fail"]}, {"name": {"op": "Var","id": "main/@handle-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/fail"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/fail"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/fail :: (E, V) -> V)|(e :: E)>,(main/fail :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-fail"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/fail"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/fail :: (E, V) -> V)|(e :: E)>,(main/fail :: (E, V) -> V),a>(main/@tag-fail, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/fail :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/fail :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/fail :: (E, V) -> V)|(e :: E)>,(main/fail :: (E, V) -> V),b>(main/@tag-fail, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-fail"]}, {"name": {"op": "Var","id": "main/@tag-flip","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/flip :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "flip@main"},"annotation": "genExpr: \"flip@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/flip :: (E, V) -> V)>(\"flip@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-flip\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-flip"]}, {"name": {"op": "Var","id": "main/@handle-flip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/flip"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/flip"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/flip :: (E, V) -> V)|(e :: E)>,(main/flip :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-flip","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-flip"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/flip"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/flip :: (E, V) -> V)|(e :: E)>,(main/flip :: (E, V) -> V),a>(main/@tag-flip, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/flip :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/flip :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/flip :: (E, V) -> V)|(e :: E)>,(main/flip :: (E, V) -> V),b>(main/@tag-flip, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-flip\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-flip"]}, {"name": {"op": "Var","id": "main/@select-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/fail"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/fail"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/fail"}},"type_tag": "main/fail","clauses": [{"tag": "main/@Hnd-fail","params": [{"op": "Var","id": "@\"@cfc\"8","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,314,315>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-fail<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,314,315>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(hnd: (main/fail :: (E, V) -> V)<(e :: E),b>){\n  (match (hnd) {\n    ((@skip main/@Hnd-fail((@pat@0: int) : int, (@ctl-fail: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/fail :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/fail :: (E, V) -> V),(e :: E),b>)) : (main/fail :: (E, V) -> V)<(e :: E),b> ) as @pat: ((main/fail :: (E, V) -> V)<(e :: E),b>))\n       -> @ctl-fail<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/fail\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-fail"]}, {"name": {"op": "Var","id": "main/@select-flip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/flip"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/flip"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/flip"}},"type_tag": "main/flip","clauses": [{"tag": "main/@Hnd-flip","params": [{"op": "Var","id": "@\"@cfc\"10","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-flip\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-flip\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,341,342>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-flip"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,341,342>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (main/flip :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip main/@Hnd-flip((@pat@0: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n       -> @ctl-flip;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-flip\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/flip\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-flip"]}, {"name": {"op": "Var","id": "main/hash","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x25_10","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x25_10","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"12","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"13","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"14","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@0@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 53}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"12","type": {"op": "Top"}},"annotation": "genTest: normal: (a: int) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(53, a)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10002"]}, {"name": {"op": "Var","id": "y@0@10003","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 2809}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"13","type": {"op": "Top"}},"annotation": "genTest: normal: (b: int) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(2809, b)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0@10003\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@0@10003"]}, {"name": {"op": "Var","id": "x@10000","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@0@10002","type": {"op": "Int"}}, {"op": "Var","id": "y@0@10003","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@0@10002, y@0@10003)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10000\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10000"]}, {"name": {"op": "Var","id": "y@10001","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 148877}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"14","type": {"op": "Top"}},"annotation": "genTest: normal: (c: int) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(148877, c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10001\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10001"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mod(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10000","type": {"op": "Int"}}, {"op": "Var","id": "y@10001","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10000, y@10001)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1000000007},"annotation": "genExpr: 1000000007"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007)"}},"annotation": "genExpr: val x@0@10002 : int;\nval y@0@10003 : int;\nval x@10000 : int;\nval y@10001 : int;\nstd/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(a,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (a: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(b,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (b: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"14\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@pat-x25_10: (int, int, int)){\n  match (@pat-x25_10) {\n    ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n       -> val x@0@10002 : int;\n          val y@0@10003 : int;\n          val x@10000 : int;\n          val y@10001 : int;\n      std/core/int/(%)((std/core/int/int-add(x@10000, y@10001)), 1000000007);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/hash\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/hash"]}, {"name": {"op": "Var","id": "main/fail","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10033","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10033"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10033","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"15","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"17","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"17","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/fail<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/fail","clauses": [{"tag": "main/@Hnd-fail","params": [{"op": "Var","id": "@\"@cfc\"19","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"20","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"20","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"22","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"22","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 429) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10033","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10033"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 429) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) 429) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<429,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@0: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) 429) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<429,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10033);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(main/fail :: (E, V) -> V)>(){\n  val ev@10033 : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10033) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (main/fail :: (E, V) -> V)<(e :: E),b>) : (main/fail :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-fail((@pat@0@0: int) : int, (@ctl-fail: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/fail :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/fail :: (E, V) -> V),(e :: E),b>)) : (main/fail :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@ctl-fail<a>)) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(e :: E),b>))\n               -> std/core/hnd/cast-clause0<a,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),b>(f)(m, ev@10033);\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/fail\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/fail"]}, {"name": {"op": "Var","id": "main/flip","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10035","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10035"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10035","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"25","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"26","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"25","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/flip<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/flip","clauses": [{"tag": "main/@Hnd-flip","params": [{"op": "Var","id": "@\"@cfc\"27","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-flip\"28","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-flip\"28","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"29","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"29","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10035","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10035"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"29\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-flip) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-flip((@pat@0@0: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/flip :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-flip) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/flip>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10035\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/flip :: (E, V) -> V)>(){\n  val ev@10035 : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10035) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-flip((@pat@0@0: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-flip) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f)(m, ev@10035);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/flip\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/flip"]}, {"name": {"op": "Var","id": "main/choice","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<int,(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10037"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"30","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"32","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"33","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"32","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/fail<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/fail","clauses": [{"tag": "main/@Hnd-fail","params": [{"op": "Var","id": "@\"@cfc\"34","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"35","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x36","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"35","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x36","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"37","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"37","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 int) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10037"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"37\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<int>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"34\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<int>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/fail :: (E, V) -> V)>(){\n  val ev@10037 : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10037) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n           -> (match ((@ctl-fail<int>)) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<int,(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n    val ev@10037 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10037) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<int>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n            });\n        });\n    });\n  }))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 1}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x38","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/core/types/@make-ssize_t(1)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@0@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@0@10039"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@0@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"39","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"40","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"41","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"41","type": {"op": "Top"}},"annotation": "genTest: normal: (h@0: main/flip<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/flip","clauses": [{"tag": "main/@Hnd-flip","params": [{"op": "Var","id": "@\"@cfc\"43","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-flip\"44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-flip\"44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"40","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@0@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@0@10039"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039)"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<main/flip>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-flip) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"43\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-flip,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-flip: hnd/clause0<bool,main/flip,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-flip\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/flip\".\"main/@Hnd-flip\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"43\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-flip\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@0) {\n  ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-flip) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<main/flip>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/flip<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"41\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/flip :: (E, V) -> V)>(){\n  val ev@0@10039 : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@0@10039) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n       -> (match (h@0) {\n        ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-flip) {\n            ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n    val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-flip) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n            });\n        });\n    });\n  }))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x38","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x38\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x38","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/choice","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/choice"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: main/choice((std/core/int/int-sub(n, 1)))"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x38\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n    val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-flip) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> n;\n  ((@skip std/core/types/False() : bool ) as @pat@2@1: bool)\n     -> main/choice((std/core/int/int-sub(n, 1)));\n}"}}]},"annotation": "genBranch: [(@pat@0@1@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 1}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>(n: int){\n  match ((std/core/int/(<)(n, 1))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/@open-at0<int,(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n          val ev@10037 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@10037) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n               -> (match (h) {\n                ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n                   -> (match ((@ctl-fail<int>)) {\n                    ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) int) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int,(main/fail :: (E, V) -> V),(e :: E),a>))\n                       -> std/core/hnd/cast-clause0<int,(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10037);\n                  });\n              });\n          });\n        }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n       -> (match ((std/core/hnd/@open-at0<bool,(main/flip :: (E, V) -> V),<(main/flip :: (E, V) -> V),(main/fail :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/flip :: (E, V) -> V)>(){\n          val ev@0@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(main/flip :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@0@10039) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/flip :: (E, V) -> V)<(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>))\n               -> (match (h@0) {\n                ((@skip main/@Hnd-flip((@pat@0@3: int) : int, (@ctl-flip: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>) : (main/flip :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/flip :: (E, V) -> V)<(e :: E),a>))\n                   -> (match (@ctl-flip) {\n                    ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/flip :: (E, V) -> V),(e :: E),a>))\n                       -> std/core/hnd/cast-clause0<bool,(main/flip :: (E, V) -> V),(e :: E),(main/flip :: (E, V) -> V),a>(f@0)(m@0, ev@0@10039);\n                  });\n              });\n          });\n        })))) {\n        ((std/core/types/True() : bool ) as @pat@1@1: bool)\n           -> n;\n        ((@skip std/core/types/False() : bool ) as @pat@2@1: bool)\n           -> main/choice((std/core/int/int-sub(n, 1)));\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/choice\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/choice"]}, {"name": {"op": "Var","id": "main/triple","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "s","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/choice","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/choice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: main/choice(n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}, {"name": {"op": "Var","id": "j","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/choice","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/choice"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(i, 1)"}]},"annotation": "genExpr: main/choice((std/core/int/int-sub(i, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["j"]}, {"name": {"op": "Var","id": "k","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/choice","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/choice"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "j","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(j, 1)"}]},"annotation": "genExpr: main/choice((std/core/int/int-sub(j, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["k"]}, {"name": {"op": "Var","id": "x@1@10024","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, j)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@1@10024\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@1@10024"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@1@10024","type": {"op": "Int"}}, {"op": "Var","id": "k","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@1@10024, k)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Int"}},"annotation": "genExpr: s"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((std/core/int/int-add(x@1@10024, k)), s)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple3","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple3<int,int,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Int"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/types/Tuple3<int,int,int>(i, j, k)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<(int, int, int),(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10041","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10041"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10041","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"48","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"49","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"50","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"49","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/fail<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/fail","clauses": [{"tag": "main/@Hnd-fail","params": [{"op": "Var","id": "@\"@cfc\"51","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"52","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"52","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"54","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"54","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 (int, int, int)) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"48","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10041","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10041"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/fail>) -> 1005 (int, int, int)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"54\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<(int, int, int)>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/fail,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/fail\".\"main/@Hnd-fail\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"51\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/fail :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<(int, int, int)>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (1005 :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/fail>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/fail<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/fail :: (E, V) -> V)>(){\n  val ev@10041 : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10041) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n           -> (match ((@ctl-fail<(int, int, int)>)) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<(int, int, int),(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n    val ev@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10041) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<(int, int, int)>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n            });\n        });\n    });\n  }))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>(n: int, s: int){\n  val i : int;\n  val j : int;\n  val k : int;\n  val x@1@10024 : int;\n  match ((std/core/int/(==)((std/core/int/int-add(x@1@10024, k)), s))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Tuple3<int,int,int>(i, j, k);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/hnd/@open-at0<(int, int, int),(main/fail :: (E, V) -> V),<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), (fn<(main/fail :: (E, V) -> V)>(){\n          val ev@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(main/fail :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@10041) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/fail :: (E, V) -> V)<(e :: E),a>) : (main/fail :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>))\n               -> (match (h) {\n                ((@skip main/@Hnd-fail((@pat@0@1: int) : int, (@ctl-fail: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/fail :: (E, V) -> V),(e :: E),a>)) : (main/fail :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/fail :: (E, V) -> V)<(e :: E),a>))\n                   -> (match ((@ctl-fail<(int, int, int)>)) {\n                    ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>) -> (e :: E) (int, int, int)) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),a>))\n                       -> std/core/hnd/cast-clause0<(int, int, int),(main/fail :: (E, V) -> V),(e :: E),(main/fail :: (E, V) -> V),a>(f)(m, ev@10041);\n                  });\n              });\n          });\n        }));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/triple\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/triple"]}, {"name": {"op": "Var","id": "main/run","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "s","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-flip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/flip"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-flip<int,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-flip","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/flip"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-flip<(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<bool,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),bool,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10004","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}]},"annotation": "genExpr: r(std/core/types/True)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10004\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10004"]}, {"name": {"op": "Var","id": "y@10005","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}]},"annotation": "genExpr: r(std/core/types/False)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10005\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10005"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mod(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10004","type": {"op": "Int"}}, {"op": "Var","id": "y@10005","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10004, y@10005)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1000000007},"annotation": "genExpr: 1000000007"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n  val x@10004 : int;\n  val y@10005 : int;\n  std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n    val x@10004 : int;\n    val y@10005 : int;\n    (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n  std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n      val x@10004 : int;\n      val y@10005 : int;\n      (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n    (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n        val x@10004 : int;\n        val y@10005 : int;\n        (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n  std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n          val x@10004 : int;\n          val y@10005 : int;\n          (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n          val x@10004 : int;\n          val y@10005 : int;\n          (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n        }), k));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n        (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n            val x@10004 : int;\n            val y@10005 : int;\n            (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n          }), k));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Int"}}],"body": {"op": "Var","id": "@x","type": {"op": "Int"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(@x: int){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/fail"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-fail","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/fail"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55@0","type": {"op": "Unit"}}, {"op": "Var","id": "r@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "Literal","type": {"op": "Int"},"value": 0}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n  0;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: k@0"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n    0;\n  }), k@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n  std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      0;\n    }), k@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n    (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n        0;\n      }), k@0));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<726,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (726) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          0;\n        }), k@0));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n        (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n            0;\n          }), k@0));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x@0","type": {"op": "Int"}}],"body": {"op": "Var","id": "@x@0","type": {"op": "Int"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n  @x@0;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10030","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/triple","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: main/triple"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Int"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: main/triple(n, s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}"},"export_as": ["@x-x1@10030"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x25_10","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x25_10","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"55","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"57","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@1@10008","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 53}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"55","type": {"op": "Top"}},"annotation": "genTest: normal: (a: int) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(53, a)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@1@10008\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@1@10008"]}, {"name": {"op": "Var","id": "y@1@10009","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 2809}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}},"annotation": "genTest: normal: (b: int) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(2809, b)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@1@10009\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@1@10009"]}, {"name": {"op": "Var","id": "x@0@10006","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@1@10008","type": {"op": "Int"}}, {"op": "Var","id": "y@1@10009","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@1@10008, y@1@10009)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10006\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10006"]}, {"name": {"op": "Var","id": "y@0@10007","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 148877}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"57","type": {"op": "Top"}},"annotation": "genTest: normal: (c: int) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(148877, c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0@10007\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@0@10007"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mod(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@0@10006","type": {"op": "Int"}}, {"op": "Var","id": "y@0@10007","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@0@10006, y@0@10007)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1000000007},"annotation": "genExpr: 1000000007"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007)"}},"annotation": "genExpr: val x@1@10008 : int;\nval y@1@10009 : int;\nval x@0@10006 : int;\nval y@0@10007 : int;\nstd/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(a,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (a: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(b,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (b: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x25_10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"57\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@pat-x25_10: (int, int, int)){\n  match (@pat-x25_10) {\n    ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n       -> val x@1@10008 : int;\n          val y@1@10009 : int;\n          val x@0@10006 : int;\n          val y@0@10007 : int;\n      std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10030","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"annotation": "genExpr: @x-x1@10030"}]},"annotation": "genExpr: std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n    (match (@pat-x25_10) {\n      ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n         -> val x@1@10008 : int;\n            val y@1@10009 : int;\n            val x@0@10006 : int;\n            val y@0@10007 : int;\n        std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n    });\n  }), @x-x1@10030)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n  val @x-x1@10030 : (int, int, int)\n        = main/triple(n, s);\n  std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n      (match (@pat-x25_10) {\n        ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n           -> val x@1@10008 : int;\n              val y@1@10009 : int;\n              val x@0@10006 : int;\n              val y@0@10007 : int;\n          std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n      });\n    }), @x-x1@10030);\n}"}]},"annotation": "genExpr: main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n          (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n              0;\n            }), k@0));\n        })));\n    }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n    @x@0;\n  }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n    val @x-x1@10030 : (int, int, int)\n          = (main/triple(n, s));\n    (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n        (match (@pat-x25_10) {\n          ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n             -> val x@1@10008 : int;\n                val y@1@10009 : int;\n                val x@0@10006 : int;\n                val y@0@10007 : int;\n            std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n        });\n      }), @x-x1@10030));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/flip :: (E, V) -> V),(div :: X)>>(){\n  main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n            (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n                0;\n              }), k@0));\n          })));\n      }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n      @x@0;\n    }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n      val @x-x1@10030 : (int, int, int)\n            = (main/triple(n, s));\n      (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n          (match (@pat-x25_10) {\n            ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n               -> val x@1@10008 : int;\n                  val y@1@10009 : int;\n                  val x@0@10006 : int;\n                  val y@0@10007 : int;\n              std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n          });\n        }), @x-x1@10030));\n    }));\n}"}]},"annotation": "genExpr: main/@handle-flip<int,(div :: X),int>((main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n          (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n              val x@10004 : int;\n              val y@10005 : int;\n              (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n            }), k));\n        })));\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/flip :: (E, V) -> V),(div :: X)>>(){\n    (main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n              (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n                  0;\n                }), k@0));\n            })));\n        }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n        @x@0;\n      }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n        val @x-x1@10030 : (int, int, int)\n              = (main/triple(n, s));\n        (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n            (match (@pat-x25_10) {\n              ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n                 -> val x@1@10008 : int;\n                    val y@1@10009 : int;\n                    val x@0@10006 : int;\n                    val y@0@10007 : int;\n                std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n            });\n          }), @x-x1@10030));\n      })));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int, s: int){\n  main/@handle-flip<int,(div :: X),int>((main/@Hnd-flip<(div :: X),int>(3, (std/core/hnd/Clause0<bool,(main/flip :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/flip :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<bool,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<bool,int>) -> (div :: X) int){\n            (std/core/hnd/protect<(),bool,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (bool) -> (div :: X) int){\n                val x@10004 : int;\n                val y@10005 : int;\n                (std/core/int/(%)((std/core/int/int-add(x@10004, y@10005)), 1000000007));\n              }), k));\n          })));\n      }))))), (fn<(div :: X)>(@x: int){\n      @x;\n    }), (fn<<(main/flip :: (E, V) -> V),(div :: X)>>(){\n      (main/@handle-fail<int,<(div :: X),(main/flip :: (E, V) -> V)>,int>((main/@Hnd-fail<<(div :: X),(main/flip :: (E, V) -> V)>,int>(3, (forall<a> std/core/hnd/Clause0<a,(main/fail :: (E, V) -> V),<(div :: X),(main/flip :: (E, V) -> V)>,int>((fn<<(div :: X),(main/flip :: (E, V) -> V)>>(m@0: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/flip :: (E, V) -> V)>,int>, @_wildcard-x730_16@0: (hnd/ev :: ((E, V) -> V) -> V)<(main/fail :: (E, V) -> V)>){\n            (std/core/hnd/yield-to<a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(m@0, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(k@0: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n                (std/core/hnd/protect<(),a,<(div :: X),(main/flip :: (E, V) -> V)>,int>(std/core/types/Unit, (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@_wildcard-x730_55@0: (), r@0: (a) -> <(div :: X),(main/flip :: (E, V) -> V)> int){\n                    0;\n                  }), k@0));\n              })));\n          }))))), (fn<<(div :: X),(main/flip :: (E, V) -> V)>>(@x@0: int){\n          @x@0;\n        }), (fn<<(main/fail :: (E, V) -> V),(div :: X),(main/flip :: (E, V) -> V)>>(){\n          val @x-x1@10030 : (int, int, int)\n                = (main/triple(n, s));\n          (std/core/hnd/@open-none1<(int, int, int),int,(total :: E),<(div :: X),(main/fail :: (E, V) -> V),(main/flip :: (E, V) -> V)>>((fn(@pat-x25_10: (int, int, int)){\n              (match (@pat-x25_10) {\n                ((@skip std/core/types/Tuple3((a: int) : int, (b: int) : int, (c: int) : int) : (int, int, int) ) as @pat: (int, int, int))\n                   -> val x@1@10008 : int;\n                      val y@1@10009 : int;\n                      val x@0@10006 : int;\n                      val y@0@10007 : int;\n                  std/core/int/(%)((std/core/int/int-add(x@0@10006, y@0@10007)), 1000000007);\n              });\n            }), @x-x1@10030));\n        })));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/run\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/run"]}, {"name": {"op": "Var","id": "main/main","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10012","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"name": "std/os/env/get-args","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/get-args"},"args": []},"annotation": "genExpr: std/os/env/get-args()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10012"]}, {"name": {"op": "Var","id": "m@10010","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/parse-int"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10012","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"58","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"59","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"58","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10012","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10012) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}]},"annotation": "genExpr: std/core/int/parse-int((match (xs@10012) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["m@10010"]}, {"name": {"op": "Var","id": "r","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/run","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/run"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10010","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 10},"annotation": "genExpr: 10"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10010","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"60","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"60","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10010) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10010","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 10},"annotation": "genExpr: 10"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10010","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"61","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"61","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"61\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10010) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n     -> x@1;\n}"}]},"annotation": "genExpr: main/run((match (m@10010) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x;\n  }), (match (m@10010) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n       -> x@1;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Int"}},"annotation": "genExpr: r"}]},"annotation": "genExpr: std/core/int/show(r)"}]},"annotation": "genExpr: std/core/console/printsln((std/core/int/show(r)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X),(div :: X),(ndet :: X)>>(){\n  val xs@10012 : (list :: V -> V)<string>;\n  val m@10010 : (maybe :: V -> V)<int>;\n  val r : int;\n  std/core/console/printsln((std/core/int/show(r)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/main\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/main"]}, {"name": {"op": "Var","id": "main/@Hnd-fail","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/fail"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "Construct","type_tag": "main/fail","tag": "main/@Hnd-fail","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-fail"]}, {"name": {"op": "Var","id": "main/@Hnd-flip","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/flip"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-flip","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "Construct","type_tag": "main/flip","tag": "main/@Hnd-flip","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-flip","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-flip"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}