{"blocks":[{"label":"0([switch case for Bool(true)#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([k@[switch case for Bool(false)#12]#15])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([switch case for Bool(true)#17])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"3([switch case for Bool(false)#24])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Eq"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([switch default case#29])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([switch default case#22])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1 > #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[3],"default":4}]},
{"label":"6([switch case for Bool(false)#12])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 > #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[2],"default":5}]},
{"label":"7([switch default case#30])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([switch default case#10])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1 < #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[6],"default":7}]},
{"label":"9([mcore:[#74]#3])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 < #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[0],"default":8}]},
{"label":"10([switch case for Bool(true)#35])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'z')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"z"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'z')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([switch default case#39])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([mcore:[#78]#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"a"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[10],"default":11}]},
{"label":"13([switch case for Bool(true)#46])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'Z')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Z"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'Z')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([switch default case#50])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([mcore:[#82]#42])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[13],"default":14}]},
{"label":"16([switch case for Bool(true)#57])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"9"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([switch default case#61])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([mcore:[#86]#53])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"0"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[16],"default":17}]},
{"label":"19([mcore:[#88]#64])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\u007f"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([mcore:[#90]#67])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":" "},
{"op":"PrimOp","name":"(#1 < #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"21([switch case for Bool(true)#74])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([k@[switch default case#77]#82])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([switch case for Bool(true)#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"24([k@[switch default case#87]#92])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([switch case for Bool(true)#94])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([switch default case#97])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(==)(c, '\\x0D')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\r"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(==)(c, '\\x0D')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([switch default case#87])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/True;\n  (@pat@4: bool)\n     -> std/core/char/(==)(c, '\\x0D');\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\n"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/True;\n  (@pat@4: bool)\n     -> std/core/char/(==)(c, '\\x0D');\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[25],"default":26}]},
{"label":"28([switch default case#77])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@2: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/True;\n      (@pat@4: bool)\n         -> std/core/char/(==)(c, '\\x0D');\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\t"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@2: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/True;\n      (@pat@4: bool)\n         -> std/core/char/(==)(c, '\\x0D');\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[23],"default":27}]},
{"label":"29([mcore:[#98]#70])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":" "},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[21],"default":28}]},
{"label":"30([mcore:[#100]#101])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Eq2"}]},
{"label":"31([mcore:[#105]#106])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Lt2"}]},
{"label":"32([mcore:[#110]#112])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Gt2"}]},
{"label":"33([k@[switch case for Bool(true)#120]#125])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([switch case for Bool(true)#120])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Eq2<char>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Eq2<char>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":30}]},
{"label":"35([k@[switch case for Bool(false)#129]#132])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([k@[switch case for Bool(true)#134]#139])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"37([switch case for Bool(true)#134])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt2<char>(x, y)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt2<char>(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":31}]},
{"label":"38([k@[switch case for Bool(false)#143]#148])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([switch case for Bool(false)#143])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt2<char>(y, x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt2<char>(y, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":32}]},
{"label":"40([switch default case#150])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"41([switch default case#141])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1 < #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[39],"default":40}]},
{"label":"42([switch case for Bool(false)#129])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(<)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt2<char>(x, y);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Gt2<char>(y, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 < #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(<)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt2<char>(x, y);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Gt2<char>(y, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[37],"default":41}]},
{"label":"43([switch default case#151])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([switch default case#127])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[42],"default":43}]},
{"label":"45([mcore:[#114]#118])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[34],"default":44}]},
{"label":"46([mcore:[#116]#152])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10001\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(d)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int/char((std/core/int/int-add(x@10000, y@10001)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10000, y@10001)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1)","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10000, y@10001)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int/char((std/core/int/int-add(x@10000, y@10001)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(d)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10001\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([mcore:[#118]#154])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(d)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@10002, y@10003)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1)","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@10002, y@10003)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(d)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([k@[switch case for Bool(true)#160]#165])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([switch case for Bool(true)#167])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"z\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"z\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([k@[switch default case#170]#175])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([switch case for Bool(true)#177])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'Z')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Z"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'Z')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([switch default case#181])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"53([switch default case#170])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"z\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/char/(<=)(c, 'Z');\n  (@pat@0@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/char/(<=)(c, 'Z');\n  (@pat@0@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"z\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[51],"default":52}]},
{"label":"54([switch case for Bool(true)#160])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(<=)(c, 'z'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@0@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/char/(<=)(c, 'Z');\n      (@pat@0@1: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"z"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(<=)(c, 'z'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@0@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/char/(<=)(c, 'Z');\n      (@pat@0@1: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[49],"default":53}]},
{"label":"55([k@[switch default case#184]#189])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([switch case for Bool(true)#191])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'Z')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Z"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'Z')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([switch default case#195])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([switch default case#184])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> std/core/char/(<=)(c, 'Z');\n  (@pat@0@1@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> std/core/char/(<=)(c, 'Z');\n  (@pat@0@1@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[56],"default":57}]},
{"label":"59([mcore:[#129]#156])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"a"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[54],"default":58}]},
{"label":"60([switch case for Bool(true)#201])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"61([k@[switch default case#204]#209])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([switch case for Bool(true)#211])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"9"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([switch default case#215])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([switch default case#204])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"0"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[62],"default":63}]},
{"label":"65([k@[mcore:[#135]#198]#200])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[60],"default":64}]},
{"label":"66([mcore:[#135]#198])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/is-alpha(c)","traced":{"any":[]}},
{"op":"Push","target":65,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/is-alpha(c)","traced":{"any":[]}},
{"op":"Jump","target":59}]},
{"label":"67([k@[switch case for Bool(true)#222]#227])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"68([switch case for Bool(true)#229])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"9\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"9\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([k@[switch default case#232]#237])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([k@[switch case for Bool(true)#239]#244])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"71([switch case for Bool(true)#246])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"72([k@[switch default case#249]#254])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"73([switch case for Bool(true)#256])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"F"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([switch default case#260])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([switch default case#249])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[73],"default":74}]},
{"label":"76([switch case for Bool(true)#239])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(<=)(c, 'f'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/True;\n  (@pat@4: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"f"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(<=)(c, 'f'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/True;\n  (@pat@4: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[71],"default":75}]},
{"label":"77([k@[switch default case#263]#268])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([switch case for Bool(true)#270])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"F"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"79([switch default case#274])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"80([switch default case#263])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[78],"default":79}]},
{"label":"81([switch default case#232])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"9\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'a'))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> (match ((std/core/char/(<=)(c, 'f'))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/True;\n      (@pat@4: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6: bool)\n             -> std/core/types/False;\n        });\n    });\n  (@pat@2: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@0: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"a"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'a'))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> (match ((std/core/char/(<=)(c, 'f'))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/True;\n      (@pat@4: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6: bool)\n             -> std/core/types/False;\n        });\n    });\n  (@pat@2: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@0: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"9\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[76],"default":80}]},
{"label":"82([switch case for Bool(true)#222])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(<=)(c, '9'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@0@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'a'))) {\n      ((std/core/types/True() : bool ) as @pat@1@0: bool)\n         -> (match ((std/core/char/(<=)(c, 'f'))) {\n          ((std/core/types/True() : bool ) as @pat@3: bool)\n             -> std/core/types/True;\n          (@pat@4: bool)\n             -> (match ((std/core/char/(>=)(c, 'A'))) {\n              ((std/core/types/True() : bool ) as @pat@5: bool)\n                 -> std/core/char/(<=)(c, 'F');\n              (@pat@6: bool)\n                 -> std/core/types/False;\n            });\n        });\n      (@pat@2: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5@0: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6@0: bool)\n             -> std/core/types/False;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"9"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(<=)(c, '9'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@0@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'a'))) {\n      ((std/core/types/True() : bool ) as @pat@1@0: bool)\n         -> (match ((std/core/char/(<=)(c, 'f'))) {\n          ((std/core/types/True() : bool ) as @pat@3: bool)\n             -> std/core/types/True;\n          (@pat@4: bool)\n             -> (match ((std/core/char/(>=)(c, 'A'))) {\n              ((std/core/types/True() : bool ) as @pat@5: bool)\n                 -> std/core/char/(<=)(c, 'F');\n              (@pat@6: bool)\n                 -> std/core/types/False;\n            });\n        });\n      (@pat@2: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5@0: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6@0: bool)\n             -> std/core/types/False;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[68],"default":81}]},
{"label":"83([k@[switch default case#277]#282])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([k@[switch case for Bool(true)#284]#289])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"85([switch case for Bool(true)#291])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"86([k@[switch default case#294]#299])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"87([switch case for Bool(true)#301])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"F"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"88([switch default case#305])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"89([switch default case#294])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@1: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@1: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[87],"default":88}]},
{"label":"90([switch case for Bool(true)#284])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(<=)(c, 'f'))) {\n  ((std/core/types/True() : bool ) as @pat@3@0: bool)\n     -> std/core/types/True;\n  (@pat@4@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@1: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@1: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"f"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(<=)(c, 'f'))) {\n  ((std/core/types/True() : bool ) as @pat@3@0: bool)\n     -> std/core/types/True;\n  (@pat@4@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@1: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@1: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[85],"default":89}]},
{"label":"91([k@[switch default case#308]#313])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([switch case for Bool(true)#315])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"F"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, 'F')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"93([switch default case#319])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([switch default case#308])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@0@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"A"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@0@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[92],"default":93}]},
{"label":"95([switch default case#277])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, 'a'))) {\n  ((std/core/types/True() : bool ) as @pat@1@0@0: bool)\n     -> (match ((std/core/char/(<=)(c, 'f'))) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/True;\n      (@pat@4@0: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5@1: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6@1: bool)\n             -> std/core/types/False;\n        });\n    });\n  (@pat@2@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@0@0: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"a"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, 'a'))) {\n  ((std/core/types/True() : bool ) as @pat@1@0@0: bool)\n     -> (match ((std/core/char/(<=)(c, 'f'))) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/True;\n      (@pat@4@0: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5@1: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6@1: bool)\n             -> std/core/types/False;\n        });\n    });\n  (@pat@2@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@0@0: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[90],"default":94}]},
{"label":"96([mcore:[#160]#218])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"0"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[82],"default":95}]},
{"label":"97([#342])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_44584223-b08c-4681-889d-5711a8337b32"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"98([k@[mcore:[static initializers#162]#322]#332])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#66]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":97,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"99([mcore:[static initializers#162]#322])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#65]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":98,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"100([k@[main entrypoint#2]#350])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"101([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":100,"args":{"any":[]}},
{"op":"Jump","target":99}]}],
"symbols":[{"name":"std/core/char/cmp","position":9},
{"name":"std/core/char/is-lower","position":12},
{"name":"std/core/char/is-upper","position":15},
{"name":"std/core/char/is-digit","position":18},
{"name":"std/core/char/is-ascii","position":19},
{"name":"std/core/char/is-control","position":20},
{"name":"std/core/char/is-white","position":29},
{"name":"std/core/char/order2","position":45},
{"name":"std/core/char/(+)","position":46},
{"name":"std/core/char/(-)","position":47},
{"name":"std/core/char/is-alpha","position":59},
{"name":"std/core/char/is-alpha-num","position":66},
{"name":"std/core/char/is-hex-digit","position":96},
{"name":"$static-init","position":99},
{"name":"$entrypoint","position":101}],
"frameSize":{"regs_any":16}}