module interface main
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/os/env = std/os/env = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
recursive type generator[12,1,14,47] {
  con Empty[13,3,13,7]{0,0,0} : generator;
  con Thunk[14,3,14,7](value: std/core/types/int, next: () -> <(std/core/types/div :: X)> generator){0,2,8} : (value : std/core/types/int, next : () -> <(std/core/types/div :: X)> generator) -> generator;
};
recursive type tree[8,1,10,46] {
  con Leaf[9,3,9,6]{0,0,0} : tree;
  con Node[10,3,10,6](left: tree, value: std/core/types/int, right: tree){0,3,8} : (left : tree, value : std/core/types/int, right : tree) -> tree;
};

// Operations:
// ```koka
// ctl yield
// ```
recursive effect type yield[5,1,5,12] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-yield[5,1,5,12](@cfc: std/core/types/int, @ctl-yield: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) -> (yield :: (E, V) -> V)<(e :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Tests for the `Empty` constructor of the `:generator` type.
fip fun is-empty[13,3,13,7] : (^ generator : generator) -> std/core/types/bool;
// Automatically generated. Tests for the `Thunk` constructor of the `:generator` type.
fip fun is-thunk[14,3,14,7] : (^ generator : generator) -> std/core/types/bool;
// Automatically generated. Tests for the `Leaf` constructor of the `:tree` type.
fip fun is-leaf[9,3,9,6] : (^ tree : tree) -> std/core/types/bool;
// Automatically generated. Tests for the `Node` constructor of the `:tree` type.
fip fun is-node[10,3,10,6] : (^ tree : tree) -> std/core/types/bool;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:yield` type.
 fun yield/@cfc[5,1,5,12] : forall<(e :: E),a> (^ yield : (yield :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@ctl-yield` constructor field of the `:yield` type.
 fun yield/@ctl-yield[6,7,6,25] : forall<(e :: E),a> (^ yield : (yield :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:yield`
val @tag-yield[5,1,5,12] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(yield :: (E, V) -> V)>;
// handler for the effect `:yield`
 fun @handle-yield[5,8,5,12] : forall<a,(e :: E),b> (hnd : (yield :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `yield` operation out of effect `:yield`
 fun @select-yield[6,7,6,25] : forall<(e :: E),a> (^ hnd : (yield :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>;
// Call the `ctl yield` operation of the effect `:yield`
 fun yield[6,7,6,11] : (x : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>> ();
 fun generate[31,5,31,12] : (f : () -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>> ()) -> <(std/core/types/div :: X)> generator;
 fun iterate[23,5,23,11] : (t : tree) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>> ();
 fun make[16,5,16,8] : (n : std/core/types/int) -> <(std/core/types/div :: X)> tree;
 fun sum[38,5,38,7] : (a : std/core/types/int, g : generator) -> <(std/core/types/div :: X)> std/core/types/int;
 fun run[43,5,43,7] : (n : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
pub  fun main[46,9,46,12] : () -> <(std/core/console/console :: X),(std/core/types/div :: X),(std/core/types/ndet :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^" fip fun is-empty // inline size: 1
  = fn(generator: generator){
    match (generator) {
      ((main/Empty() : generator ) as @pat: generator)
         -> std/core/types/True;
      ((@skip main/Thunk((@pat@1: std/core/types/int) : std/core/types/int, (@pat@2: () -> <(std/core/types/div :: X)> generator) : () -> <(std/core/types/div :: X)> generator) : generator ) as @pat@0: generator)
         -> std/core/types/False;
    };
  };
inline borrow "^" fip fun is-thunk // inline size: 1
  = fn(generator: generator){
    match (generator) {
      ((main/Thunk((@pat@0: std/core/types/int) : std/core/types/int, (@pat@1: () -> <(std/core/types/div :: X)> generator) : () -> <(std/core/types/div :: X)> generator) : generator ) as @pat: generator)
         -> std/core/types/True;
      ((@skip main/Empty() : generator ) as @pat@2: generator)
         -> std/core/types/False;
    };
  };
inline borrow "^" fip fun is-leaf // inline size: 1
  = fn(tree: tree){
    match (tree) {
      ((main/Leaf() : tree ) as @pat: tree)
         -> std/core/types/True;
      ((@skip main/Node((@pat@1: tree) : tree, (@pat@2: std/core/types/int) : std/core/types/int, (@pat@3: tree) : tree) : tree ) as @pat@0: tree)
         -> std/core/types/False;
    };
  };
inline borrow "^" fip fun is-node // inline size: 1
  = fn(tree: tree){
    match (tree) {
      ((main/Node((@pat@0: tree) : tree, (@pat@1: std/core/types/int) : std/core/types/int, (@pat@2: tree) : tree) : tree ) as @pat: tree)
         -> std/core/types/True;
      ((@skip main/Leaf() : tree ) as @pat@3: tree)
         -> std/core/types/False;
    };
  };
inline borrow "^"  fun yield/@cfc // inline size: 0
  = forall<(e :: E),a> fn(yield@0: (yield :: (E, V) -> V)<(e :: E),a>){
    (match (yield@0) {
      ((@skip main/@Hnd-yield((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) : (yield :: (E, V) -> V)<(e :: E),a> ) as @pat: ((yield :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun yield/@ctl-yield // inline size: 0
  = forall<(e :: E),a> fn(yield@0: (yield :: (E, V) -> V)<(e :: E),a>){
    (match (yield@0) {
      ((@skip main/@Hnd-yield((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) : (yield :: (E, V) -> V)<(e :: E),a> ) as @pat: ((yield :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-yield // inline size: 0
  = forall<(e :: E),a> fn(hnd: (yield :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip main/@Hnd-yield((@pat@0: std/core/types/int) : std/core/types/int, (@ctl-yield: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,(),(yield :: (E, V) -> V),(e :: E),a>) : (yield :: (E, V) -> V)<(e :: E),a> ) as @pat: ((yield :: (E, V) -> V)<(e :: E),a>))
         -> @ctl-yield;
    });
  };
inline  fun yield // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>>>(x: std/core/types/int){
    std/core/hnd/@perform1<std/core/types/int,(),(yield :: (E, V) -> V),<(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(yield :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(yield :: (E, V) -> V)>>((std/core/hnd/@evv-at<(yield :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(yield :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), main/@select-yield, x);
  };