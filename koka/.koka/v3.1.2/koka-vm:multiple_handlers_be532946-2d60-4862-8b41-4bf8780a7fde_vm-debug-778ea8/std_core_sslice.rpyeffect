{"blocks":[{"label":"0([match_def@[mcore:[#202]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([#5])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"1\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"1\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#202]#3])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"1\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"2\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"1\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"2\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":1,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1148]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#203]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([#8])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"3\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"3\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#203]#6])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"3\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"5\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"3\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"5\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":4,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1149]","target":3,"args":{"any":[]}}}]},
{"label":"6([match_def@[mcore:[#204]#9]#10])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([#11])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"6\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"7\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"6\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"7\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([mcore:[#204]#9])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"6\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"7\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"sslice\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"6\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"7\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"8\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":7,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1150]","target":6,"args":{"any":[]}}}]},
{"label":"9([k@[k@[k@[mcore:[#209]#12]#14]#17]#20])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":423}]},
{"label":"10([match_def@[#23]#24])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([k@[match_std/core/types/@None@[#23]#25]#27])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([#29])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([#30])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"18\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"18\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([match_std/core/types/@None@[#23]#25])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"18\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"18\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"20\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":13,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1151]","target":12,"args":{"any":[]}}}]},
{"label":"15([#23])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":14,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1152]","target":10,"args":{"any":[]}}}]},
{"label":"16([#31])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-len@157,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-len@157: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-len@157,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-len@157: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([k@[k@[mcore:[#209]#12]#14]#17])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (len) {\n  ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n     -> @uniq-len@157;\n  ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n         -> @x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":9,"args":{"any":[3,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (len) {\n  ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n     -> @uniq-len@157;\n  ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n         -> @x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":16,"args":{"any":[2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1153]","target":15,"args":{"any":[]}}}]},
{"label":"18([#33])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([k@[#34]#36])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([match_def@[#34]#38])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"21([match_std/core/sslice/Sslice@[#34]#39])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"14\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"14\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([#34])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"14\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"16\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"14\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"15\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"16\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":21,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1154]","target":20,"args":{"any":[]}}}]},
{"label":"23([match_def@[k@[mcore:[#209]#12]#14]#32])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":22,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1155]","target":18,"args":{"any":[]}}}]},
{"label":"24([#40])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-start@150,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-start@150: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-start@150,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-start@150: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([k@[mcore:[#209]#12]#14])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (start) {\n  ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n     -> @uniq-start@150;\n  ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":17,"args":{"any":[1,2,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (start) {\n  ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n     -> @uniq-start@150;\n  ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":24,"args":{"any":[2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1156]","target":23,"args":{"any":[]}}}]},
{"label":"26([#42])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([k@[#43]#45])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"28([match_def@[#43]#47])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([match_std/core/sslice/Sslice@[#43]#48])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"11\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"11\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([#43])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"11\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"12\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"10\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"11\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"12\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":29,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1157]","target":28,"args":{"any":[]}}}]},
{"label":"31([match_def@[mcore:[#209]#12]#41])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":30,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1158]","target":26,"args":{"any":[]}}}]},
{"label":"32([#49])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-str@143,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-str@143: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-str@143,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-str@143: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([mcore:[#209]#12])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice((match (str) {\n    ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-str@143;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n           -> @x;\n      });\n  }), (match (start) {\n    ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n       -> @uniq-start@150;\n    ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> @x@0;\n      });\n  }), (match (len) {\n    ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n       -> @uniq-len@157;\n    ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n           -> @x@1;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (str) {\n  ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-str@143;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":25,"args":{"any":[0,3,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"str\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"9\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (str) {\n  ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-str@143;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice((match (str) {\n    ((std/core/types/@Optional((@uniq-str@143: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-str@143;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n           -> @x;\n      });\n  }), (match (start) {\n    ((std/core/types/@Optional((@uniq-start@150: int) : int) : ? int ) as @pat@1@1: ? int)\n       -> @uniq-start@150;\n    ((@skip std/core/types/@None() : ? int ) as @pat@2: ? int)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@2: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> @x@0;\n      });\n  }), (match (len) {\n    ((std/core/types/@Optional((@uniq-len@157: int) : int) : ? int ) as @pat@3@0: ? int)\n       -> @uniq-len@157;\n    ((@skip std/core/types/@None() : ? int ) as @pat@4: ? int)\n       -> (match (@this) {\n        ((@skip std/core/sslice/Sslice((@pat@0@2: string) : string, (@pat@1@3: int) : int, (@x@1: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice)\n           -> @x@1;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":32,"args":{"any":[2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1159]","target":31,"args":{"any":[]}}}]},
{"label":"34([mcore:[#214]#50])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(str, start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(str, start, len)","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"35([mcore:[#215]#51])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-string"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([mcore:[#216]#54])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-next"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"37([mcore:[#221]#57])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"38([match_def@[mcore:[#230]#63]#64])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([k@[#65]#71])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"40([#65])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@0@10005 : int;\nval y@0@10006 : int;\nstd/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@0@10006\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[4]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@0@10005, y@0@10006)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[2]},"in":{"any":[3,4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@0@10005, y@0@10006)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@0@10006\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@0@10005 : int;\nval y@0@10006 : int;\nstd/core/sslice/Sslice(s, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10005, y@0@10006)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"41([mcore:[#230]#63])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"21\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"23\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":40,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1160]","target":38,"args":{"any":[]}}}]},
{"label":"42([match_def@[mcore:[#235]#73]#74])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([k@[#75]#79])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([#75])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"45([mcore:[#235]#73])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"26\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"24\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"25\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"26\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":44,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1161]","target":42,"args":{"any":[]}}}]},
{"label":"46([mcore:[#236]#81])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-first1"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([mcore:[#237]#84])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/@extern-common-prefix(s, t, (match (upto) {\n    ((std/core/types/@Optional((@uniq-upto@252: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-upto@252;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> -1;\n  }))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-common-prefix"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/@extern-common-prefix(s, t, (match (upto) {\n    ((std/core/types/@Optional((@uniq-upto@252: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-upto@252;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> -1;\n  }))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([mcore:[#238]#87])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-count"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([k@[k@[mcore:[#243]#90]#92]#95])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"50([match_def@[k@[mcore:[#243]#90]#92]#99])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([#100])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"31\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"31\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([k@[mcore:[#243]#90]#92])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"31\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"33\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":49,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"31\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"32\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"33\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":51,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1162]","target":50,"args":{"any":[]}}}]},
{"label":"53([match_def@[mcore:[#243]#90]#101])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([#102])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"29\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"30\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"29\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"30\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"55([mcore:[#243]#90])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), (match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"29\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"30\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":52,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"28\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"29\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"30\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), (match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@x@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":54,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1163]","target":53,"args":{"any":[]}}}]},
{"label":"56([mcore:[#248]#103])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-xends-with"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([mcore:[#252]#106])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"58([switch case for Bool(true)#117])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([#140])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([k@[switch case for Bool(false)#126]#134])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":57}]},
{"label":"61([switch case for Bool(false)#126])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(sub)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":60,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(sub)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"62([switch default case#142])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([switch default case#122])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[61],"default":62}]},
{"label":"64([mcore:[#260]#111])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/ssize_t/int((std/core/sslice/xindex-of(s, sub)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/int/#ssize_t/int"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/ssize_t/int((std/core/sslice/xindex-of(s, sub)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[58],"default":63}]},
{"label":"65([mcore:[#264]#143])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"66([switch case for Bool(true)#154])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"67([#177])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"68([k@[switch case for Bool(false)#163]#171])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":65}]},
{"label":"69([switch case for Bool(false)#163])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(sub)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":68,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(sub)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/int/int-sub(i, 1)), (std/core/sslice/length(sub)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:(\\\"infixEq(Int, Int): Boolean\\\" $arg0:int 0)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"70([switch default case#179])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"71([switch default case#159])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[69],"default":70}]},
{"label":"72([mcore:[#272]#148])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/ssize_t/int((std/core/sslice/xlast-index-of(s, sub)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/int/#ssize_t/int"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/ssize_t/int((std/core/sslice/xlast-index-of(s, sub)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[66],"default":71}]},
{"label":"73([switch case for Bool(true)#186])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([switch case for Bool(false)#190])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([switch default case#193])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([switch default case#189])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[74],"default":75}]},
{"label":"77([k@[mcore:[#279]#180]#182])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[73],"default":76}]},
{"label":"78([match_def@[mcore:[#279]#180]#194])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"79([#195])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"80([mcore:[#279]#180])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":77,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0: string) : string, (@pat@1@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":79,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1164]","target":78,"args":{"any":[]}}}]},
{"label":"81([k@[mcore:[#282]#196]#198])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"82([match_def@[mcore:[#282]#196]#202])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"83([#203])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([mcore:[#282]#196])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":81,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"36\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@x: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":83,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1165]","target":82,"args":{"any":[]}}}]},
{"label":"85([k@[mcore:[#285]#204]#206])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"86([match_def@[mcore:[#285]#204]#210])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"87([#211])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"88([mcore:[#285]#204])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>=)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":85,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>=)((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@x: int) : int, (@pat@1: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":87,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1166]","target":86,"args":{"any":[]}}}]},
{"label":"89([mcore:[#286]#212])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-last1"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([mcore:[#288]#215])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"91([#240])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([k@[switch case for Bool(true)#224]#234])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":90}]},
{"label":"93([switch case for Bool(true)#224])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!undefined: std/core/sslice/xstarts-with\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"String\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@10019 : int;\nval y@10020 : int;\nstd/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10020\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(pre)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(pre)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@10019, y@10020)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Push","target":92,"args":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@10019, y@10020)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(pre)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(pre)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10020\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@10019 : int;\nval y@10020 : int;\nstd/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, (std/core/sslice/length(pre)), (std/core/int/int-sub(x@10019, y@10020)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!undefined: std/core/sslice/xstarts-with\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"String\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"94([switch case for Bool(false)#246])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!undefined: std/core/sslice/xstarts-with\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"String\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!undefined: std/core/sslice/xstarts-with\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"String\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"95([switch default case#251])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"96([switch default case#242])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/xstarts-with"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[94],"default":95}]},
{"label":"97([mcore:[#297]#220])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/sslice/xstarts-with"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[93],"default":96}]},
{"label":"98([match_def@[mcore:[#325]#252]#253])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"99([match_def@[#254]#255])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"100([#260])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"101([k@[switch case for Bool(true)#262]#265])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"102([k@[switch case for Bool(true)#267]#270])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"103([switch case for Bool(true)#272])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"104([#282])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([k@[switch case for Bool(false)#277]#279])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice2)","traced":{"any":[]}},
{"op":"Push","target":104,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice2)","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"106([switch case for Bool(false)#277])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice1)","traced":{"any":[]}},
{"op":"Push","target":105,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"107([switch default case#285])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([switch default case#275])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Swap","a":2,"b":0},
{"op":"Switch","arg":2,"values":[false],"targets":[106],"default":107}]},
{"label":"109([switch case for Bool(true)#267])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)(len1, len2))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)(len1, len2))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[103],"default":108}]},
{"label":"110([k@[k@[switch default case#286]#288]#291])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"111([k@[switch default case#286]#288])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice2)","traced":{"any":[]}},
{"op":"Push","target":110,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice2)","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"112([switch default case#286])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice1)","traced":{"any":[]}},
{"op":"Push","target":111,"args":{"any":[3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"113([switch case for Bool(true)#262])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)(start1, start2))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match ((std/core/int/(==)(len1, len2))) {\n      ((std/core/types/True() : bool ) as @pat@6: bool)\n         -> std/core/types/True;\n      ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n         -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n    });\n  (@pat@4: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[2,3]}},
{"op":"Copy","from":5,"to":3},
{"op":"Swap","a":2,"b":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)(start1, start2))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match ((std/core/int/(==)(len1, len2))) {\n      ((std/core/types/True() : bool ) as @pat@6: bool)\n         -> std/core/types/True;\n      ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n         -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n    });\n  (@pat@4: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[109],"default":112}]},
{"label":"114([k@[k@[switch default case#294]#296]#299])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([k@[switch default case#294]#296])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice2)","traced":{"any":[]}},
{"op":"Push","target":114,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice2)","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"116([switch default case#294])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice1)","traced":{"any":[]}},
{"op":"Push","target":115,"args":{"any":[5]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"117([match_std/core/sslice/Sslice@[#254]#256])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/unsafe/unsafe-ptr-eq<string>(s1, s2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(==)(start1, start2))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match ((std/core/int/(==)(len1, len2))) {\n          ((std/core/types/True() : bool ) as @pat@6: bool)\n             -> std/core/types/True;\n          ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n             -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n        });\n      (@pat@4: bool)\n         -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n    });\n  (@pat@5: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/unsafe/unsafe-ptr-eq<string>(s1, s2)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Undefined:  std/core/unsafe/unsafe-ptr-eq"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":6,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/unsafe/unsafe-ptr-eq<string>(s1, s2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/unsafe/unsafe-ptr-eq<string>(s1, s2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(==)(start1, start2))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match ((std/core/int/(==)(len1, len2))) {\n          ((std/core/types/True() : bool ) as @pat@6: bool)\n             -> std/core/types/True;\n          ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n             -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n        });\n      (@pat@4: bool)\n         -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n    });\n  (@pat@5: bool)\n     -> std/core/string/(==)((std/core/sslice/string(slice1)), (std/core/sslice/string(slice2)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":6,"values":[true],"targets":[113],"default":116}]},
{"label":"118([#254])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":4,"to":0},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"43\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"44\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"45\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":3,"clauses":[{"tag":"std/core/sslice/Sslice","target":117,"args":{"any":[4,5,6]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1167]","target":99,"args":{"any":[]}}}]},
{"label":"119([mcore:[#325]#252])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"40\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"41\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"42\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":118,"args":{"any":[2,3,4]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1168]","target":98,"args":{"any":[]}}}]},
{"label":"120([switch case for Bool(true)#305])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"121([switch case for Bool(false)#309])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"122([switch default case#312])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"123([switch default case#308])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[121],"default":122}]},
{"label":"124([k@[mcore:[#329]#302]#304])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[120],"default":123}]},
{"label":"125([mcore:[#329]#302])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/(==)(slice1, slice2)","traced":{"any":[]}},
{"op":"Push","target":124,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/(==)(slice1, slice2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10021\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Jump","target":119}]},
{"label":"126([match_def@[mcore:[#338]#313]#314])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"127([match_def@[#315]#316])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"128([#320])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"129([k@[switch case for Bool(true)#322]#325])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"130([switch case for Bool(true)#327])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)(s1, s2)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)(s1, s2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"131([switch default case#329])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"132([switch case for Bool(true)#322])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)(len1, len2))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/string/(==)(s1, s2);\n  (@pat@4: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)(len1, len2))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/string/(==)(s1, s2);\n  (@pat@4: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[130],"default":131}]},
{"label":"133([switch default case#332])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"134([match_std/core/sslice/Sslice@[#315]#317])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)(start1, start2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(==)(len1, len2))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/string/(==)(s1, s2);\n      (@pat@4: bool)\n         -> std/core/types/False;\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,4]}},
{"op":"Copy","from":1,"to":4},
{"op":"Copy","from":5,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)(start1, start2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(==)(len1, len2))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/string/(==)(s1, s2);\n      (@pat@4: bool)\n         -> std/core/types/False;\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[132],"default":133}]},
{"label":"135([#315])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"50\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"51\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"52\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":3,"clauses":[{"tag":"std/core/sslice/Sslice","target":134,"args":{"any":[3,4,5]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1169]","target":127,"args":{"any":[]}}}]},
{"label":"136([mcore:[#338]#313])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"47\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"48\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"49\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":135,"args":{"any":[1,2,3]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1170]","target":126,"args":{"any":[]}}}]},
{"label":"137([switch case for Bool(true)#338])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([switch case for Bool(false)#342])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"139([switch default case#345])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"140([switch default case#341])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[138],"default":139}]},
{"label":"141([k@[mcore:[#342]#335]#337])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[137],"default":140}]},
{"label":"142([mcore:[#342]#335])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/(===)(slice1, slice2)","traced":{"any":[]}},
{"op":"Push","target":141,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/(===)(slice1, slice2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10022\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Jump","target":136}]},
{"label":"143([#350])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"144([match_def@[#351]#352])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"145([#354])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"146([k@[k@[#355]#357]#359])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"147([match_def@[k@[#355]#357]#361])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(res,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(res,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"148([k@[#362]#364])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"149([#362])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<a,(e :: E)>(rest, action)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<a,(e :: E)>(rest, action)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":157}]},
{"label":"150([k@[#355]#357])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":149,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1171]","target":147,"args":{"any":[]}}}]},
{"label":"151([#355])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"57\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"58\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"59\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((action(c))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@5: ((maybe :: V -> V)<690>))\n     -> std/core/sslice/foreach-while<a,(e :: E)>(rest, action);\n  (res: ((maybe :: V -> V)<690>))\n     -> res;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(c)","traced":{"any":[]}},
{"op":"Push","target":150,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((action(c))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@5: ((maybe :: V -> V)<690>))\n     -> std/core/sslice/foreach-while<a,(e :: E)>(rest, action);\n  (res: ((maybe :: V -> V)<690>))\n     -> res;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"57\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"58\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"59\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"152([match_std/core/types/Tuple2@[#351]#353])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"57\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"58\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"59\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"57\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"58\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"59\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":151,"args":{"any":[3,4,5]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1172]","target":145,"args":{"any":[]}}}]},
{"label":"153([#351])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((c: char), ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@1: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":152,"args":{"any":[1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1173]","target":144,"args":{"any":[]}}}]},
{"label":"154([match_def@[k@[mcore:[#353]#346]#348]#349])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":153,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1174]","target":143,"args":{"any":[]}}}]},
{"label":"155([#366])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"156([k@[mcore:[#353]#346]#348])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":155,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1175]","target":154,"args":{"any":[]}}}]},
{"label":"157([mcore:[#353]#346])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice@0)","traced":{"any":[]}},
{"op":"Push","target":156,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice@0)","traced":{"any":[]}},
{"op":"Jump","target":36}]},
{"label":"158([k@[mcore:[#361]#371]#378])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":157}]},
{"label":"159([mcore:[#361]#371])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<a,(e :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":158,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<a,(e :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), action)","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"160([k@[mcore:[#367]#380]#382])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"161([mcore:[#367]#380])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(c)","traced":{"any":[]}},
{"op":"Push","target":160,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"162([method_apply@[mcore:[#369]#386]#389])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":161}]},
{"label":"163([k@[mcore:[#369]#386]#393])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"164([mcore:[#369]#386])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<_a,(e :: E)>(slice@0, (fn<(e :: E)>(c: char){\n    val _ : ()\n          = (action(c));\n    (std/core/types/Nothing<_a>);\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[162],"args":{"any":[1]},"tags":["apply"]},
{"op":"Push","target":163,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<_a,(e :: E)>(slice@0, (fn<(e :: E)>(c: char){\n    val _ : ()\n          = (action(c));\n    (std/core/types/Nothing<_a>);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":157}]},
{"label":"165([k@[mcore:[#379]#395]#397])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"166([mcore:[#379]#395])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(c)","traced":{"any":[]}},
{"op":"Push","target":165,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"167([method_apply@[k@[mcore:[#381]#401]#408]#411])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":166}]},
{"label":"168([k@[k@[mcore:[#381]#401]#408]#415])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"169([k@[mcore:[#381]#401]#408])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<_a,(e :: E)>(slice@0@10023, (fn<(e :: E)>(c: char){\n    val _ : ()\n          = (action(c));\n    (std/core/types/Nothing<_a>);\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[167],"args":{"any":[1]},"tags":["apply"]},
{"op":"Push","target":168,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<_a,(e :: E)>(slice@0@10023, (fn<(e :: E)>(c: char){\n    val _ : ()\n          = (action(c));\n    (std/core/types/Nothing<_a>);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":157}]},
{"label":"170([mcore:[#381]#401])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":169,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"171([mcore:[#382]#417])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"172([k@[k@[mcore:[#398]#423]#425]#427])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"173([switch case for Bool(true)#431])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@10095 : int\n      = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\nstd/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10095\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(cnt)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10095, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10095, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(cnt)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10095\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@10095 : int\n      = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\nstd/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"174([switch case for Bool(false)#437])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"175([switch default case#440])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"176([switch default case#436])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[174],"default":175}]},
{"label":"177([k@[mcore:[#398]#423]#425])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":172,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[173],"default":176}]},
{"label":"178([mcore:[#398]#423])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((pred(c))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> val x@10095 : int\n              = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n    std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> std/core/types/Unit;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(c)","traced":{"any":[]}},
{"op":"Push","target":177,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((pred(c))) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> val x@10095 : int\n              = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n    std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n  ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n     -> std/core/types/Unit;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"179([method_apply@[k@[mcore:[#401]#441]#448]#451])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":178}]},
{"label":"180([k@[k@[mcore:[#401]#441]#448]#455])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(cnt)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(cnt)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"181([k@[mcore:[#401]#441]#448])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<_a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(slice@0@10028, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(c: char){\n    val _ : ()\n          = (match ((pred(c))) {\n            ((std/core/types/True() : bool ) as @pat: bool)\n               -> val x@10095 : int\n                        = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n              std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n            ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n               -> std/core/types/Unit;\n          });\n    (std/core/types/Nothing<_a>);\n  }))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[179],"args":{"any":[1,2]},"tags":["apply"]},
{"op":"Push","target":180,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<_a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(slice@0@10028, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(c: char){\n    val _ : ()\n          = (match ((pred(c))) {\n            ((std/core/types/True() : bool ) as @pat: bool)\n               -> val x@10095 : int\n                        = std/core/types/local-get<int,(h :: H),(e :: E)>(cnt);\n              std/core/types/local-set<int,(e :: E),(h :: H)>(cnt, (std/core/int/int-add(x@10095, 1)));\n            ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n               -> std/core/types/Unit;\n          });\n    (std/core/types/Nothing<_a>);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":157}]},
{"label":"182([mcore:[#401]#441])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@10028\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":181,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":4,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@10028\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"183([method_apply@[mcore:[#403]#456]#461])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":182}]},
{"label":"184([mcore:[#403]#456])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(887 :: H),int>){\n    val slice@0@10028 : sslice/sslice;\n    val _@0 : ((maybe :: V -> V)<_a>);\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"New","out":1,"targets":[183],"args":{"any":[1,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(887 :: H),int>){\n    val slice@0@10028 : sslice/sslice;\n    val _@0 : ((maybe :: V -> V)<_a>);\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":171}]},
{"label":"185([mcore:[#405]#467])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(h :: H),int>){\n      val slice@0@10028 : sslice/sslice;\n      val _@0 : ((maybe :: V -> V)<_a>);\n      (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(cnt: (local-var :: (H, V) -> V)<(h :: H),int>){\n      val slice@0@10028 : sslice/sslice;\n      val _@0 : ((maybe :: V -> V)<_a>);\n      (std/core/types/local-get<int,(h :: H),(e :: E)>(cnt));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":184}]},
{"label":"186([mcore:[#406]#471])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-advance"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"187([mcore:[#407]#474])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/@extern-extend"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"188([switch case for Bool(true)#485])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"189([#495])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"190([k@[switch case for Bool(false)#487]#489])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"191([match_def@[#497]#498])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"192([match_std/core/types/@None@[#497]#499])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"193([#497])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":192,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1176]","target":191,"args":{"any":[]}}}]},
{"label":"194([#502])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"195([switch case for Bool(false)#487])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match (n) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match (n) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":190,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"63\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match (n) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match (n) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":194,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1177]","target":193,"args":{"any":[]}}}]},
{"label":"196([switch default case#503])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"197([switch default case#486])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[195],"default":196}]},
{"label":"198([k@[k@[mcore:[#417]#477]#479]#481])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[188],"default":197}]},
{"label":"199([#505])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"200([#506])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"201([match_def@[k@[mcore:[#417]#477]#479]#504])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":200,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1178]","target":199,"args":{"any":[]}}}]},
{"label":"202([#509])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"203([k@[mcore:[#417]#477]#479])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match (n) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":198,"args":{"any":[1,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"62\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match (n) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":202,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1179]","target":201,"args":{"any":[]}}}]},
{"label":"204([mcore:[#417]#477])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Push","target":203,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"205([mcore:[#431]#510])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"206([mcore:[#433]#516])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/to-upper"}]},
{"label":"207([k@[#557]#560])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":205}]},
{"label":"208([#557])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":207,"args":{"any":[1]}},
{"op":"Jump","target":35}]},
{"label":"209([#565])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"210([k@[#566]#572])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"211([#566])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@1@10043 : int;\nval y@1@10044 : int;\nstd/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@1@10043\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s@1)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@1@10044\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[4]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@1@10043, y@1@10044)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[2]},"in":{"any":[3,4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@1@10043, y@1@10044)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@1@10044\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s@1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@1@10043\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@1@10043 : int;\nval y@1@10044 : int;\nstd/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"212([k@[k@[k@[k@[#535]#540]#545]#548]#554])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice@0@0@10036) {\n  ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> val x@1@10043 : int;\n        val y@1@10044 : int;\n    std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0@0@10036) {\n  ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> val x@1@10043 : int;\n        val y@1@10044 : int;\n    std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":208,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"69\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"70\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"71\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0@0@10036) {\n  ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> val x@1@10043 : int;\n        val y@1@10044 : int;\n    std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice@0@0@10036) {\n  ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> val x@1@10043 : int;\n        val y@1@10044 : int;\n    std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":211,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1180]","target":209,"args":{"any":[]}}}]},
{"label":"213([k@[k@[k@[#535]#540]#545]#548])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":212,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":206}]},
{"label":"214([k@[k@[#535]#540]#545])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":213,"args":{"any":[1]}},
{"op":"Jump","target":35}]},
{"label":"215([switch case for Bool(true)#574])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"216([#587])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"217([k@[switch case for Bool(false)#576]#581])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"218([match_def@[#589]#590])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"219([match_std/core/types/@None@[#589]#591])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"220([#589])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":219,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1181]","target":218,"args":{"any":[]}}}]},
{"label":"221([#594])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"222([switch case for Bool(false)#576])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@1;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@1;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@1;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":217,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@1;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@1;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@1;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":221,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1182]","target":220,"args":{"any":[]}}}]},
{"label":"223([switch default case#595])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"224([switch default case#575])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[222],"default":223}]},
{"label":"225([k@[#535]#540])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":214,"args":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[215],"default":224}]},
{"label":"226([match_def@[match_def@[#535]#596]#597])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"227([#598])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"228([match_def@[#535]#596])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":227,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1183]","target":226,"args":{"any":[]}}}]},
{"label":"229([match_std/core/types/@Optional@[#535]#601])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"230([#535])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@1;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n               -> 1;\n          }), 1)));\n  }))))), (std/core/sslice/string((match (slice@0@0@10036) {\n    ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n       -> val x@1@10043 : int;\n          val y@1@10044 : int;\n      std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":225,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@1;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n             -> 1;\n        }), 1)));\n}))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((std/core/string/to-upper((std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@1: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@1;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n               -> 1;\n          }), 1)));\n  }))))), (std/core/sslice/string((match (slice@0@0@10036) {\n    ((@skip std/core/sslice/Sslice((s@1: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n       -> val x@1@10043 : int;\n          val y@1@10044 : int;\n      std/core/sslice/Sslice(s@1, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@1@10043, y@1@10044)));\n  }))))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":229,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1184]","target":228,"args":{"any":[]}}}]},
{"label":"231([k@[k@[k@[mcore:[#459]#521]#523]#528]#533])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Push","target":230,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"232([switch case for Bool(true)#602])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"233([#615])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"234([k@[switch case for Bool(false)#604]#609])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"235([match_def@[#617]#618])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"236([match_std/core/types/@None@[#617]#619])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"237([#617])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":236,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1185]","target":235,"args":{"any":[]}}}]},
{"label":"238([#622])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"239([switch case for Bool(false)#604])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend(slice@0@1, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n         -> @uniq-n@914@0@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n       -> @uniq-n@914@0@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n     -> @uniq-n@914@0@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":234,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n     -> @uniq-n@914@0@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n       -> @uniq-n@914@0@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend(slice@0@1, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n         -> @uniq-n@914@0@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":238,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1186]","target":237,"args":{"any":[]}}}]},
{"label":"240([switch default case#623])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"241([switch default case#603])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[239],"default":240}]},
{"label":"242([k@[k@[mcore:[#459]#521]#523]#528])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":231,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[232],"default":241}]},
{"label":"243([#625])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"244([#626])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"245([match_def@[k@[mcore:[#459]#521]#523]#624])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":244,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1187]","target":243,"args":{"any":[]}}}]},
{"label":"246([#629])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"247([k@[mcore:[#459]#521]#523])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> slice@0@1;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0: bool)\n     -> std/core/sslice/extend(slice@0@1, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n             -> @uniq-n@914@0@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":242,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> slice@0@1;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0: bool)\n     -> std/core/sslice/extend(slice@0@1, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0@0: int) : int) : ? int ) as @pat@4@0: ? int)\n             -> @uniq-n@914@0@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":246,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1188]","target":245,"args":{"any":[]}}}]},
{"label":"248([mcore:[#459]#521])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Push","target":247,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"249([#648])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":35}]},
{"label":"250([k@[k@[k@[mcore:[#477]#630]#632]#637]#642])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(count@0, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Push","target":249,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(count@0, 1)","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"251([switch case for Bool(true)#650])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"252([#663])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"253([k@[switch case for Bool(false)#652]#657])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"254([match_def@[#665]#666])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"255([match_std/core/types/@None@[#665]#667])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"256([#665])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":255,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1189]","target":254,"args":{"any":[]}}}]},
{"label":"257([#670])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"258([switch case for Bool(false)#652])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":253,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"76\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":257,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1190]","target":256,"args":{"any":[]}}}]},
{"label":"259([switch default case#671])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"260([switch default case#651])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[258],"default":259}]},
{"label":"261([k@[k@[mcore:[#477]#630]#632]#637])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":250,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[251],"default":260}]},
{"label":"262([#673])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"263([#674])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"264([match_def@[k@[mcore:[#477]#630]#632]#672])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":263,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1191]","target":262,"args":{"any":[]}}}]},
{"label":"265([#677])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"266([k@[mcore:[#477]#630]#632])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }), (std/core/int/int-sub(count@0, 1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }), (std/core/int/int-sub(count@0, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":261,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }), (std/core/int/int-sub(count@0, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/extend((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-n@914;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), 1))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> slice@0;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n            ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n               -> @uniq-n@914@0;\n            ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n               -> 1;\n          }), 1)));\n  }), (std/core/int/int-sub(count@0, 1)))))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":265,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1192]","target":264,"args":{"any":[]}}}]},
{"label":"267([mcore:[#477]#630])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Push","target":266,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"268([switch case for Bool(true)#682])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"269([k@[k@[k@[k@[#691]#693]#696]#701]#705])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"270([k@[k@[k@[#691]#693]#696]#701])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@10056, n)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@10056, n)","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"271([k@[k@[#691]#693]#696])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"Push","target":270,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"272([match_def@[k@[#691]#693]#707])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"273([#708])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"80\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"82\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"80\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"82\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"274([k@[#691]#693])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0@0@10053) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"80\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"82\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":271,"args":{"any":[1,3,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"80\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"81\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"82\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0@0@10053) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":2,"clauses":[{"tag":"std/core/sslice/Sslice","target":273,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1193]","target":272,"args":{"any":[]}}}]},
{"label":"275([match_def@[#691]#709])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"276([match_std/core/sslice/Sslice@[#691]#710])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"78\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"78\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"277([#691])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(x@10056, n)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice((match (slice@0@0@10053) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), (match (slice@0@0@10053) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0@0@10053) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"78\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"79\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":274,"args":{"any":[1,2,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"77\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"78\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"79\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0@0@10053) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice((match (slice@0@0@10053) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), (match (slice@0@0@10053) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(x@10056, n)))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":2,"clauses":[{"tag":"std/core/sslice/Sslice","target":276,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1194]","target":275,"args":{"any":[]}}}]},
{"label":"278([k@[switch case for Bool(false)#687]#689])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10056\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/count(slice@0)","traced":{"any":[]}},
{"op":"Push","target":277,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/count(slice@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10056\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":48}]},
{"label":"279([switch case for Bool(false)#687])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val slice@0@0@10053 : sslice/sslice;\nval x@10056 : int;\nstd/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(x@10056, n)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/advance(slice@0, n)","traced":{"any":[]}},
{"op":"Push","target":278,"args":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/advance(slice@0, n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10053\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val slice@0@0@10053 : sslice/sslice;\nval x@10056 : int;\nstd/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10053) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(x@10056, n)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":186}]},
{"label":"280([switch default case#711])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"281([switch default case#683])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[279],"default":280}]},
{"label":"282([mcore:[#494]#678])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[268],"default":281}]},
{"label":"283([mcore:[#498]#712])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"284([#735])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"285([k@[switch case for Bool(true)#720]#729])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":283}]},
{"label":"286([switch case for Bool(true)#720])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@10058 : int;\nval y@10059 : int;\nstd/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10058\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10059\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(post)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@10058, y@10059)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Push","target":285,"args":{"any":[]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@10058, y@10059)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(post)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10059\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10058\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@10058 : int;\nval y@10059 : int;\nstd/core/types/Just<sslice/sslice>((std/core/sslice/Sslice(s, 0, (std/core/int/int-sub(x@10058, y@10059)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"287([switch case for Bool(false)#738])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"288([switch default case#743])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"289([switch default case#737])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[287],"default":288}]},
{"label":"290([k@[mcore:[#506]#717]#719])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[286],"default":289}]},
{"label":"291([mcore:[#506]#717])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/xends-with(s, post)","traced":{"any":[]}},
{"op":"Push","target":290,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/xends-with(s, post)","traced":{"any":[]}},
{"op":"Jump","target":56}]},
{"label":"292([k@[k@[k@[mcore:[#520]#744]#746]#751]#756])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":35}]},
{"label":"293([switch case for Bool(true)#758])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"294([#771])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"295([k@[switch case for Bool(false)#760]#765])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"296([match_def@[#773]#774])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"297([match_std/core/types/@None@[#773]#775])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"298([#773])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":297,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1195]","target":296,"args":{"any":[]}}}]},
{"label":"299([#778])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"300([switch case for Bool(false)#760])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":295,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"88\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":299,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1196]","target":298,"args":{"any":[]}}}]},
{"label":"301([switch default case#779])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"302([switch default case#759])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[300],"default":301}]},
{"label":"303([k@[k@[mcore:[#520]#744]#746]#751])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":292,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[293],"default":302}]},
{"label":"304([#781])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"305([#782])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"306([match_def@[k@[mcore:[#520]#744]#746]#780])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":305,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1197]","target":304,"args":{"any":[]}}}]},
{"label":"307([#785])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"308([k@[mcore:[#520]#744]#746])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":303,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@3: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n             -> 1;\n        }), 1)));\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":307,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1198]","target":306,"args":{"any":[]}}}]},
{"label":"309([mcore:[#520]#744])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Push","target":308,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"310([mcore:[#527]#786])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"311([method_apply@[k@[mcore:[#529]#791]#798]#802])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":310}]},
{"label":"312([k@[mcore:[#529]#791]#798])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":1,"targets":[311],"args":{"any":[]},"tags":["apply"]},
{"op":"Jump","target":157}]},
{"label":"313([mcore:[#529]#791])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), (std/core/types/Just<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":312,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), (std/core/types/Just<char>))","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"314([switch case for Bool(true)#816])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x89\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x89\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"315([k@[k@[#826]#829]#835])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"316([k@[#826]#829])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"317([match_def@[match_def@[#826]#837]#838])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"318([#839])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"319([match_def@[#826]#837])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":318,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1199]","target":317,"args":{"any":[]}}}]},
{"label":"320([match_std/core/types/@Optional@[#826]#842])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"321([#826])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@1115@1;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n     -> @uniq-n@1115@1;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":316,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"92\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n     -> @uniq-n@1115@1;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n       -> @uniq-n@1115@1;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":320,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1200]","target":319,"args":{"any":[]}}}]},
{"label":"322([k@[switch case for Bool(false)#818]#822])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Push","target":321,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":186}]},
{"label":"323([match_def@[#843]#844])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"324([match_std/core/types/@None@[#843]#845])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"325([#843])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":324,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1201]","target":323,"args":{"any":[]}}}]},
{"label":"326([#848])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"327([switch case for Bool(false)#818])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x89\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend((std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n        ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n           -> @uniq-n@1115@0;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n           -> 1;\n      }))))), (std/core/int/int-sub((match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n         -> @uniq-n@1115@1;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@1115@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(1, (match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@1115@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"Debug","msg":"BGN: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@1115@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":322,"args":{"any":[0,1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"91\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n     -> @uniq-n@1115@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(1, (match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n       -> @uniq-n@1115@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n         -> @uniq-n@1115@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n         -> 1;\n    }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend((std/core/sslice/advance(slice@0, (std/core/int/int-sub(1, (match (n) {\n        ((std/core/types/@Optional((@uniq-n@1115@0: int) : int) : ? int ) as @pat@3: ? int)\n           -> @uniq-n@1115@0;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n           -> 1;\n      }))))), (std/core/int/int-sub((match (n) {\n      ((std/core/types/@Optional((@uniq-n@1115@1: int) : int) : ? int ) as @pat@4: ? int)\n         -> @uniq-n@1115@1;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@1: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x89\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":326,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1202]","target":325,"args":{"any":[]}}}]},
{"label":"328([switch default case#849])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"329([switch default case#817])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[327],"default":328}]},
{"label":"330([k@[k@[mcore:[#544]#808]#810]#812])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[314],"default":329}]},
{"label":"331([#851])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"332([#852])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"333([match_def@[k@[mcore:[#544]#808]#810]#850])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":332,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1203]","target":331,"args":{"any":[]}}}]},
{"label":"334([#855])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@1115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@1115: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"335([k@[mcore:[#544]#808]#810])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@1115;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@1115;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":330,"args":{"any":[1,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"90\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (n) {\n  ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-n@1115;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match (n) {\n    ((std/core/types/@Optional((@uniq-n@1115: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-n@1115;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":334,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1204]","target":333,"args":{"any":[]}}}]},
{"label":"336([mcore:[#544]#808])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/last1(s)","traced":{"any":[]}},
{"op":"Push","target":335,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/last1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":89}]},
{"label":"337([switch case for Bool(true)#860])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"338([k@[switch default case#861]#866])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"339([switch case for Bool(true)#868])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"340([k@[k@[k@[#877]#880]#885]#889])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"341([k@[k@[#877]#880]#885])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(end, start)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(end, start)","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"342([k@[#877]#880])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"Push","target":341,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"343([match_def@[#877]#891])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"344([match_std/core/sslice/Sslice@[#877]#892])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"96\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"98\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"96\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"98\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"345([#877])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0@0@10070) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"96\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"98\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":342,"args":{"any":[1,3,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"96\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"97\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"98\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0@0@10070) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":2,"clauses":[{"tag":"std/core/sslice/Sslice","target":344,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1205]","target":343,"args":{"any":[]}}}]},
{"label":"346([#893])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"347([#894])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"94\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"95\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"94\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"95\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"348([k@[switch case for Bool(false)#873]#875])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(end, start)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice((match (slice@0@0@10070) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> @x;\n  }), (match (slice@0@0@10070) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0@0@10070) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"94\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"95\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":345,"args":{"any":[1,0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"93\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"94\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"95\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0@0@10070) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice((match (slice@0@0@10070) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> @x;\n  }), (match (slice@0@0@10070) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(end, start)))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":347,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1206]","target":346,"args":{"any":[]}}}]},
{"label":"349([switch case for Bool(false)#873])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val slice@0@0@10070 : sslice/sslice\n      = std/core/sslice/advance(slice@0, start);\nstd/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(end, start)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/advance(slice@0, start)","traced":{"any":[]}},
{"op":"Push","target":348,"args":{"any":[0,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/advance(slice@0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@0@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val slice@0@0@10070 : sslice/sslice\n      = std/core/sslice/advance(slice@0, start);\nstd/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n         -> @x;\n    }), (match (slice@0@0@10070) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n         -> @x@0;\n    }), 0)), (std/core/int/int-sub(end, start)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":186}]},
{"label":"350([switch default case#895])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"351([switch default case#869])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,3]}},
{"op":"Switch","arg":3,"values":[false],"targets":[349],"default":350}]},
{"label":"352([switch default case#861])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(<)(end, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val slice@0@0@10070 : sslice/sslice\n              = std/core/sslice/advance(slice@0, start);\n    std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n          ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n             -> @x;\n        }), (match (slice@0@0@10070) {\n          ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n             -> @x@0;\n        }), 0)), (std/core/int/int-sub(end, start)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(<)(end, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val slice@0@0@10070 : sslice/sslice\n              = std/core/sslice/advance(slice@0, start);\n    std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0@0@10070) {\n          ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n             -> @x;\n        }), (match (slice@0@0@10070) {\n          ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@4: sslice/sslice)\n             -> @x@0;\n        }), 0)), (std/core/int/int-sub(end, start)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[339],"default":351}]},
{"label":"353([mcore:[#561]#856])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[1,3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[337],"default":352}]},
{"label":"354([#910])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":35}]},
{"label":"355([#912])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"356([k@[#913]#919])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"357([#913])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x@0@10082 : int;\nval y@0@10083 : int;\nstd/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10082\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@0@10083\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[4]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@0@10082, y@0@10083)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[2]},"in":{"any":[3,4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@0@10082, y@0@10083)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, len)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@0@10083\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10082\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x@0@10082 : int;\nval y@0@10083 : int;\nstd/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(s@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(len,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (len: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"358([k@[k@[k@[mcore:[#583]#896]#898]#903]#908])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice@0@10075) {\n  ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> val x@0@10082 : int;\n        val y@0@10083 : int;\n    std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0@10075) {\n  ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> val x@0@10082 : int;\n        val y@0@10083 : int;\n    std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":354,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"99\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"100\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"101\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0@10075) {\n  ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> val x@0@10082 : int;\n        val y@0@10083 : int;\n    std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice@0@10075) {\n  ((@skip std/core/sslice/Sslice((s@0: string) : string, (start: int) : int, (len: int) : int) : sslice/sslice ) as @pat: sslice/sslice)\n     -> val x@0@10082 : int;\n        val y@0@10083 : int;\n    std/core/sslice/Sslice(s@0, (std/core/int/int-add(start, len)), (std/core/int/int-sub(x@0@10082, y@0@10083)));\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":357,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1207]","target":355,"args":{"any":[]}}}]},
{"label":"359([switch case for Bool(true)#921])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x99\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x99\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"360([#934])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"361([k@[switch case for Bool(false)#923]#928])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":187}]},
{"label":"362([match_def@[#936]#937])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"363([match_std/core/types/@None@[#936]#938])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"364([#936])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":363,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1208]","target":362,"args":{"any":[]}}}]},
{"label":"365([#941])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"366([switch case for Bool(false)#923])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x99\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend(slice@0@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":361,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"103\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n     -> @uniq-n@914@0;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n       -> @uniq-n@914@0;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend(slice@0@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n         -> @uniq-n@914@0;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n         -> 1;\n    }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x99\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":365,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1209]","target":364,"args":{"any":[]}}}]},
{"label":"367([switch default case#942])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"368([switch default case#922])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[366],"default":367}]},
{"label":"369([k@[k@[mcore:[#583]#896]#898]#903])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":358,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[359],"default":368}]},
{"label":"370([#944])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"371([#945])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"372([match_def@[k@[mcore:[#583]#896]#898]#943])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":371,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1210]","target":370,"args":{"any":[]}}}]},
{"label":"373([#948])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-n@914,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-n@914: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"374([k@[mcore:[#583]#896]#898])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":369,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n     -> @uniq-n@914;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)((match ((std/core/types/@None<int>)) {\n    ((std/core/types/@Optional((@uniq-n@914: int) : int) : ? int ) as @pat@0: ? int)\n       -> @uniq-n@914;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0@0: ? int)\n       -> 1;\n  }), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> slice@0@0;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/sslice/extend(slice@0@0, (std/core/int/int-sub((match ((std/core/types/@None<int>)) {\n          ((std/core/types/@Optional((@uniq-n@914@0: int) : int) : ? int ) as @pat@0@1: ? int)\n             -> @uniq-n@914@0;\n          ((@skip std/core/types/@None() : ? int ) as @pat@0@0@0: ? int)\n             -> 1;\n        }), 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@10075\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":373,"args":{"any":[1]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1211]","target":372,"args":{"any":[]}}}]},
{"label":"375([mcore:[#583]#896])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"slice@0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Push","target":374,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/first1(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"slice@0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"376([switch case for Bool(true)#953])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"377([k@[k@[#963]#968]#971])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"378([k@[#963]#968])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":187}]},
{"label":"379([#963])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Push","target":378,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"380([#973])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"381([#974])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"105\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"107\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"105\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"107\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"382([k@[switch case for Bool(false)#958]#960])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"105\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"107\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":379,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"105\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"106\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"107\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":2,"clauses":[{"tag":"std/core/sslice/Sslice","target":381,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1212]","target":380,"args":{"any":[]}}}]},
{"label":"383([#975])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"384([#976])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"103\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"104\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"103\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"104\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"385([switch case for Bool(false)#958])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), n)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), (match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"103\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"104\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":382,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"slice@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"102\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"103\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"104\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice@0) {\n  ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice((match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n       -> @x;\n  }), (match (slice@0) {\n    ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n       -> @x@0;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/extend((std/core/sslice/Sslice((match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@x: string) : string, (@pat@0@0: int) : int, (@pat@1@0: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice)\n         -> @x;\n    }), (match (slice@0) {\n      ((@skip std/core/sslice/Sslice((@pat@0@1: string) : string, (@x@0: int) : int, (@pat@1@1: int) : int) : sslice/sslice ) as @pat@2: sslice/sslice)\n         -> @x@0;\n    }), 0)), n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":384,"args":{"any":[0,1,2]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1213]","target":383,"args":{"any":[]}}}]},
{"label":"386([switch default case#977])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"387([switch default case#954])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[385],"default":386}]},
{"label":"388([mcore:[#595]#949])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[376],"default":387}]},
{"label":"389([switch case for Bool(true)#982])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"390([#994])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"391([match_def@[#996]#997])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"392([match_std/core/types/Nothing@[#996]#998])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"393([#996])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":392,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1214]","target":391,"args":{"any":[]}}}]},
{"label":"394([match_def@[match_def@[#999]#1000]#1001])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"395([#1002])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"396([match_def@[#999]#1000])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":395,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1215]","target":394,"args":{"any":[]}}}]},
{"label":"397([k@[#1005]#1011])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"398([#1005])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":405}]},
{"label":"399([match_std/core/sslice/Sslice@[#999]#1003])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"110\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"111\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"112\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice@0)","traced":{"any":[]}},
{"op":"Push","target":398,"args":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"110\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"111\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"112\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"400([#999])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"110\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"111\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"112\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"110\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"111\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"112\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":399,"args":{"any":[4,5,6]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1216]","target":396,"args":{"any":[]}}}]},
{"label":"401([k@[switch case for Bool(false)#987]#992])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":400,"args":{"any":[3]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1217]","target":393,"args":{"any":[]}}}]},
{"label":"402([switch case for Bool(false)#987])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/starts-with(s, sub))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> s;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/starts-with(s, sub)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":401,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/starts-with(s, sub)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/starts-with(s, sub))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/sslice/trim-left((std/core/sslice/string(slice@0)), sub);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> s;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":97}]},
{"label":"403([switch default case#1013])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"404([switch default case#983])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[402],"default":403}]},
{"label":"405([mcore:[#609]#978])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[389],"default":404}]},
{"label":"406([switch case for Bool(true)#1018])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"407([#1030])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"408([match_def@[#1032]#1033])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"409([match_std/core/types/Nothing@[#1032]#1034])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"410([#1032])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":409,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1218]","target":408,"args":{"any":[]}}}]},
{"label":"411([match_def@[match_def@[#1035]#1036]#1037])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"412([#1038])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"413([match_def@[#1035]#1036])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":412,"args":{"any":[]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1219]","target":411,"args":{"any":[]}}}]},
{"label":"414([k@[#1041]#1047])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"415([#1041])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":422}]},
{"label":"416([match_std/core/sslice/Sslice@[#1035]#1039])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(slice@0)","traced":{"any":[]}},
{"op":"Push","target":415,"args":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(slice@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"417([#1035])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as slice@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":416,"args":{"any":[4,5,6]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1220]","target":413,"args":{"any":[]}}}]},
{"label":"418([k@[switch case for Bool(false)#1023]#1028])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"114\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":417,"args":{"any":[3]}}],"default":{"tag":"9dba8fc7-4459-4cae-9250-e8f5f9609226#[Missing Tag#1221]","target":410,"args":{"any":[]}}}]},
{"label":"419([switch case for Bool(false)#1023])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/ends-with(s, sub))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> s;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/ends-with(s, sub)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":418,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/ends-with(s, sub)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/ends-with(s, sub))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as slice@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@1: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/sslice/trim-right((std/core/sslice/string(slice@0)), sub);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> s;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"sub\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":291}]},
{"label":"420([switch default case#1049])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"421([switch default case#1019])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[419],"default":420}]},
{"label":"422([mcore:[#623]#1014])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[406],"default":421}]},
{"label":"423([mcore:[#624]#22])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Construct","out":0,"type":"std/core/sslice/sslice","tag":"std/core/sslice/Sslice","args":{"any":[0,1,2]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"424([k@[k@[#1111]#1122]#1135])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"std/core/sslice/invalid"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_edab72c4-7a77-42e9-af02-d2bfb765a792"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"425([k@[#1111]#1122])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"std/core/sslice/empty"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/sslice/invalid)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/invalid\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(\"\", -1, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Debug","msg":"BGN: genExpr: -1","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":-1},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"Push","target":424,"args":{"any":[0,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: -1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(\"\", -1, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/invalid\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"426([#1111])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/sslice/empty)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/empty\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(\"\", 0, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"Push","target":425,"args":{"any":[0,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(\"\", 0, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/sslice/empty\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Jump","target":423}]},
{"label":"427([k@[k@[k@[k@[#1061]#1071]#1081]#1091]#1101])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#201]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":426,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"428([k@[k@[k@[#1061]#1071]#1081]#1091])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#200]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":427,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"429([k@[k@[#1061]#1071]#1081])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#199]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":428,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"430([k@[#1061]#1071])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#198]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_unsafe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/unsafe)"},
{"op":"Push","target":429,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"431([#1061])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#197]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_undiv.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/undiv)"},
{"op":"Push","target":430,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"432([mcore:[static initializers#641]#1051])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#196]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":431,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"433([k@[main entrypoint#2]#1145])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"434([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":433,"args":{"any":[]}},
{"op":"Jump","target":432}]}],
"symbols":[{"name":"std/core/sslice/sslice/str","position":2},
{"name":"std/core/sslice/sslice/start","position":5},
{"name":"std/core/sslice/sslice/len","position":8},
{"name":"std/core/sslice/sslice/@copy","position":33},
{"name":"std/core/sslice/@new-sslice","position":34},
{"name":"std/core/sslice/string","position":35},
{"name":"std/core/sslice/next","position":36},
{"name":"std/core/sslice/slice","position":37},
{"name":"std/core/sslice/after","position":41},
{"name":"std/core/sslice/before","position":45},
{"name":"std/core/sslice/first1","position":46},
{"name":"std/core/sslice/common-prefix","position":47},
{"name":"std/core/sslice/count","position":48},
{"name":"std/core/sslice/truncate","position":55},
{"name":"std/core/sslice/xends-with","position":56},
{"name":"std/core/sslice/find","position":64},
{"name":"std/core/sslice/find-last","position":72},
{"name":"std/core/sslice/is-empty","position":80},
{"name":"std/core/sslice/is-notempty","position":84},
{"name":"std/core/sslice/is-valid","position":88},
{"name":"std/core/sslice/last1","position":89},
{"name":"std/core/sslice/starts-with","position":97},
{"name":"std/core/sslice/(==)","position":119},
{"name":"std/core/sslice/(!=)","position":125},
{"name":"std/core/sslice/(===)","position":136},
{"name":"std/core/sslice/(!==)","position":142},
{"name":"std/core/sslice/foreach-while","position":157},
{"name":"std/core/sslice/string/foreach-while","position":159},
{"name":"std/core/sslice/foreach","position":164},
{"name":"std/core/sslice/string/foreach","position":170},
{"name":"std/core/sslice/pred/count","position":185},
{"name":"std/core/sslice/advance","position":186},
{"name":"std/core/sslice/extend","position":187},
{"name":"std/core/sslice/first","position":204},
{"name":"std/core/sslice/capitalize","position":248},
{"name":"std/core/sslice/string/truncate","position":267},
{"name":"std/core/sslice/drop","position":282},
{"name":"std/core/sslice/ends-with","position":291},
{"name":"std/core/sslice/head","position":309},
{"name":"std/core/sslice/head-char","position":313},
{"name":"std/core/sslice/last","position":336},
{"name":"std/core/sslice/subslice","position":353},
{"name":"std/core/sslice/tail","position":375},
{"name":"std/core/sslice/take","position":388},
{"name":"std/core/sslice/trim-left","position":405},
{"name":"std/core/sslice/trim-right","position":422},
{"name":"std/core/sslice/Sslice","position":423},
{"name":"$static-init","position":432},
{"name":"$entrypoint","position":434}],
"frameSize":{"regs_any":16}}