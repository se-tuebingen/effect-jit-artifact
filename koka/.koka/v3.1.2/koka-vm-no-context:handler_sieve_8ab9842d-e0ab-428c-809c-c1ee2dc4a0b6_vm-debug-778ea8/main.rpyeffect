{"blocks":[{"label":"0([match_def@[mcore:[#87]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_main/@Hnd-prime@[mcore:[#87]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,bool,main/prime,65,66>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,bool,main/prime,65,66>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#87]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/prime","scrutinee":0,"clauses":[{"tag":"main/@Hnd-prime","target":1,"args":{"any":[0,1]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#673]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#88]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_main/@Hnd-prime@[mcore:[#88]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,bool,main/prime,89,90>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,bool,main/prime,89,90>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#88]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"prime@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/prime","scrutinee":0,"clauses":[{"tag":"main/@Hnd-prime","target":4,"args":{"any":[0,1]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#674]","target":3,"args":{"any":[]}}}]},
{"label":"6([mcore:[#89]#9])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"7([mcore:[#92]#14])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"8([mcore:[#98]#22])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/prime :: (E, V) -> V)|(e :: E)>,(main/prime :: (E, V) -> V),a>(main/@tag-prime, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/prime :: (E, V) -> V)|(e :: E)>,(main/prime :: (E, V) -> V),a>(main/@tag-prime, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":7}]},
{"label":"9([match_def@[mcore:[#99]#29]#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_main/@Hnd-prime@[mcore:[#99]#29]#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,162,163>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,162,163>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([mcore:[#99]#29])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/prime\"}}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/prime","scrutinee":0,"clauses":[{"tag":"main/@Hnd-prime","target":10,"args":{"any":[0,1]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#675]","target":9,"args":{"any":[]}}}]},
{"label":"12([mcore:[#100]#32])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"13([mcore:[#101]#38])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"14([#57])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([k@[#58]#60])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([match_def@[#58]#62])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([k@[match_main/@Hnd-prime@[#58]#63]#65])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([#67])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([k@[#68]#70])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([#68])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/prime>, int) -> 1007 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10020, e)","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10020, e)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/prime>, int) -> 1007 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"21([match_main/@Hnd-prime@[#58]#63])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-prime) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10020, e);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-prime) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10020, e);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":20,"args":{"any":[3]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#676]","target":18,"args":{"any":[]}}}]},
{"label":"22([#58])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10020\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/prime>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-prime((@pat@0@0: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-prime) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10020, e);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-prime((@pat@0@0: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-prime) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10020, e);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10020\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/prime>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/prime","scrutinee":4,"clauses":[{"tag":"main/@Hnd-prime","target":21,"args":{"any":[3,4]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#677]","target":16,"args":{"any":[]}}}]},
{"label":"23([k@[k@[mcore:[#110]#42]#48]#56])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10020\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10020\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":22,"args":{"any":[2,3,4,5]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#678]","target":14,"args":{"any":[]}}}]},
{"label":"24([k@[mcore:[#110]#42]#48])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":23,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":12}]},
{"label":"25([mcore:[#110]#42])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10020\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":24,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10020\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"26([mcore:[#113]#72])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"27([mcore:[#114]#78])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"28([mcore:[#126]#82])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail1"}]},
{"label":"29([mcore:[#130]#87])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"30([mcore:[#131]#93])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"31([switch case for Bool(true)#101])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"32([k@[#119]#121])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([match_def@[#119]#123])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([k@[match_std/core/hnd/Ev@[#119]#124]#126])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([#128])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([k@[#129]#131])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"37([match_def@[#129]#133])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"38([#136])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([match_std/core/hnd/Clause1@[#129]#134])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime@0: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<main/prime>, int) -> 1007 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f@0(m@0, ev@0@10026, e@0)","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f@0(m@0, ev@0@10026, e@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime@0: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<main/prime>, int) -> 1007 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"40([#129])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime@0: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-prime@0) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10026, e@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime@0: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime@0: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-prime@0) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10026, e@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime@0: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":39,"args":{"any":[3]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#679]","target":37,"args":{"any":[]}}}]},
{"label":"41([match_std/core/hnd/Ev@[#119]#124])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10026\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: hnd/htag<main/prime>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-prime@0) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10026, e@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-prime@0) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10026, e@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10026\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: hnd/htag<main/prime>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/prime","scrutinee":4,"clauses":[{"tag":"main/@Hnd-prime","target":40,"args":{"any":[3,4]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#680]","target":35,"args":{"any":[]}}}]},
{"label":"42([#119])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@0@10026) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime@0) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10026, e@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10026\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10026\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@0@10026) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime@0) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10026, e@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":41,"args":{"any":[2,3,4,5]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#681]","target":33,"args":{"any":[]}}}]},
{"label":"43([k@[switch case for Bool(false)#105]#111])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":42,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":29}]},
{"label":"44([switch case for Bool(false)#105])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10026) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime@0) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10026, e@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10026\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":43,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10026\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10026) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime@0) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10026, e@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x21\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":30}]},
{"label":"45([switch default case#138])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([switch default case#104])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[44],"default":45}]},
{"label":"47([mcore:[#140]#97])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((std/core/int/(%)(e@0, i)), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)(e@0, i)","traced":{"any":[]}},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)(e@0, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((std/core/int/(%)(e@0, i)), 0)","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[31],"default":46}]},
{"label":"48([mcore:[#144]#139])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([mcore:[#147]#140])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"CallLib","lib":5,"symbol":"std/core/hnd/@open-at3"}]},
{"label":"50([method_apply@[mcore:[#154]#149]#158])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":80}]},
{"label":"51([mcore:[#154]#149])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10016\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x3@10018\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(a, i)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":3,"targets":[50],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Swap","a":0,"b":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(a, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x3@10018\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10016\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":49}]},
{"label":"52([switch case for Bool(true)#172])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"53([k@[#189]#191])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([match_def@[#189]#193])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"55([k@[match_std/core/hnd/Ev@[#189]#194]#196])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([#198])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([k@[#199]#201])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([match_def@[#199]#203])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([k@[#206]#208])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([#215])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":47}]},
{"label":"61([method_apply@[#228]#232])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":48}]},
{"label":"62([method_apply@[#228]#236])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Jump","target":51}]},
{"label":"63([k@[#228]#252])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([#228])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":4,"targets":[61],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[62],"args":{"any":[1,2,3]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":1,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":3,"b":4},
{"op":"Jump","target":8}]},
{"label":"65([k@[switch case for Bool(true)#210]#225])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":64,"args":{"any":[1,2,3]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Jump","target":119}]},
{"label":"66([switch case for Bool(true)#210])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x20\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n      (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n        ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n           -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                    = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n          (match (ev@0@10026) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n               -> (match (h@0) {\n                ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                   -> (match (@fun-prime@0) {\n                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                       -> f@0(m@0, ev@0@10026, e@0);\n                  });\n              });\n          });\n      });\n    }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n    @x;\n  }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n    val @x-x1@10016 : int;\n    val @x-x3@10018 : int;\n    (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n    (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n      ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n         -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10026) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                 -> (match (@fun-prime@0) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10026, e@0);\n                });\n            });\n        });\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n  (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n    ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n       -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n      (match (ev@0@10026) {\n        ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n           -> (match (h@0) {\n            ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n               -> (match (@fun-prime@0) {\n                ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                   -> f@0(m@0, ev@0@10026, e@0);\n              });\n          });\n      });\n  });\n}))","traced":{"any":[]}},
{"op":"New","out":4,"targets":[60],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":65,"args":{"any":[1,2,3,0]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n  (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n    ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n       -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n      (match (ev@0@10026) {\n        ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n           -> (match (h@0) {\n            ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n               -> (match (@fun-prime@0) {\n                ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                   -> f@0(m@0, ev@0@10026, e@0);\n              });\n          });\n      });\n  });\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n    (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n      ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n         -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10026) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                 -> (match (@fun-prime@0) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10026, e@0);\n                });\n            });\n        });\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n      (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n        ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n           -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                    = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n          (match (ev@0@10026) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n               -> (match (h@0) {\n                ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                   -> (match (@fun-prime@0) {\n                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                       -> f@0(m@0, ev@0@10026, e@0);\n                  });\n              });\n          });\n      });\n    }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n    @x;\n  }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n    val @x-x1@10016 : int;\n    val @x-x3@10018 : int;\n    (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x20\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"67([k@[switch case for Bool(false)#256]#267])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"68([switch case for Bool(false)#256])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x20\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/primes((std/core/int/int-add(i, 1)), n, a)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/primes((std/core/int/int-add(i, 1)), n, a)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x20\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":80}]},
{"label":"69([switch default case#269])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([switch default case#255])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":3,"values":[false],"targets":[68],"default":69}]},
{"label":"71([#206])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[66],"default":70}]},
{"label":"72([match_std/core/hnd/Clause1@[#199]#204])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/prime>, int) -> 1007 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((f(m, ev@10023, i))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n          (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n            ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n               -> std/core/types/False;\n            ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n               -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                        = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n              (match (ev@0@10026) {\n                ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                   -> (match (h@0) {\n                    ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                       -> (match (@fun-prime@0) {\n                        ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                           -> f@0(m@0, ev@0@10026, e@0);\n                      });\n                  });\n              });\n          });\n        }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n        @x;\n      }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n        val @x-x1@10016 : int;\n        val @x-x3@10018 : int;\n        (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n      }));\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> main/primes((std/core/int/int-add(i, 1)), n, a);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10023, i)","traced":{"any":[]}},
{"op":"Push","target":71,"args":{"any":[1,3,4]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10023, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((f(m, ev@10023, i))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n          (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n            ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n               -> std/core/types/False;\n            ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n               -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                        = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n              (match (ev@0@10026) {\n                ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                   -> (match (h@0) {\n                    ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                       -> (match (@fun-prime@0) {\n                        ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                           -> f@0(m@0, ev@0@10026, e@0);\n                      });\n                  });\n              });\n          });\n        }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n        @x;\n      }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n        val @x-x1@10016 : int;\n        val @x-x3@10018 : int;\n        (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n      }));\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> main/primes((std/core/int/int-add(i, 1)), n, a);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/prime>, int) -> 1007 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":5,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"73([#199])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-prime) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10023, i))) {\n      ((std/core/types/True() : bool ) as @pat@1@1: bool)\n         -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n              (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                   -> std/core/types/False;\n                ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                   -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                            = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                  (match (ev@0@10026) {\n                    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                       -> (match (h@0) {\n                        ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                           -> (match (@fun-prime@0) {\n                            ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                               -> f@0(m@0, ev@0@10026, e@0);\n                          });\n                      });\n                  });\n              });\n            }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n            @x;\n          }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n            val @x-x1@10016 : int;\n            val @x-x3@10018 : int;\n            (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n          }));\n      ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n         -> main/primes((std/core/int/int-add(i, 1)), n, a);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-prime) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10023, i))) {\n      ((std/core/types/True() : bool ) as @pat@1@1: bool)\n         -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n              (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                   -> std/core/types/False;\n                ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                   -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                            = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                  (match (ev@0@10026) {\n                    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                       -> (match (h@0) {\n                        ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                           -> (match (@fun-prime@0) {\n                            ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                               -> f@0(m@0, ev@0@10026, e@0);\n                          });\n                      });\n                  });\n              });\n            }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n            @x;\n          }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n            val @x-x1@10016 : int;\n            val @x-x3@10018 : int;\n            (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n          }));\n      ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n         -> main/primes((std/core/int/int-add(i, 1)), n, a);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-prime,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-prime: hnd/clause1<int,bool,main/prime,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-prime\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":6,"clauses":[{"tag":"std/core/hnd/Clause1","target":72,"args":{"any":[5]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#682]","target":58,"args":{"any":[]}}}]},
{"label":"74([match_std/core/hnd/Ev@[#189]#194])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/prime>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-prime((@pat@0@1: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-prime) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10023, i))) {\n          ((std/core/types/True() : bool ) as @pat@1@1: bool)\n             -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n                  (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                    ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                       -> std/core/types/False;\n                    ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                       -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                                = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                      (match (ev@0@10026) {\n                        ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                           -> (match (h@0) {\n                            ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                               -> (match (@fun-prime@0) {\n                                ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                                   -> f@0(m@0, ev@0@10026, e@0);\n                              });\n                          });\n                      });\n                  });\n                }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n                @x;\n              }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n                val @x-x1@10016 : int;\n                val @x-x3@10018 : int;\n                (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n              }));\n          ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n             -> main/primes((std/core/int/int-add(i, 1)), n, a);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":3,"to":4},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":5,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/prime\".\"main/@Hnd-prime\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-prime\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-prime((@pat@0@1: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-prime) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (1007 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10023, i))) {\n          ((std/core/types/True() : bool ) as @pat@1@1: bool)\n             -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n                  (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                    ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                       -> std/core/types/False;\n                    ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                       -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                                = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                      (match (ev@0@10026) {\n                        ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                           -> (match (h@0) {\n                            ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                               -> (match (@fun-prime@0) {\n                                ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                                   -> f@0(m@0, ev@0@10026, e@0);\n                              });\n                          });\n                      });\n                  });\n                }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n                @x;\n              }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n                val @x-x1@10016 : int;\n                val @x-x3@10018 : int;\n                (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n              }));\n          ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n             -> main/primes((std/core/int/int-add(i, 1)), n, a);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/prime>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/prime<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/prime","scrutinee":6,"clauses":[{"tag":"main/@Hnd-prime","target":73,"args":{"any":[5,6]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#683]","target":56,"args":{"any":[]}}}]},
{"label":"75([#189])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@10023) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-prime((@pat@0@1: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> (match ((f(m, ev@10023, i))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n                      (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                        ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                           -> std/core/types/False;\n                        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                           -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                                    = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                          (match (ev@0@10026) {\n                            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                               -> (match (h@0) {\n                                ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                                   -> (match (@fun-prime@0) {\n                                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                                       -> f@0(m@0, ev@0@10026, e@0);\n                                  });\n                              });\n                          });\n                      });\n                    }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n                    @x;\n                  }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n                    val @x-x1@10016 : int;\n                    val @x-x3@10018 : int;\n                    (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n                  }));\n              ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n                 -> main/primes((std/core/int/int-add(i, 1)), n, a);\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@10023) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-prime((@pat@0@1: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> (match ((f(m, ev@10023, i))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n                      (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                        ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                           -> std/core/types/False;\n                        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                           -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                                    = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                          (match (ev@0@10026) {\n                            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                               -> (match (h@0) {\n                                ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                                   -> (match (@fun-prime@0) {\n                                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                                       -> f@0(m@0, ev@0@10026, e@0);\n                                  });\n                              });\n                          });\n                      });\n                    }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n                    @x;\n                  }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n                    val @x-x1@10016 : int;\n                    val @x-x3@10018 : int;\n                    (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n                  }));\n              ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n                 -> main/primes((std/core/int/int-add(i, 1)), n, a);\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":74,"args":{"any":[4,5,6,7]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#684]","target":54,"args":{"any":[]}}}]},
{"label":"76([k@[switch case for Bool(false)#175]#181])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":75,"args":{"any":[1,3,4]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":5,"to":2},
{"op":"Jump","target":26}]},
{"label":"77([switch case for Bool(false)#175])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@10023 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@10023) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-prime((@pat@0@1: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> (match ((f(m, ev@10023, i))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n                      (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                        ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                           -> std/core/types/False;\n                        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                           -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                                    = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                          (match (ev@0@10026) {\n                            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                               -> (match (h@0) {\n                                ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                                   -> (match (@fun-prime@0) {\n                                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                                       -> f@0(m@0, ev@0@10026, e@0);\n                                  });\n                              });\n                          });\n                      });\n                    }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n                    @x;\n                  }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n                    val @x-x1@10016 : int;\n                    val @x-x3@10018 : int;\n                    (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n                  }));\n              ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n                 -> main/primes((std/core/int/int-add(i, 1)), n, a);\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":76,"args":{"any":[0,3,1,2]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@10023 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@10023) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-prime((@pat@0@1: int) : int, (@fun-prime: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-prime) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n             -> (match ((f(m, ev@10023, i))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> main/@handle-prime<int,<(main/prime :: (E, V) -> V),(div :: X)>,int>((main/@Hnd-prime<<(main/prime :: (E, V) -> V),(div :: X)>,int>(1, (std/core/hnd/clause-tail1<<(main/prime :: (E, V) -> V),(div :: X)>,int,(main/prime :: (E, V) -> V),int,bool>((fn<<(main/prime :: (E, V) -> V),(div :: X)>>(e@0: int){\n                      (match ((std/core/int/(==)((std/core/int/(%)(e@0, i)), 0))) {\n                        ((std/core/types/True() : bool ) as @pat@2@0@0: bool)\n                           -> std/core/types/False;\n                        ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n                           -> val ev@0@10026 : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>\n                                    = std/core/hnd/@evv-at<(main/prime :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                          (match (ev@0@10026) {\n                            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/prime :: (E, V) -> V)<(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>))\n                               -> (match (h@0) {\n                                ((@skip main/@Hnd-prime((@pat@0@2: int) : int, (@fun-prime@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>) : (main/prime :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/prime :: (E, V) -> V)<(e :: E),a>))\n                                   -> (match (@fun-prime@0) {\n                                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, int) -> (e :: E) bool) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,bool,(main/prime :: (E, V) -> V),(e :: E),a>))\n                                       -> f@0(m@0, ev@0@10026, e@0);\n                                  });\n                              });\n                          });\n                      });\n                    }))))), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(@x: int){\n                    @x;\n                  }), (fn<<(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V),(div :: X)>>(){\n                    val @x-x1@10016 : int;\n                    val @x-x3@10018 : int;\n                    (std/core/hnd/@open-at3<int,int,int,int,<(div :: X),(main/prime :: (E, V) -> V)>,<(div :: X),(main/prime :: (E, V) -> V),(main/prime :: (E, V) -> V)>>((std/core/types/@make-ssize_t(0)), main/primes, @x-x1@10016, n, @x-x3@10018));\n                  }));\n              ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n                 -> main/primes((std/core/int/int-add(i, 1)), n, a);\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":27}]},
{"label":"78([switch default case#270])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"79([switch default case#173])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[1,2]}},
{"op":"Switch","arg":3,"values":[false],"targets":[77],"default":78}]},
{"label":"80([mcore:[#161]#165])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[52],"default":79}]},
{"label":"81([mcore:[#165]#271])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"82([mcore:[#167]#276])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Return","args":{"any":[0]}}]},
{"label":"83([mcore:[#171]#278])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([mcore:[#177]#279])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: main/primes(2, n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 2","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":2},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 2","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/primes(2, n, 0)","traced":{"any":[]}},
{"op":"Jump","target":80}]},
{"label":"85([method_apply@[mcore:[#179]#290]#297])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":82}]},
{"label":"86([#311])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":83}]},
{"label":"87([#315])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":84}]},
{"label":"88([k@[k@[mcore:[#179]#290]#304]#307])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[86],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[87],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":8}]},
{"label":"89([k@[mcore:[#179]#290]#304])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":88,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":119}]},
{"label":"90([mcore:[#179]#290])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-prime<int,(div :: X),int>((main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n      std/core/types/True;\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(){\n    (main/primes(2, n, 0));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n    std/core/types/True;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n  std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[85],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":89,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n  std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n    std/core/types/True;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-prime<int,(div :: X),int>((main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n      std/core/types/True;\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(){\n    (main/primes(2, n, 0));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":81}]},
{"label":"91([mcore:[#180]#330])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/os/env/get-args"}]},
{"label":"92([mcore:[#182]#334])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/parse-int"}]},
{"label":"93([mcore:[#190]#340])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"94([mcore:[#192]#345])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Return","args":{"any":[0]}}]},
{"label":"95([mcore:[#196]#347])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"96([k@[mcore:[#202]#348]#352])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Jump","target":80}]},
{"label":"97([#363])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"98([#364])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"99([match_def@[mcore:[#202]#348]#362])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"31\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"31\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":98,"args":{"any":[0]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#685]","target":97,"args":{"any":[]}}}]},
{"label":"100([#365])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 10","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":10},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 10","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"101([mcore:[#202]#348])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: main/primes(2, (match (m@10002) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x@1;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 2","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":2},
{"op":"Debug","msg":"BGN: genExpr: match (m@10002) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":96,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10002) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 2","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/primes(2, (match (m@10002) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x@1;\n  }), 0)","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":100,"args":{"any":[]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#686]","target":99,"args":{"any":[]}}}]},
{"label":"102([mcore:[#204]#368])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"103([mcore:[#206]#373])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"104([#402])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":94}]},
{"label":"105([method_apply@[k@[#409]#412]#416])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":95}]},
{"label":"106([method_apply@[k@[#409]#412]#420])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":101}]},
{"label":"107([k@[k@[k@[#409]#412]#436]#441])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":102}]},
{"label":"108([k@[k@[#409]#412]#436])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":107,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Jump","target":103}]},
{"label":"109([k@[#409]#412])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[105],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[106],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-prime)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":108,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":8}]},
{"label":"110([#409])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":109,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":119}]},
{"label":"111([k@[k@[k@[mcore:[#210]#378]#383]#385]#395])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-prime<int,(div :: X),int>((main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n      std/core/types/True;\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(){\n    (main/primes(2, (match (m@10002) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n           -> 10;\n        ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n           -> x@1;\n      }), 0));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n    std/core/types/True;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n  std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[104],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":110,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n  std/core/types/True;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n    std/core/types/True;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-prime<int,(div :: X),int>((main/@Hnd-prime<(div :: X),int>(1, (std/core/hnd/Clause1<int,bool,(main/prime :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/prime :: (E, V) -> V)>, x: int){\n      std/core/types/True;\n    }))))), (fn<(div :: X)>(@x: int){\n    @x;\n  }), (fn<<(main/prime :: (E, V) -> V),(div :: X)>>(){\n    (main/primes(2, (match (m@10002) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n           -> 10;\n        ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n           -> x@1;\n      }), 0));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":93}]},
{"label":"112([k@[k@[mcore:[#210]#378]#383]#385])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":111,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":92}]},
{"label":"113([#447])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"114([#448])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([match_def@[k@[mcore:[#210]#378]#383]#446])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":114,"args":{"any":[]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#687]","target":113,"args":{"any":[]}}}]},
{"label":"116([#451])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"117([k@[mcore:[#210]#378]#383])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/parse-int((match (xs@10004) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10004) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":112,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10004) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/parse-int((match (xs@10004) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"m@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":116,"args":{"any":[1,2]}}],"default":{"tag":"1ed24480-6eb1-4eaa-a5e7-577d4b6b281c#[Missing Tag#688]","target":115,"args":{"any":[]}}}]},
{"label":"118([mcore:[#210]#378])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":117,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":91}]},
{"label":"119([mcore:[#211]#254])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"main/prime","tag":"main/@Hnd-prime","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"120([k@[k@[k@[k@[#623]#633]#643]#653]#660])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"main/@tag-prime"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_0acfa211-b331-4b30-a5b4-1cf2fbac2006"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"121([k@[k@[k@[#623]#633]#643]#653])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/@tag-prime)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"main/@tag-prime\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(main/prime :: (E, V) -> V)>(\"prime@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"prime@main\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"prime@main"},
{"op":"Push","target":120,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"prime@main\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(main/prime :: (E, V) -> V)>(\"prime@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"main/@tag-prime\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":6}]},
{"label":"122([k@[k@[#623]#633]#643])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#86]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_os_env.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"Push","target":121,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"123([k@[#623]#633])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#85]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":122,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"124([#623])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#84]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":123,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"125([k@[k@[k@[k@[#573]#583]#593]#603]#613])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#83]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":124,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"126([k@[k@[k@[#573]#583]#593]#603])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#82]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":125,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"127([k@[k@[#573]#583]#593])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#81]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":126,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"128([k@[#573]#583])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#80]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":127,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"129([#573])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#79]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":128,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"130([k@[k@[k@[k@[#523]#533]#543]#553]#563])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#78]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":129,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"131([k@[k@[k@[#523]#533]#543]#553])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#77]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":130,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"132([k@[k@[#523]#533]#543])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#76]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":131,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"133([k@[#523]#533])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#75]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":132,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"134([#523])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#74]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":133,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"135([k@[k@[k@[k@[#473]#483]#493]#503]#513])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#73]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":134,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"136([k@[k@[k@[#473]#483]#493]#503])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#72]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":135,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"137([k@[k@[#473]#483]#493])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#71]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":136,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"138([k@[#473]#483])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#70]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":137,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"139([#473])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#69]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":138,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"140([k@[mcore:[static initializers#246]#453]#463])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#68]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":139,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"141([mcore:[static initializers#246]#453])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#67]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":140,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"142([k@[main entrypoint#2]#670])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"143([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":142,"args":{"any":[]}},
{"op":"Jump","target":141}]}],
"symbols":[{"name":"main/prime/@cfc","position":2},
{"name":"main/prime/@fun-prime","position":5},
{"name":"main/@handle-prime","position":8},
{"name":"main/@select-prime","position":11},
{"name":"main/prime","position":25},
{"name":"main/primes","position":80},
{"name":"main/run","position":90},
{"name":"main/main","position":118},
{"name":"main/@Hnd-prime","position":119},
{"name":"$static-init","position":141},
{"name":"$entrypoint","position":143}],
"frameSize":{"regs_any":16}}