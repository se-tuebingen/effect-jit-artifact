{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/vector"},"includes": [{"format": "sexp","value": ";; File with definitions for vectors (incomplete)\n(define $vectorToList:top (lambda ($vec:ptr $tail:ptr $i:int)\n  (switch $i:int\n    (0 $tail:ptr)\n    (_ (letrec ((define $ni:int (\"infixSub(Int, Int): Int\" $i:int 1))\n                (define $el:ptr (\"unsafeIndex(Array[Ptr], Int): Ptr\" $vec:ptr $ni:int))\n                (define $ntl:ptr (make $std/core/types/list $std/core/types/Cons \n                                       ($el:ptr $tail:ptr))))\n         ($vectorToList:top $vec:ptr $ntl:ptr $ni:int))))))\n\n(unit)"}],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/vector/@index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "index","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "idx","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "index","type": {"op": "Int"}},"annotation": "genExpr: index"}]},"annotation": "genExpr: std/core/int/ssize_t(index)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"idx\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["idx"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "idx","type": {"op": "Int"}},"annotation": "genExpr: idx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/vector/ssize_t/(<)(idx, (std/core/vector/lengthz<a>(v)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "idx","type": {"op": "Int"}},"annotation": "genExpr: idx"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, idx)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "index out of bounds"},"annotation": "genExpr: \"index out of bounds\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<exception-info>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/ExnRange","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception-info"}},"annotation": "genExpr: std/core/exn/ExnRange"}]},"annotation": "genExpr: std/core/types/@Optional<exception-info>(std/core/exn/ExnRange)"}]},"annotation": "genExpr: std/core/exn/throw<a>(\"index out of bounds\", (std/core/types/@Optional<exception-info>(std/core/exn/ExnRange)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(exn :: (E, V) -> V)>(v: (vector :: V -> V)<a>, index: int){\n  val idx : ssize_t\n        = std/core/int/ssize_t(index);\n  (match ((std/core/vector/ssize_t/(<)(idx, (std/core/vector/lengthz<a>(v))))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/vector/unsafe-idx<a>(v, idx);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/exn/throw<a>(\"index out of bounds\", (std/core/types/@Optional<exception-info>(std/core/exn/ExnRange)));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/@index\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/@index"]}, {"name": {"op": "Var","id": "std/core/vector/at","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "index","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "idx","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "index","type": {"op": "Int"}},"annotation": "genExpr: index"}]},"annotation": "genExpr: std/core/int/ssize_t(index)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"idx\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["idx"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "idx","type": {"op": "Int"}},"annotation": "genExpr: idx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/vector/ssize_t/(<)(idx, (std/core/vector/lengthz<a>(v)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "idx","type": {"op": "Int"}},"annotation": "genExpr: idx"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, idx)"}]},"annotation": "genExpr: std/core/types/Just<a>((std/core/vector/unsafe-idx<a>(v, idx)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(v: (vector :: V -> V)<a>, index: int){\n  val idx : ssize_t\n        = std/core/int/ssize_t(index);\n  (match ((std/core/vector/ssize_t/(<)(idx, (std/core/vector/lengthz<a>(v))))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Just<a>((std/core/vector/unsafe-idx<a>(v, idx)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/at\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/at"]}, {"name": {"op": "Var","id": "std/core/vector/ssize_t/incr","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "(#1 + 1)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: ssize_t){\n  std/core/vector/ssize_t/@extern-incr(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/ssize_t/incr\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/ssize_t/incr"]}, {"name": {"op": "Var","id": "std/core/vector/length","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int((std/core/vector/lengthz<a>(v)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(v: (vector :: V -> V)<a>){\n  std/core/int/ssize_t/int((std/core/vector/lengthz<a>(v)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/length\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/length"]}, {"name": {"op": "Var","id": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:($vectorToList:top $arg0:ptr $arg1:ptr (\"length(Array[Ptr]): Int\" $arg0:ptr))","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-tail@340: list<353>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-tail@340"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-tail@340,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-tail@340: list<353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (tail) {\n  ((std/core/types/@Optional((@uniq-tail@340: (list :: V -> V)<353>) : (list :: V -> V)<a>) : ? ((list :: V -> V)<a>) ) as @pat: ? ((list :: V -> V)<353>))\n     -> @uniq-tail@340;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<a>) ) as @pat@0: ? ((list :: V -> V)<353>))\n     -> std/core/types/Nil<a>;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}},"annotation": "genExpr: std/core/vector/@extern-vlist<a>(v, (match (tail) {\n    ((std/core/types/@Optional((@uniq-tail@340: (list :: V -> V)<353>) : (list :: V -> V)<a>) : ? ((list :: V -> V)<a>) ) as @pat: ? ((list :: V -> V)<353>))\n       -> @uniq-tail@340;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<a>) ) as @pat@0: ? ((list :: V -> V)<353>))\n       -> std/core/types/Nil<a>;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(v: (vector :: V -> V)<a>, tail: ? ((list :: V -> V)<a>)){\n  std/core/vector/@extern-vlist<a>(v, (match (tail) {\n      ((std/core/types/@Optional((@uniq-tail@340: (list :: V -> V)<a>) : (list :: V -> V)<a>) : ? ((list :: V -> V)<a>) ) as @pat: ? ((list :: V -> V)<a>))\n         -> @uniq-tail@340;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<a>) ) as @pat@0: ? ((list :: V -> V)<a>))\n         -> std/core/types/Nil<a>;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/vlist\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/vlist"]}, {"name": {"op": "Var","id": "std/core/vector/unvlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/@extern-unvlist","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/vector/@extern-unvlist<a>(xs)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  std/core/vector/@extern-unvlist<a>(xs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/unvlist\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/unvlist"]}, {"name": {"op": "Var","id": "std/core/vector/vector-alloc","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/@extern-vector-alloc","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/vector/@extern-vector-alloc<a,(e :: E)>(n, init)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: ssize_t, init: a){\n  std/core/vector/@extern-vector-alloc<a,(e :: E)>(n, init);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/vector-alloc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/vector-alloc"]}, {"name": {"op": "Var","id": "std/core/vector/vector-alloc-total","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/@extern-vector-alloc-total","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/vector/@extern-vector-alloc-total<a>(n, f)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(n: ssize_t, f: (ssize_t) -> a){\n  std/core/vector/@extern-vector-alloc-total<a>(n, f);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/vector-alloc-total\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/vector-alloc-total"]}, {"name": {"op": "Var","id": "std/core/vector/ssize_t/decr","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "(#1 - 1)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: ssize_t){\n  std/core/vector/ssize_t/@extern-decr(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/ssize_t/decr\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/ssize_t/decr"]}, {"name": {"op": "Var","id": "std/core/vector/ssize_t/is-zero","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "(#1 == 0)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: ssize_t){\n  std/core/vector/ssize_t/@extern-is-zero(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/ssize_t/is-zero\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/ssize_t/is-zero"]}, {"name": {"op": "Var","id": "std/core/vector/@lift-for-whilez@868","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}, {"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x3","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: action(i)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10000","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/ssize_t/incr","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/ssize_t/incr"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/ssize_t/incr(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10000\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10000"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-for-whilez@868","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-for-whilez@868<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10000","type": {"op": "Int"}},"annotation": "genExpr: i@0@10000"}]},"annotation": "genExpr: std/core/vector/@lift-for-whilez@868<a,(e :: E)>(action, n, i@0@10000)"}},"annotation": "genExpr: val i@0@10000 : ssize_t\n      = std/core/vector/ssize_t/incr(i);\nstd/core/vector/@lift-for-whilez@868<a,(e :: E)>(action, n, i@0@10000)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"4","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 484) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 484) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<484>))\n     -> val i@0@10000 : ssize_t\n              = std/core/vector/ssize_t/incr(i);\n    std/core/vector/@lift-for-whilez@868<a,(e :: E)>(action, n, i@0@10000);\n  ((@skip std/core/types/Just((x: 484) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<484>))\n     -> std/core/types/Just<a>(x);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: (ssize_t) -> (e :: E) (maybe :: V -> V)<a>, n: ssize_t, i: ssize_t){\n  (match ((std/core/vector/ssize_t/(<)(i, n))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((action(i))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<a>))\n           -> val i@0@10000 : ssize_t\n                    = std/core/vector/ssize_t/incr(i);\n          std/core/vector/@lift-for-whilez@868<a,(e :: E)>(action, n, i@0@10000);\n        ((@skip std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n           -> std/core/types/Just<a>(x);\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/@lift-for-whilez@868\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/@lift-for-whilez@868"]}, {"name": {"op": "Var","id": "std/core/vector/for-whilez","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-for-whilez@868","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-for-whilez@868<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-for-whilez@868<a,(e :: E)>(action, n, i)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: ssize_t, action: (ssize_t) -> (e :: E) (maybe :: V -> V)<a>){\n  val i : ssize_t\n        = std/core/int/ssize_t(0);\n  std/core/vector/@lift-for-whilez@868<a,(e :: E)>(action, n, i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/for-whilez\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/for-whilez"]}, {"name": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: action(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "i@0@10001","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/ssize_t/incr","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/ssize_t/incr"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/ssize_t/incr(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10001\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10001"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10001","type": {"op": "Int"}},"annotation": "genExpr: i@0@10001"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>(action, n, i@0@10001)"}},"annotation": "genExpr: val _ : ();\nval i@0@10001 : ssize_t;\nstd/core/vector/@lift-forz@869<(e :: E)>(action, n, i@0@10001)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(action: (ssize_t) -> (e :: E) (), n: ssize_t, i: ssize_t){\n  (match ((std/core/vector/ssize_t/(<)(i, n))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val _ : ();\n          val i@0@10001 : ssize_t;\n      std/core/vector/@lift-forz@869<(e :: E)>(action, n, i@0@10001);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/@lift-forz@869\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/@lift-forz@869"]}, {"name": {"op": "Var","id": "std/core/vector/forz","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>(action, n, i)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(n: ssize_t, action: (ssize_t) -> (e :: E) ()){\n  val i : ssize_t\n        = std/core/int/ssize_t(0);\n  std/core/vector/@lift-forz@869<(e :: E)>(action, n, i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/forz\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/forz"]}, {"name": {"op": "Var","id": "std/core/vector/foreach-indexedz","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@10002"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, i@0)"}]},"annotation": "genExpr: f(i@0, (std/core/vector/unsafe-idx<a>(v, i@0)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: ssize_t){\n  f(i@0, (std/core/vector/unsafe-idx<a>(v, i@0)));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"annotation": "genExpr: n@10002"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n    (f(i@0, (std/core/vector/unsafe-idx<a>(v, i@0))));\n  }), n@10002, i)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(v: (vector :: V -> V)<a>, f: (ssize_t, a) -> (e :: E) ()){\n  val n@10002 : ssize_t;\n  val i : ssize_t;\n  std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n      (f(i@0, (std/core/vector/unsafe-idx<a>(v, i@0))));\n    }), n@10002, i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/foreach-indexedz\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/foreach-indexedz"]}, {"name": {"op": "Var","id": "std/core/vector/foreach","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@10002"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10015","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, i@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10015\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x@10015"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@10015","type": {"op": "Top"}},"annotation": "genExpr: x@10015"}]},"annotation": "genExpr: f(x@10015)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: ssize_t){\n  val x@10015 : a\n        = std/core/vector/unsafe-idx<a>(v, i@0);\n  f(x@10015);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"annotation": "genExpr: n@10002"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n    val x@10015 : a\n          = (std/core/vector/unsafe-idx<a>(v, i@0));\n    (f(x@10015));\n  }), n@10002, i)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(v: (vector :: V -> V)<a>, f: (a) -> (e :: E) ()){\n  val n@10002 : ssize_t;\n  val i : ssize_t;\n  std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n      val x@10015 : a\n            = (std/core/vector/unsafe-idx<a>(v, i@0));\n      (f(x@10015));\n    }), n@10002, i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/foreach\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/foreach"]}, {"name": {"op": "Var","id": "std/core/vector/foreach-indexed","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@10002"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10017","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, i@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10017\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x@10017"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int(i@0)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x@10017","type": {"op": "Top"}},"annotation": "genExpr: x@10017"}]},"annotation": "genExpr: f((std/core/int/ssize_t/int(i@0)), x@10017)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: ssize_t){\n  val x@10017 : a\n        = std/core/vector/unsafe-idx<a>(v, i@0);\n  f((std/core/int/ssize_t/int(i@0)), x@10017);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"annotation": "genExpr: n@10002"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n    val x@10017 : a\n          = (std/core/vector/unsafe-idx<a>(v, i@0));\n    (f((std/core/int/ssize_t/int(i@0)), x@10017));\n  }), n@10002, i)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(v: (vector :: V -> V)<a>, f: (int, a) -> (e :: E) ()){\n  val n@10002 : ssize_t;\n  val i : ssize_t;\n  std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n      val x@10017 : a\n            = (std/core/vector/unsafe-idx<a>(v, i@0));\n      (f((std/core/int/ssize_t/int(i@0)), x@10017));\n    }), n@10002, i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/foreach-indexed\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/foreach-indexed"]}, {"name": {"op": "Var","id": "std/core/vector/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "n@10004","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@10004\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@10004"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-for-whilez@868","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-for-whilez@868<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, i@0)"}]},"annotation": "genExpr: f((std/core/vector/unsafe-idx<a>(v, i@0)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: ssize_t){\n  f((std/core/vector/unsafe-idx<a>(v, i@0)));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n@10004","type": {"op": "Int"}},"annotation": "genExpr: n@10004"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-for-whilez@868<a,(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n    (f((std/core/vector/unsafe-idx<a>(v, i@0))));\n  }), n@10004, i)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(v: (vector :: V -> V)<a>, f: (a) -> (e :: E) (maybe :: V -> V)<b>){\n  val n@10004 : ssize_t;\n  val i : ssize_t;\n  std/core/vector/@lift-for-whilez@868<b,(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n      (f((std/core/vector/unsafe-idx<a>(v, i@0))));\n    }), n@10004, i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/foreach-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/foreach-while"]}, {"name": {"op": "Var","id": "std/core/vector/list","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<a>>"}]},"annotation": "genExpr: std/core/vector/vlist<a>(v, (std/core/types/@None<(list :: V -> V)<a>>))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(v: (vector :: V -> V)<a>){\n  std/core/vector/vlist<a>(v, (std/core/types/@None<(list :: V -> V)<a>>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/list"]}, {"name": {"op": "Var","id": "std/core/vector/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/unsafe-vector","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int((std/core/vector/lengthz<a>(v)))"}]},"annotation": "genExpr: std/core/int/ssize_t((std/core/int/ssize_t/int((std/core/vector/lengthz<a>(v)))))"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/vector/unsafe-vector<a>((std/core/int/ssize_t((std/core/int/ssize_t/int((std/core/vector/lengthz<a>(v)))))))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "length(Array[Ptr]): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/vector/lengthz<a>(v)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@10002"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10019","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "unsafeIndex(Array[Ptr], Int): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/vector/unsafe-idx<a>(v, i@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10019\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x@10019"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/unsafe-assign","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: w"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@10019","type": {"op": "Top"}},"annotation": "genExpr: x@10019"}]},"annotation": "genExpr: f(x@10019)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/vector/unsafe-assign<a>(w, i@0, (f(x@10019)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: ssize_t){\n  val x@10019 : a\n        = std/core/vector/unsafe-idx<a>(v, i@0);\n  std/core/vector/unsafe-assign<a>(w, i@0, (f(x@10019)));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n@10002","type": {"op": "Int"}},"annotation": "genExpr: n@10002"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n    val x@10019 : a\n          = (std/core/vector/unsafe-idx<a>(v, i@0));\n    (std/core/vector/unsafe-assign<a>(w, i@0, (f(x@10019))));\n  }), n@10002, i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(v: (vector :: V -> V)<a>, f: (a) -> (e :: E) b){\n  val w : (vector :: V -> V)<b>;\n  val n@10002 : ssize_t;\n  val i : ssize_t;\n  val _ : ();\n  w;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/map"]}, {"name": {"op": "Var","id": "std/core/vector/vector","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "default","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/vector-alloc","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vector-alloc<a,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/ssize_t(n)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "default","type": {"op": "Top"}},"annotation": "genExpr: default"}]},"annotation": "genExpr: std/core/vector/vector-alloc<a,(total :: E)>((std/core/int/ssize_t(n)), default)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(n: int, default: a){\n  std/core/vector/vector-alloc<a,(total :: E)>((std/core/int/ssize_t(n)), default);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/vector\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/vector"]}, {"name": {"op": "Var","id": "std/core/vector/vector-init","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "len","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/ssize_t(n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"len\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["len"]}, {"name": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/unsafe-vector","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "len","type": {"op": "Int"}},"annotation": "genExpr: len"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/vector/unsafe-vector<a>(len)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/int/ssize_t(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/@lift-forz@869","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/vector/unsafe-assign","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0","type": {"op": "Int"}},"annotation": "genExpr: i@0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int(i@0)"}]},"annotation": "genExpr: f((std/core/int/ssize_t/int(i@0)))"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/vector/unsafe-assign<a>(v, i@0, (f((std/core/int/ssize_t/int(i@0)))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: ssize_t){\n  std/core/vector/unsafe-assign<a>(v, i@0, (f((std/core/int/ssize_t/int(i@0)))));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "len","type": {"op": "Int"}},"annotation": "genExpr: len"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/vector/@lift-forz@869<(e :: E)>((fn<(e :: E)>(i@0: ssize_t){\n    (std/core/vector/unsafe-assign<a>(v, i@0, (f((std/core/int/ssize_t/int(i@0))))));\n  }), len, i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Var","id": "v","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int, f: (int) -> (e :: E) a){\n  val len : ssize_t;\n  val v : (vector :: V -> V)<a>;\n  val i : ssize_t;\n  val _ : ();\n  v;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/vector-init\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/vector-init"]}, {"name": {"op": "Var","id": "std/core/vector/vector-init-total","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/vector-alloc-total","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vector-alloc-total<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/ssize_t(n)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/int/#ssize_t/int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/ssize_t/int(i)"}]},"annotation": "genExpr: f((std/core/int/ssize_t/int(i)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: ssize_t){\n  f((std/core/int/ssize_t/int(i)));\n}"}]},"annotation": "genExpr: std/core/vector/vector-alloc-total<a>((std/core/int/ssize_t(n)), (fn(i: ssize_t){\n    (f((std/core/int/ssize_t/int(i))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int, f: (int) -> a){\n  std/core/vector/vector-alloc-total<a>((std/core/int/ssize_t(n)), (fn(i: ssize_t){\n      (f((std/core/int/ssize_t/int(i))));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/vector-init-total\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/vector-init-total"]}, {"name": {"op": "Var","id": "std/core/vector/list/vector","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/vector/unvlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/unvlist<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/vector/unvlist<a>(xs)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  std/core/vector/unvlist<a>(xs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/vector/list/vector\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/vector/list/vector"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}