{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/bool"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/bool/(!=)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> y;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/(!=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/(!=)"]}, {"name": {"op": "Var","id": "std/core/bool/(<)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/(<)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/(<)"]}, {"name": {"op": "Var","id": "std/core/bool/(>)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      });\n    (@pat@0@1: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/(>)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/(>)"]}, {"name": {"op": "Var","id": "std/core/bool/(==)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> y;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/(==)"]}, {"name": {"op": "Var","id": "std/core/bool/int","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "b","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(b: bool){\n  match (b) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> 1;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> 0;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/int\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/int"]}, {"name": {"op": "Var","id": "std/core/bool/show","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "b","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "True"},"annotation": "genExpr: \"True\""}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "False"},"annotation": "genExpr: \"False\""}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(b: bool){\n  match (b) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> \"True\";\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> \"False\";\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/show"]}, {"name": {"op": "Var","id": "std/core/bool/(<=)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> std/core/types/True;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/False;\n      });\n    (@pat@0@1: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/(<=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/(<=)"]}, {"name": {"op": "Var","id": "std/core/bool/(>=)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n     -> std/core/types/True;\n}"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> std/core/types/True;\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n           -> std/core/types/True;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/(>=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/(>=)"]}, {"name": {"op": "Var","id": "std/core/bool/cmp","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@0@2@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@4@0: bool)\n     -> std/core/types/Eq;\n  ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n     -> std/core/types/Gt;\n}"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/True() : bool ) as @pat@3@0: bool)\n     -> (match (y) {\n      ((std/core/types/True() : bool ) as @pat@4@0: bool)\n         -> std/core/types/Eq;\n      ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n         -> std/core/types/Gt;\n    });\n  (@pat@0@3@0: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@4: bool)\n     -> std/core/types/Eq;\n  ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n     -> std/core/types/Gt;\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match (y) {\n      ((std/core/types/True() : bool ) as @pat@4: bool)\n         -> std/core/types/Eq;\n      ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n         -> std/core/types/Gt;\n    });\n  (@pat@0@3: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/Lt;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> (match (x) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match (y) {\n          ((std/core/types/True() : bool ) as @pat@4: bool)\n             -> std/core/types/Eq;\n          ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n             -> std/core/types/Gt;\n        });\n      (@pat@0@3: bool)\n         -> std/core/types/Eq;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match (x) {\n        ((std/core/types/True() : bool ) as @pat@3@0: bool)\n           -> (match (y) {\n            ((std/core/types/True() : bool ) as @pat@4@0: bool)\n               -> std/core/types/Eq;\n            ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n               -> std/core/types/Gt;\n          });\n        (@pat@0@3@0: bool)\n           -> std/core/types/Eq;\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> std/core/types/Lt;\n        ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n           -> (match (x) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> (match (y) {\n                ((std/core/types/True() : bool ) as @pat@4: bool)\n                   -> std/core/types/Eq;\n                ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n                   -> std/core/types/Gt;\n              });\n            (@pat@0@3: bool)\n               -> std/core/types/Eq;\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/cmp"]}, {"name": {"op": "Var","id": "std/core/bool/order2","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"value": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq2","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Eq2<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Bool"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Eq2<bool>(x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Gt2<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Bool"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Gt2<bool>(y, x)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Lt2<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Bool"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/Lt2<bool>(x, y)"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "y","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Gt2<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Bool"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Gt2<bool>(y, x)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/core/types/Lt2<bool>(x, y);\n  ((@skip std/core/types/False() : bool ) as @pat@2@0: bool)\n     -> std/core/types/Gt2<bool>(y, x);\n}"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/Gt2<bool>(y, x);\n  ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n     -> (match (y) {\n      ((std/core/types/True() : bool ) as @pat@1@0: bool)\n         -> std/core/types/Lt2<bool>(x, y);\n      ((@skip std/core/types/False() : bool ) as @pat@2@0: bool)\n         -> std/core/types/Gt2<bool>(y, x);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match ((match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> y;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match (y) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      });\n  })) {\n    ((std/core/types/True() : bool ) as @pat@2: bool)\n       -> std/core/types/Eq2<bool>(x);\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> (match (x) {\n        ((std/core/types/True() : bool ) as @pat@3: bool)\n           -> std/core/types/Gt2<bool>(y, x);\n        ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n           -> (match (y) {\n            ((std/core/types/True() : bool ) as @pat@1@0: bool)\n               -> std/core/types/Lt2<bool>(x, y);\n            ((@skip std/core/types/False() : bool ) as @pat@2@0: bool)\n               -> std/core/types/Gt2<bool>(y, x);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/bool/order2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/bool/order2"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}