{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/delayed"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/unsafe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_unsafe.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/delayed/delayed/dref","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}],"return": {"op": "Ptr","extern_ptr_name": "\"ref\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "delayed","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "delayed","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"type_tag": "std/core/delayed/delayed","clauses": [{"tag": "std/core/delayed/XDelay","params": [{"op": "Var","id": "@\"dref\"0","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"ref\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"dref\"0","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genTest: normal: (@x: ref<global,either<() -> 65 66,66>>) -> {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"delayed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}},\"annotation\": \"genTest: normal: (@x: ref<global,either<() -> 65 66,66>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"dref\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"ref\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"delayed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}: \"std/core/delayed/delayed\".\"std/core/delayed/XDelay\"(({\"op\": \"Var\",\"id\": \"@\\\"dref\\\"0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(delayed: (delayed/delayed :: (E, V) -> V)<(e :: E),a>){\n  (match (delayed) {\n    ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat: ((delayed/delayed :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/delayed/delayed/dref\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/delayed/delayed/dref"]}, {"name": {"op": "Var","id": "std/core/delayed/delayed/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}}, {"op": "Var","id": "dref","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/delayed/XDelay","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/XDelay<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dref","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"ref\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"1","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-dref@88: ref<global,either<() -> 105 106,106>>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-dref@88"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"dref\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dref@88,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dref@88: ref<global,either<() -> 105 106,106>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dref\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dref","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"ref\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"type_tag": "std/core/delayed/delayed","clauses": [{"tag": "std/core/delayed/XDelay","params": [{"op": "Var","id": "@\"dref\"2","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"ref\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"dref\"2","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genTest: normal: (@x: ref<global,either<() -> 105 106,106>>) -> {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}},\"annotation\": \"genTest: normal: (@x: ref<global,either<() -> 105 106,106>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"dref\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"ref\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}: \"std/core/delayed/delayed\".\"std/core/delayed/XDelay\"(({\"op\": \"Var\",\"id\": \"@\\\"dref\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat@1: ((delayed/delayed :: (E, V) -> V)<(105 :: E),106>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"dref\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dref\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (dref) {\n  ((std/core/types/@Optional((@uniq-dref@88: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) ) as @pat: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>))\n     -> @uniq-dref@88;\n  ((@skip std/core/types/@None() : ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) ) as @pat@0: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>))\n     -> (match (@this) {\n      ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat@1: ((delayed/delayed :: (E, V) -> V)<(105 :: E),106>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/delayed/XDelay<(e :: E),a>((match (dref) {\n  ((std/core/types/@Optional((@uniq-dref@88: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) ) as @pat: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>))\n     -> @uniq-dref@88;\n  ((@skip std/core/types/@None() : ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) ) as @pat@0: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>))\n     -> (match (@this) {\n      ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (105 :: E) 106,106>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat@1: ((delayed/delayed :: (E, V) -> V)<(105 :: E),106>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(@this: (delayed/delayed :: (E, V) -> V)<(e :: E),a>, dref: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>)){\n  std/core/delayed/XDelay<(e :: E),a>((match (dref) {\n    ((std/core/types/@Optional((@uniq-dref@88: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) ) as @pat: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>))\n       -> @uniq-dref@88;\n    ((@skip std/core/types/@None() : ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) ) as @pat@0: ? ((ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>))\n       -> (match (@this) {\n        ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat@1: ((delayed/delayed :: (E, V) -> V)<(e :: E),a>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/delayed/delayed/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/delayed/delayed/@copy"]}, {"name": {"op": "Var","id": "std/core/delayed/delay","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Left","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Left<() -> (e :: E) a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/types/Left<() -> (e :: E) a,a>(action)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<(either :: (V, V) -> V)<() -> (e :: E) a,a>,(global :: H)>((std/core/types/Left<() -> (e :: E) a,a>(action)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/delayed/XDelay","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/XDelay<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: r"}]},"annotation": "genExpr: std/core/delayed/XDelay<(e :: E),a>(r)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn(action: () -> (e :: E) a){\n  val r : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>\n        = std/core/types/ref<(either :: (V, V) -> V)<() -> (e :: E) a,a>,(global :: H)>((std/core/types/Left<() -> (e :: E) a,a>(action)));\n  std/core/delayed/XDelay<(e :: E),a>(r);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/delayed/delay\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/delayed/delay"]}, {"name": {"op": "Var","id": "std/core/delayed/force","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "delayed","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x3","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "delayed","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"type_tag": "std/core/delayed/delayed","clauses": [{"tag": "std/core/delayed/XDelay","params": [{"op": "Var","id": "@\"dref\"4","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"ref\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"dref\"4","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genTest: normal: (@x: ref<global,either<() -> 271 270,270>>) -> {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"delayed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}},\"annotation\": \"genTest: normal: (@x: ref<global,either<() -> 271 270,270>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"dref\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"ref\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"delayed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}: \"std/core/delayed/delayed\".\"std/core/delayed/XDelay\"(({\"op\": \"Var\",\"id\": \"@\\\"dref\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (delayed) {\n  ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (271 :: E) 270,270>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat: ((delayed/delayed :: (E, V) -> V)<(271 :: E),270>))\n     -> @x;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>,<(div :: X),(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>|(e :: E)>>((match (delayed) {\n  ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (271 :: E) 270,270>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat: ((delayed/delayed :: (E, V) -> V)<(271 :: E),270>))\n     -> @x;\n}))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Right","params": [{"op": "Var","id": "@\"right\"5","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"right\"5","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 270) -> {\"op\": \"Var\",\"id\": \"@\\\"right\\\"5\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 270) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"5\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Left","params": [{"op": "Var","id": "@\"left\"6","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@0","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"left\"6","type": {"op": "Top"}},"annotation": "genTest: normal: (action@0: () -> 271 270) -> {\"op\": \"Var\",\"id\": \"@\\\"left\\\"6\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: action@0"},"args": []},"annotation": "genExpr: action@0()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x@0"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "delayed","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"type_tag": "std/core/delayed/delayed","clauses": [{"tag": "std/core/delayed/XDelay","params": [{"op": "Var","id": "@\"dref\"7","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"ref\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"dref\"7","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genTest: normal: (@x@0: ref<global,either<() -> 271 270,270>>) -> {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"delayed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"dref\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: ref<global,either<() -> 271 270,270>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"dref\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"ref\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"delayed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}: \"std/core/delayed/delayed\".\"std/core/delayed/XDelay\"(({\"op\": \"Var\",\"id\": \"@\\\"dref\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (delayed) {\n  ((@skip std/core/delayed/XDelay((@x@0: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (271 :: E) 270,270>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat@1: ((delayed/delayed :: (E, V) -> V)<(271 :: E),270>))\n     -> @x@0;\n}"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Right","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Right<() -> (e :: E) a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@0","type": {"op": "Top"}},"annotation": "genExpr: x@0"}]},"annotation": "genExpr: std/core/types/Right<() -> (e :: E) a,a>(x@0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<(either :: (V, V) -> V)<() -> (e :: E) a,a>,(global :: H)>((match (delayed) {\n    ((@skip std/core/delayed/XDelay((@x@0: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (271 :: E) 270,270>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat@1: ((delayed/delayed :: (E, V) -> V)<(271 :: E),270>))\n       -> @x@0;\n  }), (std/core/types/Right<() -> (e :: E) a,a>(x@0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "x@0","type": {"op": "Top"}},"annotation": "genExpr: x@0"}},"annotation": "genExpr: val x@0 : a;\nval _ : ();\nx@0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(action@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"6\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (action@0: () -> 271 270) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"6\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(delayed: (delayed/delayed :: (E, V) -> V)<(e :: E),a>){\n  (match ((std/core/types/ref/(!)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>,<(div :: X),(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>|(e :: E)>>((match (delayed) {\n    ((@skip std/core/delayed/XDelay((@x: (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (ref :: (H, V) -> V)<(global :: H),(either :: (V, V) -> V)<() -> (e :: E) a,a>>) : (delayed/delayed :: (E, V) -> V)<(e :: E),a> ) as @pat: ((delayed/delayed :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  })))) {\n    ((std/core/types/Right((x: a) : a) : (either :: (V, V) -> V)<() -> (e :: E) a,a> ) as @pat@0: ((either :: (V, V) -> V)<() -> (e :: E) a,a>))\n       -> x;\n    ((@skip std/core/types/Left((action@0: () -> (e :: E) a) : () -> (e :: E) a) : (either :: (V, V) -> V)<() -> (e :: E) a,a> ) as @pat@0@0: ((either :: (V, V) -> V)<() -> (e :: E) a,a>))\n       -> val x@0 : a;\n          val _ : ();\n      x@0;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/delayed/force\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/delayed/force"]}, {"name": {"op": "Var","id": "std/core/delayed/once","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "calc","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<(maybe :: V -> V)<a>,(_h :: H)>((std/core/types/Nothing<a>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x7","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: r"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(_h :: H),(maybe :: V -> V)<a>,<(write :: H -> X)<(_h :: H)>,(div :: X)|(_e :: E)>>(r)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x7","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"8","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"8","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 371) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 371) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x7","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@0","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "calc","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: calc"},"args": []},"annotation": "genExpr: calc()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x@0"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: r"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@0","type": {"op": "Top"}},"annotation": "genExpr: x@0"}]},"annotation": "genExpr: std/core/types/Just<a>(x@0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<(maybe :: V -> V)<a>,(_h :: H)>(r, (std/core/types/Just<a>(x@0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "x@0","type": {"op": "Top"}},"annotation": "genExpr: x@0"}},"annotation": "genExpr: val x@0 : a;\nval _ : ();\nx@0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(calc: () -> a){\n  val r : (ref :: (H, V) -> V)<(_h :: H),(maybe :: V -> V)<a>>\n        = std/core/types/ref<(maybe :: V -> V)<a>,(_h :: H)>((std/core/types/Nothing<a>));\n  fn(){\n    (match ((std/core/types/ref/(!)<(_h :: H),(maybe :: V -> V)<a>,<(write :: H -> X)<(_h :: H)>,(div :: X)|(_e :: E)>>(r))) {\n      ((std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat: ((maybe :: V -> V)<a>))\n         -> x;\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<a>))\n         -> val x@0 : a;\n            val _ : ();\n        x@0;\n    });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/delayed/once\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/delayed/once"]}, {"name": {"op": "Var","id": "std/core/delayed/XDelay","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "dref","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"body": {"op": "Construct","type_tag": "std/core/delayed/delayed","tag": "std/core/delayed/XDelay","args": [{"op": "Var","id": "dref","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}]}},"annotation": "genConstr"},"export_as": ["std/core/delayed/XDelay"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}