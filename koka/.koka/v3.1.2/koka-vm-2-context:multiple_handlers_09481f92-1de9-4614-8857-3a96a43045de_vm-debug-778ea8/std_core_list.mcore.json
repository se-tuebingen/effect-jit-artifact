{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/list"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/list/@lift-concat@4788","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "zss","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"0","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"1","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 614) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-concat@4788","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-concat@4788<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"1","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<614>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "zss","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: zss"}]},"annotation": "genExpr: std/core/list/@lift-concat@4788<a>(yy, zss)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-concat@4788<a>(yy, zss)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 614) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<614>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "zss","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"2","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"3","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-concat@4788","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-concat@4788<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (zs: list<614>) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: zs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"3","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (zzs: list<list<614>>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: zzs"}]},"annotation": "genExpr: std/core/list/@lift-concat@4788<a>(zs, zzs)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(zs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (zs: list<614>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(zzs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (zzs: list<list<614>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "zss","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (zss) {\n  ((std/core/types/Cons((zs: (list :: V -> V)<614>) : (list :: V -> V)<a>, (zzs: (list :: V -> V)<(list :: V -> V)<614>>) : (list :: V -> V)<(list :: V -> V)<a>>) : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@1: ((list :: V -> V)<(list :: V -> V)<614>>))\n     -> std/core/list/@lift-concat@4788<a>(zs, zzs);\n  ((@skip std/core/types/Nil() : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@2: ((list :: V -> V)<(list :: V -> V)<614>>))\n     -> std/core/types/Nil<a>;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(ys: (list :: V -> V)<a>, zss: (list :: V -> V)<(list :: V -> V)<a>>){\n  (match (ys) {\n    ((std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<a>(y, (std/core/list/@lift-concat@4788<a>(yy, zss)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> (match (zss) {\n        ((std/core/types/Cons((zs: (list :: V -> V)<a>) : (list :: V -> V)<a>, (zzs: (list :: V -> V)<(list :: V -> V)<a>>) : (list :: V -> V)<(list :: V -> V)<a>>) : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@1: ((list :: V -> V)<(list :: V -> V)<a>>))\n           -> std/core/list/@lift-concat@4788<a>(zs, zzs);\n        ((@skip std/core/types/Nil() : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@2: ((list :: V -> V)<(list :: V -> V)<a>>))\n           -> std/core/types/Nil<a>;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-concat@4788\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-concat@4788"]}, {"name": {"op": "Var","id": "std/core/list/concat","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xss","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-concat@4788","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-concat@4788<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xss","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xss"}]},"annotation": "genExpr: std/core/list/@lift-concat@4788<a>((std/core/types/Nil<a>), xss)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xss: (list :: V -> V)<(list :: V -> V)<a>>){\n  std/core/list/@lift-concat@4788<a>((std/core/types/Nil<a>), xss);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/concat\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/concat"]}, {"name": {"op": "Var","id": "std/core/list/@lift-flatmap@4789","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "zs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"4","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"5","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 690) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-flatmap@4789","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"5","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<690>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "zs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: zs"}]},"annotation": "genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, yy, zs)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, yy, zs)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 690) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<690>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "zs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"6","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"7","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ys@1@10002","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"6","type": {"op": "Top"}},"annotation": "genTest: normal: (z: 689) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z"}]},"annotation": "genExpr: f(z)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ys@1@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["ys@1@10002"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-flatmap@4789","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys@1@10002","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys@1@10002"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"7","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (zz: list<689>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: zz"}]},"annotation": "genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz)"}},"annotation": "genExpr: val ys@1@10002 : (list :: V -> V)<a>\n      = f(z);\nstd/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 689) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(zz,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (zz: list<689>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "zs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (zs) {\n  ((std/core/types/Cons((z: 689) : a, (zz: (list :: V -> V)<689>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<689>))\n     -> val ys@1@10002 : (list :: V -> V)<a>\n              = f(z);\n    std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz);\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<689>))\n     -> std/core/types/Nil<a>;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(f: (a) -> (e :: E) (list :: V -> V)<b>, ys: (list :: V -> V)<b>, zs: (list :: V -> V)<a>){\n  (match (ys) {\n    ((std/core/types/Cons((y: b) : b, (yy: (list :: V -> V)<b>) : (list :: V -> V)<b>) : (list :: V -> V)<b> ) as @pat: ((list :: V -> V)<b>))\n       -> std/core/types/Cons<b>(y, (std/core/list/@lift-flatmap@4789<a,b,(e :: E)>(f, yy, zs)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<b> ) as @pat@0: ((list :: V -> V)<b>))\n       -> (match (zs) {\n        ((std/core/types/Cons((z: a) : a, (zz: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n           -> val ys@1@10002 : (list :: V -> V)<b>\n                    = f(z);\n          std/core/list/@lift-flatmap@4789<a,b,(e :: E)>(f, ys@1@10002, zz);\n        ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n           -> std/core/types/Nil<b>;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-flatmap@4789\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-flatmap@4789"]}, {"name": {"op": "Var","id": "std/core/list/flatmap","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-flatmap@4789","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, (std/core/types/Nil<a>), xs)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) (list :: V -> V)<b>){\n  std/core/list/@lift-flatmap@4789<a,b,(e :: E)>(f, (std/core/types/Nil<b>), xs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/flatmap\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/flatmap"]}, {"name": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"8","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"9","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"8","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 733) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, acc)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"9","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<733>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Cons<a>(x, acc)), xx)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 733) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<733>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(acc: (list :: V -> V)<a>, ys: (list :: V -> V)<a>){\n  (match (ys) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/list/@lift-reverse-append@4790<a>((std/core/types/Cons<a>(x, acc)), xx);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> acc;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-reverse-append@4790\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-reverse-append@4790"]}, {"name": {"op": "Var","id": "std/core/list/reverse-append","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "tl","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "tl","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: tl"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>(tl, xs)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, tl: (list :: V -> V)<a>){\n  std/core/list/@lift-reverse-append@4790<a>(tl, xs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/reverse-append\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/reverse-append"]}, {"name": {"op": "Var","id": "std/core/list/head","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"10","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"11","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"10","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 772) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<772>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (@pat@0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Just<a>(x);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/head\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/head"]}, {"name": {"op": "Var","id": "std/core/list/@lift-intersperse@4791","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "sep","type": {"op": "Top"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"12","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"13","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "Top"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"12","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 836) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-intersperse@4791","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-intersperse@4791<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "Top"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"13","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<836>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}]},"annotation": "genExpr: std/core/list/@lift-intersperse@4791<a>(sep, yy)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))"}]},"annotation": "genExpr: std/core/types/Cons<a>(sep, (std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 836) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<836>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(sep: a, ys: (list :: V -> V)<a>){\n  (match (ys) {\n    ((std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<a>(sep, (std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-intersperse@4791\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-intersperse@4791"]}, {"name": {"op": "Var","id": "std/core/list/intersperse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "sep","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"14","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"15","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"14","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 836) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-intersperse@4791","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-intersperse@4791<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "Top"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"15","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<836>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/core/list/@lift-intersperse@4791<a>(sep, xx)"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/@lift-intersperse@4791<a>(sep, xx)))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 836) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<836>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, sep: a){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<a>(x, (std/core/list/@lift-intersperse@4791<a>(sep, xx)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/intersperse\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/intersperse"]}, {"name": {"op": "Var","id": "std/core/list/is-empty","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  (match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/is-empty\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/is-empty"]}, {"name": {"op": "Var","id": "std/core/list/@lift-length@4792","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"16","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"17","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-length@4792","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-length@4792<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"17","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<870>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "acc","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(acc, 1)"}]},"annotation": "genExpr: std/core/list/@lift-length@4792<a>(yy, (std/core/int/int-add(acc, 1)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"16\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 870) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<870>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"16\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Int"}},"annotation": "genExpr: acc"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(ys: (list :: V -> V)<a>, acc: int){\n  (match (ys) {\n    ((std/core/types/Cons((@pat@0: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/list/@lift-length@4792<a>(yy, (std/core/int/int-add(acc, 1)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n       -> acc;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-length@4792\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-length@4792"]}, {"name": {"op": "Var","id": "std/core/list/length","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-length@4792","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-length@4792<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/list/@lift-length@4792<a>(xs, 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  std/core/list/@lift-length@4792<a>(xs, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/length\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/length"]}, {"name": {"op": "Var","id": "std/core/list/maybe/list","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"maybe\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"18","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"18","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 924) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/Nil<a>))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 924) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(m: (maybe :: V -> V)<a>){\n  (match (m) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat: ((maybe :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n    ((@skip std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<a>))\n       -> std/core/types/Cons<a>(x, (std/core/types/Nil<a>));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/maybe/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/maybe/list"]}, {"name": {"op": "Var","id": "std/core/list/@lift-map-indexed@4793","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"19","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"20","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10009","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10009\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10009"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"19","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 978) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: f(i, y)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-map-indexed@4793","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"20","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<978>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10009","type": {"op": "Int"}},"annotation": "genExpr: i@0@10009"}]},"annotation": "genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)))"}},"annotation": "genExpr: val i@0@10009 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 978) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<978>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(f: (idx : int, value : a) -> (e :: E) b, ys: (list :: V -> V)<a>, i: int){\n  (match (ys) {\n    ((std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> val i@0@10009 : int\n                = std/core/int/int-add(i, 1);\n      std/core/types/Cons<b>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,b,(e :: E)>(f, yy, i@0@10009)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-map-indexed@4793\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-map-indexed@4793"]}, {"name": {"op": "Var","id": "std/core/list/map-indexed","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-map-indexed@4793","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, xs, 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (idx : int, value : a) -> (e :: E) b){\n  std/core/list/@lift-map-indexed@4793<a,b,(e :: E)>(f, xs, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/map-indexed\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/map-indexed"]}, {"name": {"op": "Var","id": "std/core/list/@lift-map-indexed-peek@4794","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"21","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"22","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10011","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10011\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10011"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"21","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1040) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"22","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1040>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}]},"annotation": "genExpr: f(i, y, yy)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-map-indexed-peek@4794","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"22","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1040>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10011","type": {"op": "Int"}},"annotation": "genExpr: i@0@10011"}]},"annotation": "genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)))"}},"annotation": "genExpr: val i@0@10011 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1040) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1040>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(f: (idx : int, value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys: (list :: V -> V)<a>, i: int){\n  (match (ys) {\n    ((std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> val i@0@10011 : int\n                = std/core/int/int-add(i, 1);\n      std/core/types/Cons<b>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,b,(e :: E)>(f, yy, i@0@10011)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-map-indexed-peek@4794\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-map-indexed-peek@4794"]}, {"name": {"op": "Var","id": "std/core/list/map-indexed-peek","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-map-indexed-peek@4794","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, xs, 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (idx : int, value : a, rest : (list :: V -> V)<a>) -> (e :: E) b){\n  std/core/list/@lift-map-indexed-peek@4794<a,b,(e :: E)>(f, xs, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/map-indexed-peek\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/map-indexed-peek"]}, {"name": {"op": "Var","id": "std/core/list/@lift-map-peek@4795","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"23","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"24","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"23","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1092) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"24","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1092>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}]},"annotation": "genExpr: f(y, yy)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-map-peek@4795","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"24","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1092>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}]},"annotation": "genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, yy)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(y, yy)), (std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, yy)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1092) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1092>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(f: (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b, ys: (list :: V -> V)<a>){\n  (match (ys) {\n    ((std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<b>((f(y, yy)), (std/core/list/@lift-map-peek@4795<a,b,(e :: E)>(f, yy)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-map-peek@4795\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-map-peek@4795"]}, {"name": {"op": "Var","id": "std/core/list/map-peek","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-map-peek@4795","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, xs)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (value : a, rest : (list :: V -> V)<a>) -> (e :: E) b){\n  std/core/list/@lift-map-peek@4795<a,b,(e :: E)>(f, xs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/map-peek\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/map-peek"]}, {"name": {"op": "Var","id": "std/core/list/single","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/Nil<a>))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a){\n  std/core/types/Cons<a>(x, (std/core/types/Nil<a>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/single\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/single"]}, {"name": {"op": "Var","id": "std/core/list/tail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"25","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"26","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"26","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1137>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1137) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1137>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  (match (xs) {\n    ((std/core/types/Cons((@pat@0: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> xx;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/tail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/tail"]}, {"name": {"op": "Var","id": "std/core/list/@lift-zipwith-indexed@4796","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"27","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"28","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"29","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"30","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10013","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10013\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10013"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"27","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1209) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"29","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1210) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: f(i, x, y)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-zipwith-indexed@4796","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10013","type": {"op": "Int"}},"annotation": "genExpr: i@0@10013"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"28","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1209>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"30","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1210>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}]},"annotation": "genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)))"}},"annotation": "genExpr: val i@0@10013 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1210) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1210>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Cons((y: 1210) : a, (yy: (list :: V -> V)<1210>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1210>))\n     -> val i@0@10013 : int\n              = std/core/int/int-add(i, 1);\n    std/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1210>))\n     -> std/core/types/Nil<a>;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1209) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1209>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E)> fn<(e :: E)>(f: (int, a, b) -> (e :: E) c, i: int, xs: (list :: V -> V)<a>, ys: (list :: V -> V)<b>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Cons((y: b) : b, (yy: (list :: V -> V)<b>) : (list :: V -> V)<b>) : (list :: V -> V)<b> ) as @pat@0: ((list :: V -> V)<b>))\n           -> val i@0@10013 : int\n                    = std/core/int/int-add(i, 1);\n          std/core/types/Cons<c>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,b,c,(e :: E)>(f, i@0@10013, xx, yy)));\n        ((@skip std/core/types/Nil() : (list :: V -> V)<b> ) as @pat@1: ((list :: V -> V)<b>))\n           -> std/core/types/Nil<c>;\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<c>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-zipwith-indexed@4796\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-zipwith-indexed@4796"]}, {"name": {"op": "Var","id": "std/core/list/zipwith-indexed","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-zipwith-indexed@4796","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys0"}]},"annotation": "genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, 0, xs0, ys0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E)> fn<(e :: E)>(xs0: (list :: V -> V)<a>, ys0: (list :: V -> V)<b>, f: (int, a, b) -> (e :: E) c){\n  std/core/list/@lift-zipwith-indexed@4796<a,b,c,(e :: E)>(f, 0, xs0, ys0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/zipwith-indexed\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/zipwith-indexed"]}, {"name": {"op": "Var","id": "std/core/list/default/head","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "default","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"31","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"32","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"31","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1238) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1238) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<1238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "default","type": {"op": "Top"}},"annotation": "genExpr: default"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, default: a){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (@pat@0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> x;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n       -> default;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/default/head\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/default/head"]}, {"name": {"op": "Var","id": "std/core/list/append","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"33","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"34","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"33","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1271) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/append","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/append<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"34","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1271>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys"}]},"annotation": "genExpr: std/core/list/append<a>(xx, ys)"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/append<a>(xx, ys)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1271) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1271>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<a>(x, (std/core/list/append<a>(xx, ys)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> ys;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/append\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/append"]}, {"name": {"op": "Var","id": "std/core/list/(++)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/append","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/append<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys"}]},"annotation": "genExpr: std/core/list/append<a>(xs, ys)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>){\n  std/core/list/append<a>(xs, ys);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/(++)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/(++)"]}, {"name": {"op": "Var","id": "std/core/list/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "@implicit/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"35","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"36","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"37","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"38","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x39","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?(==)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"35","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1353) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"37","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1353) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?(==)(x, y)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x39","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/(==)<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"36","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1353>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"38","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1353>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?(==)"}]},"annotation": "genExpr: std/core/list/(==)<a>(xx, yy, ?(==))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?(==)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/list/(==)<a>(xx, yy, ?(==));\n  (@pat@3: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1353>))\n     -> std/core/types/False;\n  ((@skip std/core/types/Cons((y: 1353) : a, (yy: (list :: V -> V)<1353>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1353>))\n     -> (match ((?(==)(x, y))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/list/(==)<a>(xx, yy, ?(==));\n      (@pat@3: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"40","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"41","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@7: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@8: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<1353>))\n     -> std/core/types/True;\n  ((@skip std/core/types/Cons((@pat@7: 1353) : a, (@pat@8: (list :: V -> V)<1353>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@6: ((list :: V -> V)<1353>))\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>, @implicit/(==): (a, a) -> bool){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n           -> std/core/types/False;\n        ((@skip std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n           -> (match ((?(==)(x, y))) {\n            ((std/core/types/True() : bool ) as @pat@2: bool)\n               -> std/core/list/(==)<a>(xx, yy, ?(==));\n            (@pat@3: bool)\n               -> std/core/types/False;\n          });\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@4: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<a>))\n           -> std/core/types/True;\n        ((@skip std/core/types/Cons((@pat@7: a) : a, (@pat@8: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@6: ((list :: V -> V)<a>))\n           -> std/core/types/False;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/(==)"]}, {"name": {"op": "Var","id": "std/core/list/@index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"42","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"43","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@index<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"43","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1426>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"42","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1426) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)(n, 0))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/Just<a>(x);\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> std/core/types/Nothing<a>;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(>)(n, 0))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> (match ((std/core/int/(==)(n, 0))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/types/Just<a>(x);\n      ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n         -> std/core/types/Nothing<a>;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1426) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1426>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, n: int){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((std/core/int/(>)(n, 0))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)));\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> (match ((std/core/int/(==)(n, 0))) {\n            ((std/core/types/True() : bool ) as @pat@2: bool)\n               -> std/core/types/Just<a>(x);\n            ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n               -> std/core/types/Nothing<a>;\n          });\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@4: ((list :: V -> V)<a>))\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@index\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@index"]}, {"name": {"op": "Var","id": "std/core/list/all","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"44","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"45","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"44","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1461) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: predicate(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/all","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/all<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"45","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1461>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}]},"annotation": "genExpr: std/core/list/all<a,(e :: E)>(xx, predicate)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/all<a,(e :: E)>(xx, predicate);\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1461) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1461>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) bool){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((predicate(x))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/list/all<a,(e :: E)>(xx, predicate);\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> std/core/types/False;\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/True;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/all\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/all"]}, {"name": {"op": "Var","id": "std/core/list/any","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"47","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"48","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x49","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"47","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1499) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: predicate(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x49","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x49","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/any","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/any<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"48","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1499>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}]},"annotation": "genExpr: std/core/list/any<a,(e :: E)>(xx, predicate)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/any<a,(e :: E)>(xx, predicate);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1499) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1499>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) bool){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((predicate(x))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/types/True;\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> std/core/list/any<a,(e :: E)>(xx, predicate);\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/any\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/any"]}, {"name": {"op": "Var","id": "std/core/list/cmp","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"50","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"51","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"52","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"53","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x54","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"50","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1562) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"52","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1562) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?cmp(x, y)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x54","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/cmp","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/cmp<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"51","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1562>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"53","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<1562>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"}]},"annotation": "genExpr: std/core/list/cmp<a>(xx, yy, ?cmp)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x54","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: lg"}}]},"annotation": "genBranch: [(lg,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?cmp(x, y))) {\n  ((std/core/types/Eq() : order ) as @pat@2: order)\n     -> std/core/list/cmp<a>(xx, yy, ?cmp);\n  (lg: order)\n     -> lg;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1562>))\n     -> std/core/types/Gt;\n  ((@skip std/core/types/Cons((y: 1562) : a, (yy: (list :: V -> V)<1562>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1562>))\n     -> (match ((?cmp(x, y))) {\n      ((std/core/types/Eq() : order ) as @pat@2: order)\n         -> std/core/list/cmp<a>(xx, yy, ?cmp);\n      (lg: order)\n         -> lg;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"55","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"56","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@6: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@7: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@4: ((list :: V -> V)<1562>))\n     -> std/core/types/Eq;\n  ((@skip std/core/types/Cons((@pat@6: 1562) : a, (@pat@7: (list :: V -> V)<1562>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<1562>))\n     -> std/core/types/Lt;\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<a>, @implicit/cmp: (a, a) -> order){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n           -> std/core/types/Gt;\n        ((@skip std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n           -> (match ((?cmp(x, y))) {\n            ((std/core/types/Eq() : order ) as @pat@2: order)\n               -> std/core/list/cmp<a>(xx, yy, ?cmp);\n            (lg: order)\n               -> lg;\n          });\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@3: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@4: ((list :: V -> V)<a>))\n           -> std/core/types/Eq;\n        ((@skip std/core/types/Cons((@pat@6: a) : a, (@pat@7: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<a>))\n           -> std/core/types/Lt;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/cmp"]}, {"name": {"op": "Var","id": "std/core/list/concat-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"57","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"58","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"57","type": {"op": "Top"}},"annotation": "genTest: normal: (x: maybe<1616>) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"59","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"59","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1616) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/concat-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/concat-maybe<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"58","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<maybe<1616>>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/core/list/concat-maybe<a>(xx)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1616) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"57","type": {"op": "Top"}},"annotation": "genTest: normal: (x: maybe<1616>) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/concat-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/concat-maybe<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"58","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<maybe<1616>>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/core/list/concat-maybe<a>(xx)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Just((y: 1616) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1616>))\n     -> std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1616>))\n     -> std/core/list/concat-maybe<a>(xx);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<maybe<1616>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<(maybe :: V -> V)<a>>){\n  (match (xs) {\n    ((std/core/types/Cons((x: (maybe :: V -> V)<a>) : (maybe :: V -> V)<a>, (xx: (list :: V -> V)<(maybe :: V -> V)<a>>) : (list :: V -> V)<(maybe :: V -> V)<a>>) : (list :: V -> V)<(maybe :: V -> V)<a>> ) as @pat: ((list :: V -> V)<(maybe :: V -> V)<a>>))\n       -> (match (x) {\n        ((std/core/types/Just((y: a) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<a>))\n           -> std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)));\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n           -> std/core/list/concat-maybe<a>(xx);\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<(maybe :: V -> V)<a>> ) as @pat@2: ((list :: V -> V)<(maybe :: V -> V)<a>>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/concat-maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/concat-maybe"]}, {"name": {"op": "Var","id": "std/core/list/drop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"60","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"61","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)(n, 0)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/drop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/drop<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"61","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1650>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: std/core/list/drop<a>(xx, (std/core/int/int-sub(n, 1)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1650) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1650>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, n: int){\n  (match (xs) {\n    ((std/core/types/Cons((@pat@0: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       | std/core/int/(>)(n, 0) -> std/core/list/drop<a>(xx, (std/core/int/int-sub(n, 1)));\n    (@pat@1: ((list :: V -> V)<a>))\n       -> xs;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/drop\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/drop"]}, {"name": {"op": "Var","id": "std/core/list/drop-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"62","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"63","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"62","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1687) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: predicate(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/drop-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/drop-while<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"63","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1687>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}]},"annotation": "genExpr: std/core/list/drop-while<a,(e :: E)>(xx, predicate)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/drop-while<a,(e :: E)>(xx, predicate);\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> xs;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1687) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1687>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) bool){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((predicate(x))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/list/drop-while<a,(e :: E)>(xx, predicate);\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> xs;\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/drop-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/drop-while"]}, {"name": {"op": "Var","id": "std/core/list/filter","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"65","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"66","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x67","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"65","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1742) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: pred(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"65","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1742) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/filter","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/filter<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"66","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1742>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: std/core/list/filter<a,(e :: E)>(xx, pred)"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/filter","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/filter<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"66","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1742>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: std/core/list/filter<a,(e :: E)>(xx, pred)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/filter<a,(e :: E)>(xx, pred);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1742) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1742>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((pred(x))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)));\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> std/core/list/filter<a,(e :: E)>(xx, pred);\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/filter\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/filter"]}, {"name": {"op": "Var","id": "std/core/list/filter-map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"68","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"69","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x70","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"68","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1809) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: pred(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x70","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/filter-map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/filter-map<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"69","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1809>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: std/core/list/filter-map<a,a,(e :: E)>(xx, pred)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x70","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"71","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"71","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 1810) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/filter-map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/filter-map<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"69","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1809>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: std/core/list/filter-map<a,a,(e :: E)>(xx, pred)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/filter-map<a,a,(e :: E)>(xx, pred)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((pred(x))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1810>))\n     -> std/core/list/filter-map<a,a,(e :: E)>(xx, pred);\n  ((@skip std/core/types/Just((y: 1810) : a) : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<1810>))\n     -> std/core/types/Cons<a>(y, (std/core/list/filter-map<a,a,(e :: E)>(xx, pred)));\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1809) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1809>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) (maybe :: V -> V)<b>){\n  (match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n    ((@skip std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> (match ((pred(x))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<b> ) as @pat@1: ((maybe :: V -> V)<b>))\n           -> std/core/list/filter-map<a,b,(e :: E)>(xx, pred);\n        ((@skip std/core/types/Just((y: b) : b) : (maybe :: V -> V)<b> ) as @pat@2: ((maybe :: V -> V)<b>))\n           -> std/core/types/Cons<b>(y, (std/core/list/filter-map<a,b,(e :: E)>(xx, pred)));\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/filter-map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/filter-map"]}, {"name": {"op": "Var","id": "std/core/list/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"72","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"73","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x74","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"72","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1860) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: action(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x74","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foreach-while<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"73","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<1860>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xx, action)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x74","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: just"}}]},"annotation": "genBranch: [(just,{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((action(x))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1861>))\n     -> std/core/list/foreach-while<a,a,(e :: E)>(xx, action);\n  (just: ((maybe :: V -> V)<1861>))\n     -> just;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1860) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1860>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (a) -> (e :: E) (maybe :: V -> V)<b>){\n  (match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Nothing<b>;\n    ((@skip std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> (match ((action(x))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<b> ) as @pat@1: ((maybe :: V -> V)<b>))\n           -> std/core/list/foreach-while<a,b,(e :: E)>(xx, action);\n        (just: ((maybe :: V -> V)<b>))\n           -> just;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foreach-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foreach-while"]}, {"name": {"op": "Var","id": "std/core/list/find","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foreach-while<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x75","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: pred(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x75","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x75","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(x: 1906){\n  match ((pred(x))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Just<a>(x);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nothing<a>;\n  };\n}"}]},"annotation": "genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xs, (fn<(e :: E)>(x: 1906){\n    (match ((pred(x))) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/Just<a>(x);\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/Nothing<a>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool){\n  std/core/list/foreach-while<a,a,(e :: E)>(xs, (fn<(e :: E)>(x: a){\n      (match ((pred(x))) {\n        ((std/core/types/True() : bool ) as @pat: bool)\n           -> std/core/types/Just<a>(x);\n        ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n           -> std/core/types/Nothing<a>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/find\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/find"]}, {"name": {"op": "Var","id": "std/core/list/find-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foreach-while<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xs, pred)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) (maybe :: V -> V)<b>){\n  std/core/list/foreach-while<a,b,(e :: E)>(xs, pred);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/find-maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/find-maybe"]}, {"name": {"op": "Var","id": "std/core/list/flatmap-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"76","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"77","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"76","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2007) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"79","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"79","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 2008) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/flatmap-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"77","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2007>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 2008) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/flatmap-maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"77","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2007>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((f(x))) {\n  ((std/core/types/Just((y: 2008) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<2008>))\n     -> std/core/types/Cons<a>(y, (std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<2008>))\n     -> std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2007) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) (maybe :: V -> V)<b>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((f(x))) {\n        ((std/core/types/Just((y: b) : b) : (maybe :: V -> V)<b> ) as @pat@0: ((maybe :: V -> V)<b>))\n           -> std/core/types/Cons<b>(y, (std/core/list/flatmap-maybe<a,b,(e :: E)>(xx, f)));\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<b> ) as @pat@1: ((maybe :: V -> V)<b>))\n           -> std/core/list/flatmap-maybe<a,b,(e :: E)>(xx, f);\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/flatmap-maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/flatmap-maybe"]}, {"name": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "z","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"80","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"81","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"81","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2052>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "z","type": {"op": "Top"}},"annotation": "genExpr: z"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"80","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2052) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(z, x)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/foldl<a,a,(e :: E)>(xx, (f(z, x)), f)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2052) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2052>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "z","type": {"op": "Top"}},"annotation": "genExpr: z"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, z: b, f: (b, a) -> (e :: E) b){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/list/foldl<a,b,(e :: E)>(xx, (f(z, x)), f);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> z;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foldl\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foldl"]}, {"name": {"op": "Var","id": "std/core/list/foldl1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"82","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"83","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"83","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2101>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"82","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2101) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2101) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2101>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at2","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/@tag-exn","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/core/exn/@tag-exn"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<a>"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "unexpected Nil in std/core/foldl1"},"annotation": "genExpr: \"unexpected Nil in std/core/foldl1\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(exn :: (E, V) -> V)|(e :: E)>>(xs: (list :: V -> V)<a>, f: (a, a) -> <(exn :: (E, V) -> V)|(e :: E)> a){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foldl1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foldl1"]}, {"name": {"op": "Var","id": "std/core/list/reverse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/reverse\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/reverse"]}, {"name": {"op": "Var","id": "std/core/list/foldr","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "z","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "z","type": {"op": "Top"}},"annotation": "genExpr: z"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(y, x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(x: 2162, y: 2161){\n  f(y, x);\n}"}]},"annotation": "genExpr: std/core/list/foldl<a,a,(e :: E)>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)), z, (fn<(e :: E)>(x: 2162, y: 2161){\n    (f(y, x));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, z: b, f: (a, b) -> (e :: E) b){\n  std/core/list/foldl<a,b,(e :: E)>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)), z, (fn<(e :: E)>(x: b, y: a){\n      (f(y, x));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foldr\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foldr"]}, {"name": {"op": "Var","id": "std/core/list/foldr1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@0@10024","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@0@10024"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@0@10024","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"84","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"85","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"85","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2195>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"84","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2195) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2195) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2195>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@0@10024","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at2","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/@tag-exn","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/core/exn/@tag-exn"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/throw","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/throw<a>"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "unexpected Nil in std/core/foldl1"},"annotation": "genExpr: \"unexpected Nil in std/core/foldl1\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<exception-info>"}]},"annotation": "genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(exn :: (E, V) -> V)|(e :: E)>>(xs: (list :: V -> V)<a>, f: (a, a) -> <(exn :: (E, V) -> V)|(e :: E)> a){\n  val xs@0@10024 : (list :: V -> V)<a>\n        = std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs);\n  (match (xs@0@10024) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foldr1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foldr1"]}, {"name": {"op": "Var","id": "std/core/list/foreach","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"86","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"87","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"86","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2229) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: action(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foreach","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foreach<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"87","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2229>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/list/foreach<a,(e :: E)>(xx, action)"}},"annotation": "genExpr: val _ : ()\n      = action(x);\nstd/core/list/foreach<a,(e :: E)>(xx, action)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2229) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (a) -> (e :: E) ()){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> val _ : ()\n                = action(x);\n      std/core/list/foreach<a,(e :: E)>(xx, action);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foreach\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foreach"]}, {"name": {"op": "Var","id": "std/core/list/foreach-indexed","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,(),(e :: E),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foreach","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "j","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["j"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: action(j, x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "x@0@10086","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10086\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10086"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@0@10086","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@0@10086, 1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n  val j : int;\n  val _ : ();\n  val x@0@10086 : int;\n  std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1)));\n}"}]},"annotation": "genExpr: std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n    val j : int;\n    val _ : ();\n    val x@0@10086 : int;\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(2329 :: H),int>){\n  std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n      val j : int;\n      val _ : ();\n      val x@0@10086 : int;\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(2329 :: H),int>){\n    (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n        val j : int;\n        val _ : ();\n        val x@0@10086 : int;\n        (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n      })));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n          val j : int;\n          val _ : ();\n          val x@0@10086 : int;\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n        })));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n          val j : int;\n          val _ : ();\n          val x@0@10086 : int;\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n        })));\n    }));\n})()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (int, a) -> (e :: E) ()){\n  (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n        (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: a){\n            val j : int;\n            val _ : ();\n            val x@0@10086 : int;\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n          })));\n      }));\n  })();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/foreach-indexed\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/foreach-indexed"]}, {"name": {"op": "Var","id": "std/core/list/index-of-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "idx","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"88","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"89","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x90","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"88","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2378) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: pred(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x90","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "idx","type": {"op": "Int"}},"annotation": "genExpr: idx"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x90\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x90","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/index-of-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/index-of-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"89","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2378>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "idx","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(idx, 1)"}]},"annotation": "genExpr: std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x90\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> idx;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)));\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2378) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2378>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool, idx: int){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((pred(x))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> idx;\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)));\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> -1;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/index-of-acc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/index-of-acc"]}, {"name": {"op": "Var","id": "std/core/list/index-of","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/index-of-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/index-of-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/list/index-of-acc<a,(e :: E)>(xs, pred, 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool){\n  std/core/list/index-of-acc<a,(e :: E)>(xs, pred, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/index-of\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/index-of"]}, {"name": {"op": "Var","id": "std/core/list/init","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"91","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"92","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"92","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"93","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"94","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"91","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2441) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/init","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/init<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"92","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/core/list/init<a>(xx)"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/init<a>(xx)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2441) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"93\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 2441) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"93\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, ((std/core/types/Cons((@pat@0: a) : a, (@pat@1: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<a>(x, (std/core/list/init<a>(xx)));\n    (@pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/init\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/init"]}, {"name": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "sep","type": {"op": "String"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"95","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"96","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "acc@0@10030","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "String"}},"annotation": "genExpr: acc"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "String"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"95","type": {"op": "Top"}},"annotation": "genTest: normal: (y: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/(++)(sep, y)"}]},"annotation": "genExpr: std/core/types/(++)(acc, (std/core/types/(++)(sep, y)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"acc@0@10030\",\"type\": {\"op\": \"String\"}}"},"export_as": ["acc@0@10030"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "String"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"96","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc@0@10030","type": {"op": "String"}},"annotation": "genExpr: acc@0@10030"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030)"}},"annotation": "genExpr: val acc@0@10030 : string\n      = std/core/types/(++)(acc, (std/core/types/(++)(sep, y)));\nstd/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "String"}},"annotation": "genExpr: acc"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(sep: string, ys: (list :: V -> V)<string>, acc: string){\n  match (ys) {\n    ((std/core/types/Cons((y: string) : string, (yy: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n       -> val acc@0@10030 : string\n                = std/core/types/(++)(acc, (std/core/types/(++)(sep, y)));\n      std/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@0: ((list :: V -> V)<string>))\n       -> acc;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-joinsep@4797\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-joinsep@4797"]}, {"name": {"op": "Var","id": "std/core/list/joinsep","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "sep","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"97","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"98","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "String"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"98","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"97","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(sep, xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>, sep: string){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(sep, xx, x);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/joinsep\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/joinsep"]}, {"name": {"op": "Var","id": "std/core/list/join","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"99","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"100","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"100","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"99","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/join\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/join"]}, {"name": {"op": "Var","id": "std/core/list/join-end","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "end","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"101","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"102","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "String"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"102","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"101","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(end, xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(end, xx, x);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "String"}},"annotation": "genExpr: end"}]},"annotation": "genExpr: std/core/types/(++)((match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(end, xx, x);\n  }), end)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>, end: string){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n       -> \"\";\n    (@pat@0: ((list :: V -> V)<string>))\n       -> std/core/types/(++)((match (xs) {\n          ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n             -> std/core/list/@lift-joinsep@4797(end, xx, x);\n        }), end);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/join-end\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/join-end"]}, {"name": {"op": "Var","id": "std/core/list/last","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"103","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"104","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"104","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"103","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2569) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"106","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/last","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/last<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"106","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2569>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/core/list/last<a>(xx)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Just<a>(x);\n    ((std/core/types/Cons((@pat@2: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<a>))\n       -> std/core/list/last<a>(xx);\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@3: ((list :: V -> V)<a>))\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/last\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/last"]}, {"name": {"op": "Var","id": "std/core/list/take","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"107","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"108","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)(n, 0)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"107","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2612) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/take","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/take<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"108","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<2612>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2612) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2612>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, n: int){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       | std/core/int/(>)(n, 0) -> std/core/types/Cons<a>(x, (std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))));\n    (@pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/take\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/take"]}, {"name": {"op": "Var","id": "std/core/list/split","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/take","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/take<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/list/take<a>(xs, n)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/drop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/drop<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/list/drop<a>(xs, n)"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/take<a>(xs, n)), (std/core/list/drop<a>(xs, n)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(xs: (list :: V -> V)<a>, n: int){\n  std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/take<a>(xs, n)), (std/core/list/drop<a>(xs, n)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/split\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/split"]}, {"name": {"op": "Var","id": "std/core/list/lines","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "\n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s, \"\\x0A\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  val v@10012 : (vector :: V -> V)<string>\n        = std/core/string/splitv(s, \"\\x0A\");\n  std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/lines\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/lines"]}, {"name": {"op": "Var","id": "std/core/list/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo","type": {"op": "Int"}},"annotation": "genExpr: lo"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/list"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(lo, 1)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hi","type": {"op": "Int"}},"annotation": "genExpr: hi"}]},"annotation": "genExpr: std/core/list/list((std/core/int/int-add(lo, 1)), hi)"}]},"annotation": "genExpr: std/core/types/Cons<int>(lo, (std/core/list/list((std/core/int/int-add(lo, 1)), hi)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<int>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(lo: int, hi: int){\n  match ((std/core/int/(<=)(lo, hi))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Cons<int>(lo, (std/core/list/list((std/core/int/int-add(lo, 1)), hi)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nil<int>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/list"]}, {"name": {"op": "Var","id": "std/core/list/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"109","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"110","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"109","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3009) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/map<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"110","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<3009>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/map<a,a,(e :: E)>(xx, f)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(x)), (std/core/list/map<a,a,(e :: E)>(xx, f)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3009) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3009>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, f: (a) -> (e :: E) b){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Cons<b>((f(x)), (std/core/list/map<a,b,(e :: E)>(xx, f)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/map"]}, {"name": {"op": "Var","id": "std/core/list/char/list","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}, {"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lo","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "hi","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/map<int,char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/list"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "lo","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(lo)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "hi","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(hi)"}]},"annotation": "genExpr: std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x111","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "(#1)","args": [{"op": "Var","id": "@x111","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}}},"annotation": "genWrapExternal"},"annotation": "genExpr: std/core/char/int/char"}]},"annotation": "genExpr: std/core/list/map<int,char,(total :: E)>((std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))), std/core/char/int/char)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(lo: char, hi: char){\n  std/core/list/map<int,char,(total :: E)>((std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))), std/core/char/int/char);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/char/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/char/list"]}, {"name": {"op": "Var","id": "std/core/list/function/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo","type": {"op": "Int"}},"annotation": "genExpr: lo"}]},"annotation": "genExpr: f(lo)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/function/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/function/list<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(lo, 1)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hi","type": {"op": "Int"}},"annotation": "genExpr: hi"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(lo)), (std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(lo: int, hi: int, f: (int) -> (e :: E) a){\n  (match ((std/core/int/(<=)(lo, hi))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Cons<a>((f(lo)), (std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/function/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/function/list"]}, {"name": {"op": "Var","id": "std/core/list/stride/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}, {"op": "Var","id": "stride","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo","type": {"op": "Int"}},"annotation": "genExpr: lo"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/stride/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/stride/list"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "stride","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(lo, stride)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hi","type": {"op": "Int"}},"annotation": "genExpr: hi"}, {"op": "DebugWrap","inner": {"op": "Var","id": "stride","type": {"op": "Int"}},"annotation": "genExpr: stride"}]},"annotation": "genExpr: std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)"}]},"annotation": "genExpr: std/core/types/Cons<int>(lo, (std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<int>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(lo: int, hi: int, stride: int){\n  match ((std/core/int/(<=)(lo, hi))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Cons<int>(lo, (std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nil<int>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/stride/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/stride/list"]}, {"name": {"op": "Var","id": "std/core/list/stridefunction/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}, {"op": "Var","id": "stride","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "lo","type": {"op": "Int"}},"annotation": "genExpr: lo"}]},"annotation": "genExpr: f(lo)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/stridefunction/list","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/stridefunction/list<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "stride","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(lo, stride)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hi","type": {"op": "Int"}},"annotation": "genExpr: hi"}, {"op": "DebugWrap","inner": {"op": "Var","id": "stride","type": {"op": "Int"}},"annotation": "genExpr: stride"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(lo)), (std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "lo","type": {"op": "Int"}}, {"op": "Var","id": "hi","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(lo: int, hi: int, stride: int, f: (int) -> (e :: E) a){\n  (match ((std/core/int/(<=)(lo, hi))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Cons<a>((f(lo)), (std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/stridefunction/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/stridefunction/list"]}, {"name": {"op": "Var","id": "std/core/list/string/map","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/map<char,char,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/list","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/list"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/string/list(s)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)"}]},"annotation": "genExpr: std/core/string/listchar/string((std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(s: string, f: (char) -> (e :: E) char){\n  std/core/string/listchar/string((std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/string/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/string/map"]}, {"name": {"op": "Var","id": "std/core/list/lookup","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foreach-while<(a, b),a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "kv","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x112","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "kv","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"113","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"114","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"113","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 3159) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 3159) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 3160) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"114\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (kv) {\n  ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n     -> @x;\n}"}]},"annotation": "genExpr: pred((match (kv) {\n  ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n     -> @x;\n}))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x112","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "kv","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"115","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"116","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"116","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 3160) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"115\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 3159) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 3160) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"115\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (kv) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n     -> @x@0;\n}"}]},"annotation": "genExpr: std/core/types/Just<a>((match (kv) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n     -> @x@0;\n}))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x112\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x112","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x112\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(kv: (3159, 3160)){\n  match ((pred((match (kv) {\n    ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n       -> @x;\n  })))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> std/core/types/Just<a>((match (kv) {\n        ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n           -> @x@0;\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> std/core/types/Nothing<a>;\n  };\n}"}]},"annotation": "genExpr: std/core/list/foreach-while<(a, b),a,(e :: E)>(xs, (fn<(e :: E)>(kv: (3159, 3160)){\n    (match ((pred((match (kv) {\n      ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n         -> @x;\n    })))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> std/core/types/Just<a>((match (kv) {\n          ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n             -> @x@0;\n        }));\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Nothing<a>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<(a, b)>, pred: (a) -> (e :: E) bool){\n  std/core/list/foreach-while<(a, b),b,(e :: E)>(xs, (fn<(e :: E)>(kv: (a, b)){\n      (match ((pred((match (kv) {\n        ((@skip std/core/types/Tuple2((@x: a) : a, (@pat@0: b) : b) : (a, b) ) as @pat: (a, b))\n           -> @x;\n      })))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Just<b>((match (kv) {\n            ((@skip std/core/types/Tuple2((@pat@0@0: a) : a, (@x@0: b) : b) : (a, b) ) as @pat@2: (a, b))\n               -> @x@0;\n          }));\n        ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n           -> std/core/types/Nothing<b>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/lookup\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/lookup"]}, {"name": {"op": "Var","id": "std/core/list/map-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"117","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"118","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x119","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"117","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3221) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: action(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x119","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"120","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"120","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 3222) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/map-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/map-while<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"118","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<3221>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/list/map-while<a,a,(e :: E)>(xx, action)"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/list/map-while<a,a,(e :: E)>(xx, action)))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3222) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x119","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((action(x))) {\n  ((std/core/types/Just((y: 3222) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<3222>))\n     -> std/core/types/Cons<a>(y, (std/core/list/map-while<a,a,(e :: E)>(xx, action)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<3222>))\n     -> std/core/types/Nil<a>;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3221) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3221>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"118\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, action: (a) -> (e :: E) (maybe :: V -> V)<b>){\n  (match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<b>;\n    ((@skip std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> (match ((action(x))) {\n        ((std/core/types/Just((y: b) : b) : (maybe :: V -> V)<b> ) as @pat@1: ((maybe :: V -> V)<b>))\n           -> std/core/types/Cons<b>(y, (std/core/list/map-while<a,b,(e :: E)>(xx, action)));\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<b> ) as @pat@2: ((maybe :: V -> V)<b>))\n           -> std/core/types/Nil<b>;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/map-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/map-while"]}, {"name": {"op": "Var","id": "std/core/list/maximum","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"121","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"121","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-default@3236: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-default@3236"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3236: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (default) {\n  ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3236;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"122","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"123","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"123","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<int>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"122","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/max","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/max"}]},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<int>, default: ? int){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n       -> (match (default) {\n        ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-default@3236;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 0;\n      });\n    ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n       -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/maximum\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/maximum"]}, {"name": {"op": "Var","id": "std/core/list/minimum","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"124","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"124","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-default@3266: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-default@3266"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3266,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3266: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (default) {\n  ((std/core/types/@Optional((@uniq-default@3266: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3266;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"125","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"126","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"126","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<int>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"125","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/min","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/min"}]},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/min)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<int>, default: ? int){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n       -> (match (default) {\n        ((std/core/types/@Optional((@uniq-default@3266: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-default@3266;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 0;\n      });\n    ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n       -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/min);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/minimum\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/minimum"]}, {"name": {"op": "Var","id": "std/core/list/partition-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"127","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"128","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x129","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"127","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3429) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: pred(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x129","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@cctx-x3377","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"127","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3429) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3377\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x3377"]}, {"name": {"op": "Var","id": "@cctx-x3378","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3377\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3377, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3378\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x3378"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/partition-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/partition-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"128","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<3429>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3377","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x3377"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3378","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x3378"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}]},"annotation": "genExpr: std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2)"}},"annotation": "genExpr: val @cctx-x3377 : (list :: V -> V)<a>;\nval @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x129","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@cctx-x3420","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"127","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3429) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3420\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x3420"]}, {"name": {"op": "Var","id": "@cctx-x3421","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3420\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3420, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3421\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x3421"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/partition-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/partition-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"128","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<3429>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3420","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x3420"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3421","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x3421"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))"}]},"annotation": "genExpr: std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))))"}},"annotation": "genExpr: val @cctx-x3420 : (list :: V -> V)<a>;\nval @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> val @cctx-x3377 : (list :: V -> V)<a>;\n        val @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n    std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val @cctx-x3420 : (list :: V -> V)<a>;\n        val @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n    std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))));\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3429) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3429>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool, acc1: (ctx :: V -> V)<(list :: V -> V)<a>>, acc2: (ctx :: V -> V)<(list :: V -> V)<a>>){\n  (match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))));\n    ((@skip std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<a>))\n       -> (match ((pred(x))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> val @cctx-x3377 : (list :: V -> V)<a>;\n              val @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n          std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2);\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> val @cctx-x3420 : (list :: V -> V)<a>;\n              val @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n          std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))));\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/partition-acc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/partition-acc"]}, {"name": {"op": "Var","id": "std/core/list/partition","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/partition-acc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/partition-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/list/partition-acc<a,(e :: E)>(xs, pred, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool){\n  std/core/list/partition-acc<a,(e :: E)>(xs, pred, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/partition\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/partition"]}, {"name": {"op": "Var","id": "std/core/list/remove","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/filter","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/filter<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10095","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: pred(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10095"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10095","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10095","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(x: 3506){\n  val b@10095 : bool\n        = pred(x);\n  match (b@10095) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"}]},"annotation": "genExpr: std/core/list/filter<a,(e :: E)>(xs, (fn<(e :: E)>(x: 3506){\n    val b@10095 : bool\n          = (pred(x));\n    (match (b@10095) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/True;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, pred: (a) -> (e :: E) bool){\n  std/core/list/filter<a,(e :: E)>(xs, (fn<(e :: E)>(x: a){\n      val b@10095 : bool\n            = (pred(x));\n      (match (b@10095) {\n        ((std/core/types/True() : bool ) as @pat: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n           -> std/core/types/True;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/remove\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/remove"]}, {"name": {"op": "Var","id": "std/core/list/replicate","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/replicate","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/replicate<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, n: int){\n  (match ((std/core/int/(>)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Cons<a>(x, (std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/replicate\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/replicate"]}, {"name": {"op": "Var","id": "std/core/list/reverse-join","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@0@10045","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), xs)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@0@10045"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@0@10045","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@0@10045","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"130","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"131","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"131","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"130","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>){\n  val xs@0@10045 : (list :: V -> V)<string>\n        = std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), xs);\n  match (xs@0@10045) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/reverse-join\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/reverse-join"]}, {"name": {"op": "Var","id": "std/core/list/joinsep/join","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "sep","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"132","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"133","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "String"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"133","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"132","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(sep, xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>, sep: string){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(sep, xx, x);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/joinsep/join\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/joinsep/join"]}, {"name": {"op": "Var","id": "std/core/list/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@0@10096","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/map<a,string,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?show"}]},"annotation": "genExpr: std/core/list/map<a,string,(e :: E)>(xs, ?show)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@0@10096"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "["},"annotation": "genExpr: \"[\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@0@10096","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@0@10096","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"134","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"135","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ","},"annotation": "genExpr: \",\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"135","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"134","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\",\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@0@10096) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "]"},"annotation": "genExpr: \"]\""}]},"annotation": "genExpr: std/core/types/(++)((match (xs@0@10096) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n  }), \"]\")"}]},"annotation": "genExpr: std/core/types/(++)(\"[\", (std/core/types/(++)((match (xs@0@10096) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n    }), \"]\")))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, @implicit/show: (a) -> (e :: E) string){\n  val xs@0@10096 : (list :: V -> V)<string>\n        = std/core/list/map<a,string,(e :: E)>(xs, ?show);\n  std/core/types/(++)(\"[\", (std/core/types/(++)((match (xs@0@10096) {\n        ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> \"\";\n        ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n           -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n      }), \"]\")));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/show"]}, {"name": {"op": "Var","id": "std/core/list/show-list","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "show-elem","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/show<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Var","id": "show-elem","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: show-elem"}]},"annotation": "genExpr: std/core/list/show<a,(e :: E)>(xs, show-elem)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, show-elem: (a) -> (e :: E) string){\n  std/core/list/show<a,(e :: E)>(xs, show-elem);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/show-list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/show-list"]}, {"name": {"op": "Var","id": "std/core/list/@lift-span@4798","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"136","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"137","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x138","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"136","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 3762) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: predicate(y)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x138","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-span@4798","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-span@4798<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"137","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<3762>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"136","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 3762) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, acc)"}]},"annotation": "genExpr: std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x138","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((predicate(y))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3762) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<3762>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(predicate: (a) -> (e :: E) bool, ys: (list :: V -> V)<a>, acc: (list :: V -> V)<a>){\n  (match (ys) {\n    ((std/core/types/Cons((y: a) : a, (yy: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((predicate(y))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)));\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys);\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-span@4798\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-span@4798"]}, {"name": {"op": "Var","id": "std/core/list/span","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-span@4798","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-span@4798<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}]},"annotation": "genExpr: std/core/list/@lift-span@4798<a,(e :: E)>(predicate, xs, (std/core/types/Nil<a>))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) bool){\n  std/core/list/@lift-span@4798<a,(e :: E)>(predicate, xs, (std/core/types/Nil<a>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/span\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/span"]}, {"name": {"op": "Var","id": "std/core/list/sum","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/(+)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/(+)"}]},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>(xs, 0, std/core/int/(+))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<int>){\n  std/core/list/foldl<int,int,(total :: E)>(xs, 0, std/core/int/(+));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/sum\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/sum"]}, {"name": {"op": "Var","id": "std/core/list/take-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"139","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"140","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x141","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"139","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3832) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: predicate(x)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x141","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"139","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3832) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/take-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/take-while<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"140","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<3832>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}]},"annotation": "genExpr: std/core/list/take-while<a,(e :: E)>(xx, predicate)"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x141","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/Nil<a>;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3832) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3832>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, predicate: (a) -> (e :: E) bool){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match ((predicate(x))) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)));\n        ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n           -> std/core/types/Nil<a>;\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/take-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/take-while"]}, {"name": {"op": "Var","id": "std/core/list/unlines","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"142","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"143","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\n"},"annotation": "genExpr: \"\\x0A\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"143","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"142","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\"\\x0A\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"\\x0A\", xx, x);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/unlines\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/unlines"]}, {"name": {"op": "Var","id": "std/core/list/@lift-unzip@4799","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"144","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"145","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"144","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"146","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"147","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@cctx-x3895","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"146","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 3864) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3895\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x3895"]}, {"name": {"op": "Var","id": "@cctx-x3896","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3895\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3895, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3896\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x3896"]}, {"name": {"op": "Var","id": "@cctx-x3935","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"147","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 3865) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3935\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x3935"]}, {"name": {"op": "Var","id": "@cctx-x3936","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3935\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3935, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x3936\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x3936"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-unzip@4799","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-unzip@4799<a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"145","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<(3864, 3865)>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3895","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x3895"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3896","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x3896"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3935","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x3935"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x3936","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x3936"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))"}]},"annotation": "genExpr: std/core/list/@lift-unzip@4799<a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))))"}},"annotation": "genExpr: val @cctx-x3895 : (list :: V -> V)<a>;\nval @cctx-x3896 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x3935 : (list :: V -> V)<a>;\nval @cctx-x3936 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip@4799<a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3864) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3865) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(3864, 3865)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))"}]},"annotation": "genExpr: std/core/types/Tuple2<a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(ys: (list :: V -> V)<(a, b)>, acc1: (cctx :: (V, V) -> V)<c,(list :: V -> V)<a>>, acc2: (cctx :: (V, V) -> V)<d,(list :: V -> V)<b>>){\n  (match (ys) {\n    ((std/core/types/Cons(((@skip std/core/types/Tuple2((x: a) : a, (y: b) : b) : (a, b) ) as @pat@0: (a, b)) : (a, b), (xx: (list :: V -> V)<(a, b)>) : (list :: V -> V)<(a, b)>) : (list :: V -> V)<(a, b)> ) as @pat: ((list :: V -> V)<(a, b)>))\n       -> val @cctx-x3895 : (list :: V -> V)<a>;\n          val @cctx-x3896 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n          val @cctx-x3935 : (list :: V -> V)<b>;\n          val @cctx-x3936 : (@field-addr :: V -> V)<(list :: V -> V)<b>>;\n      std/core/list/@lift-unzip@4799<a,b,c,d>(xx, (std/core/types/cctx/(++)<c,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<d,(list :: V -> V)<b>,(list :: V -> V)<b>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<b>,(list :: V -> V)<b>>(@cctx-x3935, @cctx-x3936)))));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<(a, b)> ) as @pat@1: ((list :: V -> V)<(a, b)>))\n       -> std/core/types/Tuple2<c,d>((std/core/types/cctx/(++.)<c,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<d,(list :: V -> V)<b>>(acc2, (std/core/types/Nil<b>))));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-unzip@4799\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-unzip@4799"]}, {"name": {"op": "Var","id": "std/core/list/unzip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-unzip@4799","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-unzip@4799<a,a,(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/list/@lift-unzip@4799<a,a,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(xs: (list :: V -> V)<(a, b)>){\n  std/core/list/@lift-unzip@4799<a,b,(list :: V -> V)<a>,(list :: V -> V)<b>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<b>>()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/unzip\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/unzip"]}, {"name": {"op": "Var","id": "std/core/list/@lift-unzip3@4800","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc3","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"148","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"149","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"148","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"150","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"151","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"152","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@cctx-x4086","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"150","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 4054) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4086"]}, {"name": {"op": "Var","id": "@cctx-x4087","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4086\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4086, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4087\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4087"]}, {"name": {"op": "Var","id": "@cctx-x4126","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"151","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 4055) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4126"]}, {"name": {"op": "Var","id": "@cctx-x4127","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4126\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4126, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4127"]}, {"name": {"op": "Var","id": "@cctx-x4166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"152","type": {"op": "Top"}},"annotation": "genTest: normal: (z: 4056) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(z, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4166"]}, {"name": {"op": "Var","id": "@cctx-x4167","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4166, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4167"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-unzip3@4800","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-unzip3@4800<a,a,a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"149","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<(4054, 4055, 4056)>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4086","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4086"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4087","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4087"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4126","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4126"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4127","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4127"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc3","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc3"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4166"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4167","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4167"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))"}]},"annotation": "genExpr: std/core/list/@lift-unzip3@4800<a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))))"}},"annotation": "genExpr: val @cctx-x4086 : (list :: V -> V)<a>;\nval @cctx-x4087 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4126 : (list :: V -> V)<a>;\nval @cctx-x4127 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4166 : (list :: V -> V)<a>;\nval @cctx-x4167 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip3@4800<a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4054) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4055) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 4056) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(4054, 4055, 4056)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple3","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc3","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc3"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))"}]},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,b1> fn(ys: (list :: V -> V)<(a, b, c)>, acc1: (cctx :: (V, V) -> V)<d,(list :: V -> V)<a>>, acc2: (cctx :: (V, V) -> V)<a1,(list :: V -> V)<b>>, acc3: (cctx :: (V, V) -> V)<b1,(list :: V -> V)<c>>){\n  (match (ys) {\n    ((std/core/types/Cons(((@skip std/core/types/Tuple3((x: a) : a, (y: b) : b, (z: c) : c) : (a, b, c) ) as @pat@0: (a, b, c)) : (a, b, c), (xx: (list :: V -> V)<(a, b, c)>) : (list :: V -> V)<(a, b, c)>) : (list :: V -> V)<(a, b, c)> ) as @pat: ((list :: V -> V)<(a, b, c)>))\n       -> val @cctx-x4086 : (list :: V -> V)<a>;\n          val @cctx-x4087 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n          val @cctx-x4126 : (list :: V -> V)<b>;\n          val @cctx-x4127 : (@field-addr :: V -> V)<(list :: V -> V)<b>>;\n          val @cctx-x4166 : (list :: V -> V)<c>;\n          val @cctx-x4167 : (@field-addr :: V -> V)<(list :: V -> V)<c>>;\n      std/core/list/@lift-unzip3@4800<a,b,c,d,a1,b1>(xx, (std/core/types/cctx/(++)<d,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a1,(list :: V -> V)<b>,(list :: V -> V)<b>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<b>,(list :: V -> V)<b>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<b1,(list :: V -> V)<c>,(list :: V -> V)<c>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<c>,(list :: V -> V)<c>>(@cctx-x4166, @cctx-x4167)))));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<(a, b, c)> ) as @pat@1: ((list :: V -> V)<(a, b, c)>))\n       -> std/core/types/Tuple3<d,a1,b1>((std/core/types/cctx/(++.)<d,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a1,(list :: V -> V)<b>>(acc2, (std/core/types/Nil<b>))), (std/core/types/cctx/(++.)<b1,(list :: V -> V)<c>>(acc3, (std/core/types/Nil<c>))));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-unzip3@4800\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-unzip3@4800"]}, {"name": {"op": "Var","id": "std/core/list/unzip3","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-unzip3@4800","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-unzip3@4800<a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/list/@lift-unzip3@4800<a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(xs: (list :: V -> V)<(a, b, c)>){\n  std/core/list/@lift-unzip3@4800<a,b,c,(list :: V -> V)<a>,(list :: V -> V)<b>,(list :: V -> V)<c>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<b>>()), (std/core/types/cctx/empty<(list :: V -> V)<c>>()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/unzip3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/unzip3"]}, {"name": {"op": "Var","id": "std/core/list/@lift-unzip4@4801","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc3","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}, {"op": "Var","id": "acc4","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"153","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"154","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"153","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"155","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"156","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"157","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"158","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@cctx-x4357","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"155","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 4324) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4357\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4357"]}, {"name": {"op": "Var","id": "@cctx-x4358","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4357\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4357, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4358\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4358"]}, {"name": {"op": "Var","id": "@cctx-x4397","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"156","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 4325) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4397\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4397"]}, {"name": {"op": "Var","id": "@cctx-x4398","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4397\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4397, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4398\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4398"]}, {"name": {"op": "Var","id": "@cctx-x4437","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"157","type": {"op": "Top"}},"annotation": "genTest: normal: (z: 4326) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(z, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4437\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4437"]}, {"name": {"op": "Var","id": "@cctx-x4438","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4437\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4437, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4438\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4438"]}, {"name": {"op": "Var","id": "@cctx-x4477","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"158","type": {"op": "Top"}},"annotation": "genTest: normal: (w: 4327) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: w"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"std/core/types/@cctx-hole-create\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/types/Cons<a>(w, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4477\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["@cctx-x4477"]}, {"name": {"op": "Var","id": "@cctx-x4478","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4477\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}},"annotation": "genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4477, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@cctx-x4478\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"export_as": ["@cctx-x4478"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-unzip4@4801","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"154","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<(4324, 4325, 4326, 4327)>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4357","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4357"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4358","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4358"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4397","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4397"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4398","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4398"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc3","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc3"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4437","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4437"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4438","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4438"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc4","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc4"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@cctx-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4477","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: @cctx-x4477"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@cctx-x4478","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genExpr: @cctx-x4478"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))"}]},"annotation": "genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))))"}},"annotation": "genExpr: val @cctx-x4357 : (list :: V -> V)<a>;\nval @cctx-x4358 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4397 : (list :: V -> V)<a>;\nval @cctx-x4398 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4437 : (list :: V -> V)<a>;\nval @cctx-x4438 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4477 : (list :: V -> V)<a>;\nval @cctx-x4478 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4324) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4325) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 4326) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (w: 4327) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(4324, 4325, 4326, 4327)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple4","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc1","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc1"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc2","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc2"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc3","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc3"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/(++.)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "acc4","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"annotation": "genExpr: acc4"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))"}]},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,b1,c1,d1> fn(ys: (list :: V -> V)<(a, b, c, d)>, acc1: (cctx :: (V, V) -> V)<a1,(list :: V -> V)<a>>, acc2: (cctx :: (V, V) -> V)<b1,(list :: V -> V)<b>>, acc3: (cctx :: (V, V) -> V)<c1,(list :: V -> V)<c>>, acc4: (cctx :: (V, V) -> V)<d1,(list :: V -> V)<d>>){\n  (match (ys) {\n    ((std/core/types/Cons(((@skip std/core/types/Tuple4((x: a) : a, (y: b) : b, (z: c) : c, (w: d) : d) : (a, b, c, d) ) as @pat@0: (a, b, c, d)) : (a, b, c, d), (xx: (list :: V -> V)<(a, b, c, d)>) : (list :: V -> V)<(a, b, c, d)>) : (list :: V -> V)<(a, b, c, d)> ) as @pat: ((list :: V -> V)<(a, b, c, d)>))\n       -> val @cctx-x4357 : (list :: V -> V)<a>;\n          val @cctx-x4358 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n          val @cctx-x4397 : (list :: V -> V)<b>;\n          val @cctx-x4398 : (@field-addr :: V -> V)<(list :: V -> V)<b>>;\n          val @cctx-x4437 : (list :: V -> V)<c>;\n          val @cctx-x4438 : (@field-addr :: V -> V)<(list :: V -> V)<c>>;\n          val @cctx-x4477 : (list :: V -> V)<d>;\n          val @cctx-x4478 : (@field-addr :: V -> V)<(list :: V -> V)<d>>;\n      std/core/list/@lift-unzip4@4801<a,b,c,d,a1,b1,c1,d1>(xx, (std/core/types/cctx/(++)<a1,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<b1,(list :: V -> V)<b>,(list :: V -> V)<b>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<b>,(list :: V -> V)<b>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<c1,(list :: V -> V)<c>,(list :: V -> V)<c>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<c>,(list :: V -> V)<c>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<d1,(list :: V -> V)<d>,(list :: V -> V)<d>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<d>,(list :: V -> V)<d>>(@cctx-x4477, @cctx-x4478)))));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<(a, b, c, d)> ) as @pat@1: ((list :: V -> V)<(a, b, c, d)>))\n       -> std/core/types/Tuple4<a1,b1,c1,d1>((std/core/types/cctx/(++.)<a1,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<b1,(list :: V -> V)<b>>(acc2, (std/core/types/Nil<b>))), (std/core/types/cctx/(++.)<c1,(list :: V -> V)<c>>(acc3, (std/core/types/Nil<c>))), (std/core/types/cctx/(++.)<d1,(list :: V -> V)<d>>(acc4, (std/core/types/Nil<d>))));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/@lift-unzip4@4801\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/@lift-unzip4@4801"]}, {"name": {"op": "Var","id": "std/core/list/unzip4","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/@lift-unzip4@4801","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}, {"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/#cctx/empty","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}},"annotation": "genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()"}]},"annotation": "genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(xs: (list :: V -> V)<(a, b, c, d)>){\n  std/core/list/@lift-unzip4@4801<a,b,c,d,(list :: V -> V)<a>,(list :: V -> V)<b>,(list :: V -> V)<c>,(list :: V -> V)<d>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<b>>()), (std/core/types/cctx/empty<(list :: V -> V)<c>>()), (std/core/types/cctx/empty<(list :: V -> V)<d>>()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/unzip4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/unzip4"]}, {"name": {"op": "Var","id": "std/core/list/zip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"159","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"160","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"161","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"162","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<(a, b)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"159","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 4706) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"161","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 4707) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/Tuple2<a,a>(x, y)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/zip","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/zip<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"160","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<4706>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"162","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<4707>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}]},"annotation": "genExpr: std/core/list/zip<a,a>(xx, yy)"}]},"annotation": "genExpr: std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,a>(x, y)), (std/core/list/zip<a,a>(xx, yy)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4707) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<4707>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<(a, b)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Cons((y: 4707) : a, (yy: (list :: V -> V)<4707>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<4707>))\n     -> std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,a>(x, y)), (std/core/list/zip<a,a>(xx, yy)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<4707>))\n     -> std/core/types/Nil<(a, b)>;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4706) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<4706>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<(a, b)>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<b>){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Cons((y: b) : b, (yy: (list :: V -> V)<b>) : (list :: V -> V)<b>) : (list :: V -> V)<b> ) as @pat@0: ((list :: V -> V)<b>))\n           -> std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,b>(x, y)), (std/core/list/zip<a,b>(xx, yy)));\n        ((@skip std/core/types/Nil() : (list :: V -> V)<b> ) as @pat@1: ((list :: V -> V)<b>))\n           -> std/core/types/Nil<(a, b)>;\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<(a, b)>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/zip\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/zip"]}, {"name": {"op": "Var","id": "std/core/list/zipwith","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"163","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"164","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"165","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"163","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 4772) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"165","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 4773) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: f(x, y)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/list/zipwith","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/zipwith<a,a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"164","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<4772>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (yy: list<4773>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: yy"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)"}]},"annotation": "genExpr: std/core/types/Cons<a>((f(x, y)), (std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4773) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<4773>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ys","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ys) {\n  ((std/core/types/Cons((y: 4773) : a, (yy: (list :: V -> V)<4773>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<4773>))\n     -> std/core/types/Cons<a>((f(x, y)), (std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<4773>))\n     -> std/core/types/Nil<a>;\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<4772>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E)> fn<(e :: E)>(xs: (list :: V -> V)<a>, ys: (list :: V -> V)<b>, f: (a, b) -> (e :: E) c){\n  (match (xs) {\n    ((std/core/types/Cons((x: a) : a, (xx: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> (match (ys) {\n        ((std/core/types/Cons((y: b) : b, (yy: (list :: V -> V)<b>) : (list :: V -> V)<b>) : (list :: V -> V)<b> ) as @pat@0: ((list :: V -> V)<b>))\n           -> std/core/types/Cons<c>((f(x, y)), (std/core/list/zipwith<a,b,c,(e :: E)>(xx, yy, f)));\n        ((@skip std/core/types/Nil() : (list :: V -> V)<b> ) as @pat@1: ((list :: V -> V)<b>))\n           -> std/core/types/Nil<c>;\n      });\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/Nil<c>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/list/zipwith\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/list/zipwith"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}