{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/tuple"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/tuple/unit/show","type": {"op": "Function","params": [{"op": "Unit"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "u","type": {"op": "Unit"}}],"body": {"op": "Literal","type": {"op": "String"},"value": "()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(u: ()){\n  \"()\";\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/unit/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Unit\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/unit/show"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple2/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"0","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 241) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 241) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 241) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple2((@x: 241) : a, (@pat@0: 241) : a) : (a, a) ) as @pat: (241, 241))\n     -> @x;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple2((@x: 241) : a, (@pat@0: 241) : a) : (a, a) ) as @pat: (241, 241))\n     -> @x;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"2","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"3","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 241) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 241) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 241) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 241) : a, (@x@0: 241) : a) : (a, a) ) as @pat@1: (241, 241))\n     -> @x@0;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 241) : a, (@x@0: 241) : a) : (a, a) ) as @pat@1: (241, 241))\n     -> @x@0;\n}))"}]},"annotation": "genExpr: std/core/types/Tuple2<a,a>((f((match (t) {\n    ((@skip std/core/types/Tuple2((@x: 241) : a, (@pat@0: 241) : a) : (a, a) ) as @pat: (241, 241))\n       -> @x;\n  }))), (f((match (t) {\n    ((@skip std/core/types/Tuple2((@pat@0@0: 241) : a, (@x@0: 241) : a) : (a, a) ) as @pat@1: (241, 241))\n       -> @x@0;\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(t: (a, a), f: (a) -> (e :: E) b){\n  std/core/types/Tuple2<b,b>((f((match (t) {\n      ((@skip std/core/types/Tuple2((@x: a) : a, (@pat@0: a) : a) : (a, a) ) as @pat: (a, a))\n         -> @x;\n    }))), (f((match (t) {\n      ((@skip std/core/types/Tuple2((@pat@0@0: a) : a, (@x@0: a) : a) : (a, a) ) as @pat@1: (a, a))\n         -> @x@0;\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple2/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple2/map"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple3/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple3","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"4","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"5","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"6","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 388) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"6\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"4\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"5\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"6\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple3((@x: 388) : a, (@pat@0: 388) : a, (@pat@1: 388) : a) : (a, a, a) ) as @pat: (388, 388, 388))\n     -> @x;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple3((@x: 388) : a, (@pat@0: 388) : a, (@pat@1: 388) : a) : (a, a, a) ) as @pat: (388, 388, 388))\n     -> @x;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"7","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"8","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"9","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"8","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 388) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"8\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"9\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"7\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"9\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple3((@pat@0@0: 388) : a, (@x@0: 388) : a, (@pat@1@0: 388) : a) : (a, a, a) ) as @pat@2: (388, 388, 388))\n     -> @x@0;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple3((@pat@0@0: 388) : a, (@x@0: 388) : a, (@pat@1@0: 388) : a) : (a, a, a) ) as @pat@2: (388, 388, 388))\n     -> @x@0;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"10","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"11","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"12","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"12","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@1: 388) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"12\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"10\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"11\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@1: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@1: 388) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"10\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"11\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"12\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple3((@pat@0@1: 388) : a, (@pat@1@1: 388) : a, (@x@1: 388) : a) : (a, a, a) ) as @pat@3: (388, 388, 388))\n     -> @x@1;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple3((@pat@0@1: 388) : a, (@pat@1@1: 388) : a, (@x@1: 388) : a) : (a, a, a) ) as @pat@3: (388, 388, 388))\n     -> @x@1;\n}))"}]},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>((f((match (t) {\n    ((@skip std/core/types/Tuple3((@x: 388) : a, (@pat@0: 388) : a, (@pat@1: 388) : a) : (a, a, a) ) as @pat: (388, 388, 388))\n       -> @x;\n  }))), (f((match (t) {\n    ((@skip std/core/types/Tuple3((@pat@0@0: 388) : a, (@x@0: 388) : a, (@pat@1@0: 388) : a) : (a, a, a) ) as @pat@2: (388, 388, 388))\n       -> @x@0;\n  }))), (f((match (t) {\n    ((@skip std/core/types/Tuple3((@pat@0@1: 388) : a, (@pat@1@1: 388) : a, (@x@1: 388) : a) : (a, a, a) ) as @pat@3: (388, 388, 388))\n       -> @x@1;\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(t: (a, a, a), f: (a) -> (e :: E) b){\n  std/core/types/Tuple3<b,b,b>((f((match (t) {\n      ((@skip std/core/types/Tuple3((@x: a) : a, (@pat@0: a) : a, (@pat@1: a) : a) : (a, a, a) ) as @pat: (a, a, a))\n         -> @x;\n    }))), (f((match (t) {\n      ((@skip std/core/types/Tuple3((@pat@0@0: a) : a, (@x@0: a) : a, (@pat@1@0: a) : a) : (a, a, a) ) as @pat@2: (a, a, a))\n         -> @x@0;\n    }))), (f((match (t) {\n      ((@skip std/core/types/Tuple3((@pat@0@1: a) : a, (@pat@1@1: a) : a, (@x@1: a) : a) : (a, a, a) ) as @pat@3: (a, a, a))\n         -> @x@1;\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple3/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple3/map"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple4/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple4\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple4","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"13","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"14","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"15","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"16","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"13","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 575) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"13\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"16\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"16\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple4((@x: 575) : a, (@pat@0: 575) : a, (@pat@1: 575) : a, (@pat@2: 575) : a) : (a, a, a, a) ) as @pat: (575, 575, 575, 575))\n     -> @x;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple4((@x: 575) : a, (@pat@0: 575) : a, (@pat@1: 575) : a, (@pat@2: 575) : a) : (a, a, a, a) ) as @pat: (575, 575, 575, 575))\n     -> @x;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"17","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"18","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"19","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"20","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"18","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 575) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"18\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"18\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@0: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"18\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"19\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"20\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple4((@pat@0@0: 575) : a, (@x@0: 575) : a, (@pat@1@0: 575) : a, (@pat@2@0: 575) : a) : (a, a, a, a) ) as @pat@3: (575, 575, 575, 575))\n     -> @x@0;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple4((@pat@0@0: 575) : a, (@x@0: 575) : a, (@pat@1@0: 575) : a, (@pat@2@0: 575) : a) : (a, a, a, a) ) as @pat@3: (575, 575, 575, 575))\n     -> @x@0;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"21","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"22","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"23","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"24","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"23","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@1: 575) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"23\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@1: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@1: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@1: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"21\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"23\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"24\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple4((@pat@0@1: 575) : a, (@pat@1@1: 575) : a, (@x@1: 575) : a, (@pat@2@1: 575) : a) : (a, a, a, a) ) as @pat@4: (575, 575, 575, 575))\n     -> @x@1;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple4((@pat@0@1: 575) : a, (@pat@1@1: 575) : a, (@x@1: 575) : a, (@pat@2@1: 575) : a) : (a, a, a, a) ) as @pat@4: (575, 575, 575, 575))\n     -> @x@1;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"25","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"26","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"27","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"28","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"28","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@2: 575) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"28\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@2"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@2: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@2: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@2: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@2: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"26\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"27\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"28\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (t) {\n  ((@skip std/core/types/Tuple4((@pat@0@2: 575) : a, (@pat@1@2: 575) : a, (@pat@2@2: 575) : a, (@x@2: 575) : a) : (a, a, a, a) ) as @pat@5: (575, 575, 575, 575))\n     -> @x@2;\n}"}]},"annotation": "genExpr: f((match (t) {\n  ((@skip std/core/types/Tuple4((@pat@0@2: 575) : a, (@pat@1@2: 575) : a, (@pat@2@2: 575) : a, (@x@2: 575) : a) : (a, a, a, a) ) as @pat@5: (575, 575, 575, 575))\n     -> @x@2;\n}))"}]},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>((f((match (t) {\n    ((@skip std/core/types/Tuple4((@x: 575) : a, (@pat@0: 575) : a, (@pat@1: 575) : a, (@pat@2: 575) : a) : (a, a, a, a) ) as @pat: (575, 575, 575, 575))\n       -> @x;\n  }))), (f((match (t) {\n    ((@skip std/core/types/Tuple4((@pat@0@0: 575) : a, (@x@0: 575) : a, (@pat@1@0: 575) : a, (@pat@2@0: 575) : a) : (a, a, a, a) ) as @pat@3: (575, 575, 575, 575))\n       -> @x@0;\n  }))), (f((match (t) {\n    ((@skip std/core/types/Tuple4((@pat@0@1: 575) : a, (@pat@1@1: 575) : a, (@x@1: 575) : a, (@pat@2@1: 575) : a) : (a, a, a, a) ) as @pat@4: (575, 575, 575, 575))\n       -> @x@1;\n  }))), (f((match (t) {\n    ((@skip std/core/types/Tuple4((@pat@0@2: 575) : a, (@pat@1@2: 575) : a, (@pat@2@2: 575) : a, (@x@2: 575) : a) : (a, a, a, a) ) as @pat@5: (575, 575, 575, 575))\n       -> @x@2;\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(t: (a, a, a, a), f: (a) -> (e :: E) b){\n  std/core/types/Tuple4<b,b,b,b>((f((match (t) {\n      ((@skip std/core/types/Tuple4((@x: a) : a, (@pat@0: a) : a, (@pat@1: a) : a, (@pat@2: a) : a) : (a, a, a, a) ) as @pat: (a, a, a, a))\n         -> @x;\n    }))), (f((match (t) {\n      ((@skip std/core/types/Tuple4((@pat@0@0: a) : a, (@x@0: a) : a, (@pat@1@0: a) : a, (@pat@2@0: a) : a) : (a, a, a, a) ) as @pat@3: (a, a, a, a))\n         -> @x@0;\n    }))), (f((match (t) {\n      ((@skip std/core/types/Tuple4((@pat@0@1: a) : a, (@pat@1@1: a) : a, (@x@1: a) : a, (@pat@2@1: a) : a) : (a, a, a, a) ) as @pat@4: (a, a, a, a))\n         -> @x@1;\n    }))), (f((match (t) {\n      ((@skip std/core/types/Tuple4((@pat@0@2: a) : a, (@pat@1@2: a) : a, (@pat@2@2: a) : a, (@x@2: a) : a) : (a, a, a, a) ) as @pat@5: (a, a, a, a))\n         -> @x@2;\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple4/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple4/map"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple2/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "@implicit/fst/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/snd/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "("},"annotation": "genExpr: \"(\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/fst/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?fst/show"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"29","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"30","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"29","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 746) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"29\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 746) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"30\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 747) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"29\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"30\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((@skip std/core/types/Tuple2((@x: 746) : a, (@pat@0: 747) : a) : (a, b) ) as @pat: (746, 747))\n     -> @x;\n}"}]},"annotation": "genExpr: ?fst/show((match (x) {\n  ((@skip std/core/types/Tuple2((@x: 746) : a, (@pat@0: 747) : a) : (a, b) ) as @pat: (746, 747))\n     -> @x;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ","},"annotation": "genExpr: \",\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/snd/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?snd/show"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"31","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"32","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"32","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 747) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"32\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 746) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 747) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"31\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"32\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 746) : a, (@x@0: 747) : a) : (a, b) ) as @pat@1: (746, 747))\n     -> @x@0;\n}"}]},"annotation": "genExpr: ?snd/show((match (x) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 746) : a, (@x@0: 747) : a) : (a, b) ) as @pat@1: (746, 747))\n     -> @x@0;\n}))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ")"},"annotation": "genExpr: \")\""}]},"annotation": "genExpr: std/core/types/(++)((?snd/show((match (x) {\n    ((@skip std/core/types/Tuple2((@pat@0@0: 746) : a, (@x@0: 747) : a) : (a, b) ) as @pat@1: (746, 747))\n       -> @x@0;\n  }))), \")\")"}]},"annotation": "genExpr: std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n      ((@skip std/core/types/Tuple2((@pat@0@0: 746) : a, (@x@0: 747) : a) : (a, b) ) as @pat@1: (746, 747))\n         -> @x@0;\n    }))), \")\")))"}]},"annotation": "genExpr: std/core/types/(++)((?fst/show((match (x) {\n    ((@skip std/core/types/Tuple2((@x: 746) : a, (@pat@0: 747) : a) : (a, b) ) as @pat: (746, 747))\n       -> @x;\n  }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n        ((@skip std/core/types/Tuple2((@pat@0@0: 746) : a, (@x@0: 747) : a) : (a, b) ) as @pat@1: (746, 747))\n           -> @x@0;\n      }))), \")\")))))"}]},"annotation": "genExpr: std/core/types/(++)(\"(\", (std/core/types/(++)((?fst/show((match (x) {\n      ((@skip std/core/types/Tuple2((@x: 746) : a, (@pat@0: 747) : a) : (a, b) ) as @pat: (746, 747))\n         -> @x;\n    }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n          ((@skip std/core/types/Tuple2((@pat@0@0: 746) : a, (@x@0: 747) : a) : (a, b) ) as @pat@1: (746, 747))\n             -> @x@0;\n        }))), \")\")))))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(x: (a, b), @implicit/fst/show: (a) -> (e :: E) string, @implicit/snd/show: (b) -> (e :: E) string){\n  std/core/types/(++)(\"(\", (std/core/types/(++)((?fst/show((match (x) {\n        ((@skip std/core/types/Tuple2((@x: a) : a, (@pat@0: b) : b) : (a, b) ) as @pat: (a, b))\n           -> @x;\n      }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n            ((@skip std/core/types/Tuple2((@pat@0@0: a) : a, (@x@0: b) : b) : (a, b) ) as @pat@1: (a, b))\n               -> @x@0;\n          }))), \")\")))))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple2/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple2/show"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple3/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "@implicit/fst/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/snd/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/thd/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "("},"annotation": "genExpr: \"(\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/fst/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?fst/show"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"33","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"34","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"35","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"33","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 987) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"33\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 987) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"34\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 988) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 989) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"34\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"35\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((@skip std/core/types/Tuple3((@x: 987) : a, (@pat@0: 988) : a, (@pat@1: 989) : a) : (a, b, c) ) as @pat: (987, 988, 989))\n     -> @x;\n}"}]},"annotation": "genExpr: ?fst/show((match (x) {\n  ((@skip std/core/types/Tuple3((@x: 987) : a, (@pat@0: 988) : a, (@pat@1: 989) : a) : (a, b, c) ) as @pat: (987, 988, 989))\n     -> @x;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ","},"annotation": "genExpr: \",\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/snd/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?snd/show"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"36","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"37","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"38","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"37","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 988) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"37\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"36\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 987) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"37\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 988) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"38\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 989) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"36\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"37\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"38\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((@skip std/core/types/Tuple3((@pat@0@0: 987) : a, (@x@0: 988) : a, (@pat@1@0: 989) : a) : (a, b, c) ) as @pat@2: (987, 988, 989))\n     -> @x@0;\n}"}]},"annotation": "genExpr: ?snd/show((match (x) {\n  ((@skip std/core/types/Tuple3((@pat@0@0: 987) : a, (@x@0: 988) : a, (@pat@1@0: 989) : a) : (a, b, c) ) as @pat@2: (987, 988, 989))\n     -> @x@0;\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ","},"annotation": "genExpr: \",\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/thd/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?thd/show"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"39","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"40","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"41","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"41","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@1: 989) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"41\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"39\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 987) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@1: 988) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@1: 989) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"39\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"41\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n     -> @x@1;\n}"}]},"annotation": "genExpr: ?thd/show((match (x) {\n  ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n     -> @x@1;\n}))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ")"},"annotation": "genExpr: \")\""}]},"annotation": "genExpr: std/core/types/(++)((?thd/show((match (x) {\n    ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n       -> @x@1;\n  }))), \")\")"}]},"annotation": "genExpr: std/core/types/(++)(\",\", (std/core/types/(++)((?thd/show((match (x) {\n      ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n         -> @x@1;\n    }))), \")\")))"}]},"annotation": "genExpr: std/core/types/(++)((?snd/show((match (x) {\n    ((@skip std/core/types/Tuple3((@pat@0@0: 987) : a, (@x@0: 988) : a, (@pat@1@0: 989) : a) : (a, b, c) ) as @pat@2: (987, 988, 989))\n       -> @x@0;\n  }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?thd/show((match (x) {\n        ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n           -> @x@1;\n      }))), \")\")))))"}]},"annotation": "genExpr: std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n      ((@skip std/core/types/Tuple3((@pat@0@0: 987) : a, (@x@0: 988) : a, (@pat@1@0: 989) : a) : (a, b, c) ) as @pat@2: (987, 988, 989))\n         -> @x@0;\n    }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?thd/show((match (x) {\n          ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n             -> @x@1;\n        }))), \")\")))))))"}]},"annotation": "genExpr: std/core/types/(++)((?fst/show((match (x) {\n    ((@skip std/core/types/Tuple3((@x: 987) : a, (@pat@0: 988) : a, (@pat@1: 989) : a) : (a, b, c) ) as @pat: (987, 988, 989))\n       -> @x;\n  }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n        ((@skip std/core/types/Tuple3((@pat@0@0: 987) : a, (@x@0: 988) : a, (@pat@1@0: 989) : a) : (a, b, c) ) as @pat@2: (987, 988, 989))\n           -> @x@0;\n      }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?thd/show((match (x) {\n            ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n               -> @x@1;\n          }))), \")\")))))))))"}]},"annotation": "genExpr: std/core/types/(++)(\"(\", (std/core/types/(++)((?fst/show((match (x) {\n      ((@skip std/core/types/Tuple3((@x: 987) : a, (@pat@0: 988) : a, (@pat@1: 989) : a) : (a, b, c) ) as @pat: (987, 988, 989))\n         -> @x;\n    }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n          ((@skip std/core/types/Tuple3((@pat@0@0: 987) : a, (@x@0: 988) : a, (@pat@1@0: 989) : a) : (a, b, c) ) as @pat@2: (987, 988, 989))\n             -> @x@0;\n        }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?thd/show((match (x) {\n              ((@skip std/core/types/Tuple3((@pat@0@1: 987) : a, (@pat@1@1: 988) : a, (@x@1: 989) : a) : (a, b, c) ) as @pat@3: (987, 988, 989))\n                 -> @x@1;\n            }))), \")\")))))))))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E)> fn<(e :: E)>(x: (a, b, c), @implicit/fst/show: (a) -> (e :: E) string, @implicit/snd/show: (b) -> (e :: E) string, @implicit/thd/show: (c) -> (e :: E) string){\n  std/core/types/(++)(\"(\", (std/core/types/(++)((?fst/show((match (x) {\n        ((@skip std/core/types/Tuple3((@x: a) : a, (@pat@0: b) : b, (@pat@1: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n           -> @x;\n      }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?snd/show((match (x) {\n            ((@skip std/core/types/Tuple3((@pat@0@0: a) : a, (@x@0: b) : b, (@pat@1@0: c) : c) : (a, b, c) ) as @pat@2: (a, b, c))\n               -> @x@0;\n          }))), (std/core/types/(++)(\",\", (std/core/types/(++)((?thd/show((match (x) {\n                ((@skip std/core/types/Tuple3((@pat@0@1: a) : a, (@pat@1@1: b) : b, (@x@1: c) : c) : (a, b, c) ) as @pat@3: (a, b, c))\n                   -> @x@1;\n              }))), \")\")))))))))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple3/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple3/show"]}, {"name": {"op": "Var","id": "std/core/tuple/show-tuple","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "showfst","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}, {"op": "Var","id": "showsnd","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/tuple/tuple2/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/tuple/tuple2/show<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "showfst","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: showfst"}, {"op": "DebugWrap","inner": {"op": "Var","id": "showsnd","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: showsnd"}]},"annotation": "genExpr: std/core/tuple/tuple2/show<a,a,(e :: E)>(x, showfst, showsnd)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(x: (a, b), showfst: (a) -> (e :: E) string, showsnd: (b) -> (e :: E) string){\n  std/core/tuple/tuple2/show<a,b,(e :: E)>(x, showfst, showsnd);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/show-tuple\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/show-tuple"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple2/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x29_22","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "@pat-x29_39","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "@implicit/fst/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/snd/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x29_22","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"42","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"43","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x29_39","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"44","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"45","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/fst/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?fst/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"42","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 1129) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"42\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"44","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 1129) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"44\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}]},"annotation": "genExpr: ?fst/(==)(x1, x2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/snd/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?snd/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"43","type": {"op": "Top"}},"annotation": "genTest: normal: (y1: 1130) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"43\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"45","type": {"op": "Top"}},"annotation": "genTest: normal: (y2: 1130) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"45\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y2"}]},"annotation": "genExpr: ?snd/(==)(y1, y2)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?fst/(==)(x1, x2))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> ?snd/(==)(y1, y2);\n  (@pat@2: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@pat-x29_39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 1129) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"45\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y2: 1130) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x29_39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"45\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@pat-x29_39) {\n  ((@skip std/core/types/Tuple2((x2: 1129) : a, (y2: 1130) : a) : (a, b) ) as @pat@0: (1129, 1130))\n     -> (match ((?fst/(==)(x1, x2))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> ?snd/(==)(y1, y2);\n      (@pat@2: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x29_22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 1129) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"43\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y1: 1130) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x29_22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"43\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(@pat-x29_22: (a, b), @pat-x29_39: (a, b), @implicit/fst/(==): (a, a) -> bool, @implicit/snd/(==): (b, b) -> bool){\n  (match (@pat-x29_22) {\n    ((@skip std/core/types/Tuple2((x1: a) : a, (y1: b) : b) : (a, b) ) as @pat: (a, b))\n       -> (match (@pat-x29_39) {\n        ((@skip std/core/types/Tuple2((x2: a) : a, (y2: b) : b) : (a, b) ) as @pat@0: (a, b))\n           -> (match ((?fst/(==)(x1, x2))) {\n            ((std/core/types/True() : bool ) as @pat@1: bool)\n               -> ?snd/(==)(y1, y2);\n            (@pat@2: bool)\n               -> std/core/types/False;\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple2/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple2/(==)"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple3/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x33_22","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "@pat-x33_44","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "@implicit/fst/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/snd/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/thd/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x33_22","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"47","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"48","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"49","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x33_44","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"50","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"51","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"52","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x53","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/fst/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?fst/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"47","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 1216) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"47\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"50","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 1216) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"50\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}]},"annotation": "genExpr: ?fst/(==)(x1, x2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x53","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x54","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/snd/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?snd/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"48","type": {"op": "Top"}},"annotation": "genTest: normal: (y1: 1217) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"48\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"51","type": {"op": "Top"}},"annotation": "genTest: normal: (y2: 1217) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"51\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y2"}]},"annotation": "genExpr: ?snd/(==)(y1, y2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x54","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/thd/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?thd/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"49","type": {"op": "Top"}},"annotation": "genTest: normal: (z1: 1218) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"49\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"52","type": {"op": "Top"}},"annotation": "genTest: normal: (z2: 1218) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"52\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z2"}]},"annotation": "genExpr: ?thd/(==)(z1, z2)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?snd/(==)(y1, y2))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> ?thd/(==)(z1, z2);\n  (@pat@3: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x53\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?fst/(==)(x1, x2))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((?snd/(==)(y1, y2))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> ?thd/(==)(z1, z2);\n      (@pat@3: bool)\n         -> std/core/types/False;\n    });\n  (@pat@4: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@pat-x33_44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"50\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 1216) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"51\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y2: 1217) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z2: 1218) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x33_44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"50\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"51\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"52\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@pat-x33_44) {\n  ((@skip std/core/types/Tuple3((x2: 1216) : a, (y2: 1217) : a, (z2: 1218) : a) : (a, b, c) ) as @pat@0: (1216, 1217, 1218))\n     -> (match ((?fst/(==)(x1, x2))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> (match ((?snd/(==)(y1, y2))) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> ?thd/(==)(z1, z2);\n          (@pat@3: bool)\n             -> std/core/types/False;\n        });\n      (@pat@4: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x33_22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 1216) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y1: 1217) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z1: 1218) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x33_22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"47\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"48\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"49\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(@pat-x33_22: (a, b, c), @pat-x33_44: (a, b, c), @implicit/fst/(==): (a, a) -> bool, @implicit/snd/(==): (b, b) -> bool, @implicit/thd/(==): (c, c) -> bool){\n  (match (@pat-x33_22) {\n    ((@skip std/core/types/Tuple3((x1: a) : a, (y1: b) : b, (z1: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n       -> (match (@pat-x33_44) {\n        ((@skip std/core/types/Tuple3((x2: a) : a, (y2: b) : b, (z2: c) : c) : (a, b, c) ) as @pat@0: (a, b, c))\n           -> (match ((?fst/(==)(x1, x2))) {\n            ((std/core/types/True() : bool ) as @pat@1: bool)\n               -> (match ((?snd/(==)(y1, y2))) {\n                ((std/core/types/True() : bool ) as @pat@2: bool)\n                   -> ?thd/(==)(z1, z2);\n                (@pat@3: bool)\n                   -> std/core/types/False;\n              });\n            (@pat@4: bool)\n               -> std/core/types/False;\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple3/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple3/(==)"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple2/cmp","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x38_21","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "@pat-x38_38","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "@implicit/fst/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/snd/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x38_21","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"55","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x38_38","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"57","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"58","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x59","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/fst/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?fst/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"55","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 1270) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"57","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 1270) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"57\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}]},"annotation": "genExpr: ?fst/cmp(x1, x2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x59","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/snd/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?snd/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"56","type": {"op": "Top"}},"annotation": "genTest: normal: (y1: 1271) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"58","type": {"op": "Top"}},"annotation": "genTest: normal: (y2: 1271) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"58\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y2"}]},"annotation": "genExpr: ?snd/cmp(y1, y2)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x59","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: lg"}}]},"annotation": "genBranch: [(lg,{\"op\": \"Var\",\"id\": \"@x59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?fst/cmp(x1, x2))) {\n  ((std/core/types/Eq() : order ) as @pat@1: order)\n     -> ?snd/cmp(y1, y2);\n  (lg: order)\n     -> lg;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@pat-x38_38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 1270) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"58\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y2: 1271) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x38_38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"58\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@pat-x38_38) {\n  ((@skip std/core/types/Tuple2((x2: 1270) : a, (y2: 1271) : a) : (a, b) ) as @pat@0: (1270, 1271))\n     -> (match ((?fst/cmp(x1, x2))) {\n      ((std/core/types/Eq() : order ) as @pat@1: order)\n         -> ?snd/cmp(y1, y2);\n      (lg: order)\n         -> lg;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x38_21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 1270) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y1: 1271) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x38_21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"56\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(@pat-x38_21: (a, b), @pat-x38_38: (a, b), @implicit/fst/cmp: (a, a) -> order, @implicit/snd/cmp: (b, b) -> order){\n  (match (@pat-x38_21) {\n    ((@skip std/core/types/Tuple2((x1: a) : a, (y1: b) : b) : (a, b) ) as @pat: (a, b))\n       -> (match (@pat-x38_38) {\n        ((@skip std/core/types/Tuple2((x2: a) : a, (y2: b) : b) : (a, b) ) as @pat@0: (a, b))\n           -> (match ((?fst/cmp(x1, x2))) {\n            ((std/core/types/Eq() : order ) as @pat@1: order)\n               -> ?snd/cmp(y1, y2);\n            (lg: order)\n               -> lg;\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple2/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple2/cmp"]}, {"name": {"op": "Var","id": "std/core/tuple/tuple3/cmp","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x44_26","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "@pat-x44_48","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "@implicit/fst/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/snd/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/thd/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x44_26","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"60","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"61","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"62","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x44_48","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"63","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"64","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"65","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x66","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/fst/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?fst/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"60","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 1320) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"60\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"63","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 1320) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"63\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}]},"annotation": "genExpr: ?fst/cmp(x1, x2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x66","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/snd/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?snd/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"61","type": {"op": "Top"}},"annotation": "genTest: normal: (y1: 1321) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"61\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"64","type": {"op": "Top"}},"annotation": "genTest: normal: (y2: 1321) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"64\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y2"}]},"annotation": "genExpr: ?snd/cmp(y1, y2)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/thd/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?thd/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"62","type": {"op": "Top"}},"annotation": "genTest: normal: (z1: 1322) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"62\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"65","type": {"op": "Top"}},"annotation": "genTest: normal: (z2: 1322) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"65\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: z2"}]},"annotation": "genExpr: ?thd/cmp(z1, z2)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x67","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: lg"}}]},"annotation": "genBranch: [(lg,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?snd/cmp(y1, y2))) {\n  ((std/core/types/Eq() : order ) as @pat@2: order)\n     -> ?thd/cmp(z1, z2);\n  (lg: order)\n     -> lg;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x66","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: lg@0"}}]},"annotation": "genBranch: [(lg@0,{\"op\": \"Var\",\"id\": \"@x66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((?fst/cmp(x1, x2))) {\n  ((std/core/types/Eq() : order ) as @pat@1: order)\n     -> (match ((?snd/cmp(y1, y2))) {\n      ((std/core/types/Eq() : order ) as @pat@2: order)\n         -> ?thd/cmp(z1, z2);\n      (lg: order)\n         -> lg;\n    });\n  (lg@0: order)\n     -> lg@0;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@pat-x44_48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"63\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 1320) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"64\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y2: 1321) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z2: 1322) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x44_48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"63\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"64\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"65\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@pat-x44_48) {\n  ((@skip std/core/types/Tuple3((x2: 1320) : a, (y2: 1321) : a, (z2: 1322) : a) : (a, b, c) ) as @pat@0: (1320, 1321, 1322))\n     -> (match ((?fst/cmp(x1, x2))) {\n      ((std/core/types/Eq() : order ) as @pat@1: order)\n         -> (match ((?snd/cmp(y1, y2))) {\n          ((std/core/types/Eq() : order ) as @pat@2: order)\n             -> ?thd/cmp(z1, z2);\n          (lg: order)\n             -> lg;\n        });\n      (lg@0: order)\n         -> lg@0;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x44_26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 1320) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"61\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y1: 1321) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z1: 1322) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x44_26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"61\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"62\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(@pat-x44_26: (a, b, c), @pat-x44_48: (a, b, c), @implicit/fst/cmp: (a, a) -> order, @implicit/snd/cmp: (b, b) -> order, @implicit/thd/cmp: (c, c) -> order){\n  (match (@pat-x44_26) {\n    ((@skip std/core/types/Tuple3((x1: a) : a, (y1: b) : b, (z1: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n       -> (match (@pat-x44_48) {\n        ((@skip std/core/types/Tuple3((x2: a) : a, (y2: b) : b, (z2: c) : c) : (a, b, c) ) as @pat@0: (a, b, c))\n           -> (match ((?fst/cmp(x1, x2))) {\n            ((std/core/types/Eq() : order ) as @pat@1: order)\n               -> (match ((?snd/cmp(y1, y2))) {\n                ((std/core/types/Eq() : order ) as @pat@2: order)\n                   -> ?thd/cmp(z1, z2);\n                (lg: order)\n                   -> lg;\n              });\n            (lg@0: order)\n               -> lg@0;\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/tuple/tuple3/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/tuple/tuple3/cmp"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}