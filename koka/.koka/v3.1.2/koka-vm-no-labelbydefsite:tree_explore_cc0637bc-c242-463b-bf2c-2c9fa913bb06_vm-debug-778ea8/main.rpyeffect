{"blocks":[{"label":"0([match_def@[mcore:[#116]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_main/@Hnd-choose@[mcore:[#116]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<bool,main/choose,73,74>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<bool,main/choose,73,74>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#116]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/choose","scrutinee":0,"clauses":[{"tag":"main/@Hnd-choose","target":1,"args":{"any":[0,1]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#915]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#117]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_main/@Hnd-choose@[mcore:[#117]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,main/choose,97,98>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,main/choose,97,98>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#117]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/choose","scrutinee":0,"clauses":[{"tag":"main/@Hnd-choose","target":4,"args":{"any":[0,1]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#916]","target":3,"args":{"any":[]}}}]},
{"label":"6([#11])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([#12])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@1: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@3: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@1: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@3: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([match_def@[mcore:[#118]#9]#10])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"5\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"5\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))","traced":{"any":[]}},
{"op":"Match","type":"main/tree","scrutinee":0,"clauses":[{"tag":"main/Node","target":7,"args":{"any":[0,1,2]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#917]","target":6,"args":{"any":[]}}}]},
{"label":"9([match_main/Leaf@[mcore:[#118]#9]#15])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([mcore:[#118]#9])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/tree","scrutinee":0,"clauses":[{"tag":"main/Leaf","target":9,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#918]","target":8,"args":{"any":[]}}}]},
{"label":"11([#20])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([#21])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([match_def@[mcore:[#119]#18]#19])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())","traced":{"any":[]}},
{"op":"Match","type":"main/tree","scrutinee":0,"clauses":[{"tag":"main/Leaf","target":12,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#919]","target":11,"args":{"any":[]}}}]},
{"label":"14([match_main/Node@[mcore:[#119]#18]#24])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@0: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@2: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@0: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@2: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([mcore:[#119]#18])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/tree","scrutinee":0,"clauses":[{"tag":"main/Node","target":14,"args":{"any":[1,2,3]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#920]","target":13,"args":{"any":[]}}}]},
{"label":"16([mcore:[#120]#27])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"17([mcore:[#123]#32])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"18([mcore:[#129]#40])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/choose :: (E, V) -> V)|(e :: E)>,(main/choose :: (E, V) -> V),a>(main/@tag-choose, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/choose :: (E, V) -> V)|(e :: E)>,(main/choose :: (E, V) -> V),a>(main/@tag-choose, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":17}]},
{"label":"19([match_def@[mcore:[#130]#47]#48])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([#49])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,193,194>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,193,194>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"21([mcore:[#130]#47])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/choose","scrutinee":0,"clauses":[{"tag":"main/@Hnd-choose","target":20,"args":{"any":[0,1]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#921]","target":19,"args":{"any":[]}}}]},
{"label":"22([mcore:[#136]#50])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@1@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(503, y)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":503},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x, y@1@10003)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@0@10000, 37)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":37},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"PrimOp","name":"abs(Int): Int","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1009","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1009},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1009","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@0@10000, 37)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x, y@1@10003)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(503, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@1@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([mcore:[#137]#59])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"24([mcore:[#138]#65])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"25([#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([k@[#85]#87])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([match_def@[#85]#89])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"28([k@[match_main/@Hnd-choose@[#85]#90]#92])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([#94])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([k@[#95]#97])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"31([#95])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"32([match_main/@Hnd-choose@[#85]#90])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-choose) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-choose) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":31,"args":{"any":[2]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#922]","target":29,"args":{"any":[]}}}]},
{"label":"33([#85])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/choose>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-choose((@pat@0@0: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-choose) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-choose((@pat@0@0: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-choose) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/choose>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/choose","scrutinee":3,"clauses":[{"tag":"main/@Hnd-choose","target":32,"args":{"any":[2,3]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#923]","target":27,"args":{"any":[]}}}]},
{"label":"34([k@[k@[mcore:[#146]#69]#75]#83])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":33,"args":{"any":[1,2,3,4]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#924]","target":25,"args":{"any":[]}}}]},
{"label":"35([k@[mcore:[#146]#69]#75])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":34,"args":{"any":[]}},
{"op":"Jump","target":23}]},
{"label":"36([mcore:[#146]#69])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":35,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":24}]},
{"label":"37([switch case for Bool(true)#103])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/Leaf)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"38([#120])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([k@[switch case for Bool(false)#110]#118])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: main/Node(t, n, t)","traced":{"any":[]}},
{"op":"Copy","from":0,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/Node(t, n, t)","traced":{"any":[]}},
{"op":"Jump","target":152}]},
{"label":"40([switch case for Bool(false)#110])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val t : main/tree\n      = main/make((std/core/int/int-sub(n, 1)));\nmain/Node(t, n, t)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/make((std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/Leaf)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":39,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/make((std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val t : main/tree\n      = main/make((std/core/int/int-sub(n, 1)));\nmain/Node(t, n, t)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":43}]},
{"label":"41([switch default case#123])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([switch default case#106])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[40],"default":41}]},
{"label":"43([mcore:[#158]#99])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[37],"default":42}]},
{"label":"44([mcore:[#160]#124])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"45([mcore:[#161]#130])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"46([mcore:[#171]#134])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/@open-none2"}]},
{"label":"47([mcore:[#178]#141])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@1@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(503, y)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":503},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10006\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x, y@1@10009)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@0@10006, 37)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":37},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"PrimOp","name":"abs(Int): Int","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1009","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1009},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1009","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@0@10006, 37)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x, y@1@10009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10006\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(503, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@1@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([mcore:[#186]#150])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/@open-none2"}]},
{"label":"49([mcore:[#193]#157])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@4@10013\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(503, y@2)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":503},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@3@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@2, y@4@10013)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@3@10010, 37)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":37},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"PrimOp","name":"abs(Int): Int","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1009","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1009},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1009","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@3@10010, 37)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@2, y@4@10013)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@3@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(503, y@2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@4@10013\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([#168])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([#189])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":47}]},
{"label":"52([method_apply@[#202]#206])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":49}]},
{"label":"53([k@[#202]#213])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([#202])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n    val y@4@10013 : int;\n    val x@3@10010 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n  }), v, @x-x2@0@10035)","traced":{"any":[]}},
{"op":"New","out":2,"targets":[52],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n    val y@4@10013 : int;\n    val x@3@10010 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n  }), v, @x-x2@0@10035)","traced":{"any":[]}},
{"op":"Jump","target":48}]},
{"label":"55([k@[k@[k@[k@[#169]#175]#183]#185]#196])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x2@0@10035\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-run@707<(h :: H)>(state, next)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":54,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-run@707<(h :: H)>(state, next)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x2@0@10035\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":76}]},
{"label":"56([k@[k@[k@[#169]#175]#183]#185])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10032\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[3]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,<(main/choose :: (E, V) -> V),(div :: X)>,(h :: H)>(state, (std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x: int, y: int){\n      val y@1@10009 : int;\n      val x@0@10006 : int;\n      (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009));\n    }), @x-x1@10032, v)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x: int, y: int){\n    val y@1@10009 : int;\n    val x@0@10006 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009));\n  }), @x-x1@10032, v)","traced":{"any":[]}},
{"op":"New","out":4,"targets":[51],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":55,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":0},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":5,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x: int, y: int){\n    val y@1@10009 : int;\n    val x@0@10006 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009));\n  }), @x-x1@10032, v)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,<(main/choose :: (E, V) -> V),(div :: X)>,(h :: H)>(state, (std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x: int, y: int){\n      val y@1@10009 : int;\n      val x@0@10006 : int;\n      (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009));\n    }), @x-x1@10032, v)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10032\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"57([match_def@[k@[k@[#169]#175]#183]#215])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([k@[#216]#218])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([match_def@[#216]#220])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([k@[match_main/@Hnd-choose@[#216]#221]#223])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"61([#225])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([k@[k@[#226]#228]#230])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([switch case for Bool(true)#232])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x29\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x29\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([switch case for Bool(false)#234])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x29\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x29\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"65([switch default case#235])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"66([switch default case#233])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Switch","arg":2,"values":[false],"targets":[64],"default":65}]},
{"label":"67([k@[#226]#228])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[63],"default":66}]},
{"label":"68([#226])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> l;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n     -> r;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039)","traced":{"any":[]}},
{"op":"Push","target":67,"args":{"any":[0,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> l;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n     -> r;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":4,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"69([match_main/@Hnd-choose@[#216]#221])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-choose) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n     -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n      ((std/core/types/True() : bool ) as @pat@1@1: bool)\n         -> l;\n      ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n         -> r;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-choose) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n     -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n      ((std/core/types/True() : bool ) as @pat@1@1: bool)\n         -> l;\n      ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n         -> r;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause0","target":68,"args":{"any":[4]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#925]","target":61,"args":{"any":[]}}}]},
{"label":"70([#216])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/choose>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-choose((@pat@0@1: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-choose) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n         -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n          ((std/core/types/True() : bool ) as @pat@1@1: bool)\n             -> l;\n          ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n             -> r;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":4,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-choose((@pat@0@1: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-choose) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n         -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n          ((std/core/types/True() : bool ) as @pat@1@1: bool)\n             -> l;\n          ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n             -> r;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/choose>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/choose","scrutinee":5,"clauses":[{"tag":"main/@Hnd-choose","target":69,"args":{"any":[4,5]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#926]","target":59,"args":{"any":[]}}}]},
{"label":"71([k@[k@[#169]#175]#183])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"next\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@10039) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/choose :: (E, V) -> V)<(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-choose((@pat@0@1: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@ctl-choose) {\n          ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>))\n             -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> l;\n              ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                 -> r;\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Push","target":56,"args":{"any":[3,4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@10039) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/choose :: (E, V) -> V)<(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-choose((@pat@0@1: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@ctl-choose) {\n          ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>))\n             -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> l;\n              ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                 -> r;\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"next\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":2,"clauses":[{"tag":"std/core/hnd/Ev","target":70,"args":{"any":[3,4,5,6]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#927]","target":57,"args":{"any":[]}}}]},
{"label":"72([k@[#169]#175])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":71,"args":{"any":[1,2,3,5]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":6,"to":2},
{"op":"Jump","target":44}]},
{"label":"73([#169])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(l,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (l: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(v,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (v: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(r,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (r: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@10039 : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>;\nval next : main/tree;\nval @x-x1@10032 : int;\nval _ : ();\nval @x-x2@0@10035 : int;\nstd/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n    val y@4@10013 : int;\n    val x@3@10010 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n  }), v, @x-x2@0@10035)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":72,"args":{"any":[1,3,2,4,0]}},
{"op":"Copy","from":5,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@10039 : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>;\nval next : main/tree;\nval @x-x1@10032 : int;\nval _ : ();\nval @x-x2@0@10035 : int;\nstd/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n    val y@4@10013 : int;\n    val x@3@10010 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n  }), v, @x-x2@0@10035)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(l,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (l: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(v,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (v: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(r,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (r: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":45}]},
{"label":"74([match_def@[mcore:[#197]#166]#167])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))","traced":{"any":[]}},
{"op":"Match","type":"main/tree","scrutinee":1,"clauses":[{"tag":"main/Node","target":73,"args":{"any":[1,2,3]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#928]","target":50,"args":{"any":[]}}}]},
{"label":"75([match_main/Leaf@[mcore:[#197]#166]#236])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([mcore:[#197]#166])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/tree","scrutinee":1,"clauses":[{"tag":"main/Leaf","target":75,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#929]","target":74,"args":{"any":[]}}}]},
{"label":"77([mcore:[#206]#238])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause0"}]},
{"label":"78([mcore:[#208]#243])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to"}]},
{"label":"79([mcore:[#211]#249])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/protect"}]},
{"label":"80([mcore:[#218]#256])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/append"}]},
{"label":"81([k@[k@[mcore:[#222]#262]#266]#270])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/append<int>(xs@0@10017, ys@10018)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/append<int>(xs@0@10017, ys@10018)","traced":{"any":[]}},
{"op":"Jump","target":80}]},
{"label":"82([k@[mcore:[#222]#262]#266])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ys@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":2,"value":false},
{"op":"Push","target":81,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ys@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"83([mcore:[#222]#262])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@0@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/True)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Push","target":82,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/True)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@0@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"84([method_apply@[mcore:[#225]#274]#280])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":83}]},
{"label":"85([mcore:[#225]#274])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n    val xs@0@10017 : ((list :: V -> V)<int>);\n    val ys@10018 : ((list :: V -> V)<int>);\n    (std/core/list/append<int>(xs@0@10017, ys@10018));\n  }), k)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"New","out":2,"targets":[84],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n    val xs@0@10017 : ((list :: V -> V)<int>);\n    val ys@10018 : ((list :: V -> V)<int>);\n    (std/core/list/append<int>(xs@0@10017, ys@10018));\n  }), k)","traced":{"any":[]}},
{"op":"Jump","target":79}]},
{"label":"86([method_apply@[mcore:[#227]#289]#292])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":85}]},
{"label":"87([mcore:[#227]#289])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n    (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n        val xs@0@10017 : ((list :: V -> V)<int>);\n        val ys@10018 : ((list :: V -> V)<int>);\n        (std/core/list/append<int>(xs@0@10017, ys@10018));\n      }), k));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[86],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n    (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n        val xs@0@10017 : ((list :: V -> V)<int>);\n        val ys@10018 : ((list :: V -> V)<int>);\n        (std/core/list/append<int>(xs@0@10017, ys@10018));\n      }), k));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":78}]},
{"label":"88([mcore:[#231]#304])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"89([mcore:[#236]#310])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<int>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<int>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>))","traced":{"any":[]}},
{"op":"Jump","target":88}]},
{"label":"90([mcore:[#240]#318])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: explore(tree)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: explore(tree)","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"91([mcore:[#244]#319])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/list/foldl"}]},
{"label":"92([mcore:[#248]#326])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/max"}]},
{"label":"93([switch case for Bool(true)#336])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(div :: X)>(state)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(div :: X)>(state)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([#348])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":87}]},
{"label":"95([method_apply@[#364]#368])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":89}]},
{"label":"96([method_apply@[#364]#375])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":90}]},
{"label":"97([k@[k@[k@[#364]#385]#387]#407])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"98([k@[k@[#364]#385]#387])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10019\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Const","format":"string","out":8,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[8]},"in":{"any":[8]}},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10019\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":116}]},
{"label":"99([#410])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"100([method_apply@[#411]#415])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":92}]},
{"label":"101([k@[#411]#425])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"102([#411])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max)","traced":{"any":[]}},
{"op":"New","out":2,"targets":[100],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":91}]},
{"label":"103([match_def@[k@[#364]#385]#409])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":102,"args":{"any":[0,1]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#930]","target":99,"args":{"any":[]}}}]},
{"label":"104([#432])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([match_def@[#434]#435])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"106([match_std/core/types/@None@[#434]#436])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([#434])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":106,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#931]","target":105,"args":{"any":[]}}}]},
{"label":"108([#439])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3236: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3236: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"109([match_std/core/types/Nil@[k@[#364]#385]#427])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3236;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3236;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":108,"args":{"any":[1]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#932]","target":107,"args":{"any":[]}}}]},
{"label":"110([k@[#364]#385])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(div :: X),(h :: H)>(state, (match (xs@10015) {\n    ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n       -> (match ((std/core/types/@None<int>)) {\n        ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-default@3236;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 0;\n      });\n    ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n       -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10015) {\n  ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n     -> (match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-default@3236;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 0;\n    });\n  ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n     -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Push","target":98,"args":{"any":[1,2,3,4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10015) {\n  ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n     -> (match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-default@3236;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 0;\n    });\n  ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n     -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(div :: X),(h :: H)>(state, (match (xs@10015) {\n    ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n       -> (match ((std/core/types/@None<int>)) {\n        ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-default@3236;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 0;\n      });\n    ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n       -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":109,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#933]","target":103,"args":{"any":[]}}}]},
{"label":"111([#364])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":5,"targets":[95],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":6,"targets":[96],"args":{"any":[1,4]},"tags":["apply"]},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Const","format":"string","out":8,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[8]},"in":{"any":[8]}},
{"op":"Push","target":110,"args":{"any":[1,2,3,4]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":7,"to":3},
{"op":"Copy","from":8,"to":4},
{"op":"Copy","from":6,"to":2},
{"op":"Jump","target":18}]},
{"label":"112([k@[switch case for Bool(false)#342]#361])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":111,"args":{"any":[1,2,3,4]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":5,"to":0},
{"op":"Jump","target":151}]},
{"label":"113([switch case for Bool(false)#342])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val xs@10015 : (list :: V -> V)<int>;\nval _@0 : ();\nval i@0@10019 : int;\nmain/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-choose<int,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(3, (std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n              val xs@0@10017 : ((list :: V -> V)<int>);\n              val ys@10018 : ((list :: V -> V)<int>);\n              (std/core/list/append<int>(xs@0@10017, ys@10018));\n            }), k));\n        })));\n    }))))), (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(x@0: int){\n    (std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>)));\n  }), (fn<<(main/choose :: (E, V) -> V),(div :: X),(local :: H -> X)<(h :: H)>>>(){\n    (explore(tree));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(3, (std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n        (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n            val xs@0@10017 : ((list :: V -> V)<int>);\n            val ys@10018 : ((list :: V -> V)<int>);\n            (std/core/list/append<int>(xs@0@10017, ys@10018));\n          }), k));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 3","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":3},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n      (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          val xs@0@10017 : ((list :: V -> V)<int>);\n          val ys@10018 : ((list :: V -> V)<int>);\n          (std/core/list/append<int>(xs@0@10017, ys@10018));\n        }), k));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":5,"targets":[94],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":112,"args":{"any":[0,1,2,3,4]}},
{"op":"Copy","from":5,"to":0},
{"op":"Copy","from":6,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n      (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          val xs@0@10017 : ((list :: V -> V)<int>);\n          val ys@10018 : ((list :: V -> V)<int>);\n          (std/core/list/append<int>(xs@0@10017, ys@10018));\n        }), k));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 3","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(3, (std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n        (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n            val xs@0@10017 : ((list :: V -> V)<int>);\n            val ys@10018 : ((list :: V -> V)<int>);\n            (std/core/list/append<int>(xs@0@10017, ys@10018));\n          }), k));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-choose<int,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(3, (std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n              val xs@0@10017 : ((list :: V -> V)<int>);\n              val ys@10018 : ((list :: V -> V)<int>);\n              (std/core/list/append<int>(xs@0@10017, ys@10018));\n            }), k));\n        })));\n    }))))), (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(x@0: int){\n    (std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>)));\n  }), (fn<<(main/choose :: (E, V) -> V),(div :: X),(local :: H -> X)<(h :: H)>>>(){\n    (explore(tree));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val xs@10015 : (list :: V -> V)<int>;\nval _@0 : ();\nval i@0@10019 : int;\nmain/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":77}]},
{"label":"114([switch default case#441])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([switch default case#338])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[1,4]}},
{"op":"Switch","arg":4,"values":[false],"targets":[113],"default":114}]},
{"label":"116([mcore:[#257]#332])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6,7,8]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[93],"default":115}]},
{"label":"117([mcore:[#260]#442])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"118([mcore:[#267]#448])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-run@707<(h :: H)>(state, t)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-run@707<(h :: H)>(state, t)","traced":{"any":[]}},
{"op":"Jump","target":76}]},
{"label":"119([method_apply@[mcore:[#272]#452]#457])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":118}]},
{"label":"120([mcore:[#272]#452])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n    (main/@lift-run@707<(h :: H)>(state, t));\n  }), state, tree, 10)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 10","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":10},
{"op":"New","out":2,"targets":[119],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Const","format":"string","out":8,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[8]},"in":{"any":[8]}},
{"op":"Swap","a":6,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":0,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":4,"b":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 10","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n    (main/@lift-run@707<(h :: H)>(state, t));\n  }), state, tree, 10)","traced":{"any":[]}},
{"op":"Jump","target":116}]},
{"label":"121([method_apply@[k@[mcore:[#274]#478]#483]#488])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Swap","a":4,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":6,"b":5},
{"op":"Jump","target":120}]},
{"label":"122([k@[mcore:[#274]#478]#483])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n    (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n        (main/@lift-run@707<(h :: H)>(state, t));\n      }), state, tree, 10));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":0,"targets":[121],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n    (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n        (main/@lift-run@707<(h :: H)>(state, t));\n      }), state, tree, 10));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":117}]},
{"label":"123([mcore:[#274]#478])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/make(n)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/Leaf)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":122,"args":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":6,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/make(n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Jump","target":43}]},
{"label":"124([mcore:[#276]#509])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make(n);\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(main/Leaf)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Swap","a":4,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":0,"b":5},
{"op":"Swap","a":6,"b":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make(n);\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":123}]},
{"label":"125([mcore:[#277]#528])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/os/env/get-args"}]},
{"label":"126([mcore:[#279]#532])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/parse-int"}]},
{"label":"127([mcore:[#286]#538])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"128([mcore:[#293]#544])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-run@707<(h :: H)>(state, t)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-run@707<(h :: H)>(state, t)","traced":{"any":[]}},
{"op":"Jump","target":76}]},
{"label":"129([method_apply@[mcore:[#298]#548]#553])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":128}]},
{"label":"130([mcore:[#298]#548])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n    (main/@lift-run@707<(h :: H)>(state, t));\n  }), state, tree, 10)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 10","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":10},
{"op":"New","out":2,"targets":[129],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Const","format":"string","out":8,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[8]},"in":{"any":[8]}},
{"op":"Swap","a":6,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":0,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":4,"b":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 10","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n    (main/@lift-run@707<(h :: H)>(state, t));\n  }), state, tree, 10)","traced":{"any":[]}},
{"op":"Jump","target":116}]},
{"label":"131([#587])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Swap","a":4,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":6,"b":5},
{"op":"Jump","target":130}]},
{"label":"132([k@[k@[mcore:[#300]#574]#576]#582])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n    (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n        (main/@lift-run@707<(h :: H)>(state, t));\n      }), state, tree, 10));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":0,"targets":[131],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n    (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n        (main/@lift-run@707<(h :: H)>(state, t));\n      }), state, tree, 10));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":127}]},
{"label":"133([k@[mcore:[#300]#574]#576])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(main/Leaf)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":132,"args":{"any":[]}},
{"op":"Jump","target":43}]},
{"label":"134([#609])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"135([#610])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"136([match_def@[mcore:[#300]#574]#608])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":135,"args":{"any":[0]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#934]","target":134,"args":{"any":[]}}}]},
{"label":"137([#611])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 5","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 5","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([mcore:[#300]#574])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/make((match (m@10023) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (m@10023) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":133,"args":{"any":[]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10023) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/make((match (m@10023) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":137,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#935]","target":136,"args":{"any":[]}}}]},
{"label":"139([mcore:[#302]#614])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"140([mcore:[#304]#619])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"141([k@[#661]#666])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":139}]},
{"label":"142([#661])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":141,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Jump","target":140}]},
{"label":"143([k@[k@[k@[mcore:[#308]#624]#629]#631]#641])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make((match (m@10023) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n             -> 5;\n          ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n             -> x;\n        }));\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(main/@tag-choose)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(main/Leaf)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":142,"args":{"any":[]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Swap","a":0,"b":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make((match (m@10023) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n             -> 5;\n          ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n             -> x;\n        }));\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n})()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":138}]},
{"label":"144([k@[k@[mcore:[#308]#624]#629]#631])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":143,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":126}]},
{"label":"145([#672])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"146([#673])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"147([match_def@[k@[mcore:[#308]#624]#629]#671])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":146,"args":{"any":[]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#936]","target":145,"args":{"any":[]}}}]},
{"label":"148([#676])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"149([k@[mcore:[#308]#624]#629])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/parse-int((match (xs@10025) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10025) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":144,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10025) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/parse-int((match (xs@10025) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":148,"args":{"any":[1,2]}}],"default":{"tag":"a53b35b7-23e8-4094-bdb3-5bdc91da8cec#[Missing Tag#937]","target":147,"args":{"any":[]}}}]},
{"label":"150([mcore:[#308]#624])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6,7]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":149,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":125}]},
{"label":"151([mcore:[#309]#440])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"main/choose","tag":"main/@Hnd-choose","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"152([mcore:[#310]#122])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Construct","out":0,"type":"main/tree","tag":"main/Node","args":{"any":[0,1,2]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"153([#896])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"main/@tag-choose"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/Leaf)"},
{"op":"Debug","msg":"BGN: genConstr","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"main/tree","tag":"main/Leaf","args":{"any":[]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"main/Leaf"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_45f169b8-a57d-4585-8a32-cecfcc36c433"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genConstr","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"154([k@[k@[k@[k@[#849]#859]#869]#879]#889])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/@tag-choose)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"main/@tag-choose\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(main/choose :: (E, V) -> V)>(\"choose@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"choose@main\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"choose@main"},
{"op":"Push","target":153,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"choose@main\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(main/choose :: (E, V) -> V)>(\"choose@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"main/@tag-choose\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":16}]},
{"label":"155([k@[k@[k@[#849]#859]#869]#879])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#115]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_text_parse.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"Push","target":154,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"156([k@[k@[#849]#859]#869])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#114]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_os_env.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"Push","target":155,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"157([k@[#849]#859])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#113]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":156,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"158([#849])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#112]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":157,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"159([k@[k@[k@[k@[#799]#809]#819]#829]#839])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#111]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":158,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"160([k@[k@[k@[#799]#809]#819]#829])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#110]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":159,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"161([k@[k@[#799]#809]#819])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#109]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":160,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"162([k@[#799]#809])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#108]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":161,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"163([#799])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#107]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":162,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"164([k@[k@[k@[k@[#749]#759]#769]#779]#789])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#106]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":163,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"165([k@[k@[k@[#749]#759]#769]#779])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#105]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":164,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"166([k@[k@[#749]#759]#769])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#104]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":165,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"167([k@[#749]#759])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#103]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":166,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"168([#749])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#102]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":167,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"169([k@[k@[k@[k@[#699]#709]#719]#729]#739])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#101]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":168,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"170([k@[k@[k@[#699]#709]#719]#729])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#100]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":169,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"171([k@[k@[#699]#709]#719])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#99]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":170,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"172([k@[#699]#709])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#98]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":171,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"173([#699])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#97]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":172,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"174([k@[mcore:[static initializers#352]#679]#689])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#96]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":173,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"175([mcore:[static initializers#352]#679])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#95]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":174,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"176([k@[main entrypoint#2]#912])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"177([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":176,"args":{"any":[]}},
{"op":"Jump","target":175}]}],
"symbols":[{"name":"main/choose/@cfc","position":2},
{"name":"main/choose/@ctl-choose","position":5},
{"name":"main/is-leaf","position":10},
{"name":"main/is-node","position":15},
{"name":"main/@handle-choose","position":18},
{"name":"main/@select-choose","position":21},
{"name":"main/operator","position":22},
{"name":"main/choose","position":36},
{"name":"main/make","position":43},
{"name":"main/@lift-run@707","position":76},
{"name":"main/@lift-run@708","position":116},
{"name":"main/run","position":124},
{"name":"main/main","position":150},
{"name":"main/@Hnd-choose","position":151},
{"name":"main/Node","position":152},
{"name":"$static-init","position":175},
{"name":"$entrypoint","position":177}],
"frameSize":{"regs_any":16}}