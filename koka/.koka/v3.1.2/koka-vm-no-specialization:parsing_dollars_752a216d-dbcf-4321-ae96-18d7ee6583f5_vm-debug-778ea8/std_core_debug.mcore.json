{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/debug"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/unsafe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_unsafe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/debug/unsafe-assert-fail","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/debug/@extern-unsafe-assert-fail","args": [{"op": "Var","id": "msg","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(msg: string){\n  std/core/debug/@extern-unsafe-assert-fail(msg);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/unsafe-assert-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/unsafe-assert-fail"]}, {"name": {"op": "Var","id": "std/core/debug/file/kk-file","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/file/kk-file\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/debug/file/kk-file"]}, {"name": {"op": "Var","id": "std/core/debug/file/kk-line","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/file/kk-line\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/debug/file/kk-line"]}, {"name": {"op": "Var","id": "std/core/debug/breakpoint","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/core/debug/@extern-breakpoint","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/core/debug/@extern-breakpoint();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/breakpoint\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/breakpoint"]}, {"name": {"op": "Var","id": "std/core/debug/trace-enabled","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<bool,(global :: H)>(std/core/types/True)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/trace-enabled\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["std/core/debug/trace-enabled"]}, {"name": {"op": "Var","id": "std/core/debug/xtrace","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/debug/@extern-xtrace","args": [{"op": "Var","id": "message","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(message: string){\n  std/core/debug/@extern-xtrace(message);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/xtrace\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/xtrace"]}, {"name": {"op": "Var","id": "std/core/debug/xtrace-any","type": {"op": "Function","params": [{"op": "String"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/debug/@extern-xtrace-any","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message","type": {"op": "String"}},"annotation": "genExpr: message"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/debug/@extern-xtrace-any<a>(message, x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(message: string, x: a){\n  std/core/debug/@extern-xtrace-any<a>(message, x);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/xtrace-any\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/xtrace-any"]}, {"name": {"op": "Var","id": "std/core/debug/file/kk-module","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/file/kk-module\",\"type\": {\"op\": \"String\"}}"},"export_as": ["std/core/debug/file/kk-module"]}, {"name": {"op": "Var","id": "std/core/debug/file/kk-file-line","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@implicit/kk-file","type": {"op": "String"}}, {"op": "Var","id": "@implicit/kk-line","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/kk-file","type": {"op": "String"}},"annotation": "genExpr: ?kk-file"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "("},"annotation": "genExpr: \"(\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/kk-line","type": {"op": "String"}},"annotation": "genExpr: ?kk-line"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ")"},"annotation": "genExpr: \")\""}]},"annotation": "genExpr: std/core/types/(++)(?kk-line, \")\")"}]},"annotation": "genExpr: std/core/types/(++)(\"(\", (std/core/types/(++)(?kk-line, \")\")))"}]},"annotation": "genExpr: std/core/types/(++)(?kk-file, (std/core/types/(++)(\"(\", (std/core/types/(++)(?kk-line, \")\")))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@implicit/kk-file: string, @implicit/kk-line: string){\n  std/core/types/(++)(?kk-file, (std/core/types/(++)(\"(\", (std/core/types/(++)(?kk-line, \")\")))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/file/kk-file-line\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/file/kk-file-line"]}, {"name": {"op": "Var","id": "std/core/debug/assert","type": {"op": "Function","params": [{"op": "String"}, {"op": "Bool"}, {"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "condition","type": {"op": "Bool"}}, {"op": "Var","id": "@implicit/kk-file-line","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "condition","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"condition\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "condition","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/unsafe-assert-fail","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/debug/unsafe-assert-fail"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/kk-file-line","type": {"op": "String"}},"annotation": "genExpr: ?kk-file-line"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ": "},"annotation": "genExpr: \": \""}, {"op": "DebugWrap","inner": {"op": "Var","id": "message","type": {"op": "String"}},"annotation": "genExpr: message"}]},"annotation": "genExpr: std/core/types/(++)(\": \", message)"}]},"annotation": "genExpr: std/core/types/(++)(?kk-file-line, (std/core/types/(++)(\": \", message)))"}]},"annotation": "genExpr: std/core/debug/unsafe-assert-fail((std/core/types/(++)(?kk-file-line, (std/core/types/(++)(\": \", message)))))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"condition\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(message: string, condition: bool, @implicit/kk-file-line: string){\n  match (condition) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Unit;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/debug/unsafe-assert-fail((std/core/types/(++)(?kk-file-line, (std/core/types/(++)(\": \", message)))));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/assert\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Bool\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/assert"]}, {"name": {"op": "Var","id": "std/core/debug/notrace","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/trace-enabled","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/debug/trace-enabled"}, {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<bool,(global :: H)>(std/core/debug/trace-enabled, std/core/types/False)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(st :: H -> E)<(global :: H)>>(){\n  std/core/types/set<bool,(global :: H)>(std/core/debug/trace-enabled, std/core/types/False);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/notrace\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/notrace"]}, {"name": {"op": "Var","id": "std/core/debug/trace","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/trace-enabled","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/debug/trace-enabled"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/xtrace","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/debug/xtrace"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message","type": {"op": "String"}},"annotation": "genExpr: message"}]},"annotation": "genExpr: std/core/debug/xtrace(message)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(message: string){\n  match ((std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/debug/xtrace(message);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/trace\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/trace"]}, {"name": {"op": "Var","id": "std/core/debug/trace-any","type": {"op": "Function","params": [{"op": "String"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/trace-enabled","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/debug/trace-enabled"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/xtrace-any","type": {"op": "Function","params": [{"op": "String"}, {"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/debug/xtrace-any<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message","type": {"op": "String"}},"annotation": "genExpr: message"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/debug/xtrace-any<a>(message, x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(message: string, x: a){\n  (match ((std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/debug/xtrace-any<a>(message, x);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/trace-any\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/trace-any"]}, {"name": {"op": "Var","id": "std/core/debug/trace-info","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "message","type": {"op": "String"}}, {"op": "Var","id": "@implicit/kk-file-line","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "message@0@10004","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/kk-file-line","type": {"op": "String"}},"annotation": "genExpr: ?kk-file-line"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ": "},"annotation": "genExpr: \": \""}, {"op": "DebugWrap","inner": {"op": "Var","id": "message","type": {"op": "String"}},"annotation": "genExpr: message"}]},"annotation": "genExpr: std/core/types/(++)(\": \", message)"}]},"annotation": "genExpr: std/core/types/(++)(?kk-file-line, (std/core/types/(++)(\": \", message)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"message@0@10004\",\"type\": {\"op\": \"String\"}}"},"export_as": ["message@0@10004"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x2","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/trace-enabled","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/debug/trace-enabled"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x2","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/xtrace","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/debug/xtrace"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message@0@10004","type": {"op": "String"}},"annotation": "genExpr: message@0@10004"}]},"annotation": "genExpr: std/core/debug/xtrace(message@0@10004)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x2","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(message: string, @implicit/kk-file-line: string){\n  val message@0@10004 : string\n        = std/core/types/(++)(?kk-file-line, (std/core/types/(++)(\": \", message)));\n  match ((std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/debug/xtrace(message@0@10004);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/trace-info\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/trace-info"]}, {"name": {"op": "Var","id": "std/core/debug/trace-show","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/kk-file-line","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "message@10006","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: ?show(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"message@10006\",\"type\": {\"op\": \"String\"}}"},"export_as": ["message@10006"]}, {"name": {"op": "Var","id": "message@0@10004","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/kk-file-line","type": {"op": "String"}},"annotation": "genExpr: ?kk-file-line"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ": "},"annotation": "genExpr: \": \""}, {"op": "DebugWrap","inner": {"op": "Var","id": "message@10006","type": {"op": "String"}},"annotation": "genExpr: message@10006"}]},"annotation": "genExpr: std/core/types/(++)(\": \", message@10006)"}]},"annotation": "genExpr: std/core/types/(++)(?kk-file-line, (std/core/types/(++)(\": \", message@10006)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"message@0@10004\",\"type\": {\"op\": \"String\"}}"},"export_as": ["message@0@10004"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/trace-enabled","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/debug/trace-enabled"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/debug/xtrace","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/debug/xtrace"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "message@0@10004","type": {"op": "String"}},"annotation": "genExpr: message@0@10004"}]},"annotation": "genExpr: std/core/debug/xtrace(message@0@10004)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x3","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, @implicit/show: (a) -> string, @implicit/kk-file-line: string){\n  val message@10006 : string;\n  val message@0@10004 : string;\n  (match ((std/core/types/ref/(!)<(global :: H),bool,(_e :: E)>(std/core/debug/trace-enabled))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/debug/xtrace(message@0@10004);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/debug/trace-show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/debug/trace-show"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}