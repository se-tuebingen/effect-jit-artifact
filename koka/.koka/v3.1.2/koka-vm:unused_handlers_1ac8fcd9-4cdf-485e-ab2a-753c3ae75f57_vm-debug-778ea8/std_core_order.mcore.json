{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/order"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/order/int","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order){\n  match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/int\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/int"]}, {"name": {"op": "Var","id": "std/core/order/order2/int","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order2\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}},"type_tag": "std/core/types/order2","clauses": [{"tag": "std/core/types/Lt2","params": [{"op": "Var","id": "@\"lt\"0","type": {"op": "Top"}}, {"op": "Var","id": "@\"gt\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"lt\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 56) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"lt\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 56) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"gt\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}: \"std/core/types/order2\".\"std/core/types/Lt2\"(({\"op\": \"Var\",\"id\": \"@\\\"lt\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}},"type_tag": "std/core/types/order2","clauses": [{"tag": "std/core/types/Eq2","params": [{"op": "Var","id": "@\"eq\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"eq\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 56) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"eq\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}: \"std/core/types/order2\".\"std/core/types/Eq2\"(({\"op\": \"Var\",\"id\": \"@\\\"eq\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}},"type_tag": "std/core/types/order2","clauses": [{"tag": "std/core/types/Gt2","params": [{"op": "Var","id": "@\"lt\"3","type": {"op": "Top"}}, {"op": "Var","id": "@\"gt\"4","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"lt\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@5: 56) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"lt\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@6: 56) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"gt\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}: \"std/core/types/order2\".\"std/core/types/Gt2\"(({\"op\": \"Var\",\"id\": \"@\\\"lt\\\"3\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"4\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: (order2 :: V -> V)<a>){\n  (match (x) {\n    ((std/core/types/Lt2((@pat@0: a) : a, (@pat@1: a) : a) : (order2 :: V -> V)<a> ) as @pat: ((order2 :: V -> V)<a>))\n       -> -1;\n    ((std/core/types/Eq2((@pat@3: a) : a) : (order2 :: V -> V)<a> ) as @pat@2: ((order2 :: V -> V)<a>))\n       -> 0;\n    ((@skip std/core/types/Gt2((@pat@5: a) : a, (@pat@6: a) : a) : (order2 :: V -> V)<a> ) as @pat@4: ((order2 :: V -> V)<a>))\n       -> 1;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/order2/int\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/order2/int"]}, {"name": {"op": "Var","id": "std/core/order/order2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x5","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: cmp(x, y)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq2","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Eq2<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Eq2<a>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Lt2<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/Lt2<a>(x, y)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x5","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Gt2<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Gt2<a>(y, x)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, cmp: (a, a) -> order){\n  (match ((cmp(x, y))) {\n    ((std/core/types/Eq() : order ) as @pat: order)\n       -> std/core/types/Eq2<a>(x);\n    ((std/core/types/Lt() : order ) as @pat@0: order)\n       -> std/core/types/Lt2<a>(x, y);\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> std/core/types/Gt2<a>(y, x);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/order2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/order2"]}, {"name": {"op": "Var","id": "std/core/order/(!=)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixNeq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Lt() : order ) as @pat: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/Lt() : order ) as @pat@2: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(!=)((match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  }), (match (y) {\n    ((std/core/types/Lt() : order ) as @pat@2: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n       -> 1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order, y: order){\n  std/core/int/(!=)((match (x) {\n      ((std/core/types/Lt() : order ) as @pat: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n         -> 1;\n    }), (match (y) {\n      ((std/core/types/Lt() : order ) as @pat@2: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n         -> 1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/(!=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/(!=)"]}, {"name": {"op": "Var","id": "std/core/order/(<)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Lt() : order ) as @pat: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/Lt() : order ) as @pat@2: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<)((match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  }), (match (y) {\n    ((std/core/types/Lt() : order ) as @pat@2: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n       -> 1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order, y: order){\n  std/core/int/(<)((match (x) {\n      ((std/core/types/Lt() : order ) as @pat: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n         -> 1;\n    }), (match (y) {\n      ((std/core/types/Lt() : order ) as @pat@2: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n         -> 1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/(<)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/(<)"]}, {"name": {"op": "Var","id": "std/core/order/(<=)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Lt() : order ) as @pat: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/Lt() : order ) as @pat@2: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<=)((match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  }), (match (y) {\n    ((std/core/types/Lt() : order ) as @pat@2: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n       -> 1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order, y: order){\n  std/core/int/(<=)((match (x) {\n      ((std/core/types/Lt() : order ) as @pat: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n         -> 1;\n    }), (match (y) {\n      ((std/core/types/Lt() : order ) as @pat@2: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n         -> 1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/(<=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/(<=)"]}, {"name": {"op": "Var","id": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Lt() : order ) as @pat: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/Lt() : order ) as @pat@2: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  }), (match (y) {\n    ((std/core/types/Lt() : order ) as @pat@2: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n       -> 1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order, y: order){\n  std/core/int/(==)((match (x) {\n      ((std/core/types/Lt() : order ) as @pat: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n         -> 1;\n    }), (match (y) {\n      ((std/core/types/Lt() : order ) as @pat@2: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n         -> 1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/(==)"]}, {"name": {"op": "Var","id": "std/core/order/(>)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Lt() : order ) as @pat: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/Lt() : order ) as @pat@2: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)((match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  }), (match (y) {\n    ((std/core/types/Lt() : order ) as @pat@2: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n       -> 1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order, y: order){\n  std/core/int/(>)((match (x) {\n      ((std/core/types/Lt() : order ) as @pat: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n         -> 1;\n    }), (match (y) {\n      ((std/core/types/Lt() : order ) as @pat@2: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n         -> 1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/(>)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/(>)"]}, {"name": {"op": "Var","id": "std/core/order/(>=)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (x) {\n  ((std/core/types/Lt() : order ) as @pat: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n     -> 1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": -1},"annotation": "genExpr: -1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (y) {\n  ((std/core/types/Lt() : order ) as @pat@2: order)\n     -> -1;\n  ((std/core/types/Eq() : order ) as @pat@0@0: order)\n     -> 0;\n  ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n     -> 1;\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>=)((match (x) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n       -> 1;\n  }), (match (y) {\n    ((std/core/types/Lt() : order ) as @pat@2: order)\n       -> -1;\n    ((std/core/types/Eq() : order ) as @pat@0@0: order)\n       -> 0;\n    ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n       -> 1;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: order, y: order){\n  std/core/int/(>=)((match (x) {\n      ((std/core/types/Lt() : order ) as @pat: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1: order)\n         -> 1;\n    }), (match (y) {\n      ((std/core/types/Lt() : order ) as @pat@2: order)\n         -> -1;\n      ((std/core/types/Eq() : order ) as @pat@0@0: order)\n         -> 0;\n      ((@skip std/core/types/Gt() : order ) as @pat@1@0: order)\n         -> 1;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/order/(>=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/order/(>=)"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}