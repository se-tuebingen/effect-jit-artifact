{"blocks":[{"label":"0([mcore:[#29]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Right"}]},
{"label":"1([mcore:[#34]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Left"}]},
{"label":"2([#15])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"3([k@[#16]#21])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([#16])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 87) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Left<a,a>(x@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Left<a,a>(x@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 87) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1}]},
{"label":"5([match_def@[mcore:[#37]#13]#14])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/either","scrutinee":0,"clauses":[{"tag":"std/core/types/Left","target":4,"args":{"any":[0]}}],"default":{"tag":"462eecc9-35da-472a-846a-28002c0ab9e1#[Missing Tag#151]","target":2,"args":{"any":[]}}}]},
{"label":"6([k@[k@[#23]#25]#31])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([k@[#23]#25])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":0}]},
{"label":"8([#23])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 88) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Right<a,a>((f(x)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(x)","traced":{"any":[]}},
{"op":"Push","target":7,"args":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Right<a,a>((f(x)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 88) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"9([mcore:[#37]#13])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/either","scrutinee":0,"clauses":[{"tag":"std/core/types/Right","target":8,"args":{"any":[2]}}],"default":{"tag":"462eecc9-35da-472a-846a-28002c0ab9e1#[Missing Tag#152]","target":5,"args":{"any":[]}}}]},
{"label":"10([mcore:[#39]#33])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"11([#40])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([k@[#41]#46])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([#41])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 132) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 132) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":10}]},
{"label":"14([match_def@[mcore:[#42]#38]#39])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/either","scrutinee":0,"clauses":[{"tag":"std/core/types/Right","target":13,"args":{"any":[0]}}],"default":{"tag":"462eecc9-35da-472a-846a-28002c0ab9e1#[Missing Tag#153]","target":11,"args":{"any":[]}}}]},
{"label":"15([#48])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 131) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 131) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([mcore:[#42]#38])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/either","scrutinee":0,"clauses":[{"tag":"std/core/types/Left","target":15,"args":{"any":[1]}}],"default":{"tag":"462eecc9-35da-472a-846a-28002c0ab9e1#[Missing Tag#154]","target":14,"args":{"any":[]}}}]},
{"label":"17([mcore:[#43]#53])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"18([mcore:[#46]#59])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"19([mcore:[#53]#65])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"20([mcore:[#56]#71])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"21([#79])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([k@[k@[k@[#80]#84]#92]#98])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([k@[k@[#80]#84]#92])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":19}]},
{"label":"24([k@[#80]#84])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \")\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":")"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":23,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \")\"","traced":{"any":[]}},
{"op":"Jump","target":20}]},
{"label":"25([#80])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 224) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"Left(\", (std/core/types/(++)((?left/show(y)), \")\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"Left(\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Left("},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((?left/show(y)), \")\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?left/show(y)","traced":{"any":[]}},
{"op":"Push","target":24,"args":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?left/show(y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((?left/show(y)), \")\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"Left(\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"Left(\", (std/core/types/(++)((?left/show(y)), \")\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 224) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"26([match_def@[mcore:[#63]#77]#78])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/either","scrutinee":2,"clauses":[{"tag":"std/core/types/Left","target":25,"args":{"any":[1]}}],"default":{"tag":"462eecc9-35da-472a-846a-28002c0ab9e1#[Missing Tag#155]","target":21,"args":{"any":[]}}}]},
{"label":"27([k@[k@[k@[#100]#104]#112]#118])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"28([k@[k@[#100]#104]#112])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":17}]},
{"label":"29([k@[#100]#104])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \")\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":")"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":28,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \")\"","traced":{"any":[]}},
{"op":"Jump","target":18}]},
{"label":"30([#100])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 225) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"Right(\", (std/core/types/(++)((?right/show(x)), \")\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"Right(\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Right("},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((?right/show(x)), \")\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?right/show(x)","traced":{"any":[]}},
{"op":"Push","target":29,"args":{"any":[0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?right/show(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((?right/show(x)), \")\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"Right(\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"Right(\", (std/core/types/(++)((?right/show(x)), \")\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 225) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"31([mcore:[#63]#77])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/either","scrutinee":2,"clauses":[{"tag":"std/core/types/Right","target":30,"args":{"any":[3]}}],"default":{"tag":"462eecc9-35da-472a-846a-28002c0ab9e1#[Missing Tag#156]","target":26,"args":{"any":[]}}}]},
{"label":"32([#140])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_ff901280-22d2-44c7-96c8-6fa806a91bda"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([k@[mcore:[static initializers#65]#120]#130])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#28]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":32,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"34([mcore:[static initializers#65]#120])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#27]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":33,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"35([k@[main entrypoint#2]#148])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":35,"args":{"any":[]}},
{"op":"Jump","target":34}]}],
"symbols":[{"name":"std/core/either/map","position":9},
{"name":"std/core/either/maybe","position":16},
{"name":"std/core/either/show","position":31},
{"name":"$static-init","position":34},
{"name":"$entrypoint","position":36}],
"frameSize":{"regs_any":16}}