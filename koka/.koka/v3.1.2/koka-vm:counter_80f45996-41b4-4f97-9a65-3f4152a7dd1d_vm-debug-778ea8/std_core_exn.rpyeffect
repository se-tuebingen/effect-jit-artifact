{"blocks":[{"label":"0([match_def@[mcore:[#134]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#134]#3])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnError\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnError\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnError","target":1,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#805]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#135]#10]#11])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([#14])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#135]#10])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnAssert\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnAssert\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnAssert","target":4,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#806]","target":3,"args":{"any":[]}}}]},
{"label":"6([match_def@[mcore:[#136]#17]#18])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([#21])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([mcore:[#136]#17])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnTodo\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnTodo\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnTodo","target":7,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#807]","target":6,"args":{"any":[]}}}]},
{"label":"9([match_def@[mcore:[#137]#24]#25])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([#28])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([mcore:[#137]#24])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnRange\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnRange\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnRange","target":10,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#808]","target":9,"args":{"any":[]}}}]},
{"label":"12([match_def@[mcore:[#138]#31]#32])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([#35])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"location\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"location\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"definition\\\"1\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"definition\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"location\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"location\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"definition\\\"1\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"definition\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([mcore:[#138]#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnPattern\"(({\"op\": \"Var\",\"id\": \"@\\\"location\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"definition\\\"1\",\"type\": {\"op\": \"String\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnPattern\"(({\"op\": \"Var\",\"id\": \"@\\\"location\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"definition\\\"1\",\"type\": {\"op\": \"String\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnPattern","target":13,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#809]","target":12,"args":{"any":[]}}}]},
{"label":"15([match_def@[mcore:[#139]#38]#39])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([#42])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"errno\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"errno\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"errno\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"errno\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([mcore:[#139]#38])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnSystem\"(({\"op\": \"Var\",\"id\": \"@\\\"errno\\\"2\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnSystem\"(({\"op\": \"Var\",\"id\": \"@\\\"errno\\\"2\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnSystem","target":16,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#810]","target":15,"args":{"any":[]}}}]},
{"label":"18([match_def@[mcore:[#140]#45]#46])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([#49])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"name\\\"3\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"name\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"name\\\"3\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"name\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([mcore:[#140]#45])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnInternal\"(({\"op\": \"Var\",\"id\": \"@\\\"name\\\"3\",\"type\": {\"op\": \"String\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception-info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}: \"std/core/exn/exception-info\".\"std/core/exn/ExnInternal\"(({\"op\": \"Var\",\"id\": \"@\\\"name\\\"3\",\"type\": {\"op\": \"String\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception-info","scrutinee":0,"clauses":[{"tag":"std/core/exn/ExnInternal","target":19,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#811]","target":18,"args":{"any":[]}}}]},
{"label":"21([match_def@[mcore:[#141]#52]#53])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([#54])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([mcore:[#141]#52])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"4\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":22,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#812]","target":21,"args":{"any":[]}}}]},
{"label":"24([match_def@[mcore:[#142]#55]#56])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([#57])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"6\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@x: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"6\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@x: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([mcore:[#142]#55])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"6\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exception\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"6\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":25,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#813]","target":24,"args":{"any":[]}}}]},
{"label":"27([k@[k@[mcore:[#146]#58]#60]#63])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":241}]},
{"label":"28([#67])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([k@[#68]#70])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([match_def@[#68]#72])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"31([match_std/core/exn/Exception@[#68]#73])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"12\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@x@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"12\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@x@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"32([#68])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"12\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"12\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":31,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#814]","target":30,"args":{"any":[]}}}]},
{"label":"33([match_def@[k@[mcore:[#146]#58]#60]#66])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":32,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#815]","target":28,"args":{"any":[]}}}]},
{"label":"34([#74])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-info@236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-info@236: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-info@236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-info@236: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([k@[mcore:[#146]#58]#60])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (info) {\n  ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n     -> @uniq-info@236;\n  ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n     -> (match (@this) {\n      ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":27,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (info) {\n  ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n     -> @uniq-info@236;\n  ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n     -> (match (@this) {\n      ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":34,"args":{"any":[2]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#816]","target":33,"args":{"any":[]}}}]},
{"label":"36([#76])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"37([k@[#77]#79])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"38([match_def@[#77]#81])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([match_std/core/exn/Exception@[#77]#82])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"40([#77])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"9\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":39,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#817]","target":38,"args":{"any":[]}}}]},
{"label":"41([match_def@[mcore:[#146]#58]#75])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":40,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#818]","target":36,"args":{"any":[]}}}]},
{"label":"42([#83])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-message@229,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-message@229: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-message@229,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-message@229: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([mcore:[#146]#58])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/Exception((match (message) {\n    ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-message@229;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n           -> @x;\n      });\n  }), (match (info) {\n    ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n       -> @uniq-info@236;\n    ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n       -> (match (@this) {\n        ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (message) {\n  ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-message@229;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":35,"args":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"message\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (message) {\n  ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-message@229;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/Exception((match (message) {\n    ((std/core/types/@Optional((@uniq-message@229: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-message@229;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/exn/Exception((@x: string) : string, (@pat@0@0: exception-info) : exception-info) : exception ) as @pat@1: exception)\n           -> @x;\n      });\n  }), (match (info) {\n    ((std/core/types/@Optional((@uniq-info@236: exception-info) : exception-info) : ? exception-info ) as @pat@1@0: ? exception-info)\n       -> @uniq-info@236;\n    ((@skip std/core/types/@None() : ? exception-info ) as @pat@2: ? exception-info)\n       -> (match (@this) {\n        ((@skip std/core/exn/Exception((@pat@0@1: string) : string, (@x@0: exception-info) : exception-info) : exception ) as @pat@3: exception)\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":42,"args":{"any":[2]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#819]","target":41,"args":{"any":[]}}}]},
{"label":"44([match_def@[mcore:[#148]#84]#85])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"45([match_def@[#88]#89])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([match_std/core/exn/Exception@[#88]#92])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"15\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"15\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([#88])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"15\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"15\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":46,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#820]","target":45,"args":{"any":[]}}}]},
{"label":"48([mcore:[#148]#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Error","target":47,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#821]","target":44,"args":{"any":[]}}}]},
{"label":"49([match_def@[mcore:[#149]#95]#96])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([match_std/core/exn/Ok@[mcore:[#149]#95]#99])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 265) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 265) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([mcore:[#149]#95])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Ok","target":50,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#822]","target":49,"args":{"any":[]}}}]},
{"label":"52([match_def@[mcore:[#150]#102]#103])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"53([#104])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause1<exception,a,exn,292,293>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause1<exception,a,exn,292,293>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([mcore:[#150]#102])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"18\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":0,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":53,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#823]","target":52,"args":{"any":[]}}}]},
{"label":"55([match_def@[mcore:[#151]#105]#106])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([#107])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<exception,a,exn,321,322>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<exception,a,exn,321,322>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([mcore:[#151]#105])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":0,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":56,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#824]","target":55,"args":{"any":[]}}}]},
{"label":"58([mcore:[#152]#108])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"59([mcore:[#155]#113])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"60([mcore:[#161]#121])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V),a>(std/core/exn/@tag-exn, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/core/exn/@tag-exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V),a>(std/core/exn/@tag-exn, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":59}]},
{"label":"61([match_def@[mcore:[#162]#128]#129])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([#130])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,404,405>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,404,405>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([mcore:[#162]#128])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exn\"}}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":0,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":62,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#825]","target":61,"args":{"any":[]}}}]},
{"label":"64([#133])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"65([#134])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 431) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 431) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"66([match_def@[mcore:[#164]#131]#132])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":1,"clauses":[{"tag":"std/core/exn/Ok","target":65,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#826]","target":64,"args":{"any":[]}}}]},
{"label":"67([match_def@[match_def@[#135]#136]#137])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"68([#138])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 431) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 431) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([match_def@[#135]#136])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":1,"clauses":[{"tag":"std/core/exn/Ok","target":68,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#827]","target":67,"args":{"any":[]}}}]},
{"label":"70([match_std/core/exn/Exception@[#135]#139])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"25\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"25\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"71([#135])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"25\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"25\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":2,"clauses":[{"tag":"std/core/exn/Exception","target":70,"args":{"any":[2,3]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#828]","target":69,"args":{"any":[]}}}]},
{"label":"72([mcore:[#164]#131])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":1,"clauses":[{"tag":"std/core/exn/Error","target":71,"args":{"any":[2]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#829]","target":66,"args":{"any":[]}}}]},
{"label":"73([mcore:[#166]#140])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Left"}]},
{"label":"74([mcore:[#169]#145])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Right"}]},
{"label":"75([mcore:[#172]#150])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Right"}]},
{"label":"76([#157])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([k@[#158]#163])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([#158])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 469) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Right<exception,a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Right<exception,a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 469) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":75}]},
{"label":"79([match_def@[mcore:[#175]#155]#156])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Ok","target":78,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#830]","target":76,"args":{"any":[]}}}]},
{"label":"80([match_def@[match_def@[#165]#166]#167])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"81([k@[#168]#173])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"82([#168])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 469) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Right<exception,a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Right<exception,a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 469) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":74}]},
{"label":"83([match_def@[#165]#166])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"31\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":1,"clauses":[{"tag":"std/core/exn/Ok","target":82,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#831]","target":80,"args":{"any":[]}}}]},
{"label":"84([#180])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"85([match_std/core/exn/Exception@[#165]#175])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(exn@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"29\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@1: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Left<exception,a>(exn@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Left<exception,a>(exn@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(exn@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"29\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@1: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":73}]},
{"label":"86([#165])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"29\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"29\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":85,"args":{"any":[2,3]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#832]","target":83,"args":{"any":[]}}}]},
{"label":"87([mcore:[#175]#155])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Error","target":86,"args":{"any":[1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#833]","target":79,"args":{"any":[]}}}]},
{"label":"88([mcore:[#178]#182])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"89([mcore:[#181]#187])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"90([#194])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"91([k@[#195]#200])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([#195])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":89}]},
{"label":"93([match_def@[mcore:[#184]#192]#193])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Ok","target":92,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#834]","target":90,"args":{"any":[]}}}]},
{"label":"94([match_def@[match_def@[#202]#203]#204])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"95([k@[#205]#210])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"96([#205])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":88}]},
{"label":"97([match_def@[#202]#203])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Ok","target":96,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#835]","target":94,"args":{"any":[]}}}]},
{"label":"98([match_std/core/exn/Exception@[#202]#212])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"33\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"33\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@2: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"99([#202])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"33\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@1: string), (@pat@2: exception-info)) : exception ) as @pat@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"33\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":1,"clauses":[{"tag":"std/core/exn/Exception","target":98,"args":{"any":[1,2]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#836]","target":97,"args":{"any":[]}}}]},
{"label":"100([mcore:[#184]#192])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Error","target":99,"args":{"any":[1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#837]","target":93,"args":{"any":[]}}}]},
{"label":"101([mcore:[#185]#217])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/finally-prompt"}]},
{"label":"102([k@[mcore:[#190]#223]#225])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":101}]},
{"label":"103([mcore:[#190]#223])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/finally-prompt<a,(e :: E)>(hndler, (action()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action()","traced":{"any":[]}},
{"op":"Push","target":102,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/finally-prompt<a,(e :: E)>(hndler, (action()))","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[]}}]},
{"label":"104([match_def@[mcore:[#191]#230]#231])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([#232])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@0: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"106([mcore:[#191]#230])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"exn@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"36\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":105,"args":{"any":[0,1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#838]","target":104,"args":{"any":[]}}}]},
{"label":"107([mcore:[#192]#233])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"108([mcore:[#193]#239])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"109([#258])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"110([k@[#259]#261])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"111([match_def@[#259]#263])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"112([#266])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"113([#268])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"114([k@[#269]#271])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([#269])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 581) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10018, exn@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10018, exn@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 581) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"116([match_std/core/exn/@Hnd-exn@[#259]#264])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 581) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,581,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10018, exn@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 581) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,581,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10018, exn@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"42\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":115,"args":{"any":[3]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#839]","target":113,"args":{"any":[]}}}]},
{"label":"117([#259])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 581) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,581,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10018, exn@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"42\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"42\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 581) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,581,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10018, exn@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":4,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":116,"args":{"any":[3,4]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#840]","target":111,"args":{"any":[]}}}]},
{"label":"118([k@[k@[mcore:[#201]#243]#249]#257])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":117,"args":{"any":[2,3,4,5]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#841]","target":109,"args":{"any":[]}}}]},
{"label":"119([k@[mcore:[#201]#243]#249])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":118,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":107}]},
{"label":"120([mcore:[#201]#243])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":119,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":108}]},
{"label":"121([mcore:[#205]#273])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"122([mcore:[#207]#278])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to-final"}]},
{"label":"123([mcore:[#212]#284])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: hndl(x)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: hndl(x)","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"124([method_apply@[mcore:[#214]#285]#288])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":123}]},
{"label":"125([mcore:[#214]#285])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n    (hndl(x));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[124],"args":{"any":[3,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n    (hndl(x));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":122}]},
{"label":"126([mcore:[#218]#294])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"127([method_apply@[mcore:[#221]#295]#302])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":125}]},
{"label":"128([#319])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":126}]},
{"label":"129([k@[k@[mcore:[#221]#295]#312]#315])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[128],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/core/exn/@tag-exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":60}]},
{"label":"130([k@[mcore:[#221]#295]#312])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":129,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":244}]},
{"label":"131([mcore:[#221]#295])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n          (hndl(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: 661){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n        (hndl(x));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[127],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":130,"args":{"any":[0,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,661>) -> (662 :: E) 661){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n        (hndl(x));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(662 :: E),661>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,661>) -> (662 :: E) 661){\n          (hndl(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: 661){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":121}]},
{"label":"132([mcore:[#225]#329])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"133([mcore:[#227]#334])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to-final"}]},
{"label":"134([mcore:[#232]#340])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/Error<a>(x)","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/Error<a>(x)","traced":{"any":[]}},
{"op":"Jump","target":242}]},
{"label":"135([method_apply@[mcore:[#234]#342]#345])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":134}]},
{"label":"136([mcore:[#234]#342])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n    (std/core/exn/Error<a>(x));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[135],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n    (std/core/exn/Error<a>(x));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":133}]},
{"label":"137([mcore:[#238]#351])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([k@[mcore:[#243]#352]#354])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":243}]},
{"label":"139([mcore:[#243]#352])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/Ok<a>((action()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action()","traced":{"any":[]}},
{"op":"Push","target":138,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/Ok<a>((action()))","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"140([method_apply@[mcore:[#245]#357]#364])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":136}]},
{"label":"141([#381])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":137}]},
{"label":"142([#385])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":139}]},
{"label":"143([k@[k@[mcore:[#245]#357]#374]#377])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[141],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[142],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/core/exn/@tag-exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":60}]},
{"label":"144([k@[mcore:[#245]#357]#374])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":143,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":244}]},
{"label":"145([mcore:[#245]#357])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@handle-exn<(error :: V -> V)<a>,(e :: E),(error :: V -> V)<a>>((std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n          (std/core/exn/Error<b>(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: (error :: V -> V)<701>){\n    @x;\n  }), (fn<<(exn :: (E, V) -> V)|(e :: E)>>(){\n    (std/core/exn/Ok<a>((action())));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n        (std/core/exn/Error<b>(x));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<b>(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<a>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<a>(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[140],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":144,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<a>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<a>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<a>(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n      (std/core/exn/Error<b>(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n        (std/core/exn/Error<b>(x));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@handle-exn<(error :: V -> V)<a>,(e :: E),(error :: V -> V)<a>>((std/core/exn/@Hnd-exn<(e :: E),(error :: V -> V)<a>>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),(error :: V -> V)<b>>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(702 :: E),(error :: V -> V)<701>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),(error :: V -> V)<b>>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(error :: V -> V)<701>>) -> (702 :: E) (error :: V -> V)<701>){\n          (std/core/exn/Error<b>(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: (error :: V -> V)<701>){\n    @x;\n  }), (fn<<(exn :: (E, V) -> V)|(e :: E)>>(){\n    (std/core/exn/Ok<a>((action())));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"146([mcore:[#249]#394])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"147([mcore:[#251]#399])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to-final"}]},
{"label":"148([mcore:[#256]#405])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: hndl(x)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: hndl(x)","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"149([method_apply@[mcore:[#258]#406]#409])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":148}]},
{"label":"150([mcore:[#258]#406])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n    (hndl(x));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[149],"args":{"any":[3,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n    (hndl(x));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":147}]},
{"label":"151([mcore:[#262]#415])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"152([method_apply@[mcore:[#265]#416]#423])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":150}]},
{"label":"153([#440])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":151}]},
{"label":"154([k@[k@[mcore:[#265]#416]#433]#436])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[153],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/core/exn/@tag-exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":60}]},
{"label":"155([k@[mcore:[#265]#416]#433])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":154,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":244}]},
{"label":"156([mcore:[#265]#416])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n          (hndl(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: 731){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n        (hndl(x));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[152],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":155,"args":{"any":[0,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<649,731>) -> (732 :: E) 731){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n      (hndl(x));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n        (hndl(x));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@handle-exn<a,(e :: E),a>((std/core/exn/@Hnd-exn<(e :: E),a>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),(e :: E),b>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(732 :: E),731>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),b>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,731>) -> (732 :: E) 731){\n          (hndl(x));\n        })));\n    }))))), (fn<(e :: E)>(@x: 731){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":146}]},
{"label":"157([mcore:[#266]#449])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"158([mcore:[#267]#455])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"159([#474])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"160([k@[#475]#477])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"161([match_def@[#475]#479])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"162([#482])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"163([#484])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"164([k@[k@[k@[#485]#487]#490]#493])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"165([k@[k@[#485]#487]#490])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"166([k@[#485]#487])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":165,"args":{"any":[1,2,3]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Jump","target":241}]},
{"label":"167([match_def@[match_def@[#485]#495]#496])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"168([#497])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/exn/ExnError)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"169([match_def@[#485]#495])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":168,"args":{"any":[]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#842]","target":167,"args":{"any":[]}}}]},
{"label":"170([match_std/core/types/@Optional@[#485]#500])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-info@743,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-info@743: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-info@743,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-info@743: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"171([#485])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 759) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n      ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n         -> @uniq-info@743;\n      ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n         -> std/core/exn/ExnError;\n    }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/Exception(message, (match (info) {\n    ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n       -> @uniq-info@743;\n    ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n       -> std/core/exn/ExnError;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (info) {\n  ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n     -> @uniq-info@743;\n  ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n     -> std/core/exn/ExnError;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":166,"args":{"any":[4,0,1,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"info\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"54\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (info) {\n  ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n     -> @uniq-info@743;\n  ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n     -> std/core/exn/ExnError;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/Exception(message, (match (info) {\n    ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n       -> @uniq-info@743;\n    ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n       -> std/core/exn/ExnError;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n      ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n         -> @uniq-info@743;\n      ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n         -> std/core/exn/ExnError;\n    }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 759) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":170,"args":{"any":[1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#843]","target":169,"args":{"any":[]}}}]},
{"label":"172([match_std/core/exn/@Hnd-exn@[#475]#480])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 759) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,759,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n          ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n             -> @uniq-info@743;\n          ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n             -> std/core/exn/ExnError;\n        }))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"53\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 759) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,759,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n          ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n             -> @uniq-info@743;\n          ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n             -> std/core/exn/ExnError;\n        }))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause1","target":171,"args":{"any":[4]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#844]","target":163,"args":{"any":[]}}}]},
{"label":"173([#475])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 759) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,759,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n              ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n                 -> @uniq-info@743;\n              ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n                 -> std/core/exn/ExnError;\n            }))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 759) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,759,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10024, (std/core/exn/Exception(message, (match (info) {\n              ((std/core/types/@Optional((@uniq-info@743: exception-info) : exception-info) : ? exception-info ) as @pat@3: ? exception-info)\n                 -> @uniq-info@743;\n              ((@skip std/core/types/@None() : ? exception-info ) as @pat@0@0@0: ? exception-info)\n                 -> std/core/exn/ExnError;\n            }))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":5,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":172,"args":{"any":[4,5]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#845]","target":161,"args":{"any":[]}}}]},
{"label":"174([k@[k@[mcore:[#278]#459]#465]#473])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"48\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":173,"args":{"any":[3,4,5,6]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#846]","target":159,"args":{"any":[]}}}]},
{"label":"175([k@[mcore:[#278]#459]#465])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":174,"args":{"any":[2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Jump","target":157}]},
{"label":"176([mcore:[#278]#459])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":175,"args":{"any":[2,1,0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":158}]},
{"label":"177([mcore:[#279]#501])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"178([mcore:[#282]#507])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"179([mcore:[#285]#513])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"180([mcore:[#291]#519])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"181([mcore:[#292]#525])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"182([match_def@[k@[#556]#564]#565])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"183([#568])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"184([#570])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"185([k@[#571]#573])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"186([match_def@[#571]#575])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"187([k@[k@[#578]#581]#584])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"188([k@[#578]#581])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"189([#578])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":188,"args":{"any":[1,2,3]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Jump","target":241}]},
{"label":"190([match_std/core/hnd/Clause1@[#571]#576])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 820) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/ExnPattern(location, definition)","traced":{"any":[]}},
{"op":"Push","target":189,"args":{"any":[5,0,2,4]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/ExnPattern(location, definition)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 820) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":238}]},
{"label":"191([#571])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"59\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 820) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,820,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 820) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,820,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"59\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":6,"clauses":[{"tag":"std/core/hnd/Clause1","target":190,"args":{"any":[5]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#847]","target":186,"args":{"any":[]}}}]},
{"label":"192([match_std/core/hnd/Ev@[k@[#556]#564]#566])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 820) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,820,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"59\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":3,"to":4},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":5,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"59\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 820) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,820,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10027, (std/core/exn/Exception(message@10008, (std/core/exn/ExnPattern(location, definition)))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":6,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":191,"args":{"any":[5,6]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#848]","target":184,"args":{"any":[]}}}]},
{"label":"193([k@[#556]#564])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":192,"args":{"any":[4,5,6,7]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#849]","target":182,"args":{"any":[]}}}]},
{"label":"194([#556])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":193,"args":{"any":[2,3,4]}},
{"op":"Copy","from":5,"to":2},
{"op":"Jump","target":180}]},
{"label":"195([k@[k@[k@[mcore:[#306]#529]#538]#544]#550])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":194,"args":{"any":[3,1,2,0]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":181}]},
{"label":"196([k@[k@[mcore:[#306]#529]#538]#544])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":195,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":177}]},
{"label":"197([k@[mcore:[#306]#529]#538])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":196,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":178}]},
{"label":"198([mcore:[#306]#529])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"message@10008\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(location, (std/core/types/(++)(\": \", (std/core/types/(++)(definition, \": pattern match failure\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\": \", (std/core/types/(++)(definition, \": pattern match failure\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \": \"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":": "},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(definition, \": pattern match failure\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \": pattern match failure\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":": pattern match failure"},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":197,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \": pattern match failure\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(definition, \": pattern match failure\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \": \"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\": \", (std/core/types/(++)(definition, \": pattern match failure\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(location, (std/core/types/(++)(\": \", (std/core/types/(++)(definition, \": pattern match failure\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"message@10008\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":179}]},
{"label":"199([mcore:[#308]#587])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"200([mcore:[#309]#593])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"201([#599])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"202([#600])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"203([match_def@[mcore:[#317]#597]#598])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Ok","target":202,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#850]","target":201,"args":{"any":[]}}}]},
{"label":"204([match_def@[match_def@[#601]#602]#603])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"205([#604])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"206([match_def@[#601]#602])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Ok\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"74\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":1,"clauses":[{"tag":"std/core/exn/Ok","target":205,"args":{"any":[0]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#851]","target":204,"args":{"any":[]}}}]},
{"label":"207([k@[k@[#611]#619]#621])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"208([match_def@[k@[#611]#619]#623])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"209([#626])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"210([#628])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"211([k@[#629]#631])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"212([match_def@[#629]#633])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"213([#636])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"214([match_std/core/hnd/Clause1@[#629]#634])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10030, exn@0)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10030, exn@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 846) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"215([#629])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"70\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10030, exn@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"73\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10030, exn@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"70\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":214,"args":{"any":[3]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#852]","target":212,"args":{"any":[]}}}]},
{"label":"216([match_std/core/hnd/Ev@[k@[#611]#619]#624])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10030, exn@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"70\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"70\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10030, exn@0);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":4,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":215,"args":{"any":[3,4]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#853]","target":210,"args":{"any":[]}}}]},
{"label":"217([k@[#611]#619])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@10030) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (exn :: (E, V) -> V)<(e :: E),a>) : (exn :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@brk-throw-exn<b>)) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10030, exn@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@10030) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (exn :: (E, V) -> V)<(e :: E),a>) : (exn :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@brk-throw-exn<b>)) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10030, exn@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":216,"args":{"any":[2,3,4,5]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#854]","target":208,"args":{"any":[]}}}]},
{"label":"218([#611])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":217,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":199}]},
{"label":"219([match_std/core/exn/Exception@[#601]#605])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(exn@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"64\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@1: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@10030 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@10030) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (exn :: (E, V) -> V)<(e :: E),a>) : (exn :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@brk-throw-exn<b>)) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10030, exn@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":218,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10030\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@10030 : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@10030) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (exn :: (E, V) -> V)<(e :: E),a>) : (exn :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)> ) as @pat@2: ((hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip std/core/exn/@Hnd-exn((@pat@0@1: int) : int, (@brk-throw-exn: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@3: ((exn :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@brk-throw-exn<b>)) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) 846) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,846,(exn :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10030, exn@0);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}),(exn@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"message\\\"64\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"message\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"info\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}},\"annotation\": \"genTest: normal: (@pat@1: exception-info) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"info\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception-info\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":200}]},
{"label":"220([#601])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"64\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}},\"annotation\": \"genTest: normal: ((@skip std/core/exn/Exception((@pat@0: string), (@pat@1: exception-info)) : exception ) as exn@0: exception) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"exception\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/exn/exception\\\"}}\"}: \"std/core/exn/exception\".\"std/core/exn/Exception\"(({\"op\": \"Var\",\"id\": \"@\\\"message\\\"64\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"info\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception-info\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exception","scrutinee":0,"clauses":[{"tag":"std/core/exn/Exception","target":219,"args":{"any":[2,3]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#855]","target":206,"args":{"any":[]}}}]},
{"label":"221([mcore:[#317]#597])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"err\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/error\"}}: \"std/core/exn/error\".\"std/core/exn/Error\"(({\"op\": \"Var\",\"id\": \"@\\\"exception\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/exn/exception\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/error","scrutinee":0,"clauses":[{"tag":"std/core/exn/Error","target":220,"args":{"any":[1]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#856]","target":203,"args":{"any":[]}}}]},
{"label":"222([mcore:[#320]#638])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/untry<a>(err)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/untry<a>(err)","traced":{"any":[]}},
{"op":"Jump","target":221}]},
{"label":"223([mcore:[#321]#642])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"224([mcore:[#322]#648])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"225([#667])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"226([k@[#668]#670])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"227([match_def@[#668]#672])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"228([#675])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"229([#677])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"230([k@[k@[#678]#685]#688])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"231([k@[#678]#685])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"232([#678])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 887) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"index out-of-range\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"index out-of-range"},
{"op":"Const","format":"string","out":4,"value":"Name(std/core/exn/ExnRange)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":231,"args":{"any":[2,0,1]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"index out-of-range\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<exn>, exception) -> 3307 887) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":241}]},
{"label":"233([match_std/core/exn/@Hnd-exn@[#668]#673])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 887) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,887,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"82\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@brk-throw-exn<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 887) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,887,(exn :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@brk-throw-exn,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@brk-throw-exn: forall<a> hnd/clause1<exception,a,exn,3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@brk-throw-exn\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause1","target":232,"args":{"any":[2]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#857]","target":229,"args":{"any":[]}}}]},
{"label":"234([#668])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 887) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,887,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/exn/exn\".\"std/core/exn/@Hnd-exn\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@brk-throw-exn\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/core/exn/@Hnd-exn((@pat@0@0: int) : int, (@brk-throw-exn: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(3307 :: E),3308>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,b,(exn :: (E, V) -> V),(e :: E),a>)) : (exn :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((exn :: (E, V) -> V)<(3307 :: E),3308>))\n     -> (match ((@brk-throw-exn<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (3307 :: E) 887) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, exception) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,a,(exn :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<exception,887,(exn :: (E, V) -> V),(3307 :: E),3308>))\n         -> f(m, ev@10033, (std/core/exn/Exception(\"index out-of-range\", std/core/exn/ExnRange)));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<exn>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: exn<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/exn/exn","scrutinee":3,"clauses":[{"tag":"std/core/exn/@Hnd-exn","target":233,"args":{"any":[2,3]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#858]","target":227,"args":{"any":[]}}}]},
{"label":"235([k@[k@[mcore:[#333]#652]#658]#666])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":234,"args":{"any":[1,2,3,4]}}],"default":{"tag":"bfac53bc-4315-450f-ac98-330c6603ea89#[Missing Tag#859]","target":225,"args":{"any":[]}}}]},
{"label":"236([k@[mcore:[#333]#652]#658])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":235,"args":{"any":[]}},
{"op":"Jump","target":223}]},
{"label":"237([mcore:[#333]#652])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":236,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(exn :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10033\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":224}]},
{"label":"238([mcore:[#334]#586])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnPattern","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"239([mcore:[#335]#691])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnSystem","args":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"240([mcore:[#336]#693])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnInternal","args":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"241([mcore:[#337]#65])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/core/exn/exception","tag":"std/core/exn/Exception","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"242([mcore:[#338]#341])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"std/core/exn/error","tag":"std/core/exn/Error","args":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"243([mcore:[#339]#356])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"std/core/exn/error","tag":"std/core/exn/Ok","args":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"244([mcore:[#340]#328])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/core/exn/exn","tag":"std/core/exn/@Hnd-exn","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"245([k@[#719]#768])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-exn"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/exn/ExnError)"},
{"op":"Debug","msg":"BGN: genConstr","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnError","args":{"any":[]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/core/exn/ExnError"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/exn/ExnAssert)"},
{"op":"Debug","msg":"BGN: genConstr","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnAssert","args":{"any":[]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/core/exn/ExnAssert"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/exn/ExnTodo)"},
{"op":"Debug","msg":"BGN: genConstr","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnTodo","args":{"any":[]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/core/exn/ExnTodo"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/exn/ExnRange)"},
{"op":"Debug","msg":"BGN: genConstr","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"std/core/exn/exception-info","tag":"std/core/exn/ExnRange","args":{"any":[]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/core/exn/ExnRange"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_ded17716-6b5c-44bc-b925-79873127fa47"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genConstr","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genConstr","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genConstr","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genConstr","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"246([#719])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnError)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnError\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnError\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnError"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnError"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnAssert)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnAssert\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnAssert\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnAssert"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnAssert"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnTodo)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnTodo\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnTodo\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnTodo"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnTodo"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnRange)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnRange\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnRange\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnRange"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnRange"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnPattern)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnPattern\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnPattern\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnPattern"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnPattern"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnSystem)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnSystem\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnSystem\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnSystem"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnSystem"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-ExnInternal)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnInternal\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"std/core/exn/ExnInternal\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/exn/ExnInternal"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"std/core/exn/@tag-ExnInternal"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/core/exn/@tag-exn)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-exn\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(exn :: (E, V) -> V)>(\"exn@exn\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"exn@exn\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"exn@exn"},
{"op":"Push","target":245,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"exn@exn\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(exn :: (E, V) -> V)>(\"exn@exn\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-exn\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnInternal\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnInternal\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnSystem\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnSystem\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnPattern\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnPattern\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnRange\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnRange\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnTodo\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnTodo\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnAssert\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnAssert\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"std/core/exn/ExnError\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/exn/@tag-ExnError\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":58}]},
{"label":"247([k@[mcore:[static initializers#377]#699]#709])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#133]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":246,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"248([mcore:[static initializers#377]#699])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#132]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":247,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"249([k@[main entrypoint#2]#802])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"250([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":249,"args":{"any":[]}},
{"op":"Jump","target":248}]}],
"symbols":[{"name":"std/core/exn/is-exnError","position":2},
{"name":"std/core/exn/is-exnAssert","position":5},
{"name":"std/core/exn/is-exnTodo","position":8},
{"name":"std/core/exn/is-exnRange","position":11},
{"name":"std/core/exn/is-exnPattern","position":14},
{"name":"std/core/exn/is-exnSystem","position":17},
{"name":"std/core/exn/is-exnInternal","position":20},
{"name":"std/core/exn/exception/message","position":23},
{"name":"std/core/exn/exception/info","position":26},
{"name":"std/core/exn/exception/@copy","position":43},
{"name":"std/core/exn/is-error","position":48},
{"name":"std/core/exn/is-ok","position":51},
{"name":"std/core/exn/exn/@cfc","position":54},
{"name":"std/core/exn/exn/@brk-throw-exn","position":57},
{"name":"std/core/exn/@handle-exn","position":60},
{"name":"std/core/exn/@select-throw-exn","position":63},
{"name":"std/core/exn/default","position":72},
{"name":"std/core/exn/either","position":87},
{"name":"std/core/exn/maybe","position":100},
{"name":"std/core/exn/on-exit","position":103},
{"name":"std/core/exn/show","position":106},
{"name":"std/core/exn/throw-exn","position":120},
{"name":"std/core/exn/exn/try","position":131},
{"name":"std/core/exn/try","position":145},
{"name":"std/core/exn/catch","position":156},
{"name":"std/core/exn/throw","position":176},
{"name":"std/core/exn/error-pattern","position":198},
{"name":"std/core/exn/untry","position":221},
{"name":"std/core/exn/exn","position":222},
{"name":"std/core/exn/exn-error-range","position":237},
{"name":"std/core/exn/ExnPattern","position":238},
{"name":"std/core/exn/ExnSystem","position":239},
{"name":"std/core/exn/ExnInternal","position":240},
{"name":"std/core/exn/Exception","position":241},
{"name":"std/core/exn/Error","position":242},
{"name":"std/core/exn/Ok","position":243},
{"name":"std/core/exn/@Hnd-exn","position":244},
{"name":"$static-init","position":248},
{"name":"$entrypoint","position":250}],
"frameSize":{"regs_any":16}}