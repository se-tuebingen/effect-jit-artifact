{"blocks":[{"label":"0([match_def@[mcore:[#86]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_std/core/Next@[mcore:[#86]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 187) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@pat@0: stream<187>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 187) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@pat@0: stream<187>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#86]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/stream","scrutinee":0,"clauses":[{"tag":"std/core/Next","target":1,"args":{"any":[0,1]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#634]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#87]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_std/core/Next@[mcore:[#87]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 203) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@x: stream<203>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 203) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@x: stream<203>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#87]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/stream","scrutinee":0,"clauses":[{"tag":"std/core/Next","target":4,"args":{"any":[0,1]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#635]","target":3,"args":{"any":[]}}}]},
{"label":"6([k@[k@[mcore:[#91]#9]#11]#14])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":133}]},
{"label":"7([#18])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([k@[#19]#21])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"9([match_def@[#19]#23])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_std/core/Next@[#19]#24])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@x@0: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@x@0: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([#19])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/stream","scrutinee":0,"clauses":[{"tag":"std/core/Next","target":10,"args":{"any":[0,1]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#636]","target":9,"args":{"any":[]}}}]},
{"label":"12([match_def@[k@[mcore:[#91]#9]#11]#17])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":11,"args":{"any":[]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#637]","target":7,"args":{"any":[]}}}]},
{"label":"13([#25])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-tail@231,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-tail@231: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-tail@231,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-tail@231: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([k@[mcore:[#91]#9]#11])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (tail) {\n  ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<244>))\n     -> @uniq-tail@231;\n  ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<244>))\n     -> (match (@this) {\n      ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":6,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (tail) {\n  ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<244>))\n     -> @uniq-tail@231;\n  ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<244>))\n     -> (match (@this) {\n      ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":13,"args":{"any":[2]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#638]","target":12,"args":{"any":[]}}}]},
{"label":"15([#27])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([k@[#28]#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([match_def@[#28]#32])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([match_std/core/Next@[#28]#33])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@pat@0@0: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@pat@0@0: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([#28])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/stream","scrutinee":0,"clauses":[{"tag":"std/core/Next","target":18,"args":{"any":[0,1]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#639]","target":17,"args":{"any":[]}}}]},
{"label":"20([match_def@[mcore:[#91]#9]#26])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":19,"args":{"any":[]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#640]","target":15,"args":{"any":[]}}}]},
{"label":"21([#34])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-head@220,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-head@220: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-head@220,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-head@220: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([mcore:[#91]#9])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/Next<a>((match (head) {\n    ((std/core/types/@Optional((@uniq-head@220: 244) : a) : ? a ) as @pat: ? 244)\n       -> @uniq-head@220;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 244)\n       -> (match (@this) {\n        ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n           -> @x;\n      });\n  }), (match (tail) {\n    ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<244>))\n       -> @uniq-tail@231;\n    ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<244>))\n       -> (match (@this) {\n        ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (head) {\n  ((std/core/types/@Optional((@uniq-head@220: 244) : a) : ? a ) as @pat: ? 244)\n     -> @uniq-head@220;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 244)\n     -> (match (@this) {\n      ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":14,"args":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (head) {\n  ((std/core/types/@Optional((@uniq-head@220: 244) : a) : ? a ) as @pat: ? 244)\n     -> @uniq-head@220;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 244)\n     -> (match (@this) {\n      ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/Next<a>((match (head) {\n    ((std/core/types/@Optional((@uniq-head@220: 244) : a) : ? a ) as @pat: ? 244)\n       -> @uniq-head@220;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 244)\n       -> (match (@this) {\n        ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n           -> @x;\n      });\n  }), (match (tail) {\n    ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<244>))\n       -> @uniq-tail@231;\n    ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<244>))\n       -> (match (@this) {\n        ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":21,"args":{"any":[2]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#641]","target":20,"args":{"any":[]}}}]},
{"label":"23([mcore:[#92]#35])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/exn/@handle-exn"}]},
{"label":"24([mcore:[#94]#42])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/@Hnd-exn"}]},
{"label":"25([mcore:[#97]#48])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"26([mcore:[#99]#53])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to-final"}]},
{"label":"27([mcore:[#102]#59])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/prints"}]},
{"label":"28([mcore:[#105]#64])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"29([mcore:[#107]#69])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/exn/show"}]},
{"label":"30([k@[k@[mcore:[#111]#74]#81]#86])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":28}]},
{"label":"31([k@[mcore:[#111]#74]#81])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((std/core/exn/show(x)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/show(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":30,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/show(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((std/core/exn/show(x)))","traced":{"any":[]}},
{"op":"Jump","target":29}]},
{"label":"32([mcore:[#111]#74])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/prints(\"uncaught exception: \")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"uncaught exception: \"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"uncaught exception: "},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":31,"args":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"uncaught exception: \"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/prints(\"uncaught exception: \")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Jump","target":27}]},
{"label":"33([method_apply@[mcore:[#113]#91]#94])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":32}]},
{"label":"34([mcore:[#113]#91])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n    val _ : ()\n          = (std/core/console/prints(\"uncaught exception: \"));\n    (std/core/console/printsln((std/core/exn/show(x))));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[33],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n    val _ : ()\n          = (std/core/console/prints(\"uncaught exception: \"));\n    (std/core/console/printsln((std/core/exn/show(x))));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":26}]},
{"label":"35([mcore:[#117]#106])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([method_apply@[mcore:[#120]#107]#114])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Jump","target":34}]},
{"label":"37([#140])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":35}]},
{"label":"38([k@[k@[mcore:[#120]#107]#130]#136])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[37],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":23}]},
{"label":"39([k@[mcore:[#120]#107]#130])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":38,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":24}]},
{"label":"40([mcore:[#120]#107])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@handle-exn<(),<(console/console :: X)|(e :: E)>,()>((std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n          val _ : ()\n                = (std/core/console/prints(\"uncaught exception: \"));\n          (std/core/console/printsln((std/core/exn/show(x))));\n        })));\n    }))))), (fn<<(console/console :: X)|(e :: E)>>(@x: ()){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n        val _ : ()\n              = (std/core/console/prints(\"uncaught exception: \"));\n        (std/core/console/printsln((std/core/exn/show(x))));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[36],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":39,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n        val _ : ()\n              = (std/core/console/prints(\"uncaught exception: \"));\n        (std/core/console/printsln((std/core/exn/show(x))));\n      })));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@handle-exn<(),<(console/console :: X)|(e :: E)>,()>((std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n          val _ : ()\n                = (std/core/console/prints(\"uncaught exception: \"));\n          (std/core/console/printsln((std/core/exn/show(x))));\n        })));\n    }))))), (fn<<(console/console :: X)|(e :: E)>>(@x: ()){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":25}]},
{"label":"41([match_def@[k@[mcore:[#124]#146]#148]#149])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([#152])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([k@[mcore:[#124]#146]#148])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/order","scrutinee":0,"clauses":[{"tag":"std/core/types/Eq","target":42,"args":{"any":[]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#642]","target":41,"args":{"any":[]}}}]},
{"label":"44([mcore:[#124]#146])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":43,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"45([mcore:[#127]#155])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: f(x)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(x)","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"46([mcore:[#128]#156])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Copy","from":1,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([method_apply@[mcore:[#129]#157]#160])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":46}]},
{"label":"48([mcore:[#129]#157])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genPure: pure lambda in core code","traced":{"any":[]}},
{"op":"New","out":0,"targets":[47],"args":{"any":[0]},"tags":["apply"]},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genPure: pure lambda in core code","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([mcore:[#130]#162])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"vm"},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([mcore:[#131]#164])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([mcore:[#132]#166])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/@extern-main-console<a,(e :: E)>(main)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/@extern-main-console"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/@extern-main-console<a,(e :: E)>(main)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([k@[mcore:[#137]#169]#171])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"53([mcore:[#137]#169])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: f((g(x)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: g(x)","traced":{"any":[]}},
{"op":"Push","target":52,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: g(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f((g(x)))","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"54([method_apply@[mcore:[#138]#173]#176])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":53}]},
{"label":"55([mcore:[#138]#173])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genPure: pure lambda in core code","traced":{"any":[]}},
{"op":"New","out":0,"targets":[54],"args":{"any":[0,1]},"tags":["apply"]},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genPure: pure lambda in core code","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([mcore:[#139]#178])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([switch case for Bool(true)#182])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([switch case for Bool(false)#186])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([switch default case#189])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([switch default case#185])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[58],"default":59}]},
{"label":"61([k@[mcore:[#144]#179]#181])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[57],"default":60}]},
{"label":"62([mcore:[#144]#179])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?(==)(x, y)","traced":{"any":[]}},
{"op":"Push","target":61,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?(==)(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"63([mcore:[#145]#190])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(==)"}]},
{"label":"64([k@[mcore:[#153]#196]#198])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Jump","target":63}]},
{"label":"65([mcore:[#153]#196])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(==)((?cmp(x, y)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":64,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(==)((?cmp(x, y)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"66([mcore:[#154]#207])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(==)"}]},
{"label":"67([k@[mcore:[#162]#213]#215])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Jump","target":66}]},
{"label":"68([mcore:[#162]#213])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(==)((?cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":67,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(==)((?cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"69([mcore:[#163]#224])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(==)"}]},
{"label":"70([k@[mcore:[#171]#230]#232])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Jump","target":69}]},
{"label":"71([mcore:[#171]#230])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(==)((?cmp(y, x)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?cmp(y, x)","traced":{"any":[]}},
{"op":"Push","target":70,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?cmp(y, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(==)((?cmp(y, x)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"72([mcore:[#172]#241])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(==)"}]},
{"label":"73([k@[mcore:[#180]#247]#249])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Jump","target":72}]},
{"label":"74([mcore:[#180]#247])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(==)((?cmp(y, x)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?cmp(y, x)","traced":{"any":[]}},
{"op":"Push","target":73,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?cmp(y, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(==)((?cmp(y, x)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"75([switch case for Bool(true)#260])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([#270])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([k@[switch case for Bool(false)#263]#265])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[3]},"in":{"any":[3,4]}},
{"op":"Swap","a":0,"b":3},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)","traced":{"any":[]}},
{"op":"Jump","target":81}]},
{"label":"78([switch case for Bool(false)#263])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x : a\n      = f(start, init);\nstd/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Push","target":77,"args":{"any":[0,1,3]}},
{"op":"Copy","from":3,"to":0},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x : a\n      = f(start, init);\nstd/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"79([switch default case#272])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"80([switch default case#261])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,0]}},
{"op":"Switch","arg":4,"values":[false],"targets":[78],"default":79}]},
{"label":"81([mcore:[#192]#258])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[75],"default":80}]},
{"label":"82([mcore:[#199]#273])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/fold<a,(e :: E)>(0, (std/core/int/int-sub(upto, 1)), init, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(upto, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(upto, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/fold<a,(e :: E)>(0, (std/core/int/int-sub(upto, 1)), init, f)","traced":{"any":[]}},
{"op":"Jump","target":81}]},
{"label":"83([switch case for Bool(true)#281])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([#288])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"85([match_def@[#290]#291])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"86([match_std/core/types/Nothing@[#290]#292])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"87([#290])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":86,"args":{"any":[]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#643]","target":85,"args":{"any":[]}}}]},
{"label":"88([k@[#293]#298])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"89([#293])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 982) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(start, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[4,0]}},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":5,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(start, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 982) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":94}]},
{"label":"90([k@[switch case for Bool(false)#284]#286])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":89,"args":{"any":[5]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#644]","target":87,"args":{"any":[]}}}]},
{"label":"91([switch case for Bool(false)#284])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((f(start, init))) {\n  ((std/core/types/Just((x: 982) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<982>))\n     -> std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<982>))\n     -> init;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Push","target":90,"args":{"any":[0,1,2,3]}},
{"op":"Copy","from":3,"to":0},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(start, init)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((f(start, init))) {\n  ((std/core/types/Just((x: 982) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<982>))\n     -> std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<982>))\n     -> init;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"92([switch default case#300])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"93([switch default case#282])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,0]}},
{"op":"Switch","arg":4,"values":[false],"targets":[91],"default":92}]},
{"label":"94([mcore:[#211]#279])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[83],"default":93}]},
{"label":"95([mcore:[#218]#301])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/fold-while<a,(e :: E)>(0, (std/core/int/int-sub(n, 1)), init, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/fold-while<a,(e :: E)>(0, (std/core/int/int-sub(n, 1)), init, f)","traced":{"any":[]}},
{"op":"Jump","target":94}]},
{"label":"96([#315])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"97([k@[switch case for Bool(true)#309]#311])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":102}]},
{"label":"98([switch case for Bool(true)#309])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _ : ();\nval i@0@10010 : int;\nstd/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(i)","traced":{"any":[]}},
{"op":"Push","target":97,"args":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _ : ();\nval i@0@10010 : int;\nstd/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"99([switch case for Bool(false)#319])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"100([switch default case#322])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"101([switch default case#317])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[2,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[99],"default":100}]},
{"label":"102([mcore:[#228]#307])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[98],"default":101}]},
{"label":"103([mcore:[#233]#323])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Jump","target":102}]},
{"label":"104([mcore:[#239]#324])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"end@10012\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end@10012, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end@10012, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"end@10012\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":102}]},
{"label":"105([mcore:[#248]#329])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"106([#340])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([match_def@[#342]#343])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([#349])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"109([match_std/core/types/Just@[#342]#344])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1121) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1121) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":105}]},
{"label":"110([#342])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":109,"args":{"any":[0]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#645]","target":107,"args":{"any":[]}}}]},
{"label":"111([k@[#351]#358])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"112([#351])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val i@0@10014 : int\n      = std/core/int/int-add(i, 1);\nstd/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10014\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10014\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val i@0@10014 : int\n      = std/core/int/int-add(i, 1);\nstd/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":118}]},
{"label":"113([k@[switch case for Bool(true)#336]#338])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":112,"args":{"any":[]}}],"default":{"tag":"bdb7d68b-7671-4210-a4c5-8421aed43d86#[Missing Tag#646]","target":110,"args":{"any":[]}}}]},
{"label":"114([switch case for Bool(true)#336])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1121>))\n     -> val i@0@10014 : int\n              = std/core/int/int-add(i, 1);\n    std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014);\n  ((@skip std/core/types/Just((x: 1121) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1121>))\n     -> std/core/types/Just<a>(x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(i)","traced":{"any":[]}},
{"op":"Push","target":113,"args":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1121>))\n     -> val i@0@10014 : int\n              = std/core/int/int-add(i, 1);\n    std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014);\n  ((@skip std/core/types/Just((x: 1121) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1121>))\n     -> std/core/types/Just<a>(x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"115([switch case for Bool(false)#362])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"116([switch default case#367])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"117([switch default case#360])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[2,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[115],"default":116}]},
{"label":"118([mcore:[#253]#334])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[114],"default":117}]},
{"label":"119([mcore:[#258]#368])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, start)","traced":{"any":[]}},
{"op":"Jump","target":118}]},
{"label":"120([mcore:[#264]#372])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"end@10016\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end@10016, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end@10016, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"end@10016\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":118}]},
{"label":"121([mcore:[#268]#380])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: action()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action()","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[]}}]},
{"label":"122([method_apply@[mcore:[#272]#381]#388])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":121}]},
{"label":"123([mcore:[#272]#381])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"end@10021\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/range/@lift-for@1256<(e :: E)>((fn<(e :: E)>(i@0: int){\n    (action());\n  }), end@10021, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"New","out":1,"targets":[122],"args":{"any":[1]},"tags":["apply"]},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/range/@lift-for@1256<(e :: E)>((fn<(e :: E)>(i@0: int){\n    (action());\n  }), end@10021, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"end@10021\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":102}]},
{"label":"124([mcore:[#277]#391])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/ref/(!)<(global :: H),int,<(write :: H -> X)<(global :: H)>|(_e :: E)>>(std/core/unique-count)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/unique-count)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/set<int,(global :: H)>(std/core/unique-count, (std/core/int/int-add(u, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(u, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/core/unique-count)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(u, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/set<int,(global :: H)>(std/core/unique-count, (std/core/int/int-add(u, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/ref/(!)<(global :: H),int,<(write :: H -> X)<(global :: H)>|(_e :: E)>>(std/core/unique-count)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"125([#408])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"126([k@[switch case for Bool(true)#404]#406])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/while<(e :: E)>(predicate, action)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/while<(e :: E)>(predicate, action)","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"127([switch case for Bool(true)#404])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _ : ()\n      = action();\nstd/core/while<(e :: E)>(predicate, action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action()","traced":{"any":[]}},
{"op":"Push","target":126,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _ : ()\n      = action();\nstd/core/while<(e :: E)>(predicate, action)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[]}}]},
{"label":"128([switch case for Bool(false)#411])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"129([switch default case#414])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"130([switch default case#410])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Switch","arg":0,"values":[false],"targets":[128],"default":129}]},
{"label":"131([k@[mcore:[#283]#401]#403])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[127],"default":130}]},
{"label":"132([mcore:[#283]#401])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: predicate()","traced":{"any":[]}},
{"op":"Push","target":131,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: predicate()","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"133([mcore:[#284]#16])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/core/stream","tag":"std/core/Next","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"134([k@[k@[k@[#586]#596]#606]#616])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/core/unique-count)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/core/unique-count\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/ref<int,(global :: H)>(0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"mkRef(Ptr): Ref[Ptr]","out":{"any":[1]},"in":{"any":[1]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"std/core/unique-count"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_5755e3f8-10b7-46c1-b508-1408ac2c7c02"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/ref<int,(global :: H)>(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/core/unique-count\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"135([k@[k@[#586]#596]#606])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#85]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":134,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"136([k@[#586]#596])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#84]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":135,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"137([#586])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#83]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":136,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"138([k@[k@[k@[k@[#536]#546]#556]#566]#576])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#82]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":137,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"139([k@[k@[k@[#536]#546]#556]#566])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#81]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":138,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"140([k@[k@[#536]#546]#556])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#80]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":139,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"141([k@[#536]#546])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#79]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":140,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"142([#536])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#78]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":141,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"143([k@[k@[k@[k@[#486]#496]#506]#516]#526])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#77]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":142,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"144([k@[k@[k@[#486]#496]#506]#516])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#76]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":143,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"145([k@[k@[#486]#496]#506])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#75]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":144,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"146([k@[#486]#496])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#74]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":145,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"147([#486])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#73]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":146,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"148([k@[k@[k@[k@[#436]#446]#456]#466]#476])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#72]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":147,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"149([k@[k@[k@[#436]#446]#456]#466])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#71]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":148,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"150([k@[k@[#436]#446]#456])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#70]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":149,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"151([k@[#436]#446])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#69]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":150,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"152([#436])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#68]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_unsafe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/unsafe)"},
{"op":"Push","target":151,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"153([k@[mcore:[static initializers#304]#416]#426])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#67]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_undiv.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/undiv)"},
{"op":"Push","target":152,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"154([mcore:[static initializers#304]#416])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#66]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":153,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"155([k@[main entrypoint#2]#631])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"156([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":155,"args":{"any":[]}},
{"op":"Jump","target":154}]}],
"symbols":[{"name":"std/core/stream/head","position":2},
{"name":"std/core/stream/tail","position":5},
{"name":"std/core/stream/@copy","position":22},
{"name":"std/core/@default-exn","position":40},
{"name":"std/core/cmp/(==)","position":44},
{"name":"std/core/apply","position":45},
{"name":"std/core/const","position":48},
{"name":"std/core/host","position":49},
{"name":"std/core/ignore","position":50},
{"name":"std/core/main-console","position":51},
{"name":"std/core/o","position":55},
{"name":"std/core/same-type","position":56},
{"name":"std/core/(!=)","position":62},
{"name":"std/core/(<)","position":65},
{"name":"std/core/(>)","position":68},
{"name":"std/core/(<=)","position":71},
{"name":"std/core/(>=)","position":74},
{"name":"std/core/range/fold","position":81},
{"name":"std/core/fold","position":82},
{"name":"std/core/range/fold-while","position":94},
{"name":"std/core/fold-while","position":95},
{"name":"std/core/range/@lift-for@1256","position":102},
{"name":"std/core/range/for","position":103},
{"name":"std/core/for","position":104},
{"name":"std/core/range/@lift-for-while@1257","position":118},
{"name":"std/core/range/for-while","position":119},
{"name":"std/core/for-while","position":120},
{"name":"std/core/repeat","position":123},
{"name":"std/core/unique","position":124},
{"name":"std/core/while","position":132},
{"name":"std/core/Next","position":133},
{"name":"$static-init","position":154},
{"name":"$entrypoint","position":156}],
"frameSize":{"regs_any":16}}