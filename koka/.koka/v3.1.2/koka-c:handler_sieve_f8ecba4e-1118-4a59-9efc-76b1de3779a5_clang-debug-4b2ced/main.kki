module interface main
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/os/env = std/os/env = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// fun prime
// ```
recursive effect type prime[5,1,5,15] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-prime[5,1,5,15](@cfc: std/core/types/int, @fun-prime: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) -> (prime :: (E, V) -> V)<(e :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:prime` type.
 fun prime/@cfc[5,1,5,15] : forall<(e :: E),a> (^ prime : (prime :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@fun-prime` constructor field of the `:prime` type.
 fun prime/@fun-prime[5,12,5,32] : forall<(e :: E),a> (^ prime : (prime :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:prime`
val @tag-prime[5,1,5,15] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(prime :: (E, V) -> V)>;
// handler for the effect `:prime`
 fun @handle-prime[5,12,5,15] : forall<a,(e :: E),b> (hnd : (prime :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `prime` operation out of effect `:prime`
 fun @select-prime[5,12,5,32] : forall<(e :: E),a> (^ hnd : (prime :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>;
// Call the `fun prime` operation of the effect `:prime`
 fun prime[5,12,5,16] : (e : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>> std/core/types/bool;
// monadic lift
 fun @mlift-primes@10031[1,0,1,0] : (a : std/core/types/int, i : std/core/types/int, n : std/core/types/int, @y-x10011 : std/core/types/bool) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>> std/core/types/int;
 fun primes[7,5,7,10] : (i : std/core/types/int, n : std/core/types/int, a : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>> std/core/types/int;
pub  fun run[21,9,21,11] : (n : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
pub  fun main[26,9,26,12] : () -> <(std/core/console/console :: X),(std/core/types/div :: X),(std/core/types/ndet :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun prime/@cfc // inline size: 0
  = forall<(e :: E),a> fn(prime@0: (prime :: (E, V) -> V)<(e :: E),a>){
    (match (prime@0) {
      ((@skip main/@Hnd-prime((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) : (prime :: (E, V) -> V)<(e :: E),a> ) as @pat: ((prime :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun prime/@fun-prime // inline size: 0
  = forall<(e :: E),a> fn(prime@0: (prime :: (E, V) -> V)<(e :: E),a>){
    (match (prime@0) {
      ((@skip main/@Hnd-prime((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) : (prime :: (E, V) -> V)<(e :: E),a> ) as @pat: ((prime :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-prime // inline size: 0
  = forall<(e :: E),a> fn(hnd: (prime :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip main/@Hnd-prime((@pat@0: std/core/types/int) : std/core/types/int, (@fun-prime: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),(e :: E),a>) : (prime :: (E, V) -> V)<(e :: E),a> ) as @pat: ((prime :: (E, V) -> V)<(e :: E),a>))
         -> @fun-prime;
    });
  };
inline  fun prime // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>>>(e: std/core/types/int){
    std/core/hnd/@perform1<std/core/types/int,std/core/types/bool,(prime :: (E, V) -> V),<(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(prime :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(prime :: (E, V) -> V)>>((std/core/hnd/@evv-at<(prime :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), main/@select-prime, e);
  };
 fun run // inline size: 4
  = fn<<(std/core/types/div :: X)>>(n: std/core/types/int){
    main/@handle-prime<std/core/types/int,<(std/core/types/div :: X)>,std/core/types/int>((main/@Hnd-prime<<(std/core/types/div :: X)>,std/core/types/int>(1, (std/core/hnd/clause-tail-noop1<<(std/core/types/div :: X)>,std/core/types/int,(prime :: (E, V) -> V),std/core/types/int,std/core/types/bool>((fn<<(std/core/types/div :: X)>>(e: std/core/types/int){
          std/core/types/True;
        }))))), (fn<<(std/core/types/div :: X)>>(@x: std/core/types/int){
        @x;
      }), (fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(prime :: (E, V) -> V)>,(std/core/types/div :: X)>>(){
        (main/primes(2, n, 0));
      }));
  };