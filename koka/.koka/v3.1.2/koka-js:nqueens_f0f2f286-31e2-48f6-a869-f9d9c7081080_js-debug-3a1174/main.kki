module interface main
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/os/env = std/os/env = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// ctl pick
// ctl fail
// ```
recursive effect type search[7,1,7,13] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-search[7,1,7,13](@cfc: std/core/types/int, @ctl-fail: forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>, @ctl-pick: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>){0,3,8} : forall<(e :: E),a> (std/core/types/int, forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>, (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) -> (search :: (E, V) -> V)<(e :: E),a>;
};
;
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:search` type.
 fun search/@cfc[7,1,7,13] : forall<(e :: E),a> (^ search : (search :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@ctl-fail` constructor field of the `:search` type.
 fun search/@ctl-fail[9,7,9,16] : forall<(e :: E),a,b> (^ search : (search :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>;
// Automatically generated. Retrieves the `@ctl-pick` constructor field of the `:search` type.
 fun search/@ctl-pick[8,7,8,28] : forall<(e :: E),a> (^ search : (search :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:search`
val @tag-search[7,1,7,13] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(search :: (E, V) -> V)>;
// handler for the effect `:search`
 fun @handle-search[7,8,7,13] : forall<a,(e :: E),b> (hnd : (search :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `fail` operation out of effect `:search`
 fun @select-fail[9,7,9,16] : forall<a,(e :: E),b> (^ hnd : (search :: (E, V) -> V)<(e :: E),b>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(search :: (E, V) -> V),(e :: E),b>;
// select `pick` operation out of effect `:search`
 fun @select-pick[8,7,8,28] : forall<(e :: E),a> (^ hnd : (search :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>;
// Call the `ctl fail` operation of the effect `:search`
 fun fail[9,7,9,10] : forall<a> () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> a;
// Call the `ctl pick` operation of the effect `:search`
 fun pick[8,7,8,10] : (size : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> std/core/types/int;
 fun safe[11,5,11,8] : (queen : std/core/types/int, diag : std/core/types/int, xs : solution) -> std/core/types/bool;
// monadic lift
 fun @mlift-place@10038[1,0,1,0] : (rest : solution, next : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> (std/core/types/list :: V -> V)<std/core/types/int>;
// monadic lift
 fun @mlift-place@10039[1,0,1,0] : (size : std/core/types/int, rest : solution) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> (std/core/types/list :: V -> V)<std/core/types/int>;
 fun place[18,5,18,9] : (size : std/core/types/int, column : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> solution;
// lifted local: run, loop
 fun @lift-run@828[1,0,1,0] : (resume@0 : (std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int, size : std/core/types/int, i : std/core/types/int, a : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
 fun run[28,5,28,7] : (n : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
pub  fun main[41,9,41,12] : () -> <(std/core/console/console :: X),(std/core/types/div :: X),(std/core/types/ndet :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
recursive specialize "*___"  fun @lift-run@828 // inline size: 8
  = fn<<(std/core/types/div :: X)>>(resume@0: (std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int, size: std/core/types/int, i: std/core/types/int, a: std/core/types/int){
    match ((std/core/int/(==)(i, size))) {
      ((std/core/types/True() : std/core/types/bool ) as @pat: std/core/types/bool)
         -> val y@10008[1,0,1,0] : std/core/types/int
                  = resume@0(i);
        std/core/int/int-add(a, y@10008);
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0: std/core/types/bool)
         -> val i@0@10009[1,0,1,0] : std/core/types/int
              = std/core/int/int-add(i, 1);
            val y@1@10014[1,0,1,0] : std/core/types/int
              = resume@0(i);
            val a@0@10010[1,0,1,0] : std/core/types/int
              = std/core/int/int-add(a, y@1@10014);
        main/@lift-run@828(resume@0, size, i@0@10009, a@0@10010);
    };
  };
inline borrow "^"  fun search/@cfc // inline size: 0
  = forall<(e :: E),a> fn(search: (search :: (E, V) -> V)<(e :: E),a>){
    (match (search) {
      ((@skip main/@Hnd-search((@x: std/core/types/int) : std/core/types/int, (@pat@0: forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>) : forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>, (@pat@1: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((search :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun search/@ctl-fail // inline size: 0
  = forall<(e :: E),a,b> fn(search: (search :: (E, V) -> V)<(e :: E),a>){
    (match (search) {
      ((@skip main/@Hnd-search((@pat@0: std/core/types/int) : std/core/types/int, (@x: forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(search :: (E, V) -> V),(e :: E),a>) : forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(search :: (E, V) -> V),(e :: E),a>, (@pat@1: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((search :: (E, V) -> V)<(e :: E),a>))
         -> @x<b>;
    });
  };
inline borrow "^"  fun search/@ctl-pick // inline size: 0
  = forall<(e :: E),a> fn(search: (search :: (E, V) -> V)<(e :: E),a>){
    (match (search) {
      ((@skip main/@Hnd-search((@pat@0: std/core/types/int) : std/core/types/int, (@pat@1: forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>) : forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>, (@x: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((search :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-fail // inline size: 0
  = forall<a,(e :: E),b> fn(hnd: (search :: (E, V) -> V)<(e :: E),b>){
    (match (hnd) {
      ((@skip main/@Hnd-search((@pat@0: std/core/types/int) : std/core/types/int, (@ctl-fail: forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(search :: (E, V) -> V),(e :: E),b>) : forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(search :: (E, V) -> V),(e :: E),b>, (@pat@1: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),b>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),b>) : (search :: (E, V) -> V)<(e :: E),b> ) as @pat: ((search :: (E, V) -> V)<(e :: E),b>))
         -> @ctl-fail<a>;
    });
  };
inline borrow "^"  fun @select-pick // inline size: 0
  = forall<(e :: E),a> fn(hnd: (search :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip main/@Hnd-search((@pat@0: std/core/types/int) : std/core/types/int, (@pat@1: forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>) : forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(search :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),(e :: E),a>) : (search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((search :: (E, V) -> V)<(e :: E),a>))
         -> @ctl-pick;
    });
  };
inline  fun fail // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>>(){
    std/core/hnd/@perform0<a,<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>,(search :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(search :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(search :: (E, V) -> V)>>((std/core/hnd/@evv-at<(search :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e :: E),b> main/@select-fail<a,(e :: E),b>));
  };
inline  fun pick // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>>(size: std/core/types/int){
    std/core/hnd/@perform1<std/core/types/int,std/core/types/int,(search :: (E, V) -> V),<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(search :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(search :: (E, V) -> V)>>((std/core/hnd/@evv-at<(search :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(search :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), main/@select-pick, size);
  };