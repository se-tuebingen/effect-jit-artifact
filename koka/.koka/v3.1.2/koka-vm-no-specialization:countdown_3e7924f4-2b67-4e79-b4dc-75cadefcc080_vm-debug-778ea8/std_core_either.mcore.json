{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/either"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/either/map","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"either\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Right","params": [{"op": "Var","id": "@\"right\"0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Right","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Right<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"right\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 88) -> {\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"}]},"annotation": "genExpr: std/core/types/Right<a,a>((f(x)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 88) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"0\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Left","params": [{"op": "Var","id": "@\"left\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Left","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Left<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"left\"1","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: 87) -> {\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}]},"annotation": "genExpr: std/core/types/Left<a,a>(x@0)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 87) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E)> fn<(e :: E)>(e: (either :: (V, V) -> V)<a,b>, f: (b) -> (e :: E) c){\n  (match (e) {\n    ((std/core/types/Right((x: b) : b) : (either :: (V, V) -> V)<a,b> ) as @pat: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/Right<a,c>((f(x)));\n    ((@skip std/core/types/Left((x@0: a) : a) : (either :: (V, V) -> V)<a,b> ) as @pat@0: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/Left<a,c>(x@0);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/either/map\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/either/map"]}, {"name": {"op": "Var","id": "std/core/either/maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"either\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Left","params": [{"op": "Var","id": "@\"left\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 131) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Right","params": [{"op": "Var","id": "@\"right\"3","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"right\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 132) -> {\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 132) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"3\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(e: (either :: (V, V) -> V)<a,b>){\n  (match (e) {\n    ((std/core/types/Left((@pat@0: a) : a) : (either :: (V, V) -> V)<a,b> ) as @pat: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/Nothing<b>;\n    ((@skip std/core/types/Right((x: b) : b) : (either :: (V, V) -> V)<a,b> ) as @pat@1: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/Just<b>(x);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/either/maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/either/maybe"]}, {"name": {"op": "Var","id": "std/core/either/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"either\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}}, {"op": "Var","id": "@implicit/left/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}, {"op": "Var","id": "@implicit/right/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Right","params": [{"op": "Var","id": "@\"right\"4","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "Right("},"annotation": "genExpr: \"Right(\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/right/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?right/show"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"right\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 225) -> {\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: ?right/show(x)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ")"},"annotation": "genExpr: \")\""}]},"annotation": "genExpr: std/core/types/(++)((?right/show(x)), \")\")"}]},"annotation": "genExpr: std/core/types/(++)(\"Right(\", (std/core/types/(++)((?right/show(x)), \")\")))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 225) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"4\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "e","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Left","params": [{"op": "Var","id": "@\"left\"5","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "Left("},"annotation": "genExpr: \"Left(\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/left/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?left/show"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"left\"5","type": {"op": "Top"}},"annotation": "genTest: normal: (y: 224) -> {\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?left/show(y)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ")"},"annotation": "genExpr: \")\""}]},"annotation": "genExpr: std/core/types/(++)((?left/show(y)), \")\")"}]},"annotation": "genExpr: std/core/types/(++)(\"Left(\", (std/core/types/(++)((?left/show(y)), \")\")))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 224) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"e\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"5\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(e: (either :: (V, V) -> V)<a,b>, @implicit/left/show: (a) -> (e :: E) string, @implicit/right/show: (b) -> (e :: E) string){\n  (match (e) {\n    ((std/core/types/Right((x: b) : b) : (either :: (V, V) -> V)<a,b> ) as @pat: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/(++)(\"Right(\", (std/core/types/(++)((?right/show(x)), \")\")));\n    ((@skip std/core/types/Left((y: a) : a) : (either :: (V, V) -> V)<a,b> ) as @pat@0: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/(++)(\"Left(\", (std/core/types/(++)((?left/show(y)), \")\")));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/either/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/either/show"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}