{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/console"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/unsafe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_unsafe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/console/redirect","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(string) -> (console/console :: X) ()>"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<(maybe :: V -> V)<(string) -> (console/console :: X) ()>,(global :: H)>((std/core/types/Nothing<(string) -> (console/console :: X) ()>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/redirect\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["std/core/console/redirect"]}, {"name": {"op": "Var","id": "std/core/console/xprints","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!sexp:(\"write(OutStream, String): Unit\" (\"getStdout(): OutStream\") $arg0:str)","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(console/console :: X)>(s: string){\n  std/core/console/@extern-xprints(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/xprints\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/xprints"]}, {"name": {"op": "Var","id": "std/core/console/xprintsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "println(String): Unit","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(console/console :: X)>(s: string){\n  std/core/console/@extern-xprintsln(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/xprintsln\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/xprintsln"]}, {"name": {"op": "Var","id": "std/core/console/prints","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/redirect","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/console/redirect"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),(maybe :: V -> V)<(string) -> (console/console :: X) ()>,<(console/console :: X),(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>>>(std/core/console/redirect)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/xprints","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/xprints"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/console/xprints(s)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"1","type": {"op": "Top"}},"annotation": "genTest: normal: (f: (string) -> console/console ()) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: f(s)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (f: (string) -> console/console ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(console/console :: X)>(s: string){\n  match ((std/core/types/ref/(!)<(global :: H),(maybe :: V -> V)<(string) -> (console/console :: X) ()>,<(console/console :: X),(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>>>(std/core/console/redirect))) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<(string) -> (console/console :: X) ()> ) as @pat: ((maybe :: V -> V)<(string) -> (console/console :: X) ()>))\n       -> std/core/console/xprints(s);\n    ((@skip std/core/types/Just((f: (string) -> (console/console :: X) ()) : (string) -> (console/console :: X) ()) : (maybe :: V -> V)<(string) -> (console/console :: X) ()> ) as @pat@0: ((maybe :: V -> V)<(string) -> (console/console :: X) ()>))\n       -> f(s);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/prints\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/prints"]}, {"name": {"op": "Var","id": "std/core/console/show/print","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/prints","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/prints"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: ?show(x)"}]},"annotation": "genExpr: std/core/console/prints((?show(x)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(console/console :: X)>(x: a, @implicit/show: (a) -> string){\n  std/core/console/prints((?show(x)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/show/print\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/show/print"]}, {"name": {"op": "Var","id": "std/core/console/string/print","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/prints","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/prints"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/console/prints(s)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(console/console :: X)>(s: string){\n  std/core/console/prints(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/string/print\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/string/print"]}, {"name": {"op": "Var","id": "std/core/console/print-redirect","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "print","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/redirect","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/console/redirect"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(string) -> (console/console :: X) ()>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "print","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: print"}]},"annotation": "genExpr: std/core/types/Just<(string) -> (console/console :: X) ()>(print)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<(maybe :: V -> V)<(string) -> (console/console :: X) ()>,(global :: H)>(std/core/console/redirect, (std/core/types/Just<(string) -> (console/console :: X) ()>(print)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(ndet :: X),(console/console :: X),(st :: H -> E)<(global :: H)>>>(print: (msg : string) -> (console/console :: X) ()){\n  std/core/types/set<(maybe :: V -> V)<(string) -> (console/console :: X) ()>,(global :: H)>(std/core/console/redirect, (std/core/types/Just<(string) -> (console/console :: X) ()>(print)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/print-redirect\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/print-redirect"]}, {"name": {"op": "Var","id": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x2","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/redirect","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/console/redirect"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),(maybe :: V -> V)<(string) -> (console/console :: X) ()>,<(console/console :: X),(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>>>(std/core/console/redirect)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x2","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/xprintsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/xprintsln"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/console/xprintsln(s)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x2","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"3","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (f: (string) -> console/console ()) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"3\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\n"},"annotation": "genExpr: \"\\x0A\""}]},"annotation": "genExpr: std/core/types/(++)(s, \"\\x0A\")"}]},"annotation": "genExpr: f((std/core/types/(++)(s, \"\\x0A\")))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (f: (string) -> console/console ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"3\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(console/console :: X)>(s: string){\n  match ((std/core/types/ref/(!)<(global :: H),(maybe :: V -> V)<(string) -> (console/console :: X) ()>,<(console/console :: X),(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>>>(std/core/console/redirect))) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<(string) -> (console/console :: X) ()> ) as @pat: ((maybe :: V -> V)<(string) -> (console/console :: X) ()>))\n       -> std/core/console/xprintsln(s);\n    ((@skip std/core/types/Just((f: (string) -> (console/console :: X) ()) : (string) -> (console/console :: X) ()) : (maybe :: V -> V)<(string) -> (console/console :: X) ()> ) as @pat@0: ((maybe :: V -> V)<(string) -> (console/console :: X) ()>))\n       -> f((std/core/types/(++)(s, \"\\x0A\")));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/printsln\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/printsln"]}, {"name": {"op": "Var","id": "std/core/console/show/println","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/show","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: ?show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: ?show(x)"}]},"annotation": "genExpr: std/core/console/printsln((?show(x)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(console/console :: X)>(x: a, @implicit/show: (a) -> string){\n  std/core/console/printsln((?show(x)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/show/println\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/show/println"]}, {"name": {"op": "Var","id": "std/core/console/string/println","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/console/printsln(s)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(console/console :: X)>(s: string){\n  std/core/console/printsln(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/console/string/println\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/console/string/println"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}