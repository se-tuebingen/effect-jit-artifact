{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/hnd"},"includes": [{"format": "sexp","value": "(define $\"import$std/core/hnd\":ptr (this-lib))\n\n;; Current evidence vector\n;; -----------------------\n(define $getCurrentEvv:(fun Effectful () ptr) (lambda ()\n  (\"getRef(Ref[Ptr]): Ptr\" (\"getGlobal(String): Ptr\" \"current-evv\")))\n  :export-as (\"getCurrentEvv\"))\n(define $setCurrentEvv:(fun Effectful (ptr) unit) (lambda ($evv:ptr)\n  (\"setRef(Ref[Ptr], Ptr): Unit\" (\"getGlobal(String): Ptr\" \"current-evv\") $evv:ptr))\n  :export-as (\"setCurrentEvv\"))\n(define $swapCurrentEvv:(fun Effectful (ptr) ptr) (lambda ($evv:ptr)\n  (letrec ((define $ref:ptr (\"getGlobal(String): Ptr\" \"current-evv\"))\n           (define $old:ptr (\"getRef(Ref[Ptr]): Ptr\" $ref:ptr)))\n    (begin\n      (\"setRef(Ref[Ptr], Ptr): Unit\" $ref:ptr $evv:ptr)\n      $old:ptr)))\n  :export-as (\"swapCurrentEvv\"))\n(define $evvSwapCreate1:(fun Effectful (int) ptr) (lambda ($n:int)\n  (letrec ((define $cur:ptr ($getCurrentEvv:(fun Effectful () ptr)))\n           (define $ev:ptr ($elt:top $cur:ptr $n:int))\n           (define $next:ptr (make $evv $cons ($ev:ptr (make $evv $nil ())))))\n    (begin\n      ($setCurrentEvv:(fun Effectful (ptr) unit) $next:ptr)\n      $cur:ptr)))\n  :export-as (\"evvSwapCreate1\"))\n(define $evvSwapCreate0:(fun Effectful () ptr) (lambda ()\n  (letrec ((define $cur:ptr ($getCurrentEvv:(fun Effectful () ptr)))\n           (define $next:ptr (make $evv $nil ())))\n    (begin\n      ($setCurrentEvv:(fun Effectful (ptr) unit) $next:ptr)\n      $cur:ptr)))\n  :export-as (\"evvSwapCreate0\"))\n(define $evvSwapDelete:(fun Effectful (int bool) ptr) (lambda ($i:int $behind:bool)\n  (letrec ((define $cur:ptr ($getCurrentEvv:(fun Effectful () ptr)))\n           (define $increment:int (switch $behind:bool (false 0) (_ 1)))\n           (define $next:ptr ($evvDelete:(fun Pure (int ptr) ptr) (\"infixAdd(Int, Int): Int\" $i:int $increment:int) $cur:ptr)))\n    (begin\n      ($setCurrentEvv:(fun Effectful (ptr) unit) $next:ptr)\n      $cur:ptr)))\n  :export-as (\"evvSwapDelete\"))\n(define $evHtag:(fun Pure (ptr) str) (lambda ($ev:ptr)\n  (project (project $ev:ptr $std/core/hnd/ev $std/core/hnd/Ev 0)\n    $std/core/hnd/htag $std/core/hnd/Htag 0)))\n\n;; make primitive?\n(define $evvDelete:(fun Pure (int ptr) ptr) (lambda ($i:int $evv:ptr)\n  (match ($evv:ptr $evv)\n    ($cons ($hd:ptr $tl:ptr)\n      (switch $i:int\n        (0 $tl:ptr)\n        (_ (make $evv $cons (\n              $hd:ptr\n              ($evvDelete:(fun Pure (int ptr) ptr) (\"infixSub(Int, Int): Int\" $i:int 1) $tl:ptr))))))\n    (_ () (\"panic(String): Bottom\" \"Out of bounds index into evidence vector\"))))\n  :export-as (\"evvDelete\"))\n(define $evvInsert:(fun Pure (ptr ptr) ptr) (lambda ($evv:ptr $ev:ptr)\n  (match ($evv:ptr $evv) \n     ($cons ($fst:ptr $rst:ptr)\n        (switch (\"infixGt(String, String): Boolean\" \n                   ($evHtag:(fun Pure (ptr) str) $ev:ptr)\n                   ($evHtag:(fun Pure (ptr) str) $fst:ptr))\n          (true (make $evv $cons (\n                $fst:ptr\n                ($evvInsert:(fun Pure (ptr ptr) ptr) $rst:ptr $ev:ptr))))\n          (_ (make $evv $cons ($ev:ptr $evv:ptr)))))\n     (_ () (make $evv $cons ($ev:ptr $evv:ptr)))))\n  :export-as (\"evvInsert\"))\n(define $evvIndex:(fun Pure (ptr ptr int) int) (lambda ($evv:ptr $htag:ptr $acc:int) ;; Find by htag\n  (match ($evv:ptr $evv)\n    ($cons ($fst:ptr $rst:ptr)\n      (switch (\"infixEq(String, String): Boolean\"\n                 (project $htag:ptr $std/core/hnd/htag $std/core/hnd/Htag 0)\n                 ($evHtag:(fun Pure (ptr) str) $fst:ptr))\n        (true $acc:int)\n        (_ ($evvIndex:(fun Pure (ptr ptr int) int) $rst:ptr $htag:ptr \n             (\"infixAdd(Int, Int): Int\" $acc:int 1)))))\n    (_ () (\"!undefined:no evidence for htag\"))))\n  :export-as (\"evvIndex\"))\n\n;; List utilities\n;; --------------\n(define $elt:top (lambda ($l:ptr $n:int) \n  (switch $n:int \n    (0 (project $l:ptr $evv $cons 0)) \n    (_ ($elt:top (project $l:ptr $evv $cons 1) \n                 (\"infixSub(Int, Int): Int\" $n:int 1)))))\n  :export-as (\"elt\"))\n\n(unit)"}],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/hnd/htag/tagname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"type_tag": "std/core/hnd/htag","clauses": [{"tag": "std/core/hnd/Htag","params": [{"op": "Var","id": "@\"tagname\"0","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tagname\"0","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"0\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"htag\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tagname\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"htag\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}: \"std/core/hnd/htag\".\"std/core/hnd/Htag\"(({\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"0\",\"type\": {\"op\": \"String\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V)> fn(htag: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  (match (htag) {\n    ((@skip std/core/hnd/Htag((@x: string) : string) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/htag/tagname\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/htag/tagname"]}, {"name": {"op": "Var","id": "std/core/hnd/htag/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "tagname","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tagname","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"1","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-tagname@2014: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-tagname@2014"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tagname\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-tagname@2014,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-tagname@2014: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tagname\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tagname","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"type_tag": "std/core/hnd/htag","clauses": [{"tag": "std/core/hnd/Htag","params": [{"op": "Var","id": "@\"tagname\"2","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tagname\"2","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"2\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"2\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tagname\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}: \"std/core/hnd/htag\".\"std/core/hnd/Htag\"(({\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"2\",\"type\": {\"op\": \"String\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/hnd/Htag((@x: string) : string) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((hnd/htag :: ((E, V) -> V) -> V)<(2026 :: (E, V) -> V)>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"tagname\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tagname\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (tagname) {\n  ((std/core/types/@Optional((@uniq-tagname@2014: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-tagname@2014;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/hnd/Htag((@x: string) : string) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((hnd/htag :: ((E, V) -> V) -> V)<(2026 :: (E, V) -> V)>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/hnd/Htag<(a :: (E, V) -> V)>((match (tagname) {\n  ((std/core/types/@Optional((@uniq-tagname@2014: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-tagname@2014;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/core/hnd/Htag((@x: string) : string) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((hnd/htag :: ((E, V) -> V) -> V)<(2026 :: (E, V) -> V)>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V)> fn(@this: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, tagname: ? string){\n  std/core/hnd/Htag<(a :: (E, V) -> V)>((match (tagname) {\n    ((std/core/types/@Optional((@uniq-tagname@2014: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-tagname@2014;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/core/hnd/Htag((@x: string) : string) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/htag/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/htag/@copy"]}, {"name": {"op": "Var","id": "std/core/hnd/ev/htag","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"4","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"5","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"6","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"htag\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genTest: normal: (@x: hnd/htag<2048>) -> {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@x: hnd/htag<2048>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/marker<2034,2035>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 2048<2034,2035>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/evv<2034>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"5\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V)> fn(ev: (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@x: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (@pat@0: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (@pat@1: (a :: (E, V) -> V)<(e :: E),b>) : (a :: (E, V) -> V)<(e :: E),b>, (@pat@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/ev/htag\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/ev/htag"]}, {"name": {"op": "Var","id": "std/core/hnd/ev/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "marker","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "hnd","type": {"op": "Top"}}, {"op": "Var","id": "hevv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Ev","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"7","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"7","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-htag@2065: hnd/htag<2090>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-htag@2065"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"htag\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-htag@2065,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-htag@2065: hnd/htag<2090>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"htag\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"8","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"10","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"htag\"8","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genTest: normal: (@x: hnd/htag<2090>) -> {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@x: hnd/htag<2090>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/marker<2034,2035>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"10\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 2090<2034,2035>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/evv<2034>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"10\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@x: (hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@0@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (2090 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (@pat@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"htag\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"htag\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (htag) {\n  ((std/core/types/@Optional((@uniq-htag@2065: (hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) ) as @pat: ? ((hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n     -> @uniq-htag@2065;\n  ((@skip std/core/types/@None() : ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) ) as @pat@0: ? ((hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@x: (hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@0@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (2090 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (@pat@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "marker","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: marker"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Top"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hevv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: hevv"}]},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>((match (htag) {\n    ((std/core/types/@Optional((@uniq-htag@2065: (hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) ) as @pat: ? ((hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n       -> @uniq-htag@2065;\n    ((@skip std/core/types/@None() : ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) ) as @pat@0: ? ((hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n       -> (match (@this) {\n        ((@skip std/core/hnd/Ev<(e :: E),a>((@x: (hnd/htag :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@0@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (2090 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (@pat@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(2090 :: (E, V) -> V)>))\n           -> @x;\n      });\n  }), marker, hnd, hevv)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V),(e :: E),b> fn(@this: (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, htag: ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>), marker: (hnd/marker :: (E, V) -> V)<(e :: E),b>, hnd: (a :: (E, V) -> V)<(e :: E),b>, hevv: (hnd/evv :: E -> V)<(e :: E)>){\n  std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),b>((match (htag) {\n      ((std/core/types/@Optional((@uniq-htag@2065: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) ) as @pat: ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n         -> @uniq-htag@2065;\n      ((@skip std/core/types/@None() : ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) ) as @pat@0: ? ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n         -> (match (@this) {\n          ((@skip std/core/hnd/Ev<(e1 :: E),c>((@x: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (@pat@0@0: (hnd/marker :: (E, V) -> V)<(e1 :: E),c>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),c>, (@pat@1@0: (a :: (E, V) -> V)<(e1 :: E),c>) : (a :: (E, V) -> V)<(e1 :: E),c>, (@pat@2: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n             -> @x;\n        });\n    }), marker, hnd, hevv);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/ev/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/ev/@copy"]}, {"name": {"op": "Var","id": "std/core/hnd/clause0/clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"12","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"12","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/marker<2128,2129>, hnd/ev<2127>) -> 2128 2126) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"clause0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/marker<2128,2129>, hnd/ev<2127>) -> 2128 2126) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(b :: (E, V) -> V),(e :: E),c> fn(clause0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>){\n  (match (clause0) {\n    ((@skip std/core/hnd/Clause0((@x: ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause0/clause\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}],\"return\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause0/clause"]}, {"name": {"op": "Var","id": "std/core/hnd/clause0/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"13","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"13","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-clause@2165: (hnd/marker<2194,2195>, hnd/ev<2193>) -> 2194 2192) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-clause@2165"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-clause@2165,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-clause@2165: (hnd/marker<2194,2195>, hnd/ev<2193>) -> 2194 2192) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"13\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"14","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"14","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/marker<2194,2195>, hnd/ev<2193>) -> 2194 2192) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"14\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"14\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/marker<2194,2195>, hnd/ev<2193>) -> 2194 2192) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"14\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/hnd/Clause0((@x: ((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<2192,(2193 :: (E, V) -> V),(2194 :: E),2195>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (clause) {\n  ((std/core/types/@Optional((@uniq-clause@2165: ((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192))\n     -> @uniq-clause@2165;\n  ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Clause0((@x: ((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<2192,(2193 :: (E, V) -> V),(2194 :: E),2195>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((match (clause) {\n  ((std/core/types/@Optional((@uniq-clause@2165: ((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192))\n     -> @uniq-clause@2165;\n  ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Clause0((@x: ((hnd/marker :: (E, V) -> V)<(2194 :: E),2195>, (hnd/ev :: ((E, V) -> V) -> V)<(2193 :: (E, V) -> V)>) -> (2194 :: E) 2192) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<2192,(2193 :: (E, V) -> V),(2194 :: E),2195>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(b :: (E, V) -> V),(e :: E),c> fn(@this: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>, clause: ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a)){\n  std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((match (clause) {\n    ((std/core/types/@Optional((@uniq-clause@2165: ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a))\n       -> @uniq-clause@2165;\n    ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a))\n       -> (match (@this) {\n        ((@skip std/core/hnd/Clause0((@x: ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause0/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause0/@copy"]}, {"name": {"op": "Var","id": "std/core/hnd/clause1/clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"15","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"15","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/marker<2239,2240>, hnd/ev<2238>, 2236) -> 2239 2237) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"15\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"clause1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"15\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/marker<2239,2240>, hnd/ev<2238>, 2236) -> 2239 2237) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"15\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(c :: (E, V) -> V),(e :: E),d> fn(clause1: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>){\n  (match (clause1) {\n    ((@skip std/core/hnd/Clause1((@x: ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause1/clause\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}],\"return\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause1/clause"]}, {"name": {"op": "Var","id": "std/core/hnd/clause1/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"16","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"16","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-clause@2287: (hnd/marker<2322,2323>, hnd/ev<2321>, 2319) -> 2322 2320) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"16\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-clause@2287"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-clause@2287,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"16\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-clause@2287: (hnd/marker<2322,2323>, hnd/ev<2321>, 2319) -> 2322 2320) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"16\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"17","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"17","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/marker<2322,2323>, hnd/ev<2321>, 2319) -> 2322 2320) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"17\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"17\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/marker<2322,2323>, hnd/ev<2321>, 2319) -> 2322 2320) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"17\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/hnd/Clause1((@x: ((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<2319,2320,(2321 :: (E, V) -> V),(2322 :: E),2323>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (clause) {\n  ((std/core/types/@Optional((@uniq-clause@2287: ((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320))\n     -> @uniq-clause@2287;\n  ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Clause1((@x: ((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<2319,2320,(2321 :: (E, V) -> V),(2322 :: E),2323>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>((match (clause) {\n  ((std/core/types/@Optional((@uniq-clause@2287: ((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320))\n     -> @uniq-clause@2287;\n  ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Clause1((@x: ((hnd/marker :: (E, V) -> V)<(2322 :: E),2323>, (hnd/ev :: ((E, V) -> V) -> V)<(2321 :: (E, V) -> V)>, 2319) -> (2322 :: E) 2320) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<2319,2320,(2321 :: (E, V) -> V),(2322 :: E),2323>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(c :: (E, V) -> V),(e :: E),d> fn(@this: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>, clause: ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b)){\n  std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((match (clause) {\n    ((std/core/types/@Optional((@uniq-clause@2287: ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b))\n       -> @uniq-clause@2287;\n    ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b))\n       -> (match (@this) {\n        ((@skip std/core/hnd/Clause1((@x: ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ((hnd/marker :: (E, V) -> V)<(e :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause1/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause1/@copy"]}, {"name": {"op": "Var","id": "std/core/hnd/clause2/clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}],"return": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause2","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause2","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}},"type_tag": "std/core/hnd/clause2","clauses": [{"tag": "std/core/hnd/Clause2","params": [{"op": "Var","id": "@\"clause\"18","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"18","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/marker<2375,2376>, hnd/ev<2374>, 2371, 2372) -> 2375 2373) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"clause2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/marker<2375,2376>, hnd/ev<2374>, 2371, 2372) -> 2375 2373) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}}: \"std/core/hnd/clause2\".\"std/core/hnd/Clause2\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> fn(clause2: (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>){\n  (match (clause2) {\n    ((@skip std/core/hnd/Clause2((@x: ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause2/clause\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}],\"return\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause2/clause"]}, {"name": {"op": "Var","id": "std/core/hnd/clause2/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}}, {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"19","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"19","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-clause@2435: (hnd/marker<2476,2477>, hnd/ev<2475>, 2472, 2473) -> 2476 2474) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-clause@2435"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-clause@2435,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-clause@2435: (hnd/marker<2476,2477>, hnd/ev<2475>, 2472, 2473) -> 2476 2474) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"19\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "clause","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}},"type_tag": "std/core/hnd/clause2","clauses": [{"tag": "std/core/hnd/Clause2","params": [{"op": "Var","id": "@\"clause\"20","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"20","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/marker<2476,2477>, hnd/ev<2475>, 2472, 2473) -> 2476 2474) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"20\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"20\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/marker<2476,2477>, hnd/ev<2475>, 2472, 2473) -> 2476 2474) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}}: \"std/core/hnd/clause2\".\"std/core/hnd/Clause2\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"20\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/hnd/Clause2((@x: ((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat@1: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<2472,2473,2474,(2475 :: (E, V) -> V),(2476 :: E),2477>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"clause\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (clause) {\n  ((std/core/types/@Optional((@uniq-clause@2435: ((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474))\n     -> @uniq-clause@2435;\n  ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Clause2((@x: ((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat@1: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<2472,2473,2474,(2475 :: (E, V) -> V),(2476 :: E),2477>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>((match (clause) {\n  ((std/core/types/@Optional((@uniq-clause@2435: ((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474))\n     -> @uniq-clause@2435;\n  ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Clause2((@x: ((hnd/marker :: (E, V) -> V)<(2476 :: E),2477>, (hnd/ev :: ((E, V) -> V) -> V)<(2475 :: (E, V) -> V)>, 2472, 2473) -> (2476 :: E) 2474) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat@1: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<2472,2473,2474,(2475 :: (E, V) -> V),(2476 :: E),2477>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> fn(@this: (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>, clause: ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c)){\n  std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((match (clause) {\n    ((std/core/types/@Optional((@uniq-clause@2435: ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) ) as @pat: ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c))\n       -> @uniq-clause@2435;\n    ((@skip std/core/types/@None() : ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) ) as @pat@0: ? (((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c))\n       -> (match (@this) {\n        ((@skip std/core/hnd/Clause2((@x: ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ((hnd/marker :: (E, V) -> V)<(e :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat@1: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause2/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause2/@copy"]}, {"name": {"op": "Var","id": "std/core/hnd/is-deep","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "resume-result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "resume-result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}},"type_tag": "std/core/hnd/resume-result","clauses": [{"tag": "std/core/hnd/Deep","params": [{"op": "Var","id": "@\"result\"21","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 2501) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}: \"std/core/hnd/resume-result\".\"std/core/hnd/Deep\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"21\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(resume-result: (hnd/resume-result :: (V, V) -> V)<a,b>){\n  (match (resume-result) {\n    ((std/core/hnd/Deep((@pat@0: a) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat: ((hnd/resume-result :: (V, V) -> V)<a,b>))\n       -> std/core/types/True;\n    (@pat@1: ((hnd/resume-result :: (V, V) -> V)<a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-deep\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-deep"]}, {"name": {"op": "Var","id": "std/core/hnd/is-shallow","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "resume-result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "resume-result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}},"type_tag": "std/core/hnd/resume-result","clauses": [{"tag": "std/core/hnd/Shallow","params": [{"op": "Var","id": "@\"result\"22","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 2521) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}: \"std/core/hnd/resume-result\".\"std/core/hnd/Shallow\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"22\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(resume-result: (hnd/resume-result :: (V, V) -> V)<a,b>){\n  (match (resume-result) {\n    ((std/core/hnd/Shallow((@pat@0: a) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat: ((hnd/resume-result :: (V, V) -> V)<a,b>))\n       -> std/core/types/True;\n    (@pat@1: ((hnd/resume-result :: (V, V) -> V)<a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-shallow\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-shallow"]}, {"name": {"op": "Var","id": "std/core/hnd/is-finalize","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "resume-result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "resume-result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}},"type_tag": "std/core/hnd/resume-result","clauses": [{"tag": "std/core/hnd/Finalize","params": [{"op": "Var","id": "@\"result\"23","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 2542) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}: \"std/core/hnd/resume-result\".\"std/core/hnd/Finalize\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"23\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"resume-result\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(resume-result: (hnd/resume-result :: (V, V) -> V)<a,b>){\n  (match (resume-result) {\n    ((std/core/hnd/Finalize((@pat@0: b) : b) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat: ((hnd/resume-result :: (V, V) -> V)<a,b>))\n       -> std/core/types/True;\n    (@pat@1: ((hnd/resume-result :: (V, V) -> V)<a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-finalize\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-finalize"]}, {"name": {"op": "Var","id": "std/core/hnd/resume-context/k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}},"type_tag": "std/core/hnd/resume-context","clauses": [{"tag": "std/core/hnd/Resume-context","params": [{"op": "Var","id": "@\"k\"24","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"k\"24","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/resume-result<2580,2583>) -> 2581 2583) -> {\"op\": \"Var\",\"id\": \"@\\\"k\\\"24\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"k\\\"24\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/resume-result<2580,2583>) -> 2581 2583) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"k\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}: \"std/core/hnd/resume-context\".\"std/core/hnd/Resume-context\"(({\"op\": \"Var\",\"id\": \"@\\\"k\\\"24\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn(@this: (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>){\n  (match (@this) {\n    ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/resume-context/k\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}],\"return\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/resume-context/k"]}, {"name": {"op": "Var","id": "std/core/hnd/resume-context/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}}, {"op": "Var","id": "k","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Resume-context","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "k","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"25","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"25","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-k@2619: (hnd/resume-result<2646,2649>) -> 2647 2649) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-k@2619"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-k@2619,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-k@2619: (hnd/resume-result<2646,2649>) -> 2647 2649) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"25\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "k","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}},"type_tag": "std/core/hnd/resume-context","clauses": [{"tag": "std/core/hnd/Resume-context","params": [{"op": "Var","id": "@\"k\"26","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"k\"26","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/resume-result<2646,2649>) -> 2647 2649) -> {\"op\": \"Var\",\"id\": \"@\\\"k\\\"26\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"k\\\"26\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/resume-result<2646,2649>) -> 2647 2649) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"k\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}: \"std/core/hnd/resume-context\".\"std/core/hnd/Resume-context\"(({\"op\": \"Var\",\"id\": \"@\\\"k\\\"26\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat@1: ((hnd/resume-context :: (V, E, E, V) -> V)<2646,(2647 :: E),(2648 :: E),2649>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"k\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (k) {\n  ((std/core/types/@Optional((@uniq-k@2619: ((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) ) as @pat: ? (((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649))\n     -> @uniq-k@2619;\n  ((@skip std/core/types/@None() : ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) ) as @pat@0: ? (((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat@1: ((hnd/resume-context :: (V, E, E, V) -> V)<2646,(2647 :: E),(2648 :: E),2649>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>((match (k) {\n  ((std/core/types/@Optional((@uniq-k@2619: ((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) ) as @pat: ? (((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649))\n     -> @uniq-k@2619;\n  ((@skip std/core/types/@None() : ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) ) as @pat@0: ? (((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649))\n     -> (match (@this) {\n      ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<2646,2649>) -> (2647 :: E) 2649) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat@1: ((hnd/resume-context :: (V, E, E, V) -> V)<2646,(2647 :: E),(2648 :: E),2649>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn(@this: (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, k: ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b)){\n  std/core/hnd/Resume-context<a,(e :: E),(e1 :: E),b>((match (k) {\n    ((std/core/types/@Optional((@uniq-k@2619: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) ) as @pat: ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b))\n       -> @uniq-k@2619;\n    ((@skip std/core/types/@None() : ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) ) as @pat@0: ? (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b))\n       -> (match (@this) {\n        ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat@1: ((hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/resume-context/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/resume-context/@copy"]}, {"name": {"op": "Var","id": "std/core/hnd/is-pure","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/Pure","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/Pure\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn(yld: (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>){\n  (match (yld) {\n    ((std/core/hnd/Pure() : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/True;\n    (@pat@0: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-pure\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-pure"]}, {"name": {"op": "Var","id": "std/core/hnd/is-yieldingFinal","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/YieldingFinal","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/YieldingFinal\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn(yld: (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>){\n  (match (yld) {\n    ((std/core/hnd/YieldingFinal() : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/True;\n    (@pat@0: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-yieldingFinal\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-yieldingFinal"]}, {"name": {"op": "Var","id": "std/core/hnd/is-yielding","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/Yielding","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/Yielding\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn(yld: (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>){\n  (match (yld) {\n    ((std/core/hnd/Yielding() : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/True;\n    (@pat@0: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-yielding\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-yielding"]}, {"name": {"op": "Var","id": "std/core/hnd/is-yield","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/Yield","params": [{"op": "Var","id": "@\"clause\"27","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "@\"cont\"28","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"27\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@pat@0: ((hnd/resume-result<2737,2740>) -> 2738 2740) -> 2738 2740) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@pat@1: (() -> 2737) -> 2738 2739) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"cont\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Function\\\",\\\"params\\\": [],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/Yield\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"27\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}, {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn(yld: (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>){\n  (match (yld) {\n    ((std/core/hnd/Yield<c>((@pat@0: (((hnd/resume-result :: (V, V) -> V)<c,b>) -> (e :: E) b) -> (e :: E) b) : (((hnd/resume-result :: (V, V) -> V)<c,b>) -> (e :: E) b) -> (e :: E) b, (@pat@1: (() -> c) -> (e :: E) a) : (() -> c) -> (e :: E) a) : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/True;\n    (@pat@2: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/is-yield\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/is-yield"]}, {"name": {"op": "Var","id": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:($evvIndex:(fun Pure (ptr ptr int) int) ($getCurrentEvv:(fun Effectful (ptr) ptr)) $arg0:ptr 0)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: htag"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-index<(e :: E),(a :: (E, V) -> V)>(htag)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),(a :: (E, V) -> V)> fn<(e :: E)>(htag: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  std/core/hnd/@extern-evv-index<(e :: E),(a :: (E, V) -> V)>(htag);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@evv-index\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@evv-index"]}, {"name": {"op": "Var","id": "std/core/hnd/@evv-is-affine","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  std/core/hnd/@extern-evv-is-affine();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@evv-is-affine\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@evv-is-affine"]}, {"name": {"op": "Var","id": "std/core/hnd/@reset-vm","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"reset\" (reset ($arg0:ptr $ignore:ptr) (the top ($arg2:ptr)) (($res:top) (debugWrap \"returnClause\" ($arg1:ptr $res:top) ) ) ) )","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-reset-vm<a,(e :: E),a>(m, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),b>, ret: (a) -> (e :: E) b, action: () -> (e :: E) a){\n  std/core/hnd/@extern-reset-vm<a,(e :: E),b>(m, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@reset-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@reset-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/@mask-builtin","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E)> fn<(e1 :: E)>(action: () -> (e :: E) a){\n  action();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@mask-builtin\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@mask-builtin"]}, {"name": {"op": "Var","id": "std/core/hnd/@new-htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tag","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "tag","type": {"op": "String"}},"annotation": "genExpr: tag"}]},"annotation": "genExpr: std/core/hnd/Htag<(a :: (E, V) -> V)>(tag)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V)> fn(tag: string){\n  std/core/hnd/Htag<(a :: (E, V) -> V)>(tag);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@new-htag\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@new-htag"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-none0","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate0\" (fun Effectful () ptr)))","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create0<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": []},"annotation": "genExpr: f()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "keep","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"keep\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["keep"]}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E)> fn<(e1 :: E)>(f: () -> (e :: E) a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val x : a;\n  val keep : ();\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-none0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-none0"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate0\" (fun Effectful () ptr)))","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create0<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}]},"annotation": "genExpr: f(x1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "keep","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"keep\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["keep"]}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn<(e1 :: E)>(f: (a) -> (e :: E) b, x1: a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val x : b;\n  val keep : ();\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-none1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-none1"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-none2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate0\" (fun Effectful () ptr)))","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create0<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: f(x1, x2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "keep","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"keep\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["keep"]}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(e1 :: E)> fn<(e1 :: E)>(f: (a, b) -> (e :: E) c, x1: a, x2: b){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val x : c;\n  val keep : ();\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-none2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-none2"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-none3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate0\" (fun Effectful () ptr)))","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create0<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}]},"annotation": "genExpr: f(x1, x2, x3)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "keep","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"keep\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["keep"]}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(e1 :: E)> fn<(e1 :: E)>(f: (a, b, c) -> (e :: E) d, x1: a, x2: b, x3: c){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val x : d;\n  val keep : ();\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-none3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-none3"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-none4","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}, {"op": "Var","id": "x4","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate0\" (fun Effectful () ptr)))","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create0<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x4","type": {"op": "Top"}},"annotation": "genExpr: x4"}]},"annotation": "genExpr: f(x1, x2, x3, x4)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "keep","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"keep\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["keep"]}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(e1 :: E)> fn<(e1 :: E)>(f: (a, b, c, d) -> (e :: E) a1, x1: a, x2: b, x3: c, x4: d){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val x : a1;\n  val keep : ();\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-none4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-none4"]}, {"name": {"op": "Var","id": "std/core/hnd/@perform0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"29","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"30","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"31","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"32","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x33","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: op<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"31","type": {"op": "Top"}},"annotation": "genTest: normal: (h: 3289<3233,3234>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"31\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: h"}]},"annotation": "genExpr: op<(e :: E),a>(h)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x33","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"34","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"34","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3233,3234>, hnd/ev<3289>) -> 3233 3287) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"34\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(e :: E),(e :: E),(a :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"30","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3233,3234>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(e :: E),(e :: E),(a :: (E, V) -> V),a>(f)(m, ev)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"34\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3233,3234>, hnd/ev<3289>) -> 3233 3287) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"34\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((op<(e :: E),a>(h))) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(3233 :: E),3234>, (hnd/ev :: ((E, V) -> V) -> V)<(3289 :: (E, V) -> V)>) -> (3233 :: E) 3287) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) -> (e :: E) b) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(c :: (E, V) -> V),(e :: E),a> ) as @pat@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<3287,(3289 :: (E, V) -> V),(3233 :: E),3234>))\n     -> std/core/hnd/cast-clause0<a,(e :: E),(e :: E),(a :: (E, V) -> V),a>(f)(m, ev);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<3289>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3233,3234>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: 3289<3233,3234>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3233>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"31\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(b :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, op: forall<(e1 :: E),c> ((b :: (E, V) -> V)<(e1 :: E),c>) -> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),c>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),c>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),c>, (h: (b :: (E, V) -> V)<(e1 :: E),c>) : (b :: (E, V) -> V)<(e1 :: E),c>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>))\n       -> (match ((op<(e1 :: E),c>(h))) {\n        ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),c>, (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c> ) as @pat@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>))\n           -> std/core/hnd/cast-clause0<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c>(f)(m, ev);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@perform0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@perform0"]}, {"name": {"op": "Var","id": "std/core/hnd/@perform1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"35","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"36","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"37","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"38","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x39","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: op<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"37","type": {"op": "Top"}},"annotation": "genTest: normal: (h: 3370<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"37\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: h"}]},"annotation": "genExpr: op<(e :: E),a>(h)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x39","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"40","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"40","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<3370>, 3368) -> 3307 3369) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"40\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"36","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3307,3308>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(m, ev, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"40\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3307,3308>, hnd/ev<3370>, 3368) -> 3307 3369) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"40\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((op<(e :: E),a>(h))) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3307 :: E),3308>, (hnd/ev :: ((E, V) -> V) -> V)<(3370 :: (E, V) -> V)>, 3368) -> (3307 :: E) 3369) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, b) -> (e :: E) c) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<b,c,(d :: (E, V) -> V),(e :: E),a> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<3368,3369,(3370 :: (E, V) -> V),(3307 :: E),3308>))\n     -> f(m, ev, x);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<3370>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"37\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: 3370<3307,3308>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3307>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"37\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(c :: (E, V) -> V),(e :: E)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: forall<(e1 :: E),d> ((c :: (E, V) -> V)<(e1 :: E),d>) -> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>, x: a){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),d>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),d>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),d>, (h: (c :: (E, V) -> V)<(e1 :: E),d>) : (c :: (E, V) -> V)<(e1 :: E),d>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>))\n       -> (match ((op<(e1 :: E),d>(h))) {\n        ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>))\n           -> f(m, ev, x);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@perform1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@perform1"]}, {"name": {"op": "Var","id": "std/core/hnd/@perform2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "evx","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "evx","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"41","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"43","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x45","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: op<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"43","type": {"op": "Top"}},"annotation": "genTest: normal: (h: 3465<3393,3394>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: h"}]},"annotation": "genExpr: op<(e :: E),a>(h)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x45","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"}},"type_tag": "std/core/hnd/clause2","clauses": [{"tag": "std/core/hnd/Clause2","params": [{"op": "Var","id": "@\"clause\"46","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"46","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3393,3394>, hnd/ev<3465>, 3461, 3462) -> 3393 3463) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"46\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3393,3394>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "evx","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: evx"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: f(m, evx, x, y)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"46\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3393,3394>, hnd/ev<3465>, 3461, 3462) -> 3393 3463) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"}}: \"std/core/hnd/clause2\".\"std/core/hnd/Clause2\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"46\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((op<(e :: E),a>(h))) {\n  ((@skip std/core/hnd/Clause2((f: ((hnd/marker :: (E, V) -> V)<(3393 :: E),3394>, (hnd/ev :: ((E, V) -> V) -> V)<(3465 :: (E, V) -> V)>, 3461, 3462) -> (3393 :: E) 3463) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, b, c) -> (e :: E) d) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<b,c,d,(a1 :: (E, V) -> V),(e :: E),a> ) as @pat@2: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<3461,3462,3463,(3465 :: (E, V) -> V),(3393 :: E),3394>))\n     -> f(m, evx, x, y);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"evx\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<3465>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3393,3394>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: 3465<3393,3394>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3393>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"evx\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(d :: (E, V) -> V)> fn<(e :: E)>(evx: (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, op: forall<(e1 :: E),a1> ((d :: (E, V) -> V)<(e1 :: E),a1>) -> (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>, x: a, y: b){\n  (match (evx) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),a1>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),a1>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),a1>, (h: (d :: (E, V) -> V)<(e1 :: E),a1>) : (d :: (E, V) -> V)<(e1 :: E),a1>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>))\n       -> (match ((op<(e1 :: E),a1>(h))) {\n        ((@skip std/core/hnd/Clause2((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e1 :: E) c) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),a1>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e1 :: E) c) : (hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1> ) as @pat@2: ((hnd/clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>))\n           -> f(m, evx, x, y);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@perform2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@perform2"]}, {"name": {"op": "Var","id": "std/core/hnd/@prompt-local-var-prim-vm","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"prompt-local-var-prim\" (reset ((fresh-label) $reg:ptr) (the top (letref ($ref:ptr $reg:ptr $arg0:top) ($arg1:top $ref:ptr))) (($res:top) $res:top)))","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-prompt-local-var-prim-vm<a,a,(e :: E),(h :: H)>(init, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(init: a, action: (l : (local-var :: (H, V) -> V)<(h :: H),a>) -> <(local :: H -> X)<(h :: H)>|(e :: E)> b){\n  std/core/hnd/@extern-prompt-local-var-prim-vm<a,b,(e :: E),(h :: H)>(init, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@prompt-local-var-prim-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@prompt-local-var-prim-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: clause(x, k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),c> fn<(e :: E)>(x: a, clause: (x : a, k : (b) -> (e :: E) c) -> (e :: E) c, k: (b) -> (e :: E) c){\n  clause(x, k);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/protect\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/protect"]}, {"name": {"op": "Var","id": "std/core/hnd/@yield-to-prim-vm","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"yield-to-prim\" (shift:top ($arg0:ptr 0) ($resume:top) ($arg1:ptr (lambda ($val:top) (debugWrap \"Resuming\" (resume $resume:ptr $val:top) ) )))) )","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-to-prim-vm<a,(e :: E),(e :: E),a>(m, clause)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, clause: ((a) -> (e1 :: E) b) -> (e1 :: E) b){\n  std/core/hnd/@extern-yield-to-prim-vm<a,(e :: E),(e1 :: E),b>(m, clause);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@yield-to-prim-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@yield-to-prim-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:($getCurrentEvv:(fun Effectful () ptr))","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-get<(e :: E)>()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(){\n  std/core/hnd/@extern-evv-get<(e :: E)>();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-get\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-get"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-insert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "evv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}, {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:($evvInsert:(fun Pure (ptr ptr) ptr) $arg0:ptr $arg1:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "evv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: evv"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(evv, ev)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),(e1 :: E),(a :: (E, V) -> V)> fn<(e :: E)>(evv: (hnd/evv :: E -> V)<(e :: E)>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  std/core/hnd/@extern-evv-insert<(e :: E),(e1 :: E),(a :: (E, V) -> V)>(evv, ev);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-insert\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-insert"]}, {"name": {"op": "Var","id": "std/core/hnd/fresh-marker","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(fresh-label)","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}},"annotation": "genExpr: std/core/hnd/@extern-fresh-marker<a,(e :: E)>()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn(){\n  std/core/hnd/@extern-fresh-marker<a,(e :: E)>();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/fresh-marker\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/fresh-marker"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-eq","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "evv0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}, {"op": "Var","id": "evv1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "ptr_eq","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "evv0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: evv0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "evv1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: evv1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-eq<(e :: E)>(evv0, evv1)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn(evv0: (hnd/evv :: E -> V)<(e :: E)>, evv1: (hnd/evv :: E -> V)<(e :: E)>){\n  std/core/hnd/@extern-evv-eq<(e :: E)>(evv0, evv1);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-eq\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-eq"]}, {"name": {"op": "Var","id": "std/core/hnd/guard","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-guard","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/@extern-guard<(e :: E)>(w)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(w: (hnd/evv :: E -> V)<(e :: E)>){\n  std/core/hnd/@extern-guard<(e :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/guard\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/guard"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-yield-extend","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: next"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-extend<a,a,(e :: E)>(next)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(next: (a) -> (e :: E) b){\n  std/core/hnd/@extern-yield-extend<a,b,(e :: E)>(next);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-extend\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-extend"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-yield-cont","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-cont<a,(e :: E),a>(f)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(f: forall<c> ((c) -> (e :: E) a, c) -> (e :: E) b){\n  std/core/hnd/@extern-yield-cont<a,(e :: E),b>(f);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-cont\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-cont"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(reset ($arg0:ptr $ignore:ptr) $std/core/hnd/Pure:ptr (($ret:ptr) $ret:ptr))","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-prompt<a,(e :: E),a>(m)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(m: (hnd/marker :: (E, V) -> V)<(e :: E),b>){\n  std/core/hnd/@extern-yield-prompt<a,(e :: E),b>(m);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-prompt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-prompt"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-yield-to-final","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-to-final<a,(e :: E),(e :: E),a>(m, clause)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, clause: (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e1 :: E) b) -> (e1 :: E) b){\n  std/core/hnd/@extern-yield-to-final<a,(e :: E),(e1 :: E),b>(m, clause);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-to-final\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-to-final"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-swap-delete","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "behind","type": {"op": "Bool"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:($evvSwapDelete:(fun Effectful (int bool) ptr) $arg0:int $arg1:bool)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "behind","type": {"op": "Bool"}},"annotation": "genExpr: behind"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-swap-delete<(e :: E),(e :: E)>(i, behind)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, behind: bool){\n  std/core/hnd/@extern-evv-swap-delete<(e :: E),(e1 :: E)>(i, behind);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-swap-delete\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-swap-delete"]}, {"name": {"op": "Var","id": "std/core/hnd/fresh-marker-named","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(fresh-label)","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}},"annotation": "genExpr: std/core/hnd/@extern-fresh-marker-named<a,(e :: E)>()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn(){\n  std/core/hnd/@extern-fresh-marker-named<a,(e :: E)>();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/fresh-marker-named\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/fresh-marker-named"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-evv-swap-create","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-swap-create<(e :: E)>(indices)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(indices: (vector :: V -> V)<hnd/ev-index>){\n  std/core/hnd/@extern-evv-swap-create<(e :: E)>(indices);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-swap-create\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-swap-create"]}, {"name": {"op": "Var","id": "std/core/hnd/xperform1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"48","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"49","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"50","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: op<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"49","type": {"op": "Top"}},"annotation": "genTest: normal: (h: 3995<3931,3932>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: h"}]},"annotation": "genExpr: op<(e :: E),a>(h)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"52","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"52","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3931,3932>, hnd/ev<3995>, 3992) -> 3931 3993) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"52\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"48","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3931,3932>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(m, ev, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"52\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3931,3932>, hnd/ev<3995>, 3992) -> 3931 3993) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"52\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((op<(e :: E),a>(h))) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3931 :: E),3932>, (hnd/ev :: ((E, V) -> V) -> V)<(3995 :: (E, V) -> V)>, 3992) -> (3931 :: E) 3993) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, b) -> (e :: E) c) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<b,c,(d :: (E, V) -> V),(e :: E),a> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<3992,3993,(3995 :: (E, V) -> V),(3931 :: E),3932>))\n     -> f(m, ev, x);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<3995>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3931,3932>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: 3995<3931,3932>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3931>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"49\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(c :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: forall<(e1 :: E),d> ((c :: (E, V) -> V)<(e1 :: E),d>) -> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>, x: a){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),d>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),d>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),d>, (h: (c :: (E, V) -> V)<(e1 :: E),d>) : (c :: (E, V) -> V)<(e1 :: E),d>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>))\n       -> (match ((op<(e1 :: E),d>(h))) {\n        ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),d>, (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>))\n           -> f(m, ev, x);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/xperform1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/xperform1"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-to-prim","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-yield-to-prim","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-to-prim<a,(e :: E),(e :: E),a>(m, clause)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, clause: (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e1 :: E) b) -> (e1 :: E) b){\n  std/core/hnd/@extern-yield-to-prim<a,(e :: E),(e1 :: E),b>(m, clause);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-to-prim\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-to-prim"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail-noop0","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x737_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x737_17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": []},"annotation": "genExpr: op()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x737_14: (hnd/marker :: (E, V) -> V)<(4088 :: E),4089>, @_wildcard-x737_17: (hnd/ev :: ((E, V) -> V) -> V)<(4090 :: (E, V) -> V)>){\n  op();\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x737_14: (hnd/marker :: (E, V) -> V)<(4088 :: E),4089>, @_wildcard-x737_17: (hnd/ev :: ((E, V) -> V) -> V)<(4090 :: (E, V) -> V)>){\n  (op());\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c> fn(op: () -> (e :: E) c){\n  std/core/hnd/Clause0<c,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x737_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x737_17: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){\n    (op());\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail-noop0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail-noop0"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail-noop1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x691_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x691_17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: op(x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(4143 :: E),4144>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(4145 :: (E, V) -> V)>, x: 4146){\n  op(x);\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(4143 :: E),4144>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(4145 :: (E, V) -> V)>, x: 4146){\n  (op(x));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d> fn(op: (c) -> (e :: E) d){\n  std/core/hnd/Clause1<c,d,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: c){\n    (op(x));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail-noop1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail-noop1"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail-noop2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x779_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x779_17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: op(x1, x2)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x779_14: (hnd/marker :: (E, V) -> V)<(4209 :: E),4210>, @_wildcard-x779_17: (hnd/ev :: ((E, V) -> V) -> V)<(4211 :: (E, V) -> V)>, x1: 4212, x2: 4213){\n  op(x1, x2);\n}"}]},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x779_14: (hnd/marker :: (E, V) -> V)<(4209 :: E),4210>, @_wildcard-x779_17: (hnd/ev :: ((E, V) -> V) -> V)<(4211 :: (E, V) -> V)>, x1: 4212, x2: 4213){\n  (op(x1, x2));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1> fn(op: (c, d) -> (e :: E) a1){\n  std/core/hnd/Clause2<c,d,a1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x779_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x779_17: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x1: c, x2: d){\n    (op(x1, x2));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail-noop2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail-noop2"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-swap-with","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"54","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"55","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<4263>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 4263<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V),(e :: E)> fn(ev: (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (@pat@2: (a :: (E, V) -> V)<(e1 :: E),b>) : (a :: (E, V) -> V)<(e1 :: E),b>, (w: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n       -> std/core/hnd/evv-swap<(total :: E),(e1 :: E),(e :: E)>(w);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-swap-with\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-swap-with"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-value","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "v","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x740_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x740_17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "Var","id": "v","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x740_14: (hnd/marker :: (E, V) -> V)<(4303 :: E),4305>, @_wildcard-x740_17: (hnd/ev :: ((E, V) -> V) -> V)<(4304 :: (E, V) -> V)>){\n  v;\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x740_14: (hnd/marker :: (E, V) -> V)<(4303 :: E),4305>, @_wildcard-x740_17: (hnd/ev :: ((E, V) -> V) -> V)<(4304 :: (E, V) -> V)>){\n  v;\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(b :: (E, V) -> V),c> fn(v: a){\n  std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(@_wildcard-x740_14: (hnd/marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x740_17: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){\n    v;\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-value\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-value"]}, {"name": {"op": "Var","id": "std/core/hnd/eq-marker","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1==#2","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: y"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/hnd/@extern-eq-marker<a,a,(e :: E),(e :: E)>(x, y)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn(x: (hnd/marker :: (E, V) -> V)<(e :: E),a>, y: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>){\n  std/core/hnd/@extern-eq-marker<a,b,(e :: E),(e1 :: E)>(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/eq-marker\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/eq-marker"]}, {"name": {"op": "Var","id": "std/core/hnd/evv-show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "evv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-evv-show","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "evv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: evv"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}},"annotation": "genExpr: std/core/hnd/@extern-evv-show<(e :: E)>(evv)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn(evv: (hnd/evv :: E -> V)<(e :: E)>){\n  std/core/hnd/@extern-evv-show<(e :: E)>(evv);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/evv-show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/evv-show"]}, {"name": {"op": "Var","id": "std/core/hnd/unsafe-reyield","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-unsafe-reyield","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}},"annotation": "genExpr: yld"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-unsafe-reyield<a,(e :: E)>(yld)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(yld: hnd/yield-info){\n  std/core/hnd/@extern-unsafe-reyield<a,(e :: E)>(yld);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/unsafe-reyield\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yield-info\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/unsafe-reyield"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-capture","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-yield-capture","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}}},"annotation": "genExpr: std/core/hnd/@extern-yield-capture<(e :: E)>()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(){\n  std/core/hnd/@extern-yield-capture<(e :: E)>();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-capture\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yield-info\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-capture"]}, {"name": {"op": "Var","id": "std/core/hnd/get","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ref","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ref","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: ref"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(h :: H),a,(div :: X)>(ref)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(h :: H)> fn<<(read :: H -> X)<(h :: H)>,(div :: X)>>(ref: (ref :: (H, V) -> V)<(h :: H),a>){\n  std/core/types/ref/(!)<(h :: H),a,(div :: X)>(ref);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/get\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/get"]}, {"name": {"op": "Var","id": "std/core/hnd/resume","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}},"type_tag": "std/core/hnd/resume-context","clauses": [{"tag": "std/core/hnd/Resume-context","params": [{"op": "Var","id": "@\"k\"57","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"k\"57","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/resume-result<4490,4493>) -> 4491 4493) -> {\"op\": \"Var\",\"id\": \"@\\\"k\\\"57\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Deep","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Deep<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/hnd/Deep<a,a>(x)"}]},"annotation": "genExpr: @x((std/core/hnd/Deep<a,a>(x)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"k\\\"57\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/resume-result<4490,4493>) -> 4491 4493) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"k\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}: \"std/core/hnd/resume-context\".\"std/core/hnd/Resume-context\"(({\"op\": \"Var\",\"id\": \"@\\\"k\\\"57\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(r: (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x: a){\n  (match (r) {\n    ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))\n       -> @x((std/core/hnd/Deep<a,b>(x)));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/resume\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/resume"]}, {"name": {"op": "Var","id": "std/core/hnd/resume-final","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/@extern-resume-final","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/@extern-resume-final<a>()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(){\n  std/core/hnd/@extern-resume-final<a>();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/resume-final\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/resume-final"]}, {"name": {"op": "Var","id": "std/core/hnd/resume-shallow","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}},"type_tag": "std/core/hnd/resume-context","clauses": [{"tag": "std/core/hnd/Resume-context","params": [{"op": "Var","id": "@\"k\"58","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"k\"58","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/resume-result<4576,4579>) -> 4577 4579) -> {\"op\": \"Var\",\"id\": \"@\\\"k\\\"58\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Shallow","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Shallow<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/hnd/Shallow<a,a>(x)"}]},"annotation": "genExpr: @x((std/core/hnd/Shallow<a,a>(x)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"k\\\"58\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/resume-result<4576,4579>) -> 4577 4579) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"k\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}: \"std/core/hnd/resume-context\".\"std/core/hnd/Resume-context\"(({\"op\": \"Var\",\"id\": \"@\\\"k\\\"58\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn<(e1 :: E)>(r: (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x: a){\n  (match (r) {\n    ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))\n       -> @x((std/core/hnd/Shallow<a,b>(x)));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/resume-shallow\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/resume-shallow"]}, {"name": {"op": "Var","id": "std/core/hnd/htag/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x127_20","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x127_20","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"type_tag": "std/core/hnd/htag","clauses": [{"tag": "std/core/hnd/Htag","params": [{"op": "Var","id": "@\"tagname\"59","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tagname\"59","type": {"op": "String"}},"annotation": "genTest: normal: (tag: string) -> {\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"59\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: tag"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x127_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}),(tag,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"59\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (tag: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tagname\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x127_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}: \"std/core/hnd/htag\".\"std/core/hnd/Htag\"(({\"op\": \"Var\",\"id\": \"@\\\"tagname\\\"59\",\"type\": {\"op\": \"String\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V)> fn(@pat-x127_20: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  (match (@pat-x127_20) {\n    ((@skip std/core/hnd/Htag((tag: string) : string) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n       -> tag;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/htag/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/htag/show"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-bind","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: next"}]},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>(next)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: next(x)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(x: a, next: (a) -> (e :: E) b){\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-extend<a,b,(e :: E)>(next);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> next(x);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-bind\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-bind"]}, {"name": {"op": "Var","id": "std/core/hnd/prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}, {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}, {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "result","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/guard","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/guard<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}]},"annotation": "genExpr: std/core/hnd/guard<(e :: E)>(w1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-prompt<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}]},"annotation": "genExpr: std/core/hnd/yield-prompt<a,(e :: E),a>(m)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/Pure","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "result","type": {"op": "Top"}},"annotation": "genExpr: result"}]},"annotation": "genExpr: ret(result)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/Pure\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/YieldingFinal","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/hnd/keep-yielding-final","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/keep-yielding-final<(e :: E),a>()"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/YieldingFinal\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/Yielding","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0'\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0'"]}, {"name": {"op": "Var","id": "w1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-eq","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-eq<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0'"}]},"annotation": "genExpr: std/core/hnd/evv-eq<(e :: E)>(w0, w0')"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x61","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-insert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}]},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0', ev)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x61\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/evv-eq<(e :: E)>(w0, w0'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> w1;\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0', ev);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w1'\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w1'"]}, {"name": {"op": "Var","id": "_@1","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1'"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w1')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@1\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@1"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: cont(res)"}]},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0', w1', ev, m, ret, (cont(res)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (4980 :: E) 4979, res: a){\n  val w0' : (hnd/evv :: E -> V)<(e :: E)>;\n  val w1' : (hnd/evv :: E -> V)<(e :: E)>;\n  val _@1 : ();\n  std/core/hnd/prompt<b,(e :: E),(b :: (E, V) -> V),b>(w0', w1', ev, m, ret, (cont(res)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (4980 :: E) 4979, res: a){\n  val w0' : (hnd/evv :: E -> V)<(e :: E)>;\n  val w1' : (hnd/evv :: E -> V)<(e :: E)>;\n  val _@1 : ();\n  std/core/hnd/prompt<b,(e :: E),(b :: (E, V) -> V),b>(w0', w1', ev, m, ret, (cont(res)));\n}))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/Yielding\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x60","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"type_tag": "std/core/hnd/yld","clauses": [{"tag": "std/core/hnd/Yield","params": [{"op": "Var","id": "@\"clause\"61","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "@\"cont\"62","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"61","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (clause: ((hnd/resume-result<4779,4982>) -> 4980 4982) -> 4980 4982) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"61\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: clause"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}},"type_tag": "std/core/hnd/resume-result","clauses": [{"tag": "std/core/hnd/Deep","params": [{"op": "Var","id": "@\"result\"63","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@0'\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@0'"]}, {"name": {"op": "Var","id": "w1@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-eq","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-eq<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0'"}]},"annotation": "genExpr: std/core/hnd/evv-eq<(e :: E)>(w0, w0@0')"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x64","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-insert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}]},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0@0', ev)"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/evv-eq<(e :: E)>(w0, w0@0'))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> w1;\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0@0', ev);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w1@0'\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w1@0'"]}, {"name": {"op": "Var","id": "_@2","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w1@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1@0'"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w1@0')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@2\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@2"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w1@0'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1@0'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"cont\"62","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (cont@0: (() -> 4779) -> 4980 4979) -> {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: cont@0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"63","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 4779) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"63\",\"type\": {\"op\": \"Top\"}}"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  x;\n}"}]},"annotation": "genExpr: cont@0((fn(){\n  x;\n}))"}]},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@0', w1@0', ev, m, ret, (cont@0((fn(){\n    x;\n  }))))"}},"annotation": "genExpr: val w0@0' : (hnd/evv :: E -> V)<(e :: E)>;\nval w1@0' : (hnd/evv :: E -> V)<(e :: E)>;\nval _@2 : ();\nstd/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@0', w1@0', ev, m, ret, (cont@0((fn(){\n    x;\n  }))))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"63\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4779) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}: \"std/core/hnd/resume-result\".\"std/core/hnd/Deep\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"63\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}},"type_tag": "std/core/hnd/resume-result","clauses": [{"tag": "std/core/hnd/Shallow","params": [{"op": "Var","id": "@\"result\"64","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@1@10006","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"cont\"62","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (cont@0: (() -> 4779) -> 4980 4979) -> {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: cont@0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"64","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: 4779) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"64\",\"type\": {\"op\": \"Top\"}}"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  x@0;\n}"}]},"annotation": "genExpr: cont@0((fn(){\n  x@0;\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@1@10006\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x@1@10006"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}]},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>(ret)"}}]},"annotation": "genBranch: [(@pat@9,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@1@10006","type": {"op": "Top"}},"annotation": "genExpr: x@1@10006"}]},"annotation": "genExpr: ret(x@1@10006)"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/yielding())) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> std/core/hnd/yield-extend<a,a,(e :: E)>(ret);\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> ret(x@1@10006);\n}"}},"annotation": "genExpr: val x@1@10006 : a\n      = cont@0((fn(){\n        x@0;\n      }));\nmatch ((std/core/hnd/yielding())) {\n  ((std/core/types/True() : bool ) as @pat@9: bool)\n     -> std/core/hnd/yield-extend<a,a,(e :: E)>(ret);\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> ret(x@1@10006);\n}"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"64\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 4779) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}: \"std/core/hnd/resume-result\".\"std/core/hnd/Shallow\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"64\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}},"type_tag": "std/core/hnd/resume-result","clauses": [{"tag": "std/core/hnd/Finalize","params": [{"op": "Var","id": "@\"result\"65","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@1'\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@1'"]}, {"name": {"op": "Var","id": "w1@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x66","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-eq","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-eq<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@1'"}]},"annotation": "genExpr: std/core/hnd/evv-eq<(e :: E)>(w0, w0@1')"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x66","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}}]},"annotation": "genBranch: [(@pat@10,{\"op\": \"Var\",\"id\": \"@x66\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x66","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-insert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@1'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}]},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0@1', ev)"}}]},"annotation": "genBranch: [(@pat@11,{\"op\": \"Var\",\"id\": \"@x66\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/evv-eq<(e :: E)>(w0, w0@1'))) {\n  ((std/core/types/True() : bool ) as @pat@10: bool)\n     -> w1;\n  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n     -> std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0@1', ev);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w1@1'\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w1@1'"]}, {"name": {"op": "Var","id": "_@3","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w1@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1@1'"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w1@1')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@3\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@3"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@1'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w1@1'","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1@1'"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"cont\"62","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (cont@0: (() -> 4779) -> 4980 4979) -> {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: cont@0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x432_85","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"65","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1@0: 4982) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}}"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n  x@1@0;\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n    x@1@0;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n      x@1@0;\n    }));\n}"}]},"annotation": "genExpr: cont@0((fn(){\n  (std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n      x@1@0;\n    })));\n}))"}]},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@1', w1@1', ev, m, ret, (cont@0((fn(){\n    (std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n        x@1@0;\n      })));\n  }))))"}},"annotation": "genExpr: val w0@1' : (hnd/evv :: E -> V)<(e :: E)>;\nval w1@1' : (hnd/evv :: E -> V)<(e :: E)>;\nval _@3 : ();\nstd/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@1', w1@1', ev, m, ret, (cont@0((fn(){\n    (std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n        x@1@0;\n      })));\n  }))))"}}]},"annotation": "genBranch: [(@pat@9@0,{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: 4982) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}}: \"std/core/hnd/resume-result\".\"std/core/hnd/Finalize\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(r: (hnd/resume-result :: (V, V) -> V)<4779,4982>){\n  match (r) {\n    ((std/core/hnd/Deep((x: 4779) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat@5: ((hnd/resume-result :: (V, V) -> V)<4779,4982>))\n       -> val w0@0' : (hnd/evv :: E -> V)<(e :: E)>;\n          val w1@0' : (hnd/evv :: E -> V)<(e :: E)>;\n          val _@2 : ();\n      std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@0', w1@0', ev, m, ret, (cont@0((fn(){\n          x;\n        }))));\n    ((std/core/hnd/Shallow((x@0: 4779) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat@8: ((hnd/resume-result :: (V, V) -> V)<4779,4982>))\n       -> val x@1@10006 : a\n                = cont@0((fn(){\n                  x@0;\n                }));\n      (match ((std/core/hnd/yielding())) {\n        ((std/core/types/True() : bool ) as @pat@9: bool)\n           -> std/core/hnd/yield-extend<a,a,(e :: E)>(ret);\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> ret(x@1@10006);\n      });\n    ((@skip std/core/hnd/Finalize((x@1@0: 4982) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat@9@0: ((hnd/resume-result :: (V, V) -> V)<4779,4982>))\n       -> val w0@1' : (hnd/evv :: E -> V)<(e :: E)>;\n          val w1@1' : (hnd/evv :: E -> V)<(e :: E)>;\n          val _@3 : ();\n      std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@1', w1@1', ev, m, ret, (cont@0((fn(){\n          (std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n              x@1@0;\n            })));\n        }))));\n  };\n}"}]},"annotation": "genExpr: clause((fn<(e :: E)>(r: (hnd/resume-result :: (V, V) -> V)<4779,4982>){\n  (match (r) {\n    ((std/core/hnd/Deep((x: 4779) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat@5: ((hnd/resume-result :: (V, V) -> V)<4779,4982>))\n       -> val w0@0' : (hnd/evv :: E -> V)<(e :: E)>;\n          val w1@0' : (hnd/evv :: E -> V)<(e :: E)>;\n          val _@2 : ();\n      std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@0', w1@0', ev, m, ret, (cont@0((fn(){\n          x;\n        }))));\n    ((std/core/hnd/Shallow((x@0: 4779) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat@8: ((hnd/resume-result :: (V, V) -> V)<4779,4982>))\n       -> val x@1@10006 : a\n                = cont@0((fn(){\n                  x@0;\n                }));\n      (match ((std/core/hnd/yielding())) {\n        ((std/core/types/True() : bool ) as @pat@9: bool)\n           -> std/core/hnd/yield-extend<a,a,(e :: E)>(ret);\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> ret(x@1@10006);\n      });\n    ((@skip std/core/hnd/Finalize((x@1@0: 4982) : a) : (hnd/resume-result :: (V, V) -> V)<a,b> ) as @pat@9@0: ((hnd/resume-result :: (V, V) -> V)<4779,4982>))\n       -> val w0@1' : (hnd/evv :: E -> V)<(e :: E)>;\n          val w1@1' : (hnd/evv :: E -> V)<(e :: E)>;\n          val _@3 : ();\n      std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0@1', w1@1', ev, m, ret, (cont@0((fn(){\n          (std/core/hnd/yield-to-final<a,(total :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<4779,4982>) -> (4980 :: E) 4982){\n              x@1@0;\n            })));\n        }))));\n  });\n}))"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}),(clause,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"61\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (clause: ((hnd/resume-result<4779,4982>) -> 4980 4982) -> 4980 4982) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"}),(cont@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (cont@0: (() -> 4779) -> 4980 4979) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"cont\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Function\\\",\\\"params\\\": [],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x60\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yld\"}}: \"std/core/hnd/yld\".\"std/core/hnd/Yield\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"61\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}, {\"op\": \"Var\",\"id\": \"@\\\"cont\\\"62\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(b :: (E, V) -> V),c> fn<(e :: E)>(w0: (hnd/evv :: E -> V)<(e :: E)>, w1: (hnd/evv :: E -> V)<(e :: E)>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, m: (hnd/marker :: (E, V) -> V)<(e :: E),c>, ret: (a) -> (e :: E) c, result: a){\n  val _ : ();\n  val _@0 : ();\n  (match ((std/core/hnd/yield-prompt<a,(e :: E),c>(m))) {\n    ((std/core/hnd/Pure() : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,c> ) as @pat: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,c>))\n       -> ret(result);\n    ((std/core/hnd/YieldingFinal() : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,c> ) as @pat@0: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,c>))\n       -> std/core/hnd/keep-yielding-final<(e :: E),c>();\n    ((std/core/hnd/Yielding() : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,c> ) as @pat@1: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,c>))\n       -> std/core/hnd/yield-cont<a,(e :: E),c>((forall<d> fn<(e :: E)>(cont: (d) -> (e :: E) a, res: d){\n        val w0' : (hnd/evv :: E -> V)<(e :: E)>;\n        val w1' : (hnd/evv :: E -> V)<(e :: E)>;\n        val _@1 : ();\n        std/core/hnd/prompt<a,(e :: E),(b :: (E, V) -> V),c>(w0', w1', ev, m, ret, (cont(res)));\n      }));\n    ((@skip std/core/hnd/Yield<d>((clause: (((hnd/resume-result :: (V, V) -> V)<d,c>) -> (e :: E) c) -> (e :: E) c) : (((hnd/resume-result :: (V, V) -> V)<d,c>) -> (e :: E) c) -> (e :: E) c, (cont@0: (() -> d) -> (e :: E) a) : (() -> d) -> (e :: E) a) : (hnd/yld :: (E, V, V) -> V)<(e :: E),a,c> ) as @pat@4: ((hnd/yld :: (E, V, V) -> V)<(e :: E),a,c>))\n       -> clause((fn<(e :: E)>(r: (hnd/resume-result :: (V, V) -> V)<d,c>){\n        (match (r) {\n          ((std/core/hnd/Deep((x: d) : d) : (hnd/resume-result :: (V, V) -> V)<d,c> ) as @pat@5: ((hnd/resume-result :: (V, V) -> V)<d,c>))\n             -> val w0@0' : (hnd/evv :: E -> V)<(e :: E)>;\n                val w1@0' : (hnd/evv :: E -> V)<(e :: E)>;\n                val _@2 : ();\n            std/core/hnd/prompt<a,(e :: E),(b :: (E, V) -> V),c>(w0@0', w1@0', ev, m, ret, (cont@0((fn(){\n                x;\n              }))));\n          ((std/core/hnd/Shallow((x@0: d) : d) : (hnd/resume-result :: (V, V) -> V)<d,c> ) as @pat@8: ((hnd/resume-result :: (V, V) -> V)<d,c>))\n             -> val x@1@10006 : a\n                      = cont@0((fn(){\n                        x@0;\n                      }));\n            (match ((std/core/hnd/yielding())) {\n              ((std/core/types/True() : bool ) as @pat@9: bool)\n                 -> std/core/hnd/yield-extend<a,c,(e :: E)>(ret);\n              ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n                 -> ret(x@1@10006);\n            });\n          ((@skip std/core/hnd/Finalize((x@1@0: c) : c) : (hnd/resume-result :: (V, V) -> V)<d,c> ) as @pat@9@0: ((hnd/resume-result :: (V, V) -> V)<d,c>))\n             -> val w0@1' : (hnd/evv :: E -> V)<(e :: E)>;\n                val w1@1' : (hnd/evv :: E -> V)<(e :: E)>;\n                val _@3 : ();\n            std/core/hnd/prompt<a,(e :: E),(b :: (E, V) -> V),c>(w0@1', w1@1', ev, m, ret, (cont@0((fn(){\n                (std/core/hnd/yield-to-final<d,(total :: E),(e :: E),c>(m, (fn<(e :: E)>(@_wildcard-x432_85: ((hnd/resume-result :: (V, V) -> V)<d,c>) -> (e :: E) c){\n                    x@1@0;\n                  })));\n              }))));\n        });\n      }));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/prompt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/prompt"]}, {"name": {"op": "Var","id": "std/core/hnd/@hhandle-vm","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "h","type": {"op": "Top"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/fresh-marker","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/fresh-marker<a,(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/fresh-marker<a,(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"export_as": ["m"]}, {"name": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Ev","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "tag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: tag"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "h","type": {"op": "Top"}},"annotation": "genExpr: h"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}]},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>(tag, m, h, w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev"]}, {"name": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-insert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}]},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(e :: E),(a :: (E, V) -> V)>(w0, ev)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w1"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0, w1, ev, m, ret, (action()))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> fn<(e :: E)>(tag: (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, h: (b :: (E, V) -> V)<(e :: E),c>, ret: (a) -> (e :: E) c, action: () -> (e1 :: E) a){\n  val w0 : (hnd/evv :: E -> V)<(e :: E)>;\n  val m : (hnd/marker :: (E, V) -> V)<(e :: E),c>;\n  val ev : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>;\n  val w1 : (hnd/evv :: E -> V)<(e :: E)>;\n  val _ : ();\n  std/core/hnd/prompt<a,(e :: E),(b :: (E, V) -> V),c>(w0, w1, ev, m, ret, (action()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@hhandle-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@hhandle-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "h","type": {"op": "Top"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/fresh-marker","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/fresh-marker<a,(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/fresh-marker<a,(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"export_as": ["m"]}, {"name": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-insert","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(_e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Ev","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "tag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: tag"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "h","type": {"op": "Top"}},"annotation": "genExpr: h"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}]},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>(tag, m, h, w0)"}]},"annotation": "genExpr: std/core/hnd/evv-insert<(e :: E),(_e :: E),(a :: (E, V) -> V)>(w0, (std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>(tag, m, h, w0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w1"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "res","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/@reset-vm","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@reset-vm<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@reset-vm<a,(e :: E),a>(m, ret, action)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"res\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["res"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "Var","id": "res","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> fn<(e :: E)>(tag: (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, h: (b :: (E, V) -> V)<(e :: E),c>, ret: (a) -> (e :: E) c, action: () -> (e1 :: E) a){\n  val w0 : (hnd/evv :: E -> V)<(e :: E)>;\n  val m : (hnd/marker :: (E, V) -> V)<(e :: E),c>;\n  val w1 : (hnd/evv :: E -> V)<(_e2 :: E)>;\n  val _ : ();\n  val res : c;\n  val _@0 : ();\n  res;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@hhandle\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@hhandle"]}, {"name": {"op": "Var","id": "std/core/hnd/mask-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "behind","type": {"op": "Bool"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-delete","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-delete<(_e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "behind","type": {"op": "Bool"}},"annotation": "genExpr: behind"}]},"annotation": "genExpr: std/core/hnd/evv-swap-delete<(_e :: E),(e :: E)>(i, behind)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: action(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/mask-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/mask-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "behind","type": {"op": "Bool"}},"annotation": "genExpr: behind"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/mask-at1<a,a,(e :: E),(e :: E)>(i, behind, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (5330 :: E) 5328, res: a){\n  std/core/hnd/mask-at1<a,b,(e :: E),(e :: E)>(i, behind, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (5330 :: E) 5328, res: a){\n  std/core/hnd/mask-at1<a,b,(e :: E),(e :: E)>(i, behind, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, behind: bool, action: (a) -> (e :: E) b, x: a){\n  val w0 : (hnd/evv :: E -> V)<(_e2 :: E)>;\n  val y : b;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<b,(e1 :: E),b>((forall<c> fn<(e1 :: E)>(cont: (c) -> (e1 :: E) b, res: c){\n        std/core/hnd/mask-at1<c,b,(e1 :: E),(e1 :: E)>(i, behind, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/mask-at1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Bool\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/mask-at1"]}, {"name": {"op": "Var","id": "std/core/hnd/@mask-at","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "behind","type": {"op": "Bool"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-delete","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-delete<(_e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "behind","type": {"op": "Bool"}},"annotation": "genExpr: behind"}]},"annotation": "genExpr: std/core/hnd/evv-swap-delete<(_e :: E),(e :: E)>(i, behind)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/mask-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Bool"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/mask-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "behind","type": {"op": "Bool"}},"annotation": "genExpr: behind"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/mask-at1<a,a,(e :: E),(e :: E)>(i, behind, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (5429 :: E) 5427, res: a){\n  std/core/hnd/mask-at1<a,b,(e :: E),(e :: E)>(i, behind, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (5429 :: E) 5427, res: a){\n  std/core/hnd/mask-at1<a,b,(e :: E),(e :: E)>(i, behind, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, behind: bool, action: () -> (e :: E) a){\n  val w0 : (hnd/evv :: E -> V)<(_e2 :: E)>;\n  val x : a;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<a,(e1 :: E),a>((forall<b> fn<(e1 :: E)>(cont: (b) -> (e1 :: E) a, res: b){\n        std/core/hnd/mask-at1<b,a,(e1 :: E),(e1 :: E)>(i, behind, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@mask-at\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Bool\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@mask-at"]}, {"name": {"op": "Var","id": "std/core/hnd/@named-handle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "h","type": {"op": "Top"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/fresh-marker-named","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/fresh-marker-named<a,(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/fresh-marker-named<a,(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"export_as": ["m"]}, {"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Ev","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "tag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: tag"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "h","type": {"op": "Top"}},"annotation": "genExpr: h"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}]},"annotation": "genExpr: std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),a>(tag, m, h, w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}]},"annotation": "genExpr: action(ev)"}]},"annotation": "genExpr: std/core/hnd/prompt<a,(e :: E),(a :: (E, V) -> V),a>(w0, w0, ev, m, ret, (action(ev)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> fn<(e :: E)>(tag: (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, h: (b :: (E, V) -> V)<(e :: E),c>, ret: (a) -> (e :: E) c, action: ((hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a){\n  val m : (hnd/marker :: (E, V) -> V)<(e :: E),c>;\n  val w0 : (hnd/evv :: E -> V)<(e :: E)>;\n  val ev : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>;\n  std/core/hnd/prompt<a,(e :: E),(b :: (E, V) -> V),c>(w0, w0, ev, m, ret, (action(ev)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@named-handle\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@named-handle"]}, {"name": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate1\" (fun Effectful (int) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create1<(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>(i, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (5634 :: E) 5632, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (5634 :: E) 5632, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, f: (a) -> (e :: E) b, x: a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : b;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<b,(e1 :: E),b>((forall<c> fn<(e1 :: E)>(cont: (c) -> (e1 :: E) b, res: c){\n        std/core/hnd/open-at1<c,b,(e1 :: E),(e1 :: E)>(i, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/open-at1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/open-at1"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate1\" (fun Effectful (int) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create1<(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": []},"annotation": "genExpr: f()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>(i, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (5728 :: E) 5726, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (5728 :: E) 5726, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, f: () -> (e :: E) a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : a;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<a,(e1 :: E),a>((forall<b> fn<(e1 :: E)>(cont: (b) -> (e1 :: E) a, res: b){\n        std/core/hnd/open-at1<b,a,(e1 :: E),(e1 :: E)>(i, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-at0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-at0"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate1\" (fun Effectful (int) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create1<(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>(i, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (5827 :: E) 5825, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (5827 :: E) 5825, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, f: (a) -> (e :: E) b, x: a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : b;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<b,(e1 :: E),b>((forall<c> fn<(e1 :: E)>(cont: (c) -> (e1 :: E) b, res: c){\n        std/core/hnd/open-at1<c,b,(e1 :: E),(e1 :: E)>(i, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-at1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-at1"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-at2","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate1\" (fun Effectful (int) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create1<(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: f(x1, x2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>(i, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (5937 :: E) 5935, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (5937 :: E) 5935, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, f: (a, b) -> (e :: E) c, x1: a, x2: b){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : c;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<c,(e1 :: E),c>((forall<d> fn<(e1 :: E)>(cont: (d) -> (e1 :: E) c, res: d){\n        std/core/hnd/open-at1<d,c,(e1 :: E),(e1 :: E)>(i, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-at2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-at2"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-at3","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate1\" (fun Effectful (int) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create1<(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}]},"annotation": "genExpr: f(x1, x2, x3)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>(i, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6058 :: E) 6056, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6058 :: E) 6056, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, f: (a, b, c) -> (e :: E) d, x1: a, x2: b, x3: c){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : d;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<d,(e1 :: E),d>((forall<a1> fn<(e1 :: E)>(cont: (a1) -> (e1 :: E) d, res: a1){\n        std/core/hnd/open-at1<a1,d,(e1 :: E),(e1 :: E)>(i, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-at3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-at3"]}, {"name": {"op": "Var","id": "std/core/hnd/@open-at4","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}, {"op": "Var","id": "x4","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"evvSwapCreate1\" (fun Effectful (int) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap-create1<(e :: E)>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x4","type": {"op": "Top"}},"annotation": "genExpr: x4"}]},"annotation": "genExpr: f(x1, x2, x3, x4)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open-at1<a,a,(e :: E),(e :: E)>(i, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6190 :: E) 6188, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6190 :: E) 6188, res: a){\n  std/core/hnd/open-at1<a,b,(e :: E),(e :: E)>(i, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(e1 :: E)> fn<(e1 :: E)>(i: hnd/ev-index, f: (a, b, c, d) -> (e :: E) a1, x1: a, x2: b, x3: c, x4: d){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : a1;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<a1,(e1 :: E),a1>((forall<b1> fn<(e1 :: E)>(cont: (b1) -> (e1 :: E) a1, res: b1){\n        std/core/hnd/open-at1<b1,a1,(e1 :: E),(e1 :: E)>(i, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open-at4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open-at4"]}, {"name": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}]},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>(indices)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>(indices, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6307 :: E) 6305, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6307 :: E) 6305, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn<(e1 :: E)>(indices: (vector :: V -> V)<hnd/ev-index>, f: (a) -> (e :: E) b, x: a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : b;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<b,(e1 :: E),b>((forall<c> fn<(e1 :: E)>(cont: (c) -> (e1 :: E) b, res: c){\n        std/core/hnd/open1<c,b,(e1 :: E),(e1 :: E)>(indices, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/open1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/open1"]}, {"name": {"op": "Var","id": "std/core/hnd/@open0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}]},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>(indices)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": []},"annotation": "genExpr: f()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>(indices, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6401 :: E) 6399, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6401 :: E) 6399, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E)> fn<(e1 :: E)>(indices: (vector :: V -> V)<hnd/ev-index>, f: () -> (e :: E) a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : a;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<a,(e1 :: E),a>((forall<b> fn<(e1 :: E)>(cont: (b) -> (e1 :: E) a, res: b){\n        std/core/hnd/open1<b,a,(e1 :: E),(e1 :: E)>(indices, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open0"]}, {"name": {"op": "Var","id": "std/core/hnd/@open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}]},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>(indices)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>(indices, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6500 :: E) 6498, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6500 :: E) 6498, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E)> fn<(e1 :: E)>(indices: (vector :: V -> V)<hnd/ev-index>, f: (a) -> (e :: E) b, x: a){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : b;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<b,(e1 :: E),b>((forall<c> fn<(e1 :: E)>(cont: (c) -> (e1 :: E) b, res: c){\n        std/core/hnd/open1<c,b,(e1 :: E),(e1 :: E)>(indices, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open1"]}, {"name": {"op": "Var","id": "std/core/hnd/@open2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}]},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>(indices)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: f(x1, x2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>(indices, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6610 :: E) 6608, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6610 :: E) 6608, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(e1 :: E)> fn<(e1 :: E)>(indices: (vector :: V -> V)<hnd/ev-index>, f: (a, b) -> (e :: E) c, x1: a, x2: b){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : c;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<c,(e1 :: E),c>((forall<d> fn<(e1 :: E)>(cont: (d) -> (e1 :: E) c, res: d){\n        std/core/hnd/open1<d,c,(e1 :: E),(e1 :: E)>(indices, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open2"]}, {"name": {"op": "Var","id": "std/core/hnd/@open3","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}]},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>(indices)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}]},"annotation": "genExpr: f(x1, x2, x3)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>(indices, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6731 :: E) 6729, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6731 :: E) 6729, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(e1 :: E)> fn<(e1 :: E)>(indices: (vector :: V -> V)<hnd/ev-index>, f: (a, b, c) -> (e :: E) d, x1: a, x2: b, x3: c){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : d;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<d,(e1 :: E),d>((forall<a1> fn<(e1 :: E)>(cont: (a1) -> (e1 :: E) d, res: a1){\n        std/core/hnd/open1<a1,d,(e1 :: E),(e1 :: E)>(indices, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open3"]}, {"name": {"op": "Var","id": "std/core/hnd/@open4","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}, {"op": "Var","id": "x4","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-swap-create","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}]},"annotation": "genExpr: std/core/hnd/evv-swap-create<(e :: E)>(indices)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x4","type": {"op": "Top"}},"annotation": "genExpr: x4"}]},"annotation": "genExpr: f(x1, x2, x3, x4)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/open1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "indices","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: indices"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/open1<a,a,(e :: E),(e :: E)>(indices, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (6863 :: E) 6861, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (6863 :: E) 6861, res: a){\n  std/core/hnd/open1<a,b,(e :: E),(e :: E)>(indices, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(e1 :: E)> fn<(e1 :: E)>(indices: (vector :: V -> V)<hnd/ev-index>, f: (a, b, c, d) -> (e :: E) a1, x1: a, x2: b, x3: c, x4: d){\n  val w : (hnd/evv :: E -> V)<(e1 :: E)>;\n  val y : a1;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<a1,(e1 :: E),a1>((forall<b1> fn<(e1 :: E)>(cont: (b1) -> (e1 :: E) a1, res: b1){\n        std/core/hnd/open1<b1,a1,(e1 :: E),(e1 :: E)>(indices, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@open4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@open4"]}, {"name": {"op": "Var","id": "std/core/hnd/@perform3","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"66","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"67","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"68","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"69","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x70","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: op<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"68","type": {"op": "Top"}},"annotation": "genTest: normal: (h: 6957<3931,3932>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: h"}]},"annotation": "genExpr: op<(e :: E),a>(h)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x70","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"71","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"71","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3931,3932>, hnd/ev<6957>, (6952, 6953, 6954)) -> 3931 6955) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"71\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"67","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3931,3932>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple3","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}]},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>(x1, x2, x3)"}]},"annotation": "genExpr: f(m, ev, (std/core/types/Tuple3<a,a,a>(x1, x2, x3)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"71\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3931,3932>, hnd/ev<6957>, (6952, 6953, 6954)) -> 3931 6955) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"71\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((op<(e :: E),a>(h))) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3931 :: E),3932>, (hnd/ev :: ((E, V) -> V) -> V)<(6957 :: (E, V) -> V)>, (6952, 6953, 6954)) -> (3931 :: E) 6955) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, (b, c, d)) -> (e :: E) a1) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),a> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(6952, 6953, 6954),6955,(6957 :: (E, V) -> V),(3931 :: E),3932>))\n     -> f(m, ev, (std/core/types/Tuple3<a,a,a>(x1, x2, x3)));\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<6957>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3931,3932>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: 6957<3931,3932>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3931>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, op: forall<(e1 :: E),b1> ((a1 :: (E, V) -> V)<(e1 :: E),b1>) -> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e1 :: E),b1>, x1: a, x2: b, x3: c){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),b1>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),b1>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),b1>, (h: (a1 :: (E, V) -> V)<(e1 :: E),b1>) : (a1 :: (E, V) -> V)<(e1 :: E),b1>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>))\n       -> (match ((op<(e1 :: E),b1>(h))) {\n        ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),b1>, (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, (a, b, c)) -> (e1 :: E) d) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),b1>, (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, (a, b, c)) -> (e1 :: E) d) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e1 :: E),b1> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e1 :: E),b1>))\n           -> f(m, ev, (std/core/types/Tuple3<a,b,c>(x1, x2, x3)));\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@perform3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@perform3"]}, {"name": {"op": "Var","id": "std/core/hnd/@perform4","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}, {"op": "Var","id": "x4","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"72","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"73","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"74","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"75","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x76","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: op<(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"74","type": {"op": "Top"}},"annotation": "genTest: normal: (h: 7058<3931,3932>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"74\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: h"}]},"annotation": "genExpr: op<(e :: E),a>(h)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x76","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"77","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"77","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<3931,3932>, hnd/ev<7058>, (7052, 7053, 7054, 7055)) -> 3931 7056) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"77\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"73","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<3931,3932>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple4","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x4","type": {"op": "Top"}},"annotation": "genExpr: x4"}]},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>(x1, x2, x3, x4)"}]},"annotation": "genExpr: f(m, ev, (std/core/types/Tuple4<a,a,a,a>(x1, x2, x3, x4)))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"77\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<3931,3932>, hnd/ev<7058>, (7052, 7053, 7054, 7055)) -> 3931 7056) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"77\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((op<(e :: E),a>(h))) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(3931 :: E),3932>, (hnd/ev :: ((E, V) -> V) -> V)<(7058 :: (E, V) -> V)>, (7052, 7053, 7054, 7055)) -> (3931 :: E) 7056) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(c1 :: (E, V) -> V)>, (b, c, d, a1)) -> (e :: E) b1) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(b, c, d, a1),b1,(c1 :: (E, V) -> V),(e :: E),a> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(7052, 7053, 7054, 7055),7056,(7058 :: (E, V) -> V),(3931 :: E),3932>))\n     -> f(m, ev, (std/core/types/Tuple4<a,a,a,a>(x1, x2, x3, x4)));\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<7058>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<3931,3932>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: 7058<3931,3932>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<3931>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"72\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"74\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, op: forall<(e1 :: E),c1> ((b1 :: (E, V) -> V)<(e1 :: E),c1>) -> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e1 :: E),c1>, x1: a, x2: b, x3: c, x4: d){\n  (match (ev) {\n    ((@skip std/core/hnd/Ev<(e1 :: E),c1>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),c1>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),c1>, (h: (b1 :: (E, V) -> V)<(e1 :: E),c1>) : (b1 :: (E, V) -> V)<(e1 :: E),c1>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>))\n       -> (match ((op<(e1 :: E),c1>(h))) {\n        ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),c1>, (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, (a, b, c, d)) -> (e1 :: E) a1) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),c1>, (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, (a, b, c, d)) -> (e1 :: E) a1) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e1 :: E),c1> ) as @pat@2: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e1 :: E),c1>))\n           -> f(m, ev, (std/core/types/Tuple4<a,b,c,d>(x1, x2, x3, x4)));\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@perform4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@perform4"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/evv-get","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/evv-get<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "r","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/@yield-to-prim-vm","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@yield-to-prim-vm<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}]},"annotation": "genExpr: std/core/hnd/@yield-to-prim-vm<a,(e :: E),(e :: E),a>(m, clause)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["r"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Var","id": "r","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),b>, clause: ((a) -> (e :: E) b) -> (e :: E) b){\n  val w0 : (hnd/evv :: E -> V)<(e :: E)>;\n  val r : a;\n  val _ : ();\n  r;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-to\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-to"]}, {"name": {"op": "Var","id": "std/core/hnd/@yield-to-vm","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "g","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-prim","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-prim<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}]},"annotation": "genExpr: std/core/hnd/yield-to-prim<a,(e :: E),(e :: E),a>(m, clause)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"g\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["g"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<() -> (e :: E) a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": []},"annotation": "genExpr: f()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(f: () -> (7175 :: E) 7174){\n  f();\n}"}]},"annotation": "genExpr: std/core/hnd/yield-extend<() -> (e :: E) a,a,(e :: E)>((fn<(e :: E)>(f: () -> (7175 :: E) 7174){\n  (f());\n}))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),b>, clause: (((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) -> (e :: E) b){\n  val g : () -> a\n        = std/core/hnd/yield-to-prim<a,(e :: E),(e :: E),b>(m, clause);\n  std/core/hnd/yield-extend<() -> (e :: E) a,a,(e :: E)>((fn<(e :: E)>(f: () -> (e :: E) a){\n    (f());\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@yield-to-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@yield-to-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control-raw0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x722_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Resume-context","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)"}]},"annotation": "genExpr: op((std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7248,7252>) -> (7249 :: E) 7252){\n  op((std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7248,7252>) -> (7249 :: E) 7252){\n    (op((std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7249 :: E),7252>, @_wildcard-x722_16: (hnd/ev :: ((E, V) -> V) -> V)<(7251 :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7248,7252>) -> (7249 :: E) 7252){\n      (op((std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7249 :: E),7252>, @_wildcard-x722_16: (hnd/ev :: ((E, V) -> V) -> V)<(7251 :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7248,7252>) -> (7249 :: E) 7252){\n      (op((std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> fn(op: ((hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),c>) -> (e :: E) c){\n  std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x722_16: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,(e :: E),c>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a,c>) -> (e :: E) c){\n        (op((std/core/hnd/Resume-context<a,(e :: E),(e1 :: E),c>(k))));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control-raw0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control-raw0"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control-raw1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x648_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Resume-context","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)"}]},"annotation": "genExpr: op(x, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7339,7343>) -> (7340 :: E) 7343){\n  op(x, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7339,7343>) -> (7340 :: E) 7343){\n    (op(x, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7340 :: E),7343>, @_wildcard-x648_16: (hnd/ev :: ((E, V) -> V) -> V)<(7342 :: (E, V) -> V)>, x: 7338){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7339,7343>) -> (7340 :: E) 7343){\n      (op(x, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7340 :: E),7343>, @_wildcard-x648_16: (hnd/ev :: ((E, V) -> V) -> V)<(7342 :: (E, V) -> V)>, x: 7338){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7339,7343>) -> (7340 :: E) 7343){\n      (op(x, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(e1 :: E),(c :: (E, V) -> V),d> fn(op: (x : a, r : (hnd/resume-context :: (V, E, E, V) -> V)<b,(e :: E),(e1 :: E),d>) -> (e :: E) d){\n  std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),d>, @_wildcard-x648_16: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, x: a){\n    (std/core/hnd/yield-to<b,(e :: E),d>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<b,d>) -> (e :: E) d){\n        (op(x, (std/core/hnd/Resume-context<b,(e :: E),(e1 :: E),d>(k))));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control-raw1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control-raw1"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control-raw2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x773_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Resume-context","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)"}]},"annotation": "genExpr: op(x1, x2, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7441,7445>) -> (7442 :: E) 7445){\n  op(x1, x2, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7441,7445>) -> (7442 :: E) 7445){\n    (op(x1, x2, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7442 :: E),7445>, @_wildcard-x773_16: (hnd/ev :: ((E, V) -> V) -> V)<(7444 :: (E, V) -> V)>, x1: 7439, x2: 7440){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7441,7445>) -> (7442 :: E) 7445){\n      (op(x1, x2, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7442 :: E),7445>, @_wildcard-x773_16: (hnd/ev :: ((E, V) -> V) -> V)<(7444 :: (E, V) -> V)>, x1: 7439, x2: 7440){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7441,7445>) -> (7442 :: E) 7445){\n      (op(x1, x2, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k))));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(e1 :: E),(d :: (E, V) -> V),a1> fn(op: (x1 : a, x2 : b, r : (hnd/resume-context :: (V, E, E, V) -> V)<c,(e :: E),(e1 :: E),a1>) -> (e :: E) a1){\n  std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),a1>, @_wildcard-x773_16: (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, x1: a, x2: b){\n    (std/core/hnd/yield-to<c,(e :: E),a1>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<c,a1>) -> (e :: E) a1){\n        (op(x1, x2, (std/core/hnd/Resume-context<c,(e :: E),(e1 :: E),a1>(k))));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control-raw2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control-raw2"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control-raw3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x648_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"78","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"79","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"80","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"78","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 7528) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"78\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"79","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 7529) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"79\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"80","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 7530) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"80\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Resume-context","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)"}]},"annotation": "genExpr: op(x1, x2, x3, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"78\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 7528) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 7529) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"80\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 7530) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"78\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"79\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"80\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7531,7535>) -> (7532 :: E) 7535){\n  match (x) {\n    ((@skip std/core/types/Tuple3((x1: 7528) : a, (x2: 7529) : a, (x3: 7530) : a) : (a, b, c) ) as @pat: (7528, 7529, 7530))\n       -> op(x1, x2, x3, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7531,7535>) -> (7532 :: E) 7535){\n    (match (x) {\n      ((@skip std/core/types/Tuple3((x1: 7528) : a, (x2: 7529) : a, (x3: 7530) : a) : (a, b, c) ) as @pat: (7528, 7529, 7530))\n         -> op(x1, x2, x3, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7532 :: E),7535>, @_wildcard-x648_16: (hnd/ev :: ((E, V) -> V) -> V)<(7534 :: (E, V) -> V)>, x: (7528, 7529, 7530)){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7531,7535>) -> (7532 :: E) 7535){\n      (match (x) {\n        ((@skip std/core/types/Tuple3((x1: 7528) : a, (x2: 7529) : a, (x3: 7530) : a) : (a, b, c) ) as @pat: (7528, 7529, 7530))\n           -> op(x1, x2, x3, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n      });\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7532 :: E),7535>, @_wildcard-x648_16: (hnd/ev :: ((E, V) -> V) -> V)<(7534 :: (E, V) -> V)>, x: (7528, 7529, 7530)){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7531,7535>) -> (7532 :: E) 7535){\n      (match (x) {\n        ((@skip std/core/types/Tuple3((x1: 7528) : a, (x2: 7529) : a, (x3: 7530) : a) : (a, b, c) ) as @pat: (7528, 7529, 7530))\n           -> op(x1, x2, x3, (std/core/hnd/Resume-context<a,(e :: E),(e :: E),a>(k)));\n      });\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(e1 :: E),(a1 :: (E, V) -> V),b1> fn(op: (x1 : a, x2 : b, x3 : c, r : (hnd/resume-context :: (V, E, E, V) -> V)<d,(e :: E),(e1 :: E),b1>) -> (e :: E) b1){\n  std/core/hnd/Clause1<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),b1>, @_wildcard-x648_16: (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, x: (a, b, c)){\n    (std/core/hnd/yield-to<d,(e :: E),b1>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<d,b1>) -> (e :: E) b1){\n        (match (x) {\n          ((@skip std/core/types/Tuple3((x1: a) : a, (x2: b) : b, (x3: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n             -> op(x1, x2, x3, (std/core/hnd/Resume-context<d,(e :: E),(e1 :: E),b1>(k)));\n        });\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control-raw3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control-raw3"]}, {"name": {"op": "Var","id": "std/core/hnd/finalize","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "r","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"}},"type_tag": "std/core/hnd/resume-context","clauses": [{"tag": "std/core/hnd/Resume-context","params": [{"op": "Var","id": "@\"k\"81","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"k\"81","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (@x: (hnd/resume-result<7600,7603>) -> 7601 7603) -> {\"op\": \"Var\",\"id\": \"@\\\"k\\\"81\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: @x"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Finalize","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Finalize<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/hnd/Finalize<a,a>(x)"}]},"annotation": "genExpr: @x((std/core/hnd/Finalize<a,a>(x)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"k\\\"81\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (@x: (hnd/resume-result<7600,7603>) -> 7601 7603) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"k\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/resume-result\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}}: \"std/core/hnd/resume-context\".\"std/core/hnd/Resume-context\"(({\"op\": \"Var\",\"id\": \"@\\\"k\\\"81\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(r: (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x: b){\n  (match (r) {\n    ((@skip std/core/hnd/Resume-context((@x: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((hnd/resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))\n       -> @x((std/core/hnd/Finalize<a,b>(x)));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/finalize\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-context\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/finalize"]}, {"name": {"op": "Var","id": "std/core/hnd/protect-check","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}, {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "did-resume","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),bool,<(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>|(e :: E)>>(resumed)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"did-resume\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["did-resume"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "did-resume","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"did-resume\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "did-resume","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Finalize","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Finalize<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/Finalize<a,a>(res)"}]},"annotation": "genExpr: k((std/core/hnd/Finalize<a,a>(res)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"did-resume\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(resumed: (ref :: (H, V) -> V)<(global :: H),bool>, k: ((hnd/resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b, res: b){\n  val did-resume : bool\n        = std/core/types/ref/(!)<(global :: H),bool,<(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>|(e :: E)>>(resumed);\n  (match (did-resume) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> res;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> k((std/core/hnd/Finalize<a,b>(res)));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/protect-check\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/protect-check"]}, {"name": {"op": "Var","id": "std/core/hnd/@protect-vm","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<bool,(global :: H)>(std/core/types/False)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"resumed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["resumed"]}, {"name": {"op": "Var","id": "res","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ret","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}, {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<bool,(global :: H)>(resumed, std/core/types/True)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Deep","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Deep<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Top"}},"annotation": "genExpr: ret"}]},"annotation": "genExpr: std/core/hnd/Deep<a,a>(ret)"}]},"annotation": "genExpr: k((std/core/hnd/Deep<a,a>(ret)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(ret: 7816){\n  val _ : ()\n        = std/core/types/set<bool,(global :: H)>(resumed, std/core/types/True);\n  k((std/core/hnd/Deep<a,a>(ret)));\n}"}]},"annotation": "genExpr: clause(x, (fn<(e :: E)>(ret: 7816){\n    val _ : ()\n          = (std/core/types/set<bool,(global :: H)>(resumed, std/core/types/True));\n    (k((std/core/hnd/Deep<a,a>(ret))));\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"res\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["res"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xres","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect-check","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xres","type": {"op": "Top"}},"annotation": "genExpr: xres"}]},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, xres)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(xres: 7818){\n  std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, xres);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>((fn<(e :: E)>(xres: 7818){\n  (std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, xres));\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect-check","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, res)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),c> fn<(e :: E)>(x: a, clause: (x : a, k : (b) -> (e :: E) c) -> (e :: E) c, k: ((hnd/resume-result :: (V, V) -> V)<b,c>) -> (e :: E) c){\n  val resumed : (ref :: (H, V) -> V)<(global :: H),bool>;\n  val res : c;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-extend<c,c,(e :: E)>((fn<(e :: E)>(xres: c){\n        (std/core/hnd/protect-check<b,(e :: E),c>(resumed, k, xres));\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/hnd/protect-check<b,(e :: E),c>(resumed, k, res);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/@protect-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/@protect-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: r"}]},"annotation": "genExpr: op(r)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x730_55: (), r: (7891) -> (7892 :: E) 7894){\n  op(r);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,(e :: E),a>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (7891) -> (7892 :: E) 7894){\n    (op(r));\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7891,7894>) -> (7892 :: E) 7894){\n  std/core/hnd/protect<(),a,(e :: E),a>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (7891) -> (7892 :: E) 7894){\n      (op(r));\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7891,7894>) -> (7892 :: E) 7894){\n    (std/core/hnd/protect<(),a,(e :: E),a>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (7891) -> (7892 :: E) 7894){\n        (op(r));\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7892 :: E),7894>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(7893 :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7891,7894>) -> (7892 :: E) 7894){\n      (std/core/hnd/protect<(),a,(e :: E),a>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (7891) -> (7892 :: E) 7894){\n          (op(r));\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7892 :: E),7894>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(7893 :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7891,7894>) -> (7892 :: E) 7894){\n      (std/core/hnd/protect<(),a,(e :: E),a>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (7891) -> (7892 :: E) 7894){\n          (op(r));\n        }), k));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(b :: (E, V) -> V),c> fn(op: ((a) -> (e :: E) c) -> (e :: E) c){\n  std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,(e :: E),c>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a,c>) -> (e :: E) c){\n        (std/core/hnd/protect<(),a,(e :: E),c>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (a) -> (e :: E) c){\n            (op(r));\n          }), k));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control0"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x681_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<a,a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<a,a,(e :: E),a>(x, clause, k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7973,7976>) -> (7974 :: E) 7976){\n  std/core/hnd/protect<a,a,(e :: E),a>(x, clause, k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7973,7976>) -> (7974 :: E) 7976){\n    (std/core/hnd/protect<a,a,(e :: E),a>(x, clause, k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7974 :: E),7976>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(7975 :: (E, V) -> V)>, x: 7972){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7973,7976>) -> (7974 :: E) 7976){\n      (std/core/hnd/protect<a,a,(e :: E),a>(x, clause, k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(7974 :: E),7976>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(7975 :: (E, V) -> V)>, x: 7972){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<7973,7976>) -> (7974 :: E) 7976){\n      (std/core/hnd/protect<a,a,(e :: E),a>(x, clause, k));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(c :: (E, V) -> V),d> fn(clause: (x : a, k : (b) -> (e :: E) d) -> (e :: E) d){\n  std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),d>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, x: a){\n    (std/core/hnd/yield-to<b,(e :: E),d>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<b,d>) -> (e :: E) d){\n        (std/core/hnd/protect<a,b,(e :: E),d>(x, clause, k));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control1"]}, {"name": {"op": "Var","id": "std/core/hnd/protect2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<bool,(global :: H)>(std/core/types/False)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"resumed\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["resumed"]}, {"name": {"op": "Var","id": "res","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ret","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}, {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<bool,(global :: H)>(resumed, std/core/types/True)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Deep","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Deep<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Top"}},"annotation": "genExpr: ret"}]},"annotation": "genExpr: std/core/hnd/Deep<a,a>(ret)"}]},"annotation": "genExpr: k((std/core/hnd/Deep<a,a>(ret)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(ret: 8120){\n  val _ : ()\n        = std/core/types/set<bool,(global :: H)>(resumed, std/core/types/True);\n  k((std/core/hnd/Deep<a,a>(ret)));\n}"}]},"annotation": "genExpr: clause(x1, x2, (fn<(e :: E)>(ret: 8120){\n    val _ : ()\n          = (std/core/types/set<bool,(global :: H)>(resumed, std/core/types/True));\n    (k((std/core/hnd/Deep<a,a>(ret))));\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"res\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["res"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xres","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect-check","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}, {"op": "DebugWrap","inner": {"op": "Var","id": "xres","type": {"op": "Top"}},"annotation": "genExpr: xres"}]},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, xres)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(xres: 8122){\n  std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, xres);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>((fn<(e :: E)>(xres: 8122){\n  (std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, xres));\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect-check","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"ref\""}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resumed","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: resumed"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/protect-check<a,(e :: E),a>(resumed, k, res)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),d> fn<(e :: E)>(x1: a, x2: b, clause: (x : a, x : b, k : (c) -> (e :: E) d) -> (e :: E) d, k: ((hnd/resume-result :: (V, V) -> V)<c,d>) -> (e :: E) d){\n  val resumed : (ref :: (H, V) -> V)<(global :: H),bool>;\n  val res : d;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-extend<d,d,(e :: E)>((fn<(e :: E)>(xres: d){\n        (std/core/hnd/protect-check<c,(e :: E),d>(resumed, k, xres));\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/hnd/protect-check<c,(e :: E),d>(resumed, k, res);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/protect2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/resume-result\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/protect2"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x769_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect2<a,a,a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: clause"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect2<a,a,a,(e :: E),a>(x1, x2, clause, k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8214,8217>) -> (8215 :: E) 8217){\n  std/core/hnd/protect2<a,a,a,(e :: E),a>(x1, x2, clause, k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8214,8217>) -> (8215 :: E) 8217){\n    (std/core/hnd/protect2<a,a,a,(e :: E),a>(x1, x2, clause, k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8215 :: E),8217>, @_wildcard-x769_16: (hnd/ev :: ((E, V) -> V) -> V)<(8216 :: (E, V) -> V)>, x1: 8212, x2: 8213){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8214,8217>) -> (8215 :: E) 8217){\n      (std/core/hnd/protect2<a,a,a,(e :: E),a>(x1, x2, clause, k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8215 :: E),8217>, @_wildcard-x769_16: (hnd/ev :: ((E, V) -> V) -> V)<(8216 :: (E, V) -> V)>, x1: 8212, x2: 8213){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8214,8217>) -> (8215 :: E) 8217){\n      (std/core/hnd/protect2<a,a,a,(e :: E),a>(x1, x2, clause, k));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(d :: (E, V) -> V),a1> fn(clause: (x1 : a, x2 : b, k : (c) -> (e :: E) a1) -> (e :: E) a1){\n  std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),a1>, @_wildcard-x769_16: (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, x1: a, x2: b){\n    (std/core/hnd/yield-to<c,(e :: E),a1>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<c,a1>) -> (e :: E) a1){\n        (std/core/hnd/protect2<a,b,c,(e :: E),a1>(x1, x2, clause, k));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control2"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x681_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(a, b, c),a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x805_23","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x805_23","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"82","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"83","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"84","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"82","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 8291) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"82\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"83","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 8292) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"83\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"84","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 8293) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"84\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k@0"}]},"annotation": "genExpr: op(x1, x2, x3, k@0)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x805_23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"82\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 8291) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"83\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 8292) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 8293) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x805_23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"82\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"83\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"84\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@pat-x805_23: (8291, 8292, 8293), k@0: (8294) -> (8295 :: E) 8297){\n  match (@pat-x805_23) {\n    ((@skip std/core/types/Tuple3((x1: 8291) : a, (x2: 8292) : a, (x3: 8293) : a) : (a, b, c) ) as @pat: (8291, 8292, 8293))\n       -> op(x1, x2, x3, k@0);\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(a, b, c),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x805_23: (8291, 8292, 8293), k@0: (8294) -> (8295 :: E) 8297){\n    (match (@pat-x805_23) {\n      ((@skip std/core/types/Tuple3((x1: 8291) : a, (x2: 8292) : a, (x3: 8293) : a) : (a, b, c) ) as @pat: (8291, 8292, 8293))\n         -> op(x1, x2, x3, k@0);\n    });\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8294,8297>) -> (8295 :: E) 8297){\n  std/core/hnd/protect<(a, b, c),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x805_23: (8291, 8292, 8293), k@0: (8294) -> (8295 :: E) 8297){\n      (match (@pat-x805_23) {\n        ((@skip std/core/types/Tuple3((x1: 8291) : a, (x2: 8292) : a, (x3: 8293) : a) : (a, b, c) ) as @pat: (8291, 8292, 8293))\n           -> op(x1, x2, x3, k@0);\n      });\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8294,8297>) -> (8295 :: E) 8297){\n    (std/core/hnd/protect<(a, b, c),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x805_23: (8291, 8292, 8293), k@0: (8294) -> (8295 :: E) 8297){\n        (match (@pat-x805_23) {\n          ((@skip std/core/types/Tuple3((x1: 8291) : a, (x2: 8292) : a, (x3: 8293) : a) : (a, b, c) ) as @pat: (8291, 8292, 8293))\n             -> op(x1, x2, x3, k@0);\n        });\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8295 :: E),8297>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(8296 :: (E, V) -> V)>, x: (8291, 8292, 8293)){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8294,8297>) -> (8295 :: E) 8297){\n      (std/core/hnd/protect<(a, b, c),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x805_23: (8291, 8292, 8293), k@0: (8294) -> (8295 :: E) 8297){\n          (match (@pat-x805_23) {\n            ((@skip std/core/types/Tuple3((x1: 8291) : a, (x2: 8292) : a, (x3: 8293) : a) : (a, b, c) ) as @pat: (8291, 8292, 8293))\n               -> op(x1, x2, x3, k@0);\n          });\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8295 :: E),8297>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(8296 :: (E, V) -> V)>, x: (8291, 8292, 8293)){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8294,8297>) -> (8295 :: E) 8297){\n      (std/core/hnd/protect<(a, b, c),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x805_23: (8291, 8292, 8293), k@0: (8294) -> (8295 :: E) 8297){\n          (match (@pat-x805_23) {\n            ((@skip std/core/types/Tuple3((x1: 8291) : a, (x2: 8292) : a, (x3: 8293) : a) : (a, b, c) ) as @pat: (8291, 8292, 8293))\n               -> op(x1, x2, x3, k@0);\n          });\n        }), k));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V),b1> fn(op: (x1 : a, x2 : b, x3 : c, k : (d) -> (e :: E) b1) -> (e :: E) b1){\n  std/core/hnd/Clause1<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),b1>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, x: (a, b, c)){\n    (std/core/hnd/yield-to<d,(e :: E),b1>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<d,b1>) -> (e :: E) b1){\n        (std/core/hnd/protect<(a, b, c),d,(e :: E),b1>(x, (fn<(e :: E)>(@pat-x805_23: (a, b, c), k@0: (d) -> (e :: E) b1){\n            (match (@pat-x805_23) {\n              ((@skip std/core/types/Tuple3((x1: a) : a, (x2: b) : b, (x3: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n                 -> op(x1, x2, x3, k@0);\n            });\n          }), k));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control3"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-control4","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c, d),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x681_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(a, b, c, d),a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x829_23","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}, {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x829_23","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"85","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"86","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"87","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"88","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"85","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 8379) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"85\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"86","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 8380) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"86\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"87","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 8381) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"87\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"88","type": {"op": "Top"}},"annotation": "genTest: normal: (x4: 8382) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"88\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x4"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k@0"}]},"annotation": "genExpr: op(x1, x2, x3, x4, k@0)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x829_23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"85\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 8379) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 8380) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"87\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 8381) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x4: 8382) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x829_23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"85\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"86\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"87\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"88\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@pat-x829_23: (8379, 8380, 8381, 8382), k@0: (8383) -> (8384 :: E) 8386){\n  match (@pat-x829_23) {\n    ((@skip std/core/types/Tuple4((x1: 8379) : a, (x2: 8380) : a, (x3: 8381) : a, (x4: 8382) : a) : (a, b, c, d) ) as @pat: (8379, 8380, 8381, 8382))\n       -> op(x1, x2, x3, x4, k@0);\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(a, b, c, d),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x829_23: (8379, 8380, 8381, 8382), k@0: (8383) -> (8384 :: E) 8386){\n    (match (@pat-x829_23) {\n      ((@skip std/core/types/Tuple4((x1: 8379) : a, (x2: 8380) : a, (x3: 8381) : a, (x4: 8382) : a) : (a, b, c, d) ) as @pat: (8379, 8380, 8381, 8382))\n         -> op(x1, x2, x3, x4, k@0);\n    });\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8383,8386>) -> (8384 :: E) 8386){\n  std/core/hnd/protect<(a, b, c, d),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x829_23: (8379, 8380, 8381, 8382), k@0: (8383) -> (8384 :: E) 8386){\n      (match (@pat-x829_23) {\n        ((@skip std/core/types/Tuple4((x1: 8379) : a, (x2: 8380) : a, (x3: 8381) : a, (x4: 8382) : a) : (a, b, c, d) ) as @pat: (8379, 8380, 8381, 8382))\n           -> op(x1, x2, x3, x4, k@0);\n      });\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8383,8386>) -> (8384 :: E) 8386){\n    (std/core/hnd/protect<(a, b, c, d),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x829_23: (8379, 8380, 8381, 8382), k@0: (8383) -> (8384 :: E) 8386){\n        (match (@pat-x829_23) {\n          ((@skip std/core/types/Tuple4((x1: 8379) : a, (x2: 8380) : a, (x3: 8381) : a, (x4: 8382) : a) : (a, b, c, d) ) as @pat: (8379, 8380, 8381, 8382))\n             -> op(x1, x2, x3, x4, k@0);\n        });\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8384 :: E),8386>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(8385 :: (E, V) -> V)>, x: (8379, 8380, 8381, 8382)){\n  std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8383,8386>) -> (8384 :: E) 8386){\n      (std/core/hnd/protect<(a, b, c, d),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x829_23: (8379, 8380, 8381, 8382), k@0: (8383) -> (8384 :: E) 8386){\n          (match (@pat-x829_23) {\n            ((@skip std/core/types/Tuple4((x1: 8379) : a, (x2: 8380) : a, (x3: 8381) : a, (x4: 8382) : a) : (a, b, c, d) ) as @pat: (8379, 8380, 8381, 8382))\n               -> op(x1, x2, x3, x4, k@0);\n          });\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c, d),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8384 :: E),8386>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(8385 :: (E, V) -> V)>, x: (8379, 8380, 8381, 8382)){\n  (std/core/hnd/yield-to<a,(e :: E),a>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<8383,8386>) -> (8384 :: E) 8386){\n      (std/core/hnd/protect<(a, b, c, d),a,(e :: E),a>(x, (fn<(e :: E)>(@pat-x829_23: (8379, 8380, 8381, 8382), k@0: (8383) -> (8384 :: E) 8386){\n          (match (@pat-x829_23) {\n            ((@skip std/core/types/Tuple4((x1: 8379) : a, (x2: 8380) : a, (x3: 8381) : a, (x4: 8382) : a) : (a, b, c, d) ) as @pat: (8379, 8380, 8381, 8382))\n               -> op(x1, x2, x3, x4, k@0);\n          });\n        }), k));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V),c1> fn(op: (x1 : a, x2 : b, x3 : c, x4 : d, k : (a1) -> (e :: E) c1) -> (e :: E) c1){\n  std/core/hnd/Clause1<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),c1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),c1>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, x: (a, b, c, d)){\n    (std/core/hnd/yield-to<a1,(e :: E),c1>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a1,c1>) -> (e :: E) c1){\n        (std/core/hnd/protect<(a, b, c, d),a1,(e :: E),c1>(x, (fn<(e :: E)>(@pat-x829_23: (a, b, c, d), k@0: (a1) -> (e :: E) c1){\n            (match (@pat-x829_23) {\n              ((@skip std/core/types/Tuple4((x1: a) : a, (x2: b) : b, (x3: c) : c, (x4: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))\n                 -> op(x1, x2, x3, x4, k@0);\n            });\n          }), k));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-control4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-control4"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-never0","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x743_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x743_43","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": []},"annotation": "genExpr: op()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x743_43: ((hnd/resume-result :: (V, V) -> V)<8458,8461>) -> (8459 :: E) 8461){\n  op();\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x743_43: ((hnd/resume-result :: (V, V) -> V)<8458,8461>) -> (8459 :: E) 8461){\n    (op());\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8459 :: E),8461>, @_wildcard-x743_16: (hnd/ev :: ((E, V) -> V) -> V)<(8460 :: (E, V) -> V)>){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x743_43: ((hnd/resume-result :: (V, V) -> V)<8458,8461>) -> (8459 :: E) 8461){\n      (op());\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8459 :: E),8461>, @_wildcard-x743_16: (hnd/ev :: ((E, V) -> V) -> V)<(8460 :: (E, V) -> V)>){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x743_43: ((hnd/resume-result :: (V, V) -> V)<8458,8461>) -> (8459 :: E) 8461){\n      (op());\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(b :: (E, V) -> V),c> fn(op: () -> (e :: E) c){\n  std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x743_16: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){\n    (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),c>(m, (fn<(e :: E)>(@_wildcard-x743_43: ((hnd/resume-result :: (V, V) -> V)<a,c>) -> (e :: E) c){\n        (op());\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-never0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-never0"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-never1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: op(x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8529,8532>) -> (8530 :: E) 8532){\n  op(x);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8529,8532>) -> (8530 :: E) 8532){\n    (op(x));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8530 :: E),8532>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(8531 :: (E, V) -> V)>, x: 8528){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8529,8532>) -> (8530 :: E) 8532){\n      (op(x));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8530 :: E),8532>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(8531 :: (E, V) -> V)>, x: 8528){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8529,8532>) -> (8530 :: E) 8532){\n      (op(x));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(c :: (E, V) -> V),d> fn(op: (a) -> (e :: E) d){\n  std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),d>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, x: a){\n    (std/core/hnd/yield-to-final<b,(e :: E),(e :: E),d>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<b,d>) -> (e :: E) d){\n        (op(x));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-never1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-never1"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-never2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x787_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x787_49","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: op(x1, x2)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x787_49: ((hnd/resume-result :: (V, V) -> V)<8611,8614>) -> (8612 :: E) 8614){\n  op(x1, x2);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x787_49: ((hnd/resume-result :: (V, V) -> V)<8611,8614>) -> (8612 :: E) 8614){\n    (op(x1, x2));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8612 :: E),8614>, @_wildcard-x787_16: (hnd/ev :: ((E, V) -> V) -> V)<(8613 :: (E, V) -> V)>, x1: 8609, x2: 8610){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x787_49: ((hnd/resume-result :: (V, V) -> V)<8611,8614>) -> (8612 :: E) 8614){\n      (op(x1, x2));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8612 :: E),8614>, @_wildcard-x787_16: (hnd/ev :: ((E, V) -> V) -> V)<(8613 :: (E, V) -> V)>, x1: 8609, x2: 8610){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x787_49: ((hnd/resume-result :: (V, V) -> V)<8611,8614>) -> (8612 :: E) 8614){\n      (op(x1, x2));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(d :: (E, V) -> V),a1> fn(op: (a, b) -> (e :: E) a1){\n  std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),a1>, @_wildcard-x787_16: (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, x1: a, x2: b){\n    (std/core/hnd/yield-to-final<c,(e :: E),(e :: E),a1>(m, (fn<(e :: E)>(@_wildcard-x787_49: ((hnd/resume-result :: (V, V) -> V)<c,a1>) -> (e :: E) a1){\n        (op(x1, x2));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-never2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-never2"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-never3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"89","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"90","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"91","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"89","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 8687) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"89\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"90","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 8688) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"90\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"91","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 8689) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"91\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}]},"annotation": "genExpr: op(x1, x2, x3)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"89\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 8687) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"90\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 8688) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 8689) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"89\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"90\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"91\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8690,8693>) -> (8691 :: E) 8693){\n  match (x) {\n    ((@skip std/core/types/Tuple3((x1: 8687) : a, (x2: 8688) : a, (x3: 8689) : a) : (a, b, c) ) as @pat: (8687, 8688, 8689))\n       -> op(x1, x2, x3);\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8690,8693>) -> (8691 :: E) 8693){\n    (match (x) {\n      ((@skip std/core/types/Tuple3((x1: 8687) : a, (x2: 8688) : a, (x3: 8689) : a) : (a, b, c) ) as @pat: (8687, 8688, 8689))\n         -> op(x1, x2, x3);\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8691 :: E),8693>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(8692 :: (E, V) -> V)>, x: (8687, 8688, 8689)){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8690,8693>) -> (8691 :: E) 8693){\n      (match (x) {\n        ((@skip std/core/types/Tuple3((x1: 8687) : a, (x2: 8688) : a, (x3: 8689) : a) : (a, b, c) ) as @pat: (8687, 8688, 8689))\n           -> op(x1, x2, x3);\n      });\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8691 :: E),8693>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(8692 :: (E, V) -> V)>, x: (8687, 8688, 8689)){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8690,8693>) -> (8691 :: E) 8693){\n      (match (x) {\n        ((@skip std/core/types/Tuple3((x1: 8687) : a, (x2: 8688) : a, (x3: 8689) : a) : (a, b, c) ) as @pat: (8687, 8688, 8689))\n           -> op(x1, x2, x3);\n      });\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V),b1> fn(op: (a, b, c) -> (e :: E) b1){\n  std/core/hnd/Clause1<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),b1>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, x: (a, b, c)){\n    (std/core/hnd/yield-to-final<d,(e :: E),(e :: E),b1>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<d,b1>) -> (e :: E) b1){\n        (match (x) {\n          ((@skip std/core/types/Tuple3((x1: a) : a, (x2: b) : b, (x3: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n             -> op(x1, x2, x3);\n        });\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-never3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-never3"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-never4","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c, d),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"92","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"93","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"94","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"95","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"92","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 8774) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"92\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"93","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 8775) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"93\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"94","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 8776) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"94\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"95","type": {"op": "Top"}},"annotation": "genTest: normal: (x4: 8777) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"95\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x4"}]},"annotation": "genExpr: op(x1, x2, x3, x4)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"92\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 8774) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"93\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 8775) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"94\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 8776) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"95\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x4: 8777) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"92\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"93\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"94\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"95\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8778,8781>) -> (8779 :: E) 8781){\n  match (x) {\n    ((@skip std/core/types/Tuple4((x1: 8774) : a, (x2: 8775) : a, (x3: 8776) : a, (x4: 8777) : a) : (a, b, c, d) ) as @pat: (8774, 8775, 8776, 8777))\n       -> op(x1, x2, x3, x4);\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8778,8781>) -> (8779 :: E) 8781){\n    (match (x) {\n      ((@skip std/core/types/Tuple4((x1: 8774) : a, (x2: 8775) : a, (x3: 8776) : a, (x4: 8777) : a) : (a, b, c, d) ) as @pat: (8774, 8775, 8776, 8777))\n         -> op(x1, x2, x3, x4);\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8779 :: E),8781>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(8780 :: (E, V) -> V)>, x: (8774, 8775, 8776, 8777)){\n  std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8778,8781>) -> (8779 :: E) 8781){\n      (match (x) {\n        ((@skip std/core/types/Tuple4((x1: 8774) : a, (x2: 8775) : a, (x3: 8776) : a, (x4: 8777) : a) : (a, b, c, d) ) as @pat: (8774, 8775, 8776, 8777))\n           -> op(x1, x2, x3, x4);\n      });\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c, d),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(8779 :: E),8781>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(8780 :: (E, V) -> V)>, x: (8774, 8775, 8776, 8777)){\n  (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),a>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<8778,8781>) -> (8779 :: E) 8781){\n      (match (x) {\n        ((@skip std/core/types/Tuple4((x1: 8774) : a, (x2: 8775) : a, (x3: 8776) : a, (x4: 8777) : a) : (a, b, c, d) ) as @pat: (8774, 8775, 8776, 8777))\n           -> op(x1, x2, x3, x4);\n      });\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V),c1> fn(op: (a, b, c, d) -> (e :: E) c1){\n  std/core/hnd/Clause1<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),c1>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),c1>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, x: (a, b, c, d)){\n    (std/core/hnd/yield-to-final<a1,(e :: E),(e :: E),c1>(m, (fn<(e :: E)>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a1,c1>) -> (e :: E) c1){\n        (match (x) {\n          ((@skip std/core/types/Tuple4((x1: a) : a, (x2: b) : b, (x3: c) : c, (x4: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))\n             -> op(x1, x2, x3, x4);\n        });\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-never4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-never4"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail-noop3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x691_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x691_17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"96","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"97","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"98","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"96","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 8863) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"96\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"97","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 8864) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"97\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"98","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 8865) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"98\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}]},"annotation": "genExpr: op(x1, x2, x3)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"96\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 8863) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"97\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 8864) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"98\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 8865) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"96\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"97\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"98\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(8860 :: E),8861>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(8862 :: (E, V) -> V)>, x: (8863, 8864, 8865)){\n  match (x) {\n    ((@skip std/core/types/Tuple3((x1: 8863) : a, (x2: 8864) : a, (x3: 8865) : a) : (a, b, c) ) as @pat: (8863, 8864, 8865))\n       -> op(x1, x2, x3);\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(8860 :: E),8861>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(8862 :: (E, V) -> V)>, x: (8863, 8864, 8865)){\n  (match (x) {\n    ((@skip std/core/types/Tuple3((x1: 8863) : a, (x2: 8864) : a, (x3: 8865) : a) : (a, b, c) ) as @pat: (8863, 8864, 8865))\n       -> op(x1, x2, x3);\n  });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1> fn(op: (c, d, a1) -> (e :: E) b1){\n  std/core/hnd/Clause1<(c, d, a1),b1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: (c, d, a1)){\n    (match (x) {\n      ((@skip std/core/types/Tuple3((x1: c) : c, (x2: d) : d, (x3: a1) : a1) : (c, d, a1) ) as @pat: (c, d, a1))\n         -> op(x1, x2, x3);\n    });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail-noop3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail-noop3"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail-noop4","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c, d),a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x691_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x691_17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"99","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"100","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"101","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"102","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"99","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 8950) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"99\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"100","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 8951) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"100\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"101","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 8952) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"101\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"102","type": {"op": "Top"}},"annotation": "genTest: normal: (x4: 8953) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"102\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x4"}]},"annotation": "genExpr: op(x1, x2, x3, x4)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 8950) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"100\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 8951) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 8952) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"102\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x4: 8953) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"100\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"101\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"102\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(8947 :: E),8948>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(8949 :: (E, V) -> V)>, x: (8950, 8951, 8952, 8953)){\n  match (x) {\n    ((@skip std/core/types/Tuple4((x1: 8950) : a, (x2: 8951) : a, (x3: 8952) : a, (x4: 8953) : a) : (a, b, c, d) ) as @pat: (8950, 8951, 8952, 8953))\n       -> op(x1, x2, x3, x4);\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<(a, b, c, d),a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(8947 :: E),8948>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(8949 :: (E, V) -> V)>, x: (8950, 8951, 8952, 8953)){\n  (match (x) {\n    ((@skip std/core/types/Tuple4((x1: 8950) : a, (x2: 8951) : a, (x3: 8952) : a, (x4: 8953) : a) : (a, b, c, d) ) as @pat: (8950, 8951, 8952, 8953))\n       -> op(x1, x2, x3, x4);\n  });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1,c1> fn(op: (c, d, a1, b1) -> (e :: E) c1){\n  std/core/hnd/Clause1<(c, d, a1, b1),c1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: (c, d, a1, b1)){\n    (match (x) {\n      ((@skip std/core/types/Tuple4((x1: c) : c, (x2: d) : d, (x3: a1) : a1, (x4: b1) : b1) : (c, d, a1, b1) ) as @pat: (c, d, a1, b1))\n         -> op(x1, x2, x3, x4);\n    });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail-noop4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail-noop4"]}, {"name": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<9065>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 9065<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(9065 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (9065 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(9065 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: op(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9064 :: E) 9063, res: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9064 :: E) 9063, res: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0);\ny"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(c :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: (a) -> (e :: E) b, x: a){\n  val w0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<d> fn<(e :: E)>(cont: (d) -> (e :: E) b, res: d){\n        std/core/hnd/under1x<d,b,(e :: E),(c :: (E, V) -> V)>(ev, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0);\n      y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/under1x\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/under1x"]}, {"name": {"op": "Var","id": "std/core/hnd/under1","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<9163>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 9163<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(9163 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (9163 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(9163 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: op(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9162 :: E) 9161, res: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9162 :: E) 9161, res: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0);\ny"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(c :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: (a) -> (e :: E) b, x: a){\n  val w0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<d> fn<(e :: E)>(cont: (d) -> (e :: E) b, res: d){\n        std/core/hnd/under1x<d,b,(e :: E),(c :: (E, V) -> V)>(ev, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0);\n      y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/under1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/under1"]}, {"name": {"op": "Var","id": "std/core/hnd/under0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<9250>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 9250<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(9250 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (9250 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(9250 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": []},"annotation": "genExpr: op()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w@0: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w@0)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<9250>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@0: 9250<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w@0: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(9250 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2@0: (9250 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(9250 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@0"]}, {"name": {"op": "Var","id": "y@0","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: cont(res)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y@0"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res@0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res@0","type": {"op": "Top"}},"annotation": "genExpr: res@0"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont@0, res@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont@0: (a) -> (9249 :: E) 9248, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont@0: (a) -> (9249 :: E) 9248, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y@0","type": {"op": "Top"}},"annotation": "genExpr: y@0"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\ny@0"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9249 :: E) 9248, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y@0 : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9249 :: E) 9248, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y@0;\n  });\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9249 :: E) 9248, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y@0 : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9249 :: E) 9248, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y@0;\n  });\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),(b :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, op: () -> (e :: E) a){\n  val w0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n  val y : a;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<c> fn<(e :: E)>(cont: (c) -> (e :: E) a, res: c){\n        val w0@0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n        val y@0 : a;\n        (match ((std/core/hnd/yielding())) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<d> fn<(e :: E)>(cont@0: (d) -> (e :: E) a, res@0: d){\n              std/core/hnd/under1x<d,a,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n            }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> val _@0 : ()\n                      = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0@0);\n            y@0;\n        });\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n       -> y;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/under0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/under0"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail0","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x734_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<9304>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 9304<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(9304 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (9304 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(9304 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": []},"annotation": "genExpr: op()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w@0: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w@0)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<9304>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@0: 9304<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w@0: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(9304 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2@0: (9304 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(9304 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@0"]}, {"name": {"op": "Var","id": "y@0","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: cont(res)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y@0"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res@0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res@0","type": {"op": "Top"}},"annotation": "genExpr: res@0"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont@0, res@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont@0: (a) -> (9302 :: E) 9305, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont@0: (a) -> (9302 :: E) 9305, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y@0","type": {"op": "Top"}},"annotation": "genExpr: y@0"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\ny@0"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9302 :: E) 9305, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y@0 : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9302 :: E) 9305, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y@0;\n  });\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9302 :: E) 9305, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y@0 : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9302 :: E) 9305, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y@0;\n  });\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x734_14: (hnd/marker :: (E, V) -> V)<(9302 :: E),9303>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(9304 :: (E, V) -> V)>){\n  val w0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : a;\n  val _ : ();\n  match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9302 :: E) 9305, res: a){\n        val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n        val y@0 : b;\n        (match ((std/core/hnd/yielding())) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9302 :: E) 9305, res@0: b){\n              std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n            }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> val _@0 : ()\n                      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n            y@0;\n        });\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n       -> y;\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x734_14: (hnd/marker :: (E, V) -> V)<(9302 :: E),9303>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(9304 :: (E, V) -> V)>){\n  val w0 : ((hnd/evv :: E -> V)<(_e :: E)>);\n  val y : a;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9302 :: E) 9305, res: a){\n        val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n        val y@0 : b;\n        (match ((std/core/hnd/yielding())) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9302 :: E) 9305, res@0: b){\n              std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n            }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> val _@0 : ()\n                      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n            y@0;\n        });\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n       -> y;\n  });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c> fn(op: () -> (e :: E) c){\n  std/core/hnd/Clause0<c,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x734_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){\n    val w0 : ((hnd/evv :: E -> V)<(_e1 :: E)>);\n    val y : c;\n    val _ : ();\n    (match ((std/core/hnd/yielding())) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/hnd/yield-cont<c,(e :: E),c>((forall<d> fn<(e :: E)>(cont: (d) -> (e :: E) c, res: d){\n          val w0@0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n          val y@0 : c;\n          (match ((std/core/hnd/yielding())) {\n            ((std/core/types/True() : bool ) as @pat@5: bool)\n               -> std/core/hnd/yield-cont<c,(e :: E),c>((forall<a1> fn<(e :: E)>(cont@0: (a1) -> (e :: E) c, res@0: a1){\n                std/core/hnd/under1x<a1,c,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n              }));\n            ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n               -> val _@0 : ()\n                        = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0@0);\n              y@0;\n          });\n        }));\n      ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n         -> y;\n    });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail0"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x686_14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<9373>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 9373<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(9373 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (9373 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(9373 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: op(x)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont, res)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9371 :: E) 9375, res: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9371 :: E) 9375, res: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0);\ny"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x686_14: (hnd/marker :: (E, V) -> V)<(9371 :: E),9372>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(9373 :: (E, V) -> V)>, x: 9374){\n  val w0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : a;\n  match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9371 :: E) 9375, res: a){\n        std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0);\n      y;\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x686_14: (hnd/marker :: (E, V) -> V)<(9371 :: E),9372>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(9373 :: (E, V) -> V)>, x: 9374){\n  val w0 : ((hnd/evv :: E -> V)<(_e :: E)>);\n  val y : a;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9371 :: E) 9375, res: a){\n        std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0);\n      y;\n  });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d> fn(op: (c) -> (e :: E) d){\n  std/core/hnd/Clause1<c,d,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x686_14: (hnd/marker :: (E, V) -> V)<(e :: E),a>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: c){\n    val w0 : ((hnd/evv :: E -> V)<(_e1 :: E)>);\n    val y : d;\n    (match ((std/core/hnd/yielding())) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/hnd/yield-cont<d,(e :: E),d>((forall<a1> fn<(e :: E)>(cont: (a1) -> (e :: E) d, res: a1){\n          std/core/hnd/under1x<a1,d,(e :: E),(b :: (E, V) -> V)>(ev, cont, res);\n        }));\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> val _@0 : ()\n                  = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0);\n        y;\n    });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail1"]}, {"name": {"op": "Var","id": "std/core/hnd/under2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<9476>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 9476<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(9476 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (9476 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(9476 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "z","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: op(x1, x2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"z\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["z"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w@0: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w@0)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<9476>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@0: 9476<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w@0: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(9476 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2@0: (9476 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(9476 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: cont(res)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res@0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res@0","type": {"op": "Top"}},"annotation": "genExpr: res@0"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont@0, res@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont@0: (a) -> (9475 :: E) 9474, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont@0: (a) -> (9475 :: E) 9474, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\ny"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9475 :: E) 9474, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9475 :: E) 9474, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y;\n  });\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9475 :: E) 9474, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (9475 :: E) 9474, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y;\n  });\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "z","type": {"op": "Top"}},"annotation": "genExpr: z"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E),(d :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, op: (a, b) -> (e :: E) c, x1: a, x2: b){\n  val w0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n  val z : c;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<c,(e :: E),c>((forall<a1> fn<(e :: E)>(cont: (a1) -> (e :: E) c, res: a1){\n        val w0@0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n        val y : c;\n        (match ((std/core/hnd/yielding())) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/hnd/yield-cont<c,(e :: E),c>((forall<b1> fn<(e :: E)>(cont@0: (b1) -> (e :: E) c, res@0: b1){\n              std/core/hnd/under1x<b1,c,(e :: E),(d :: (E, V) -> V)>(ev, cont@0, res@0);\n            }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> val _@0 : ()\n                      = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0@0);\n            y;\n        });\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n       -> z;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/under2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/under2"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under2<a,a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}]},"annotation": "genExpr: std/core/hnd/under2<a,a,a,(e :: E),(a :: (E, V) -> V)>(ev, op, x1, x2)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(9554 :: E),9555>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(9556 :: (E, V) -> V)>, x1: 9557, x2: 9558){\n  std/core/hnd/under2<a,a,a,(e :: E),(a :: (E, V) -> V)>(ev, op, x1, x2);\n}"}]},"annotation": "genExpr: std/core/hnd/Clause2<a,a,a,(a :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(9554 :: E),9555>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(9556 :: (E, V) -> V)>, x1: 9557, x2: 9558){\n  (std/core/hnd/under2<a,a,a,(e :: E),(a :: (E, V) -> V)>(ev, op, x1, x2));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1> fn(op: (c, d) -> (e :: E) a1){\n  std/core/hnd/Clause2<c,d,a1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),a>, ev: (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x1: c, x2: d){\n    (std/core/hnd/under2<c,d,a1,(e :: E),(b :: (E, V) -> V)>(ev, op, x1, x2));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause2\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail2"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/clause-tail1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/clause-tail1<(e :: E),a,(a :: (E, V) -> V),(a, b, c),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x808_20","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x808_20","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"103","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"104","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"105","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"103","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 9635) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"103\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"104","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 9636) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"104\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"105","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 9637) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"105\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}]},"annotation": "genExpr: op(x1, x2, x3)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x808_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 9635) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"104\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 9636) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 9637) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x808_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"103\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"104\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"105\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@pat-x808_20: (9635, 9636, 9637)){\n  match (@pat-x808_20) {\n    ((@skip std/core/types/Tuple3((x1: 9635) : a, (x2: 9636) : a, (x3: 9637) : a) : (a, b, c) ) as @pat: (9635, 9636, 9637))\n       -> op(x1, x2, x3);\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/clause-tail1<(e :: E),a,(a :: (E, V) -> V),(a, b, c),a>((fn<(e :: E)>(@pat-x808_20: (9635, 9636, 9637)){\n  (match (@pat-x808_20) {\n    ((@skip std/core/types/Tuple3((x1: 9635) : a, (x2: 9636) : a, (x3: 9637) : a) : (a, b, c) ) as @pat: (9635, 9636, 9637))\n       -> op(x1, x2, x3);\n  });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1> fn(op: (c, d, a1) -> (e :: E) b1){\n  std/core/hnd/clause-tail1<(e :: E),a,(b :: (E, V) -> V),(c, d, a1),b1>((fn<(e :: E)>(@pat-x808_20: (c, d, a1)){\n    (match (@pat-x808_20) {\n      ((@skip std/core/types/Tuple3((x1: c) : c, (x2: d) : d, (x3: a1) : a1) : (c, d, a1) ) as @pat: (c, d, a1))\n         -> op(x1, x2, x3);\n    });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail3"]}, {"name": {"op": "Var","id": "std/core/hnd/clause-tail4","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/clause-tail1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/clause-tail1<(e :: E),a,(a :: (E, V) -> V),(a, b, c, d),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x832_20","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x832_20","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"106","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"107","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"108","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"109","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"106","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 9722) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"106\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"107","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 9723) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"107\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"108","type": {"op": "Top"}},"annotation": "genTest: normal: (x3: 9724) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"108\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"109","type": {"op": "Top"}},"annotation": "genTest: normal: (x4: 9725) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"109\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x4"}]},"annotation": "genExpr: op(x1, x2, x3, x4)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x832_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"106\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 9722) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"107\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 9723) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"108\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x3: 9724) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x4: 9725) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x832_20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"106\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"107\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"108\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"109\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@pat-x832_20: (9722, 9723, 9724, 9725)){\n  match (@pat-x832_20) {\n    ((@skip std/core/types/Tuple4((x1: 9722) : a, (x2: 9723) : a, (x3: 9724) : a, (x4: 9725) : a) : (a, b, c, d) ) as @pat: (9722, 9723, 9724, 9725))\n       -> op(x1, x2, x3, x4);\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/clause-tail1<(e :: E),a,(a :: (E, V) -> V),(a, b, c, d),a>((fn<(e :: E)>(@pat-x832_20: (9722, 9723, 9724, 9725)){\n  (match (@pat-x832_20) {\n    ((@skip std/core/types/Tuple4((x1: 9722) : a, (x2: 9723) : a, (x3: 9724) : a, (x4: 9725) : a) : (a, b, c, d) ) as @pat: (9722, 9723, 9724, 9725))\n       -> op(x1, x2, x3, x4);\n  });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1,c1> fn(op: (c, d, a1, b1) -> (e :: E) c1){\n  std/core/hnd/clause-tail1<(e :: E),a,(b :: (E, V) -> V),(c, d, a1, b1),c1>((fn<(e :: E)>(@pat-x832_20: (c, d, a1, b1)){\n    (match (@pat-x832_20) {\n      ((@skip std/core/types/Tuple4((x1: c) : c, (x2: d) : d, (x3: a1) : a1, (x4: b1) : b1) : (c, d, a1, b1) ) as @pat: (c, d, a1, b1))\n         -> op(x1, x2, x3, x4);\n    });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/clause-tail4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/clause-tail4"]}, {"name": {"op": "Var","id": "std/core/hnd/finally-prompt","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fin","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10067","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/hnd/yielding()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10067\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10067"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10067","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/finally-prompt","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/finally-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "fin","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: fin"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: cont(x)"}]},"annotation": "genExpr: std/core/hnd/finally-prompt<a,(e :: E)>(fin, (cont(x)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (9857 :: E) 9856, x: a){\n  std/core/hnd/finally-prompt<b,(e :: E)>(fin, (cont(x)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9857 :: E) 9856, x: a){\n  std/core/hnd/finally-prompt<b,(e :: E)>(fin, (cont(x)));\n}))"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-capture","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-capture<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/yield-capture<(e :: E)>()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"yld\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/yield-info\"}}"},"export_as": ["yld"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "fin","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: fin"},"args": []},"annotation": "genExpr: fin()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<_a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x537_43","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/unsafe-reyield","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/unsafe-reyield<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}},"annotation": "genExpr: yld"}]},"annotation": "genExpr: std/core/hnd/unsafe-reyield<a,(e :: E)>(yld)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x537_43: _9825){\n  std/core/hnd/unsafe-reyield<a,(e :: E)>(yld);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x537_43: _9825){\n  (std/core/hnd/unsafe-reyield<a,(e :: E)>(yld));\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/unsafe-reyield","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/unsafe-reyield<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "yld","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"}},"annotation": "genExpr: yld"}]},"annotation": "genExpr: std/core/hnd/unsafe-reyield<a,(e :: E)>(yld)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/yielding())) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x537_43: _9825){\n      (std/core/hnd/unsafe-reyield<a,(e :: E)>(yld));\n    }));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/core/hnd/unsafe-reyield<a,(e :: E)>(yld);\n}"}},"annotation": "genExpr: val yld : hnd/yield-info;\nval _@0 : ();\nmatch ((std/core/hnd/yielding())) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x537_43: _9825){\n      (std/core/hnd/unsafe-reyield<a,(e :: E)>(yld));\n    }));\n  ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n     -> std/core/hnd/unsafe-reyield<a,(e :: E)>(yld);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/yielding-non-final())) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (9857 :: E) 9856, x: a){\n      std/core/hnd/finally-prompt<b,(e :: E)>(fin, (cont(x)));\n    }));\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val yld : hnd/yield-info;\n        val _@0 : ();\n    (match ((std/core/hnd/yielding())) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x537_43: _9825){\n          (std/core/hnd/unsafe-reyield<a,(e :: E)>(yld));\n        }));\n      ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n         -> std/core/hnd/unsafe-reyield<a,(e :: E)>(yld);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10067\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10067","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "fin","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: fin"},"args": []},"annotation": "genExpr: fin()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}},"annotation": "genExpr: val _ : ()\n      = fin();\nres"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10067\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(fin: () -> (e :: E) (), res: a){\n  val b@10067 : bool\n        = std/core/hnd/yielding();\n  (match (b@10067) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((std/core/hnd/yielding-non-final())) {\n        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n           -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<b> fn<(e :: E)>(cont: (b) -> (e :: E) a, x: b){\n            std/core/hnd/finally-prompt<a,(e :: E)>(fin, (cont(x)));\n          }));\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> val yld : hnd/yield-info;\n              val _@0 : ();\n          (match ((std/core/hnd/yielding())) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/core/hnd/yield-extend<_b,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x537_43: _9825){\n                (std/core/hnd/unsafe-reyield<a,(e :: E)>(yld));\n              }));\n            ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n               -> std/core/hnd/unsafe-reyield<a,(e :: E)>(yld);\n          });\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val _ : ()\n                = fin();\n      res;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/finally-prompt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/finally-prompt"]}, {"name": {"op": "Var","id": "std/core/hnd/finally","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fin","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/finally-prompt","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/finally-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "fin","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: fin"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/hnd/finally-prompt<a,(e :: E)>(fin, (action()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(fin: () -> (e :: E) (), action: () -> (e :: E) a){\n  std/core/hnd/finally-prompt<a,(e :: E)>(fin, (action()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/finally\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/finally"]}, {"name": {"op": "Var","id": "std/core/hnd/initially-prompt","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "count","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<int,(global :: H)>(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"count\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["count"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "cnt","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "count","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: count"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),int,<(alloc :: H -> X)<(global :: H)>,(write :: H -> X)<(global :: H)>|(e :: E)>>(count)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"cnt\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["cnt"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "count","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: count"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "cnt","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/hnd/add(cnt, 1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<int,(global :: H)>(count, (std/core/hnd/add(cnt, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "_@1","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Int","args": [{"op": "Var","id": "cnt","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Int\",\"args\": [{\"op\": \"Var\",\"id\": \"cnt\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Int","args": [{"op": "Var","id": "cnt","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "r","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: init"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "cnt","type": {"op": "Int"}},"annotation": "genExpr: cnt"}]},"annotation": "genExpr: init(cnt)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<_a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x580_35","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/initially-prompt","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: cont(x)"}]},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x580_35: _10005){\n  std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x580_35: _10005){\n  (std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x))));\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}},"annotation": "genExpr: val _@0 : a\n      = std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x580_35: _10005){\n        (std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x))));\n      }));\nstd/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/yielding())) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> val _@0 : a\n              = std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x580_35: _10005){\n                (std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x))));\n              }));\n    std/core/types/Unit;\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> std/core/types/Unit;\n}"}},"annotation": "genExpr: val r : ()\n      = init(cnt);\nmatch ((std/core/hnd/yielding())) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> val _@0 : a\n              = std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x580_35: _10005){\n                (std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x))));\n              }));\n    std/core/types/Unit;\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> std/core/types/Unit;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Int\",\"args\": [{\"op\": \"Var\",\"id\": \"cnt\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/eq(cnt, 0))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Unit;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> val r : ()\n              = init(cnt);\n    (match ((std/core/hnd/yielding())) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> val _@0 : a\n                  = std/core/hnd/yield-extend<_a,a,(e :: E)>((fn<(e :: E)>(@_wildcard-x580_35: _10005){\n                    (std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x))));\n                  }));\n        std/core/types/Unit;\n      ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n         -> std/core/types/Unit;\n    });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@1\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@1"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/initially-prompt","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: cont(x)"}]},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (10059 :: E) 10058, x: a){\n  val cnt : int;\n  val _ : ();\n  val _@1 : ();\n  std/core/hnd/initially-prompt<b,(e :: E)>(init, (cont(x)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (10059 :: E) 10058, x: a){\n  val cnt : int;\n  val _ : ();\n  val _@1 : ();\n  std/core/hnd/initially-prompt<b,(e :: E)>(init, (cont(x)));\n}))"}},"annotation": "genExpr: val count : (ref :: (H, V) -> V)<(global :: H),int>\n      = std/core/types/ref<int,(global :: H)>(0);\nstd/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (10059 :: E) 10058, x: a){\n  val cnt : int;\n  val _ : ();\n  val _@1 : ();\n  std/core/hnd/initially-prompt<b,(e :: E)>(init, (cont(x)));\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(init: (int) -> (e :: E) (), res: a){\n  (match ((std/core/hnd/yielding-non-final())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val count : (ref :: (H, V) -> V)<(global :: H),int>\n                = std/core/types/ref<int,(global :: H)>(0);\n      std/core/hnd/yield-cont<a,(e :: E),a>((forall<b> fn<(e :: E)>(cont: (b) -> (e :: E) a, x: b){\n        val cnt : int;\n        val _ : ();\n        val _@1 : ();\n        std/core/hnd/initially-prompt<a,(e :: E)>(init, (cont(x)));\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n       -> res;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/initially-prompt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/initially-prompt"]}, {"name": {"op": "Var","id": "std/core/hnd/initially","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: init"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: init(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<(),a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x568_40","type": {"op": "Unit"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/initially-prompt","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>(init, (action()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x568_40: ()){\n  std/core/hnd/initially-prompt<a,(e :: E)>(init, (action()));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-extend<(),a,(e :: E)>((fn<(e :: E)>(@_wildcard-x568_40: ()){\n  (std/core/hnd/initially-prompt<a,(e :: E)>(init, (action())));\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/initially-prompt","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/hnd/initially-prompt<a,(e :: E)>(init, (action()))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(init: (int) -> (e :: E) (), action: () -> (e :: E) a){\n  val _ : ()\n        = init(0);\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-extend<(),a,(e :: E)>((fn<(e :: E)>(@_wildcard-x568_40: ()){\n        (std/core/hnd/initially-prompt<a,(e :: E)>(init, (action())));\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/hnd/initially-prompt<a,(e :: E)>(init, (action()));\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/initially\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/initially"]}, {"name": {"op": "Var","id": "std/core/hnd/prompt-local-var","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10035","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/hnd/yielding()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10035\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10035"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10035","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: loc"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<a,(h :: H),(div :: X)>(loc)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["v"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,<(div :: X),(local :: H -> X)<(h :: H)>>,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: loc"}, {"op": "DebugWrap","inner": {"op": "Var","id": "v","type": {"op": "Top"}},"annotation": "genExpr: v"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<a,(div :: X),(h :: H)>(loc, v)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt-local-var","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt-local-var<a,a,(total :: E),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: loc"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: cont(x)"}]},"annotation": "genExpr: std/core/hnd/prompt-local-var<a,a,(total :: E),(h :: H)>(loc, (cont(x)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(cont: (a) -> <(div :: X),(local :: H -> X)<(10233 :: H)>> 10231, x: a){\n  val _@0 : ()\n        = std/core/types/local-set<b,(div :: X),(h :: H)>(loc, v);\n  std/core/hnd/prompt-local-var<b,b,(total :: E),(h :: H)>(loc, (cont(x)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,<(div :: X),(local :: H -> X)<(h :: H)>>,a>((forall<a> fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(cont: (a) -> <(div :: X),(local :: H -> X)<(10233 :: H)>> 10231, x: a){\n  val _@0 : ()\n        = std/core/types/local-set<b,(div :: X),(h :: H)>(loc, v);\n  std/core/hnd/prompt-local-var<b,b,(total :: E),(h :: H)>(loc, (cont(x)));\n}))"}},"annotation": "genExpr: val v : a\n      = std/core/types/local-get<a,(h :: H),(div :: X)>(loc);\nstd/core/hnd/yield-cont<a,<(div :: X),(local :: H -> X)<(h :: H)>>,a>((forall<a> fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(cont: (a) -> <(div :: X),(local :: H -> X)<(10233 :: H)>> 10231, x: a){\n  val _@0 : ()\n        = std/core/types/local-set<b,(div :: X),(h :: H)>(loc, v);\n  std/core/hnd/prompt-local-var<b,b,(total :: E),(h :: H)>(loc, (cont(x)));\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10035\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10035","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10035\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(h :: H)> fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(loc: (local-var :: (H, V) -> V)<(h :: H),a>, res: b){\n  val b@10035 : bool\n        = std/core/hnd/yielding();\n  (match (b@10035) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val v : a\n                = std/core/types/local-get<a,(h :: H),(div :: X)>(loc);\n      std/core/hnd/yield-cont<b,<(div :: X),(local :: H -> X)<(h :: H)>>,b>((forall<c> fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(cont: (c) -> <(div :: X),(local :: H -> X)<(h :: H)>> b, x: c){\n        val _@0 : ()\n              = std/core/types/local-set<a,(div :: X),(h :: H)>(loc, v);\n        std/core/hnd/prompt-local-var<a,b,(total :: E),(h :: H)>(loc, (cont(x)));\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> res;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/prompt-local-var\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/prompt-local-var"]}, {"name": {"op": "Var","id": "std/core/hnd/local-var-vm","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}},"annotation": "genExpr: std/core/types/local-new<a,<(div :: X)|(e :: E)>,(h :: H)>(init)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"loc\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}}"},"export_as": ["loc"]}, {"name": {"op": "Var","id": "res","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: loc"}]},"annotation": "genExpr: action(loc)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"res\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["res"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/prompt-local-var","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/prompt-local-var<a,a,(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "loc","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: loc"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/hnd/prompt-local-var<a,a,(h :: H)>(loc, res)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(init: a, action: (l : (local-var :: (H, V) -> V)<(h :: H),a>) -> <(local :: H -> X)<(h :: H)>|(e :: E)> b){\n  val loc : (local-var :: (H, V) -> V)<(h :: H),a>;\n  val res : b;\n  std/core/hnd/prompt-local-var<a,b,(h :: H)>(loc, res);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/local-var-vm\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/local-var-vm"]}, {"name": {"op": "Var","id": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/@prompt-local-var-prim-vm","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@prompt-local-var-prim-vm<a,a,(e :: E),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@prompt-local-var-prim-vm<a,a,(e :: E),(h :: H)>(init, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E),(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(init: a, action: (l : (local-var :: (H, V) -> V)<(h :: H),a>) -> <(local :: H -> X)<(h :: H)>|(e :: E)> b){\n  std/core/hnd/@prompt-local-var-prim-vm<a,b,(e :: E),(h :: H)>(init, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/local-var\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/local-var"]}, {"name": {"op": "Var","id": "std/core/hnd/try-finalize-prompt","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),(either :: (V, V) -> V)<hnd/yield-info,a>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/try-finalize-prompt","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/try-finalize-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: cont(x)"}]},"annotation": "genExpr: std/core/hnd/try-finalize-prompt<a,(e :: E)>((cont(x)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (10462 :: E) 10461, x: a){\n  std/core/hnd/try-finalize-prompt<b,(e :: E)>((cont(x)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),(either :: (V, V) -> V)<hnd/yield-info,a>>((forall<a> fn<(e :: E)>(cont: (a) -> (10462 :: E) 10461, x: a){\n  std/core/hnd/try-finalize-prompt<b,(e :: E)>((cont(x)));\n}))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10068","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/hnd/yielding()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10068\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10068"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10068","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Left","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Left<hnd/yield-info,a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-capture","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yield-info"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-capture<(e :: E)>"},"args": []},"annotation": "genExpr: std/core/hnd/yield-capture<(e :: E)>()"}]},"annotation": "genExpr: std/core/types/Left<hnd/yield-info,a>((std/core/hnd/yield-capture<(e :: E)>()))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"b@10068\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10068","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Right","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Right<hnd/yield-info,a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: std/core/types/Right<hnd/yield-info,a>(res)"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10068\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@10068) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Left<hnd/yield-info,a>((std/core/hnd/yield-capture<(e :: E)>()));\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Right<hnd/yield-info,a>(res);\n}"}},"annotation": "genExpr: val b@10068 : bool\n      = std/core/hnd/yielding();\nmatch (b@10068) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Left<hnd/yield-info,a>((std/core/hnd/yield-capture<(e :: E)>()));\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Right<hnd/yield-info,a>(res);\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(res: a){\n  (match ((std/core/hnd/yielding-non-final())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-cont<a,(e :: E),(either :: (V, V) -> V)<hnd/yield-info,a>>((forall<b> fn<(e :: E)>(cont: (b) -> (e :: E) a, x: b){\n        std/core/hnd/try-finalize-prompt<a,(e :: E)>((cont(x)));\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val b@10068 : bool\n                = std/core/hnd/yielding();\n      (match (b@10068) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Left<hnd/yield-info,a>((std/core/hnd/yield-capture<(e :: E)>()));\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/Right<hnd/yield-info,a>(res);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/try-finalize-prompt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/try-finalize-prompt"]}, {"name": {"op": "Var","id": "std/core/hnd/under3","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"111","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"112","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<10558>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 10558<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(10558 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (10558 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(10558 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "z","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}]},"annotation": "genExpr: op(x1, x2, x3)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"z\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["z"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"111","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"112","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w@0: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w@0)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<10558>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@0: 10558<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w@0: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(10558 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2@0: (10558 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(10558 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: cont(res)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res@0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res@0","type": {"op": "Top"}},"annotation": "genExpr: res@0"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont@0, res@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont@0: (a) -> (10557 :: E) 10556, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont@0: (a) -> (10557 :: E) 10556, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\ny"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (10557 :: E) 10556, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (10557 :: E) 10556, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y;\n  });\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (10557 :: E) 10556, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (10557 :: E) 10556, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y;\n  });\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "z","type": {"op": "Top"}},"annotation": "genExpr: z"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, op: (a, b, c) -> (e :: E) d, x1: a, x2: b, x3: c){\n  val w0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n  val z : d;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<d,(e :: E),d>((forall<b1> fn<(e :: E)>(cont: (b1) -> (e :: E) d, res: b1){\n        val w0@0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n        val y : d;\n        (match ((std/core/hnd/yielding())) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/hnd/yield-cont<d,(e :: E),d>((forall<c1> fn<(e :: E)>(cont@0: (c1) -> (e :: E) d, res@0: c1){\n              std/core/hnd/under1x<c1,d,(e :: E),(a1 :: (E, V) -> V)>(ev, cont@0, res@0);\n            }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> val _@0 : ()\n                      = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0@0);\n            y;\n        });\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n       -> z;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/under3\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/under3"]}, {"name": {"op": "Var","id": "std/core/hnd/under4","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x1","type": {"op": "Top"}}, {"op": "Var","id": "x2","type": {"op": "Top"}}, {"op": "Var","id": "x3","type": {"op": "Top"}}, {"op": "Var","id": "x4","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"111","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"112","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<10671>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 10671<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(10671 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2: (10671 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(10671 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0"]}, {"name": {"op": "Var","id": "z","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "op","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: op"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x1","type": {"op": "Top"}},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x2","type": {"op": "Top"}},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x3","type": {"op": "Top"}},"annotation": "genExpr: x3"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x4","type": {"op": "Top"}},"annotation": "genExpr: x4"}]},"annotation": "genExpr: op(x1, x2, x3, x4)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"z\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["z"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res","type": {"op": "Top"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"111","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"112","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"swapCurrentEvv\" (fun Effectful (ptr) ptr)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genTest: normal: (w@0: hnd/evv<4237>) -> {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"annotation": "genExpr: w@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}},"annotation": "genExpr: std/core/hnd/evv-swap<(total :: E),(e :: E),(_e :: E)>(w@0)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<10671>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/marker<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@0: 10671<4237,4238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (w@0: hnd/evv<4237>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(10671 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@2@0: (10671 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (w@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(10671 :: (E, V) -> V)>))\n     -> std/core/hnd/evv-swap<(total :: E),(e :: E),(_e1 :: E)>(w@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"w0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}"},"export_as": ["w0@0"]}, {"name": {"op": "Var","id": "y","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "res","type": {"op": "Top"}},"annotation": "genExpr: res"}]},"annotation": "genExpr: cont(res)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["y"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-cont","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "res@0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/under1x","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "ev","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cont@0","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: cont@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "res@0","type": {"op": "Top"}},"annotation": "genExpr: res@0"}]},"annotation": "genExpr: std/core/hnd/under1x<a,a,(e :: E),(a :: (E, V) -> V)>(ev, cont@0, res@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont@0: (a) -> (10670 :: E) 10669, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont@0: (a) -> (10670 :: E) 10669, res@0: a){\n  std/core/hnd/under1x<a,b,(e :: E),(b :: (E, V) -> V)>(ev, cont@0, res@0);\n}))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"setCurrentEvv\" (fun Effectful (ptr) unit)) $arg0:ptr)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "w0@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}},"annotation": "genExpr: w0@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\ny"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(e :: E)>(cont: (a) -> (10670 :: E) 10669, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (10670 :: E) 10669, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y;\n  });\n}"}]},"annotation": "genExpr: std/core/hnd/yield-cont<a,(e :: E),a>((forall<a> fn<(e :: E)>(cont: (a) -> (10670 :: E) 10669, res: a){\n  val w0@0 : (hnd/evv :: E -> V)<(_e :: E)>;\n  val y : b;\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<b> fn<(e :: E)>(cont@0: (b) -> (10670 :: E) 10669, res@0: b){\n        std/core/hnd/under1x<b,c,(e :: E),(c :: (E, V) -> V)>(ev, cont@0, res@0);\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val _@0 : ()\n                = std/core/hnd/evv-set<(e :: E),(_e :: E)>(w0@0);\n      y;\n  });\n}))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "z","type": {"op": "Top"}},"annotation": "genExpr: z"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V)> fn<(e :: E)>(ev: (hnd/ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, op: (a, b, c, d) -> (e :: E) a1, x1: a, x2: b, x3: c, x4: d){\n  val w0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n  val z : a1;\n  val _ : ();\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/hnd/yield-cont<a1,(e :: E),a1>((forall<c1> fn<(e :: E)>(cont: (c1) -> (e :: E) a1, res: c1){\n        val w0@0 : (hnd/evv :: E -> V)<(_e1 :: E)>;\n        val y : a1;\n        (match ((std/core/hnd/yielding())) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/hnd/yield-cont<a1,(e :: E),a1>((forall<d1> fn<(e :: E)>(cont@0: (d1) -> (e :: E) a1, res@0: d1){\n              std/core/hnd/under1x<d1,a1,(e :: E),(b1 :: (E, V) -> V)>(ev, cont@0, res@0);\n            }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> val _@0 : ()\n                      = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0@0);\n            y;\n        });\n      }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@2: bool)\n       -> z;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/under4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/under4"]}, {"name": {"op": "Var","id": "std/core/hnd/unsafe-try-finalize","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/try-finalize-prompt","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/try-finalize-prompt<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}]},"annotation": "genExpr: std/core/hnd/try-finalize-prompt<a,(e :: E)>((action()))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: () -> (e :: E) a){\n  std/core/hnd/try-finalize-prompt<a,(e :: E)>((action()));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/unsafe-try-finalize\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/unsafe-try-finalize"]}, {"name": {"op": "Var","id": "std/core/hnd/yield-bind2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "extend","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/yield-extend","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "extend","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: extend"}]},"annotation": "genExpr: std/core/hnd/yield-extend<a,a,(e :: E)>(extend)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "!sexp:false","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: next(x)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"!sexp:false\",\"args\": [],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(x: a, extend: (a) -> (e :: E) b, next: (a) -> (e :: E) b){\n  (match ((std/core/hnd/yielding())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/yield-extend<a,b,(e :: E)>(extend);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> next(x);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/yield-bind2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/yield-bind2"]}, {"name": {"op": "Var","id": "std/core/hnd/ev/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@pat-x142_18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "@pat-x142_37","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x142_18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"111","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"112","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"113","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@pat-x142_37","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"114","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"115","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"116","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"117","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/hnd/eq-marker","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/eq-marker<a,a,(e :: E),(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"111","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m1: hnd/marker<10760,10761>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"115","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m2: hnd/marker<10770,10771>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m2"}]},"annotation": "genExpr: std/core/hnd/eq-marker<a,a,(e :: E),(e :: E)>(m1, m2)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@pat-x142_37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@4: hnd/htag<10801>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m2: hnd/marker<10770,10771>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"116\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@5: 10801<10770,10771>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@6: hnd/evv<10770>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x142_37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"116\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@pat-x142_37) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@4: (hnd/htag :: ((E, V) -> V) -> V)<(10801 :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (m2: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (@pat@5: (10801 :: (E, V) -> V)<(e :: E),a>) : (c :: (E, V) -> V)<(e :: E),a>, (@pat@6: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(10801 :: (E, V) -> V)>))\n     -> std/core/hnd/eq-marker<b,a,(e1 :: E),(e :: E)>(m1, m2);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@pat-x142_18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<10801>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m1: hnd/marker<10760,10761>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 10801<10760,10761>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/evv<10760>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@pat-x142_18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"112\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(a :: (E, V) -> V)> fn(@pat-x142_18: (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, @pat-x142_37: (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){\n  (match (@pat-x142_18) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (m1: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (@pat@1: (a :: (E, V) -> V)<(e :: E),b>) : (a :: (E, V) -> V)<(e :: E),b>, (@pat@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n       -> (match (@pat-x142_37) {\n        ((@skip std/core/hnd/Ev<(e1 :: E),c>((@pat@4: (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (m2: (hnd/marker :: (E, V) -> V)<(e1 :: E),c>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),c>, (@pat@5: (a :: (E, V) -> V)<(e1 :: E),c>) : (a :: (E, V) -> V)<(e1 :: E),c>, (@pat@6: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))\n           -> std/core/hnd/eq-marker<b,c,(e :: E),(e1 :: E)>(m1, m2);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/hnd/ev/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/hnd/ev/(==)"]}, {"name": {"op": "Var","id": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tagname","type": {"op": "String"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/htag","tag": "std/core/hnd/Htag","args": [{"op": "Var","id": "tagname","type": {"op": "String"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Htag"]}, {"name": {"op": "Var","id": "std/core/hnd/Ev","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "marker","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "hnd","type": {"op": "Top"}}, {"op": "Var","id": "hevv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/ev","tag": "std/core/hnd/Ev","args": [{"op": "Var","id": "htag","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "marker","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "hnd","type": {"op": "Top"}}, {"op": "Var","id": "hevv","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Ev"]}, {"name": {"op": "Var","id": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/clause0","tag": "std/core/hnd/Clause0","args": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Clause0"]}, {"name": {"op": "Var","id": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/clause1","tag": "std/core/hnd/Clause1","args": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Clause1"]}, {"name": {"op": "Var","id": "std/core/hnd/Clause2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause2"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/clause2","tag": "std/core/hnd/Clause2","args": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Clause2"]}, {"name": {"op": "Var","id": "std/core/hnd/Deep","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "result","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/resume-result","tag": "std/core/hnd/Deep","args": [{"op": "Var","id": "result","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Deep"]}, {"name": {"op": "Var","id": "std/core/hnd/Shallow","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "result","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/resume-result","tag": "std/core/hnd/Shallow","args": [{"op": "Var","id": "result","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Shallow"]}, {"name": {"op": "Var","id": "std/core/hnd/Finalize","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "result","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/resume-result","tag": "std/core/hnd/Finalize","args": [{"op": "Var","id": "result","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Finalize"]}, {"name": {"op": "Var","id": "std/core/hnd/Resume-context","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-context"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/resume-context","tag": "std/core/hnd/Resume-context","args": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Resume-context"]}, {"name": {"op": "Var","id": "std/core/hnd/Pure","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/hnd/yld","tag": "std/core/hnd/Pure","args": []},"annotation": "genConstr"},"export_as": ["std/core/hnd/Pure"]}, {"name": {"op": "Var","id": "std/core/hnd/YieldingFinal","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/hnd/yld","tag": "std/core/hnd/YieldingFinal","args": []},"annotation": "genConstr"},"export_as": ["std/core/hnd/YieldingFinal"]}, {"name": {"op": "Var","id": "std/core/hnd/Yielding","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/hnd/yld","tag": "std/core/hnd/Yielding","args": []},"annotation": "genConstr"},"export_as": ["std/core/hnd/Yielding"]}, {"name": {"op": "Var","id": "std/core/hnd/Yield","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/yld"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "Construct","type_tag": "std/core/hnd/yld","tag": "std/core/hnd/Yield","args": [{"op": "Var","id": "clause","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "cont","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}}]}},"annotation": "genConstr"},"export_as": ["std/core/hnd/Yield"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}