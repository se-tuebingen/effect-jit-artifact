{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/int"},"includes": [{"format": "sexp","value": ";; Converting from strings\n(define $parseWithBase:(fun Pure (str int) ptr) (lambda ($s:str $base:int)\n  (prim ($res:int $err:bool) (\"read(String, Int): Int\" $s:str $base:int)\n    (switch $err:bool\n      (true ;; OK\n         (make $std/core/types/maybe $std/core/types/Just ($res:top)))\n      (_ ;; couldnt parse\n         (make $std/core/types/maybe $std/core/types/Nothing ()))))))\n(define $xparseImpl:(fun Pure (str bool) ptr) (lambda ($s:str $hex:bool)\n  (switch $hex:bool\n    (false ;; parse\n           ($parseWithBase:(fun Pure (str int) ptr) $s:str 0)\n    )\n    (_ ;; hexadecimal\n       ($parseWithBase:(fun Pure (str int) ptr) $s:str 16)))))\n\n(unit)"}],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/int/(+)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  std/core/int/int-add(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/(+)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/(+)"]}, {"name": {"op": "Var","id": "std/core/int/(-)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  std/core/int/int-sub(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/(-)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/(-)"]}, {"name": {"op": "Var","id": "std/core/int/pow","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "exp","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-pow","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "exp","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, exp: int){\n  std/core/int/@extern-pow(i, exp);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/pow\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/pow"]}, {"name": {"op": "Var","id": "std/core/int/bool","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixNeq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/(!=)(i, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/bool\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/bool"]}, {"name": {"op": "Var","id": "std/core/int/cdiv-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-cdiv-exp10","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, n: int){\n  std/core/int/@extern-cdiv-exp10(i, n);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/cdiv-exp10\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/cdiv-exp10"]}, {"name": {"op": "Var","id": "std/core/int/mul-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-mul-exp10","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, n: int){\n  std/core/int/@extern-mul-exp10(i, n);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/mul-exp10\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/mul-exp10"]}, {"name": {"op": "Var","id": "std/core/int/cmp","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Lt;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  match ((std/core/int/(==)(x, y))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Eq;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/int/(>)(x, y))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Gt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Lt;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/cmp"]}, {"name": {"op": "Var","id": "std/core/int/count-digits","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-count-digits","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-count-digits(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/count-digits\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/count-digits"]}, {"name": {"op": "Var","id": "std/core/int/divmod","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!sexp:(prim ($d:int $m:int) (\"divmod(Int, Int): Int, Int\" $arg0:int $arg1:int) (make $divmodPair $divmodPair ($d:int $m:int)))","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  std/core/int/@extern-divmod(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/divmod\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/divmod"]}, {"name": {"op": "Var","id": "std/core/int/is-neg","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/(<)(i, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/is-neg\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/is-neg"]}, {"name": {"op": "Var","id": "std/core/int/int16","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"int16\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-int16","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"int16\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"int16\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-int16(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/int16\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"int16\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/int16"]}, {"name": {"op": "Var","id": "std/core/int/int8","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"int8\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-int8","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"int8\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"int8\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-int8(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/int8\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"int8\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/int8"]}, {"name": {"op": "Var","id": "std/core/int/intptr_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"intptr_t\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-intptr_t","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"intptr_t\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"intptr_t\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-intptr_t(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/intptr_t\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"intptr_t\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/intptr_t"]}, {"name": {"op": "Var","id": "std/core/int/is-even","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10000","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(\"infixEq(Int, Int): Boolean\" (\"mod(Int, Int): Int\" $arg0:int 2) 1)","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/is-odd(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10000"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10000","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10000","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10000\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  val b@10000 : bool\n        = std/core/int/is-odd(i);\n  match (b@10000) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/is-even\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/is-even"]}, {"name": {"op": "Var","id": "std/core/int/is-exp10","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-is-exp10","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-is-exp10(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/is-exp10\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/is-exp10"]}, {"name": {"op": "Var","id": "std/core/int/is-pos","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/(>)(i, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/is-pos\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/is-pos"]}, {"name": {"op": "Var","id": "std/core/int/max","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, j: int){\n  match ((std/core/int/(>=)(i, j))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> i;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> j;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/max\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/max"]}, {"name": {"op": "Var","id": "std/core/int/maybe","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<int>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: std/core/types/Just<int>(i)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  match ((std/core/int/(==)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Nothing<int>;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Just<int>(i);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/maybe"]}, {"name": {"op": "Var","id": "std/core/int/mbint","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"maybe\""}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (i: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(i,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (i: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(m: (maybe :: V -> V)<int>){\n  match (m) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 0;\n    ((@skip std/core/types/Just((i: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> i;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/mbint\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/mbint"]}, {"name": {"op": "Var","id": "std/core/int/min","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "j","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Int"}},"annotation": "genExpr: j"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, j: int){\n  match ((std/core/int/(<=)(i, j))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> i;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> j;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/min\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/min"]}, {"name": {"op": "Var","id": "std/core/int/negate","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "neg(Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/(~)(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/negate\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/negate"]}, {"name": {"op": "Var","id": "std/core/int/order","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(>)(i, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  match ((std/core/int/(<)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Lt;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/int/(>)(i, 0))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Gt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Eq;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/order\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/order"]}, {"name": {"op": "Var","id": "std/core/int/order2","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq2","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Eq2<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Eq2<int>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Lt2<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/Lt2<int>(x, y)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Gt2<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Int"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Gt2<int>(y, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(<)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt2<int>(x, y);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Gt2<int>(y, x);\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  match ((std/core/int/(==)(x, y))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Eq2<int>(x);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/int/(<)(x, y))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Lt2<int>(x, y);\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Gt2<int>(y, x);\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/order2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/order2"]}, {"name": {"op": "Var","id": "std/core/int/xparse","type": {"op": "Function","params": [{"op": "String"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "hex","type": {"op": "Bool"}}],"body": {"op": "Primitive","name": "!sexp:($xparseImpl:(fun Pure (ptr bool) ptr) $arg0:ptr $arg1:bool)","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "hex","type": {"op": "Bool"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, hex: bool){\n  std/core/int/@extern-xparse(s, hex);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/xparse\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/xparse"]}, {"name": {"op": "Var","id": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "show(Int): String","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-show(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/show"]}, {"name": {"op": "Var","id": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-ssize_t","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-ssize_t(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/ssize_t\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/ssize_t"]}, {"name": {"op": "Var","id": "std/core/int/uint8","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"int8\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/int/@extern-uint8","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"int8\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"int8\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/@extern-uint8(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/uint8\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"int8\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/uint8"]}, {"name": {"op": "Var","id": "std/core/int/(^)","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "exp","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/pow","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/pow"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "exp","type": {"op": "Int"}},"annotation": "genExpr: exp"}]},"annotation": "genExpr: std/core/int/pow(i, exp)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, exp: int){\n  std/core/int/pow(i, exp);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/(^)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/(^)"]}, {"name": {"op": "Var","id": "std/core/int/cdivmod-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/types/Tuple2<int,int>(i, 0)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "cq","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/cdiv-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/cdiv-exp10"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/cdiv-exp10(i, n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"cq\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["cq"]}, {"name": {"op": "Var","id": "y@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/mul-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/mul-exp10"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "cq","type": {"op": "Int"}},"annotation": "genExpr: cq"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/mul-exp10(cq, n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10002"]}, {"name": {"op": "Var","id": "cr","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "y@10002","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(i, y@10002)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"cr\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["cr"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "cq","type": {"op": "Int"}},"annotation": "genExpr: cq"}, {"op": "DebugWrap","inner": {"op": "Var","id": "cr","type": {"op": "Int"}},"annotation": "genExpr: cr"}]},"annotation": "genExpr: std/core/types/Tuple2<int,int>(cq, cr)"}},"annotation": "genExpr: val cq : int;\nval y@10002 : int;\nval cr : int;\nstd/core/types/Tuple2<int,int>(cq, cr)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, n: int){\n  match ((std/core/int/(<=)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Tuple2<int,int>(i, 0);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val cq : int;\n          val y@10002 : int;\n          val cr : int;\n      std/core/types/Tuple2<int,int>(cq, cr);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/cdivmod-exp10\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/cdivmod-exp10"]}, {"name": {"op": "Var","id": "std/core/int/dec","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/int-sub(i, 1);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/dec\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/dec"]}, {"name": {"op": "Var","id": "std/core/int/exp10","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exp","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/mul-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/mul-exp10"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "exp","type": {"op": "Int"}},"annotation": "genExpr: exp"}]},"annotation": "genExpr: std/core/int/mul-exp10(1, exp)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exp: int){\n  std/core/int/mul-exp10(1, exp);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/exp10\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/exp10"]}, {"name": {"op": "Var","id": "std/core/int/divmod-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x1","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/cdivmod-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/cdivmod-exp10"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/cdivmod-exp10(i, n)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"2","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"3","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10005","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (cr: int) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(<)(cr, 0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10005\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10005"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10005","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "y@0@10011","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/mul-exp10","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/mul-exp10"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/mul-exp10(1, n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@0@10011\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@0@10011"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (cq: int) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"2\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(cq, 1)"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (cr: int) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Var","id": "y@0@10011","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(cr, y@0@10011)"}]},"annotation": "genExpr: std/core/types/Tuple2<int,int>((std/core/int/int-sub(cq, 1)), (std/core/int/int-add(cr, y@0@10011)))"}},"annotation": "genExpr: val y@0@10011 : int\n      = std/core/int/mul-exp10(1, n);\nstd/core/types/Tuple2<int,int>((std/core/int/int-sub(cq, 1)), (std/core/int/int-add(cr, y@0@10011)))"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10005\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10005","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<int,int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (cq: int) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: cq"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (cr: int) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: cr"}]},"annotation": "genExpr: std/core/types/Tuple2<int,int>(cq, cr)"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10005\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@10005) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> val y@0@10011 : int\n              = std/core/int/mul-exp10(1, n);\n    std/core/types/Tuple2<int,int>((std/core/int/int-sub(cq, 1)), (std/core/int/int-add(cr, y@0@10011)));\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int,int>(cq, cr);\n}"}},"annotation": "genExpr: val b@10005 : bool\n      = std/core/int/(<)(cr, 0);\nmatch (b@10005) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> val y@0@10011 : int\n              = std/core/int/mul-exp10(1, n);\n    std/core/types/Tuple2<int,int>((std/core/int/int-sub(cq, 1)), (std/core/int/int-add(cr, y@0@10011)));\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/Tuple2<int,int>(cq, cr);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(cq,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (cq: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cr,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (cr: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"3\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int, n: int){\n  match ((std/core/int/cdivmod-exp10(i, n))) {\n    ((@skip std/core/types/Tuple2((cq: int) : int, (cr: int) : int) : (int, int) ) as @pat: (int, int))\n       -> val b@10005 : bool\n                = std/core/int/(<)(cr, 0);\n      (match (b@10005) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> val y@0@10011 : int\n                    = std/core/int/mul-exp10(1, n);\n          std/core/types/Tuple2<int,int>((std/core/int/int-sub(cq, 1)), (std/core/int/int-add(cr, y@0@10011)));\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/Tuple2<int,int>(cq, cr);\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/divmod-exp10\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/divmod-exp10"]}, {"name": {"op": "Var","id": "std/core/int/exp2","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "exp","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/pow","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/pow"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 2},"annotation": "genExpr: 2"}, {"op": "DebugWrap","inner": {"op": "Var","id": "exp","type": {"op": "Int"}},"annotation": "genExpr: exp"}]},"annotation": "genExpr: std/core/int/pow(2, exp)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(exp: int){\n  std/core/int/pow(2, exp);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/exp2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/exp2"]}, {"name": {"op": "Var","id": "std/core/int/inc","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/int/int-add(i, 1);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/inc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/inc"]}, {"name": {"op": "Var","id": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "hex","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/int/xparse","type": {"op": "Function","params": [{"op": "String"}, {"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/xparse"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hex","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"4","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-hex@555: bool) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-hex@555"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hex\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-hex@555,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-hex@555: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hex\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hex","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"hex\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hex\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (hex) {\n  ((std/core/types/@Optional((@uniq-hex@555: bool) : bool) : ? bool ) as @pat: ? bool)\n     -> @uniq-hex@555;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@0: ? bool)\n     -> std/core/types/False;\n}"}]},"annotation": "genExpr: std/core/int/xparse(s, (match (hex) {\n    ((std/core/types/@Optional((@uniq-hex@555: bool) : bool) : ? bool ) as @pat: ? bool)\n       -> @uniq-hex@555;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@0: ? bool)\n       -> std/core/types/False;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, hex: ? bool){\n  std/core/int/xparse(s, (match (hex) {\n      ((std/core/types/@Optional((@uniq-hex@555: bool) : bool) : ? bool ) as @pat: ? bool)\n         -> @uniq-hex@555;\n      ((@skip std/core/types/@None() : ? bool ) as @pat@0: ? bool)\n         -> std/core/types/False;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/parse-int\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/parse-int"]}, {"name": {"op": "Var","id": "std/core/int/sign","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(>)(i, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Lt;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  match ((std/core/int/(==)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Eq;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/int/(>)(i, 0))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Gt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Lt;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/int/sign\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/int/sign"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}