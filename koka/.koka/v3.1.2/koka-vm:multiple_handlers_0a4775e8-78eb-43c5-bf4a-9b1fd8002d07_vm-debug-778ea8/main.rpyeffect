{"blocks":[{"label":"0([match_def@[mcore:[#78]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_main/@Hnd-emit@[mcore:[#78]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,(),main/emit,72,73>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,(),main/emit,72,73>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#78]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":0,"clauses":[{"tag":"main/@Hnd-emit","target":1,"args":{"any":[0,1]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#705]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#79]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_main/@Hnd-emit@[mcore:[#79]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,(),main/emit,96,97>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,(),main/emit,96,97>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#79]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":0,"clauses":[{"tag":"main/@Hnd-emit","target":4,"args":{"any":[0,1]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#706]","target":3,"args":{"any":[]}}}]},
{"label":"6([mcore:[#80]#9])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"7([mcore:[#83]#14])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"8([mcore:[#89]#22])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),a>(main/@tag-emit, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),a>(main/@tag-emit, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":7}]},
{"label":"9([match_def@[mcore:[#90]#29]#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_main/@Hnd-emit@[mcore:[#90]#29]#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,169,170>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,169,170>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([mcore:[#90]#29])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":0,"clauses":[{"tag":"main/@Hnd-emit","target":10,"args":{"any":[0,1]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#707]","target":9,"args":{"any":[]}}}]},
{"label":"12([mcore:[#91]#32])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"13([mcore:[#92]#38])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"14([#57])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([k@[#58]#60])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([match_def@[#58]#62])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([k@[match_main/@Hnd-emit@[#58]#63]#65])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([#67])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([k@[#68]#70])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([#68])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10027, e)","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10027, e)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"21([match_main/@Hnd-emit@[#58]#63])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10027, e);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10027, e);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":20,"args":{"any":[3]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#708]","target":18,"args":{"any":[]}}}]},
{"label":"22([#58])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10027, e);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10027, e);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":4,"clauses":[{"tag":"main/@Hnd-emit","target":21,"args":{"any":[3,4]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#709]","target":16,"args":{"any":[]}}}]},
{"label":"23([k@[k@[mcore:[#101]#42]#48]#56])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":22,"args":{"any":[2,3,4,5]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#710]","target":14,"args":{"any":[]}}}]},
{"label":"24([k@[mcore:[#101]#42]#48])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":23,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":12}]},
{"label":"25([mcore:[#101]#42])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":24,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10027\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"26([mcore:[#102]#72])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"27([mcore:[#108]#78])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail1"}]},
{"label":"28([mcore:[#116]#83])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10018\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10018, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genExpr: 1009","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1009},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1009","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10018, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10018\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([mcore:[#121]#90])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([method_apply@[mcore:[#124]#91]#96])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":28}]},
{"label":"31([#110])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":29}]},
{"label":"32([k@[k@[mcore:[#124]#91]#103]#106])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[31],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":8}]},
{"label":"33([k@[mcore:[#124]#91]#103])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":32,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":112}]},
{"label":"34([mcore:[#124]#91])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n      val x@10018 : int\n            = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l28-c12: 270){\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n    val x@10018 : int\n          = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n  val x@10018 : int\n        = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n}))","traced":{"any":[]}},
{"op":"New","out":3,"targets":[30],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":33,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n  val x@10018 : int\n        = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n    val x@10018 : int\n          = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n      val x@10018 : int\n            = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l28-c12: 270){\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":27}]},
{"label":"35([method_apply@[mcore:[#126]#120]#125])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":34}]},
{"label":"36([mcore:[#126]#120])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(472 :: H),int>){\n    (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n          val x@10018 : int\n                = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l28-c12: 270){\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":0,"targets":[35],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(472 :: H),int>){\n    (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n          val x@10018 : int\n                = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l28-c12: 270){\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":26}]},
{"label":"37([mcore:[#128]#137])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n            val x@10018 : int\n                  = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l28-c12: 270){\n          (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n            val x@10018 : int\n                  = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10018, 1)), 1009))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l28-c12: 270){\n          (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":36}]},
{"label":"38([mcore:[#131]#144])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"39([mcore:[#132]#150])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"40([switch case for Bool(true)#156])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"41([k@[k@[#175]#177]#184])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([k@[#175]#177])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-generator@1196(n, i@0@10002)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-generator@1196(n, i@0@10002)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":57}]},
{"label":"43([match_def@[#175]#186])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([k@[match_std/core/hnd/Ev@[#175]#187]#189])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"45([#191])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([k@[#192]#194])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([match_def@[#192]#196])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([#199])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([match_std/core/hnd/Clause1@[#192]#197])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10031, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10031, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"50([#192])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10031, i);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10031, i);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":49,"args":{"any":[3]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#711]","target":47,"args":{"any":[]}}}]},
{"label":"51([match_std/core/hnd/Ev@[#175]#187])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10031, i);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10031, i);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":4,"clauses":[{"tag":"main/@Hnd-emit","target":50,"args":{"any":[3,4]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#712]","target":45,"args":{"any":[]}}}]},
{"label":"52([#175])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@10031) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-emit) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10031, i);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Push","target":42,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@10031) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-emit) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10031, i);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":51,"args":{"any":[2,3,4,5]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#713]","target":43,"args":{"any":[]}}}]},
{"label":"53([k@[switch case for Bool(false)#161]#167])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":52,"args":{"any":[2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Jump","target":38}]},
{"label":"54([switch case for Bool(false)#161])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@10031 : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>;\nval _ : ();\nval i@0@10002 : int;\nmain/@lift-generator@1196(n, i@0@10002)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":53,"args":{"any":[2,0,1]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@10031 : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>;\nval _ : ();\nval i@0@10002 : int;\nmain/@lift-generator@1196(n, i@0@10002)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":39}]},
{"label":"55([switch default case#201])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([switch default case#159])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[54],"default":55}]},
{"label":"57([mcore:[#145]#154])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[40],"default":56}]},
{"label":"58([mcore:[#149]#202])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Jump","target":57}]},
{"label":"59([mcore:[#150]#208])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"60([mcore:[#156]#214])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail1"}]},
{"label":"61([mcore:[#163]#219])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10022\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10023\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(i, i)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10022, y@10023)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Debug","msg":"BGN: genExpr: 1009","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1009},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1009","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10022, y@10023)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(i, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10023\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10022\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([mcore:[#168]#224])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([method_apply@[mcore:[#171]#225]#230])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":61}]},
{"label":"64([#244])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":62}]},
{"label":"65([k@[k@[mcore:[#171]#225]#237]#240])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[64],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":8}]},
{"label":"66([k@[mcore:[#171]#225]#237])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":65,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":112}]},
{"label":"67([mcore:[#171]#225])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n      val x@10022 : int;\n      val y@10023 : int;\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l37-c12: 569){\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n    val x@10022 : int;\n    val y@10023 : int;\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n  val x@10022 : int;\n  val y@10023 : int;\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n}))","traced":{"any":[]}},
{"op":"New","out":3,"targets":[63],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":66,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n  val x@10022 : int;\n  val y@10023 : int;\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n    val x@10022 : int;\n    val y@10023 : int;\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n      val x@10022 : int;\n      val y@10023 : int;\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l37-c12: 569){\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":60}]},
{"label":"68([method_apply@[mcore:[#173]#253]#258])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":67}]},
{"label":"69([mcore:[#173]#253])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(779 :: H),int>){\n    (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n          val x@10022 : int;\n          val y@10023 : int;\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l37-c12: 569){\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":0,"targets":[68],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(779 :: H),int>){\n    (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n          val x@10022 : int;\n          val y@10023 : int;\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l37-c12: 569){\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":59}]},
{"label":"70([mcore:[#175]#270])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n            val x@10022 : int;\n            val y@10023 : int;\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l37-c12: 569){\n          (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n            val x@10022 : int;\n            val y@10023 : int;\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10022, y@10023)), 1009))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l37-c12: 569){\n          (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":69}]},
{"label":"71([mcore:[#176]#277])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"72([mcore:[#182]#283])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail1"}]},
{"label":"73([mcore:[#189]#288])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10024\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[2]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10024, i)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Debug","msg":"BGN: genExpr: 1009","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1009},
{"op":"PrimOp","name":"mod(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1009","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10024, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10024\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([mcore:[#194]#293])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(res)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([method_apply@[mcore:[#197]#294]#299])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":73}]},
{"label":"76([#313])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":74}]},
{"label":"77([k@[k@[mcore:[#197]#294]#306]#309])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[76],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":8}]},
{"label":"78([k@[mcore:[#197]#294]#306])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":77,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":112}]},
{"label":"79([mcore:[#197]#294])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n      val x@10024 : int\n            = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l19-c12: 835){\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n    val x@10024 : int\n          = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n  val x@10024 : int\n        = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n}))","traced":{"any":[]}},
{"op":"New","out":3,"targets":[75],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":78,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n  val x@10024 : int\n        = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n    val x@10024 : int\n          = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n      val x@10024 : int\n            = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l19-c12: 835){\n    (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":72}]},
{"label":"80([method_apply@[mcore:[#199]#322]#327])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":79}]},
{"label":"81([mcore:[#199]#322])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(1037 :: H),int>){\n    (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n          val x@10024 : int\n                = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l19-c12: 835){\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":0,"targets":[80],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(1037 :: H),int>){\n    (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n          val x@10024 : int\n                = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l19-c12: 835){\n        (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":71}]},
{"label":"82([mcore:[#201]#339])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n            val x@10024 : int\n                  = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l19-c12: 835){\n          (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(res: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: int){\n            val x@10024 : int\n                  = (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(res, (std/core/int/(%)((std/core/int/int-add(x@10024, i)), 1009))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(_w-l19-c12: 835){\n          (std/core/types/local-get<int,(h :: H),(e :: E)>(res));\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":81}]},
{"label":"83([mcore:[#206]#346])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Jump","target":57}]},
{"label":"84([mcore:[#212]#352])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Jump","target":57}]},
{"label":"85([mcore:[#218]#358])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@lift-generator@1196(n, 0)","traced":{"any":[]}},
{"op":"Jump","target":57}]},
{"label":"86([method_apply@[mcore:[#222]#364]#366])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":83}]},
{"label":"87([method_apply@[k@[mcore:[#222]#364]#379]#381])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":84}]},
{"label":"88([#396])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":85}]},
{"label":"89([k@[k@[k@[mcore:[#222]#364]#379]#394]#409])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(sqs, 1009)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1009},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[2]},"in":{"any":[2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@0@10011\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(*)(s, 103)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":103},
{"op":"PrimOp","name":"infixMul(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10008\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@0@10010, y@0@10011)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@0@10010, y@0@10011)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10008\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(s, 103)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@0@10011\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(*)(sqs, 1009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10010\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([k@[k@[mcore:[#222]#364]#379]#394])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/counting<(),(div :: X)>((fn<<(main/emit :: (E, V) -> V),(div :: X)>>(){\n  (main/@lift-generator@1196(n, 0));\n}))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[88],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":89,"args":{"any":[0,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/counting<(),(div :: X)>((fn<<(main/emit :: (E, V) -> V),(div :: X)>>(){\n  (main/@lift-generator@1196(n, 0));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":37}]},
{"label":"91([k@[mcore:[#222]#364]#379])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/summing<(),(div :: X)>((fn<<(main/emit :: (E, V) -> V),(div :: X)>>(){\n  (main/@lift-generator@1196(n, 0));\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[87],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":90,"args":{"any":[1,0]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":4,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/summing<(),(div :: X)>((fn<<(main/emit :: (E, V) -> V),(div :: X)>>(){\n  (main/@lift-generator@1196(n, 0));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":82}]},
{"label":"92([mcore:[#222]#364])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"sqs\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/sq_summing<(),(div :: X)>((fn<<(main/emit :: (E, V) -> V),(div :: X)>>(){\n  (main/@lift-generator@1196(n, 0));\n}))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[86],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":91,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/sq_summing<(),(div :: X)>((fn<<(main/emit :: (E, V) -> V),(div :: X)>>(){\n  (main/@lift-generator@1196(n, 0));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"sqs\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":70}]},
{"label":"93([mcore:[#223]#414])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/os/env/get-args"}]},
{"label":"94([mcore:[#225]#418])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/parse-int"}]},
{"label":"95([mcore:[#232]#424])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"96([mcore:[#234]#429])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"97([k@[k@[#453]#462]#467])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":95}]},
{"label":"98([k@[#453]#462])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":97,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Jump","target":96}]},
{"label":"99([#453])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":98,"args":{"any":[]}},
{"op":"Jump","target":92}]},
{"label":"100([match_def@[#472]#473])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"101([match_std/core/types/Just@[#472]#474])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"102([#472])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":101,"args":{"any":[0]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#714]","target":100,"args":{"any":[]}}}]},
{"label":"103([#475])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 5","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 5","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"104([k@[k@[k@[mcore:[#238]#434]#439]#441]#451])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/run((match (m@10012) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (m@10012) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":99,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10012) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/run((match (m@10012) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":103,"args":{"any":[]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#715]","target":102,"args":{"any":[]}}}]},
{"label":"105([k@[k@[mcore:[#238]#434]#439]#441])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":104,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":94}]},
{"label":"106([#479])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([#480])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([match_def@[k@[mcore:[#238]#434]#439]#478])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":107,"args":{"any":[]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#716]","target":106,"args":{"any":[]}}}]},
{"label":"109([#483])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"110([k@[mcore:[#238]#434]#439])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/parse-int((match (xs@10014) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10014) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":105,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10014) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/parse-int((match (xs@10014) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"m@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":109,"args":{"any":[1,2]}}],"default":{"tag":"0998acdc-4882-4853-bfde-52086901439b#[Missing Tag#717]","target":108,"args":{"any":[]}}}]},
{"label":"111([mcore:[#238]#434])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":110,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":93}]},
{"label":"112([mcore:[#239]#119])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"main/emit","tag":"main/@Hnd-emit","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"113([k@[k@[k@[k@[#655]#665]#675]#685]#692])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"main/@tag-emit"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_6c7f7e61-7594-4df6-8463-e0d8b183336a"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"114([k@[k@[k@[#655]#665]#675]#685])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/@tag-emit)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"main/@tag-emit\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(main/emit :: (E, V) -> V)>(\"emit@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"emit@main\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"emit@main"},
{"op":"Push","target":113,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"emit@main\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(main/emit :: (E, V) -> V)>(\"emit@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"main/@tag-emit\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":6}]},
{"label":"115([k@[k@[#655]#665]#675])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#77]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_os_env.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"Push","target":114,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"116([k@[#655]#665])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#76]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":115,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"117([#655])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#75]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":116,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"118([k@[k@[k@[k@[#605]#615]#625]#635]#645])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#74]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":117,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"119([k@[k@[k@[#605]#615]#625]#635])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#73]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":118,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"120([k@[k@[#605]#615]#625])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#72]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":119,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"121([k@[#605]#615])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#71]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":120,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"122([#605])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#70]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":121,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"123([k@[k@[k@[k@[#555]#565]#575]#585]#595])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#69]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":122,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"124([k@[k@[k@[#555]#565]#575]#585])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#68]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":123,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"125([k@[k@[#555]#565]#575])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#67]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":124,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"126([k@[#555]#565])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#66]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":125,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"127([#555])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#65]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":126,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"128([k@[k@[k@[k@[#505]#515]#525]#535]#545])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#64]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":127,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"129([k@[k@[k@[#505]#515]#525]#535])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#63]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":128,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"130([k@[k@[#505]#515]#525])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#62]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":129,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"131([k@[#505]#515])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#61]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":130,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"132([#505])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#60]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":131,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"133([k@[mcore:[static initializers#274]#485]#495])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#59]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":132,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"134([mcore:[static initializers#274]#485])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#58]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":133,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"135([k@[main entrypoint#2]#702])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"136([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":135,"args":{"any":[]}},
{"op":"Jump","target":134}]}],
"symbols":[{"name":"main/emit/@cfc","position":2},
{"name":"main/emit/@fun-emit","position":5},
{"name":"main/@handle-emit","position":8},
{"name":"main/@select-emit","position":11},
{"name":"main/emit","position":25},
{"name":"main/counting","position":37},
{"name":"main/@lift-generator@1196","position":57},
{"name":"main/generator","position":58},
{"name":"main/sq_summing","position":70},
{"name":"main/summing","position":82},
{"name":"main/run","position":92},
{"name":"main/main","position":111},
{"name":"main/@Hnd-emit","position":112},
{"name":"$static-init","position":134},
{"name":"$entrypoint","position":136}],
"frameSize":{"regs_any":16}}