{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "main"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_os_env.rpyeffect"}}}, {"name": {"op": "Var","id": "main/search/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "search","type": {"op": "Ptr","extern_ptr_name": "main/search"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "search","type": {"op": "Ptr","extern_ptr_name": "main/search"}},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"2","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause0<a,main/search,96,97>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int,int,main/search,96,97>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(search: (main/search :: (E, V) -> V)<(e :: E),a>){\n  (match (search) {\n    ((@skip main/@Hnd-search((@x: int) : int, (@pat@0: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/search :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/search/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/search/@cfc"]}, {"name": {"op": "Var","id": "main/search/@ctl-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "search","type": {"op": "Ptr","extern_ptr_name": "main/search"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "search","type": {"op": "Ptr","extern_ptr_name": "main/search"}},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"3","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"4","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"5","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"4","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: forall<a> hnd/clause0<a,main/search,125,126>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"3\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause0<a,main/search,125,126>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int,int,main/search,125,126>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"3\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,b> fn(search: (main/search :: (E, V) -> V)<(e :: E),a>){\n  (match (search) {\n    ((@skip main/@Hnd-search((@pat@0: int) : int, (@x: forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/search :: (E, V) -> V),(e :: E),a>) : forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/search :: (E, V) -> V)<(e :: E),a>))\n       -> @x<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/search/@ctl-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/search/@ctl-fail"]}, {"name": {"op": "Var","id": "main/search/@ctl-pick","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "search","type": {"op": "Ptr","extern_ptr_name": "main/search"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "search","type": {"op": "Ptr","extern_ptr_name": "main/search"}},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"6","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"8","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"8","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@x: hnd/clause1<int,int,main/search,153,154>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause0<a,main/search,153,154>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,int,main/search,153,154>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(search: (main/search :: (E, V) -> V)<(e :: E),a>){\n  (match (search) {\n    ((@skip main/@Hnd-search((@pat@0: int) : int, (@pat@1: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@x: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/search :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/search/@ctl-pick\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/search/@ctl-pick"]}, {"name": {"op": "Var","id": "main/@tag-search","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/search :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "search@main"},"annotation": "genExpr: \"search@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/search :: (E, V) -> V)>(\"search@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-search\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-search"]}, {"name": {"op": "Var","id": "main/@handle-search","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/search"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/search :: (E, V) -> V)|(e :: E)>,(main/search :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-search","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-search"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/search"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/search :: (E, V) -> V)|(e :: E)>,(main/search :: (E, V) -> V),a>(main/@tag-search, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/search :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/search :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/search :: (E, V) -> V)|(e :: E)>,(main/search :: (E, V) -> V),b>(main/@tag-search, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-search\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-search"]}, {"name": {"op": "Var","id": "main/@select-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/search"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/search"}},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"9","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"10","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"10","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/search,232,233>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-fail<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"9\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/search,232,233>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int,int,main/search,232,233>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"9\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(hnd: (main/search :: (E, V) -> V)<(e :: E),b>){\n  (match (hnd) {\n    ((@skip main/@Hnd-search((@pat@0: int) : int, (@ctl-fail: forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/search :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/search :: (E, V) -> V),(e :: E),b>, (@pat@1: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),b>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),b>) : (main/search :: (E, V) -> V)<(e :: E),b> ) as @pat: ((main/search :: (E, V) -> V)<(e :: E),b>))\n       -> @ctl-fail<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-fail"]}, {"name": {"op": "Var","id": "main/@select-pick","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/search"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/search"}},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"12","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,259,260>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @ctl-pick"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause0<a,main/search,259,260>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,259,260>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (main/search :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip main/@Hnd-search((@pat@0: int) : int, (@pat@1: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/search :: (E, V) -> V)<(e :: E),a>))\n       -> @ctl-pick;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-pick\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/search\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-pick"]}, {"name": {"op": "Var","id": "main/fail","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10029","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10029\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10029"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10029","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"15","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"17","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"17","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/search<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"19","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"20","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x22","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"20","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/search,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x22","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"23","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"23","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/search>) -> 1005 312) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"23\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10029","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10029"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f)(m, ev@10029)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"23\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/search>) -> 1005 312) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"23\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (1005 :: E) 312) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<312,(main/search :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<a,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f)(m, ev@10029);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/search,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause1<int,int,main/search,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-search((@pat@0@0: int) : int, (@ctl-fail: forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/search :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (1005 :: E) 312) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<312,(main/search :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<a,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f)(m, ev@10029);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10029\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/search>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10029\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(main/search :: (E, V) -> V)>(){\n  val ev@10029 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10029) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (main/search :: (E, V) -> V)<(e :: E),b>) : (main/search :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-search((@pat@0@0: int) : int, (@ctl-fail: forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/search :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/search :: (E, V) -> V),(e :: E),b>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),b>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),b>) : (main/search :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((main/search :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@ctl-fail<a>)) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(e :: E),b>))\n               -> std/core/hnd/cast-clause0<a,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),b>(f)(m, ev@10029);\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/fail\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/fail"]}, {"name": {"op": "Var","id": "main/pick","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "size","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10031","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10031"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10031","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"25","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"26","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"27","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"26","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/search<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"26\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"28","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"29","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"30","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"30","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"31","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"31","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/search>, int) -> 1007 int) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"31\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"25","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10031","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10031"}, {"op": "DebugWrap","inner": {"op": "Var","id": "size","type": {"op": "Int"}},"annotation": "genExpr: size"}]},"annotation": "genExpr: f(m, ev@10031, size)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"31\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/search>, int) -> 1007 int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"31\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (1007 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10031, size);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"28\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: forall<a> hnd/clause0<a,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"28\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-search((@pat@0@0: int) : int, (@pat@1@0: forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/search :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (1007 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10031, size);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/search>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"26\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/search :: (E, V) -> V)>(size: int){\n  val ev@10031 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10031) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-search((@pat@0@0: int) : int, (@pat@1@0: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/search :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-pick) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>))\n               -> f(m, ev@10031, size);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/pick\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/pick"]}, {"name": {"op": "Var","id": "main/safe","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "queen","type": {"op": "Int"}}, {"op": "Var","id": "diag","type": {"op": "Int"}}, {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"32","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"33","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixNeq(Int, Int): Boolean","args": [{"op": "Var","id": "queen","type": {"op": "Int"}}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"32","type": {"op": "Top"}},"annotation": "genTest: normal: (q: int) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x34","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixNeq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "queen","type": {"op": "Int"}},"annotation": "genExpr: queen"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"32","type": {"op": "Top"}},"annotation": "genTest: normal: (q: int) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Var","id": "diag","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(q, diag)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(!=)(queen, (std/core/int/int-add(q, diag)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x34","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x35","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixNeq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "queen","type": {"op": "Int"}},"annotation": "genExpr: queen"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"32","type": {"op": "Top"}},"annotation": "genTest: normal: (q: int) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Var","id": "diag","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(q, diag)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(!=)(queen, (std/core/int/int-sub(q, diag)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x35","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/safe","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: main/safe"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "queen","type": {"op": "Int"}},"annotation": "genExpr: queen"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "diag","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(diag, 1)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"33","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (qs: list<int>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: qs"}]},"annotation": "genExpr: main/safe(queen, (std/core/int/int-add(diag, 1)), qs)"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x35\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x35","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x35\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(!=)(queen, (std/core/int/int-sub(q, diag))))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> main/safe(queen, (std/core/int/int-add(diag, 1)), qs);\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x34\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x34\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(!=)(queen, (std/core/int/int-add(q, diag))))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> (match ((std/core/int/(!=)(queen, (std/core/int/int-sub(q, diag))))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> main/safe(queen, (std/core/int/int-add(diag, 1)), qs);\n      ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n         -> std/core/types/False;\n    });\n  (@pat@3: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixNeq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"queen\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (q: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixNeq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"queen\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (q: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(!=)(queen, q))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/core/int/(!=)(queen, (std/core/int/int-add(q, diag))))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> (match ((std/core/int/(!=)(queen, (std/core/int/int-sub(q, diag))))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> main/safe(queen, (std/core/int/int-add(diag, 1)), qs);\n          ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n             -> std/core/types/False;\n        });\n      (@pat@3: bool)\n         -> std/core/types/False;\n    });\n  (@pat@4: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(q,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (q: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(qs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (qs: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(queen: int, diag: int, xs: main/solution){\n  match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat: main/solution)\n       -> std/core/types/True;\n    ((@skip std/core/types/Cons((q: int) : int, (qs: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@0: main/solution)\n       -> (match ((std/core/int/(!=)(queen, q))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> (match ((std/core/int/(!=)(queen, (std/core/int/int-add(q, diag))))) {\n            ((std/core/types/True() : bool ) as @pat@2: bool)\n               -> (match ((std/core/int/(!=)(queen, (std/core/int/int-sub(q, diag))))) {\n                ((std/core/types/True() : bool ) as @pat@5: bool)\n                   -> main/safe(queen, (std/core/int/int-add(diag, 1)), qs);\n                ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n                   -> std/core/types/False;\n              });\n            (@pat@3: bool)\n               -> std/core/types/False;\n          });\n        (@pat@4: bool)\n           -> std/core/types/False;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/safe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/safe"]}, {"name": {"op": "Var","id": "main/place","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "size","type": {"op": "Int"}}, {"op": "Var","id": "column","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "column","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<int>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"column\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "column","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/place","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: main/place"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "size","type": {"op": "Int"}},"annotation": "genExpr: size"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "column","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(column, 1)"}]},"annotation": "genExpr: main/place(size, (std/core/int/int-sub(column, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"rest\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["rest"]}, {"name": {"op": "Var","id": "ev@10034","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10034\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10034"]}, {"name": {"op": "Var","id": "next","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10034","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"36","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"37","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"38","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"39","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"38","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/search<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"38\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"40","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"41","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"43","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"43","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/search>, int) -> 1007 int) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"43\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"37","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10034","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10034"}, {"op": "DebugWrap","inner": {"op": "Var","id": "size","type": {"op": "Int"}},"annotation": "genExpr: size"}]},"annotation": "genExpr: f(m, ev@10034, size)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"43\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/search>, int) -> 1007 int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"43\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (1007 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10034, size);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"38\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"40\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@1: forall<a> hnd/clause0<a,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause1<int,int,main/search,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"38\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"40\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-search((@pat@0@1: int) : int, (@pat@1@1: forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/search :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (1007 :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10034, size);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10034\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/search>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"38\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/search<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10034\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"38\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"39\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev@10034) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-search((@pat@0@1: int) : int, (@pat@1@1: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/search :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@ctl-pick) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, int) -> (e :: E) int) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10034, size);\n        });\n    });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"next\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["next"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x36","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none3","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none3<int,int,main/solution,bool,(total :: E),<(main/search :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/safe","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: main/safe"}, {"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Int"}},"annotation": "genExpr: next"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/hnd/@open-none3<int,int,main/solution,bool,(total :: E),<(main/search :: (E, V) -> V),(div :: X)>>(main/safe, next, 1, rest)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x36","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Int"}},"annotation": "genExpr: next"}, {"op": "DebugWrap","inner": {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Cons<int>(next, rest)"}}]},"annotation": "genBranch: [(@pat@1@1@0,{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x36","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@0@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@0@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@0@10037"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@0@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"37","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"38","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"39","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"40","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"39","type": {"op": "Top"}},"annotation": "genTest: normal: (h@0: main/search<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"39\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/search","clauses": [{"tag": "main/@Hnd-search","params": [{"op": "Var","id": "@\"@cfc\"41","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-fail\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-pick\"43","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/search,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<main/search>) -> 1005 main/solution) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"38","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@0@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@0@10037"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<main/search>) -> 1005 main/solution) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"45\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<main/solution>)) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (1005 :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"39\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/search<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"41\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause0<a,main/search,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@3: hnd/clause1<int,int,main/search,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"39\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/search<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/search\".\"main/@Hnd-search\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"41\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@0) {\n  ((@skip main/@Hnd-search((@pat@0@2: int) : int, (@ctl-fail: forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/search :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@3: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/search :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-fail<main/solution>)) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (1005 :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"ev@0@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: hnd/htag<main/search>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"39\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/search<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"39\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev@0@10037) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip main/@Hnd-search((@pat@0@2: int) : int, (@ctl-fail: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@3: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/search :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<main/solution>)) {\n          ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a>))\n             -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n        });\n    });\n}"}},"annotation": "genExpr: val ev@0@10037 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10037) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip main/@Hnd-search((@pat@0@2: int) : int, (@ctl-fail: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@3: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/search :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<main/solution>)) {\n          ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a>))\n             -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x36\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/@open-none3<int,int,main/solution,bool,(total :: E),<(main/search :: (E, V) -> V),(div :: X)>>(main/safe, next, 1, rest))) {\n  ((std/core/types/True() : bool ) as @pat@1@1@0: bool)\n     -> std/core/types/Cons<int>(next, rest);\n  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n     -> val ev@0@10037 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10037) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-search((@pat@0@2: int) : int, (@ctl-fail: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@3: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/search :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<main/solution>)) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n            });\n        });\n    });\n}"}},"annotation": "genExpr: val rest : main/solution;\nval ev@10034 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>;\nval next : int;\nmatch ((std/core/hnd/@open-none3<int,int,main/solution,bool,(total :: E),<(main/search :: (E, V) -> V),(div :: X)>>(main/safe, next, 1, rest))) {\n  ((std/core/types/True() : bool ) as @pat@1@1@0: bool)\n     -> std/core/types/Cons<int>(next, rest);\n  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n     -> val ev@0@10037 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10037) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-search((@pat@0@2: int) : int, (@ctl-fail: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@3: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/search :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<main/solution>)) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n            });\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"column\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/search :: (E, V) -> V)>>(size: int, column: int){\n  match ((std/core/int/(==)(column, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Nil<int>;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val rest : main/solution;\n          val ev@10034 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>;\n          val next : int;\n      (match ((std/core/hnd/@open-none3<int,int,main/solution,bool,(total :: E),<(main/search :: (E, V) -> V),(div :: X)>>(main/safe, next, 1, rest))) {\n        ((std/core/types/True() : bool ) as @pat@1@1@0: bool)\n           -> std/core/types/Cons<int>(next, rest);\n        ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n           -> val ev@0@10037 : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>\n                    = std/core/hnd/@evv-at<(main/search :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n          (match (ev@0@10037) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/search :: (E, V) -> V)<(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)> ) as @pat@3: ((hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>))\n               -> (match (h@0) {\n                ((@skip main/@Hnd-search((@pat@0@2: int) : int, (@ctl-fail: forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/search :: (E, V) -> V),(e :: E),a>, (@pat@1@3: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,int,(main/search :: (E, V) -> V),(e :: E),a>) : (main/search :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((main/search :: (E, V) -> V)<(e :: E),a>))\n                   -> (match ((@ctl-fail<main/solution>)) {\n                    ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>) -> (e :: E) main/solution) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/solution,(main/search :: (E, V) -> V),(e :: E),a>))\n                       -> std/core/hnd/cast-clause0<main/solution,(main/search :: (E, V) -> V),(e :: E),(main/search :: (E, V) -> V),a>(f@0)(m@0, ev@0@10037);\n                  });\n              });\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/place\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/place"]}, {"name": {"op": "Var","id": "main/@lift-run@828","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}}, {"op": "Var","id": "size","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "a","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "size","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "y@10008","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: resume@0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: resume@0(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10008\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10008"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "a","type": {"op": "Int"}}, {"op": "Var","id": "y@10008","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(a, y@10008)"}},"annotation": "genExpr: val y@10008 : int\n      = resume@0(i);\nstd/core/int/int-add(a, y@10008)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"size\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "size","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10009","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10009\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10009"]}, {"name": {"op": "Var","id": "y@1@10014","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: resume@0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: resume@0(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@1@10014\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@1@10014"]}, {"name": {"op": "Var","id": "a@0@10010","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "a","type": {"op": "Int"}}, {"op": "Var","id": "y@1@10014","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(a, y@1@10014)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"a@0@10010\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["a@0@10010"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@828","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@828"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: resume@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "size","type": {"op": "Int"}},"annotation": "genExpr: size"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10009","type": {"op": "Int"}},"annotation": "genExpr: i@0@10009"}, {"op": "DebugWrap","inner": {"op": "Var","id": "a@0@10010","type": {"op": "Int"}},"annotation": "genExpr: a@0@10010"}]},"annotation": "genExpr: main/@lift-run@828(resume@0, size, i@0@10009, a@0@10010)"}},"annotation": "genExpr: val i@0@10009 : int;\nval y@1@10014 : int;\nval a@0@10010 : int;\nmain/@lift-run@828(resume@0, size, i@0@10009, a@0@10010)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"size\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(resume@0: (int) -> (div :: X) int, size: int, i: int, a: int){\n  match ((std/core/int/(==)(i, size))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val y@10008 : int\n                = resume@0(i);\n      std/core/int/int-add(a, y@10008);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val i@0@10009 : int;\n          val y@1@10014 : int;\n          val a@0@10010 : int;\n      main/@lift-run@828(resume@0, size, i@0@10009, a@0@10010);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@lift-run@828\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@lift-run@828"]}, {"name": {"op": "Var","id": "main/run","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-search","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-search<main/solution,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-search","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "main/search"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-search<(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "Literal","type": {"op": "Int"},"value": 0}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n  0;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n    0;\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n  std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n      0;\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n    (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n        0;\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n          0;\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n          0;\n        }), k));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n          0;\n        }), k));\n    })));\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x681_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<int,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<int,int,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "size","type": {"op": "Int"}}, {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@828","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@828"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: resume@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "size","type": {"op": "Int"}},"annotation": "genExpr: size"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: main/@lift-run@828(resume@0, size, 1, 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n  main/@lift-run@828(resume@0, size, 1, 0);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: k@0"}]},"annotation": "genExpr: std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n    (main/@lift-run@828(resume@0, size, 1, 0));\n  }), k@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n  std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n      (main/@lift-run@828(resume@0, size, 1, 0));\n    }), k@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n    (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n        (main/@lift-run@828(resume@0, size, 1, 0));\n      }), k@0));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n  std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n      (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n          (main/@lift-run@828(resume@0, size, 1, 0));\n        }), k@0));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n  (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n      (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n          (main/@lift-run@828(resume@0, size, 1, 0));\n        }), k@0));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-search<(div :: X),int>(3, (forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n        (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n            0;\n          }), k));\n      })));\n  }))), (std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n    (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n        (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n            (main/@lift-run@828(resume@0, size, 1, 0));\n          }), k@0));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "_w-l30-c12","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "Literal","type": {"op": "Int"},"value": 1}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(_w-l30-c12: main/solution){\n  1;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/place","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: main/place"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: main/place(n, n)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/search :: (E, V) -> V),(div :: X)>>(){\n  main/place(n, n);\n}"}]},"annotation": "genExpr: main/@handle-search<main/solution,(div :: X),int>((main/@Hnd-search<(div :: X),int>(3, (forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n          (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n              0;\n            }), k));\n        })));\n    }))), (std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n      (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n          (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n              (main/@lift-run@828(resume@0, size, 1, 0));\n            }), k@0));\n        })));\n    }))))), (fn<(div :: X)>(_w-l30-c12: main/solution){\n    1;\n  }), (fn<<(main/search :: (E, V) -> V),(div :: X)>>(){\n    (main/place(n, n));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int){\n  main/@handle-search<main/solution,(div :: X),int>((main/@Hnd-search<(div :: X),int>(3, (forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n            (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n                0;\n              }), k));\n          })));\n      }))), (std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n        (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n            (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n                (main/@lift-run@828(resume@0, size, 1, 0));\n              }), k@0));\n          })));\n      }))))), (fn<(div :: X)>(_w-l30-c12: main/solution){\n      1;\n    }), (fn<<(main/search :: (E, V) -> V),(div :: X)>>(){\n      (main/place(n, n));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/run\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/run"]}, {"name": {"op": "Var","id": "main/main","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10017","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"name": "std/os/env/get-args","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/get-args"},"args": []},"annotation": "genExpr: std/os/env/get-args()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10017"]}, {"name": {"op": "Var","id": "m@10015","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/parse-int"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10017","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"46","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"47","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"46","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"46\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"46\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"46\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10017","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10017) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}]},"annotation": "genExpr: std/core/int/parse-int((match (xs@10017) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["m@10015"]}, {"name": {"op": "Var","id": "r@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-search","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/search"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-search<main/solution,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-search","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "main/search"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-search<(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "Literal","type": {"op": "Int"},"value": 0}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n  0;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n    0;\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n  std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n      0;\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n    (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n        0;\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n          0;\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<648,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (648) -> (div :: X) int){\n          0;\n        }), k));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n      (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n          0;\n        }), k));\n    })));\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x681_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<int,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<int,int,(div :: X),int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Int"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "size","type": {"op": "Int"}}, {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@828","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@828"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "resume@0","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: resume@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "size","type": {"op": "Int"}},"annotation": "genExpr: size"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: main/@lift-run@828(resume@0, size, 1, 0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n  main/@lift-run@828(resume@0, size, 1, 0);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k@0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: k@0"}]},"annotation": "genExpr: std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n    (main/@lift-run@828(resume@0, size, 1, 0));\n  }), k@0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n  std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n      (main/@lift-run@828(resume@0, size, 1, 0));\n    }), k@0);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n    (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n        (main/@lift-run@828(resume@0, size, 1, 0));\n      }), k@0));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n  std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n      (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n          (main/@lift-run@828(resume@0, size, 1, 0));\n        }), k@0));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n  (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n      (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n          (main/@lift-run@828(resume@0, size, 1, 0));\n        }), k@0));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-search<(div :: X),int>(3, (forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n        (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n            0;\n          }), k));\n      })));\n  }))), (std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n    (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n        (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n            (main/@lift-run@828(resume@0, size, 1, 0));\n          }), k@0));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "_w-l30-c12","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "Literal","type": {"op": "Int"},"value": 1}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(_w-l30-c12: main/solution){\n  1;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/place","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: main/place"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10015","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 5},"annotation": "genExpr: 5"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10015","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"48","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"48","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"48\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"48\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10015) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x@1;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10015","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 5},"annotation": "genExpr: 5"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10015","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"49","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"49","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1@0: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"49\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1@0"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"49\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10015) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x@1@0: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n     -> x@1@0;\n}"}]},"annotation": "genExpr: main/place((match (m@10015) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 5;\n    ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x@1;\n  }), (match (m@10015) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n       -> 5;\n    ((@skip std/core/types/Just((x@1@0: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n       -> x@1@0;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/search :: (E, V) -> V),(div :: X)>>(){\n  main/place((match (m@10015) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n         -> 5;\n      ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n         -> x@1;\n    }), (match (m@10015) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n         -> 5;\n      ((@skip std/core/types/Just((x@1@0: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n         -> x@1@0;\n    }));\n}"}]},"annotation": "genExpr: main/@handle-search<main/solution,(div :: X),int>((main/@Hnd-search<(div :: X),int>(3, (forall<a> std/core/hnd/Clause0<a,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,(div :: X),int>(m, (fn<(div :: X)>(k: ((hnd/resume-result :: (V, V) -> V)<a,int>) -> (div :: X) int){\n          (std/core/hnd/protect<(),a,(div :: X),int>(std/core/types/Unit, (fn<(div :: X)>(@_wildcard-x730_55: (), r: (a) -> (div :: X) int){\n              0;\n            }), k));\n        })));\n    }))), (std/core/hnd/Clause1<int,int,(main/search :: (E, V) -> V),(div :: X),int>((fn<(div :: X)>(m@0: (hnd/marker :: (E, V) -> V)<(div :: X),int>, @_wildcard-x681_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/search :: (E, V) -> V)>, x: int){\n      (std/core/hnd/yield-to<int,(div :: X),int>(m@0, (fn<(div :: X)>(k@0: ((hnd/resume-result :: (V, V) -> V)<int,int>) -> (div :: X) int){\n          (std/core/hnd/protect<int,int,(div :: X),int>(x, (fn<(div :: X)>(size: int, resume@0: (int) -> (div :: X) int){\n              (main/@lift-run@828(resume@0, size, 1, 0));\n            }), k@0));\n        })));\n    }))))), (fn<(div :: X)>(_w-l30-c12: main/solution){\n    1;\n  }), (fn<<(main/search :: (E, V) -> V),(div :: X)>>(){\n    (main/place((match (m@10015) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n           -> 5;\n        ((@skip std/core/types/Just((x@1: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n           -> x@1;\n      }), (match (m@10015) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat@2: ((maybe :: V -> V)<int>))\n           -> 5;\n        ((@skip std/core/types/Just((x@1@0: int) : int) : (maybe :: V -> V)<int> ) as @pat@0@1: ((maybe :: V -> V)<int>))\n           -> x@1@0;\n      })));\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r@0","type": {"op": "Int"}},"annotation": "genExpr: r@0"}]},"annotation": "genExpr: std/core/int/show(r@0)"}]},"annotation": "genExpr: std/core/console/printsln((std/core/int/show(r@0)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X),(div :: X),(ndet :: X)>>(){\n  val xs@10017 : (list :: V -> V)<string>;\n  val m@10015 : (maybe :: V -> V)<int>;\n  val r@0 : int;\n  std/core/console/printsln((std/core/int/show(r@0)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/main\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/main"]}, {"name": {"op": "Var","id": "main/@Hnd-search","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "main/search"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@ctl-pick","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "Construct","type_tag": "main/search","tag": "main/@Hnd-search","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@ctl-pick","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-search"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}