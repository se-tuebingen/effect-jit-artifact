{"blocks":[{"label":"0([mcore:[#590]#3])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"1([#11])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([k@[#12]#14])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"3([match_def@[match_def@[#12]#16]#17])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([#18])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([match_def@[#12]#16])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":4,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2690]","target":3,"args":{"any":[]}}}]},
{"label":"6([k@[match_std/core/types/Cons@[#12]#23]#28])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([match_std/core/types/Cons@[#12]#23])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(zs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (zs: list<614>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(zzs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (zzs: list<list<614>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-concat@4788<a>(zs, zzs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-concat@4788<a>(zs, zzs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(zs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (zs: list<614>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(zzs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (zzs: list<list<614>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"8([#12])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (zss) {\n  ((std/core/types/Cons((zs: (list :: V -> V)<614>) : (list :: V -> V)<a>, (zzs: (list :: V -> V)<(list :: V -> V)<614>>) : (list :: V -> V)<(list :: V -> V)<a>>) : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@1: ((list :: V -> V)<(list :: V -> V)<614>>))\n     -> std/core/list/@lift-concat@4788<a>(zs, zzs);\n  ((@skip std/core/types/Nil() : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@2: ((list :: V -> V)<(list :: V -> V)<614>>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"zss\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (zss) {\n  ((std/core/types/Cons((zs: (list :: V -> V)<614>) : (list :: V -> V)<a>, (zzs: (list :: V -> V)<(list :: V -> V)<614>>) : (list :: V -> V)<(list :: V -> V)<a>>) : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@1: ((list :: V -> V)<(list :: V -> V)<614>>))\n     -> std/core/list/@lift-concat@4788<a>(zs, zzs);\n  ((@skip std/core/types/Nil() : (list :: V -> V)<(list :: V -> V)<a>> ) as @pat@2: ((list :: V -> V)<(list :: V -> V)<614>>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":7,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2691]","target":5,"args":{"any":[]}}}]},
{"label":"9([match_def@[mcore:[#601]#9]#10])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":8,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2692]","target":1,"args":{"any":[]}}}]},
{"label":"10([k@[k@[#30]#35]#41])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([k@[#30]#35])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":0}]},
{"label":"12([#30])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 614) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<614>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-concat@4788<a>(yy, zss)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-concat@4788<a>(yy, zss)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":11,"args":{"any":[2]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-concat@4788<a>(yy, zss)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-concat@4788<a>(yy, zss)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 614) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<614>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"13([mcore:[#601]#9])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":12,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2693]","target":9,"args":{"any":[]}}}]},
{"label":"14([mcore:[#606]#43])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-concat@4788<a>((std/core/types/Nil<a>), xss)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-concat@4788<a>((std/core/types/Nil<a>), xss)","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"15([mcore:[#607]#51])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"16([#59])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([k@[#60]#62])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([match_def@[match_def@[#60]#64]#65])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([#66])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([match_def@[#60]#64])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":19,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2694]","target":18,"args":{"any":[]}}}]},
{"label":"21([#78])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([k@[match_std/core/types/Cons@[#60]#71]#73])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz)","traced":{"any":[]}},
{"op":"Jump","target":29}]},
{"label":"23([match_std/core/types/Cons@[#60]#71])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 689) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(zz,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (zz: list<689>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ys@1@10002 : (list :: V -> V)<a>\n      = f(z);\nstd/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ys@1@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(z)","traced":{"any":[]}},
{"op":"Push","target":22,"args":{"any":[3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(z)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ys@1@10002\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ys@1@10002 : (list :: V -> V)<a>\n      = f(z);\nstd/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 689) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(zz,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (zz: list<689>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"24([#60])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (zs) {\n  ((std/core/types/Cons((z: 689) : a, (zz: (list :: V -> V)<689>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<689>))\n     -> val ys@1@10002 : (list :: V -> V)<a>\n              = f(z);\n    std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz);\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<689>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"zs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"6\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (zs) {\n  ((std/core/types/Cons((z: 689) : a, (zz: (list :: V -> V)<689>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<689>))\n     -> val ys@1@10002 : (list :: V -> V)<a>\n              = f(z);\n    std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, ys@1@10002, zz);\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<689>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":23,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2695]","target":20,"args":{"any":[]}}}]},
{"label":"25([match_def@[mcore:[#622]#57]#58])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":24,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2696]","target":16,"args":{"any":[]}}}]},
{"label":"26([k@[k@[#80]#85]#91])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([k@[#80]#85])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":15}]},
{"label":"28([#80])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 690) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<690>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, yy, zs)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, yy, zs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":27,"args":{"any":[3]}},
{"op":"Copy","from":1,"to":3},
{"op":"Copy","from":4,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, yy, zs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, yy, zs)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 690) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<690>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":29}]},
{"label":"29([mcore:[#622]#57])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":28,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2697]","target":25,"args":{"any":[]}}}]},
{"label":"30([mcore:[#628]#93])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, (std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-flatmap@4789<a,a,(e :: E)>(f, (std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Jump","target":29}]},
{"label":"31([mcore:[#630]#101])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"32([#109])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([#110])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([match_def@[mcore:[#636]#107]#108])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":33,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2698]","target":32,"args":{"any":[]}}}]},
{"label":"35([k@[k@[#111]#116]#122])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([k@[#111]#116])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":38}]},
{"label":"37([#111])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 733) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<733>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Cons<a>(x, acc)), xx)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, acc)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":36,"args":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Cons<a>(x, acc)), xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 733) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<733>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":31}]},
{"label":"38([mcore:[#636]#107])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":37,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2699]","target":34,"args":{"any":[]}}}]},
{"label":"39([mcore:[#640]#124])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>(tl, xs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>(tl, xs)","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"40([mcore:[#641]#128])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"41([#135])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([#136])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([match_def@[mcore:[#645]#133]#134])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":42,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2700]","target":41,"args":{"any":[]}}}]},
{"label":"44([k@[#141]#146])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"45([#141])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<772>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<772>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":40}]},
{"label":"46([mcore:[#645]#133])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"10\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":45,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2701]","target":43,"args":{"any":[]}}}]},
{"label":"47([mcore:[#646]#148])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"48([mcore:[#649]#154])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"49([#162])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([#163])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([match_def@[mcore:[#658]#160]#161])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":50,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2702]","target":49,"args":{"any":[]}}}]},
{"label":"52([k@[k@[k@[#168]#173]#179]#185])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"53([k@[k@[#168]#173]#179])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":47}]},
{"label":"54([k@[#168]#173])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":53,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":48}]},
{"label":"55([#168])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 836) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<836>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(sep, (std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-intersperse@4791<a>(sep, yy)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":54,"args":{"any":[2,0]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-intersperse@4791<a>(sep, yy)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(sep, (std/core/types/Cons<a>(y, (std/core/list/@lift-intersperse@4791<a>(sep, yy)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 836) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<836>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":56}]},
{"label":"56([mcore:[#658]#160])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":55,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2703]","target":51,"args":{"any":[]}}}]},
{"label":"57([mcore:[#659]#187])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"58([#195])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([#196])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([match_def@[mcore:[#667]#193]#194])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":59,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2704]","target":58,"args":{"any":[]}}}]},
{"label":"61([k@[k@[#201]#206]#212])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([k@[#201]#206])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":57}]},
{"label":"63([#201])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 836) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<836>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/@lift-intersperse@4791<a>(sep, xx)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-intersperse@4791<a>(sep, xx)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":62,"args":{"any":[2]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-intersperse@4791<a>(sep, xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/@lift-intersperse@4791<a>(sep, xx)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 836) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<836>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":56}]},
{"label":"64([mcore:[#667]#193])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":63,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2705]","target":60,"args":{"any":[]}}}]},
{"label":"65([match_def@[mcore:[#668]#214]#215])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"66([#218])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"67([mcore:[#668]#214])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":66,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2706]","target":65,"args":{"any":[]}}}]},
{"label":"68([#223])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([#224])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([match_def@[mcore:[#673]#221]#222])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":69,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2707]","target":68,"args":{"any":[]}}}]},
{"label":"71([k@[#225]#230])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"72([#225])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"16\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 870) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<870>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-length@4792<a>(yy, (std/core/int/int-add(acc, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(acc, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(acc, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-length@4792<a>(yy, (std/core/int/int-add(acc, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"16\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 870) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<870>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":73}]},
{"label":"73([mcore:[#673]#221])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"16\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"16\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":72,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2708]","target":70,"args":{"any":[]}}}]},
{"label":"74([mcore:[#677]#232])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-length@4792<a>(xs, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-length@4792<a>(xs, 0)","traced":{"any":[]}},
{"op":"Jump","target":73}]},
{"label":"75([mcore:[#679]#235])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"76([#243])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([k@[#244]#253])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([#244])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 924) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 924) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":75}]},
{"label":"79([match_def@[mcore:[#684]#241]#242])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"18\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":78,"args":{"any":[0]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2709]","target":76,"args":{"any":[]}}}]},
{"label":"80([#255])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"81([mcore:[#684]#241])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":80,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2710]","target":79,"args":{"any":[]}}}]},
{"label":"82([mcore:[#686]#260])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"83([#268])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([#269])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"85([match_def@[mcore:[#698]#266]#267])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":84,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2711]","target":83,"args":{"any":[]}}}]},
{"label":"86([k@[k@[k@[#274]#278]#284]#290])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"87([k@[k@[#274]#278]#284])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":82}]},
{"label":"88([k@[#274]#278])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":87,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)","traced":{"any":[]}},
{"op":"Jump","target":90}]},
{"label":"89([#274])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 978) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<978>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val i@0@10009 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(i, y)","traced":{"any":[]}},
{"op":"Push","target":88,"args":{"any":[4,0,2]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(i, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val i@0@10009 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, y)), (std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, yy, i@0@10009)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 978) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<978>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"90([mcore:[#698]#266])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"19\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":89,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2712]","target":85,"args":{"any":[]}}}]},
{"label":"91([mcore:[#703]#292])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, xs, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-map-indexed@4793<a,a,(e :: E)>(f, xs, 0)","traced":{"any":[]}},
{"op":"Jump","target":90}]},
{"label":"92([mcore:[#705]#298])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"93([#306])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([#307])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"95([match_def@[mcore:[#718]#304]#305])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":94,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2713]","target":93,"args":{"any":[]}}}]},
{"label":"96([k@[k@[k@[#312]#316]#322]#328])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"97([k@[k@[#312]#316]#322])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":92}]},
{"label":"98([k@[#312]#316])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":97,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)","traced":{"any":[]}},
{"op":"Jump","target":100}]},
{"label":"99([#312])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1040) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1040>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val i@0@10011 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10011\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(i, y, yy)","traced":{"any":[]}},
{"op":"Push","target":98,"args":{"any":[4,0,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(i, y, yy)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10011\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val i@0@10011 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, y, yy)), (std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, yy, i@0@10011)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1040) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1040>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"100([mcore:[#718]#304])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"21\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":99,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2714]","target":95,"args":{"any":[]}}}]},
{"label":"101([mcore:[#723]#330])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, xs, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-map-indexed-peek@4794<a,a,(e :: E)>(f, xs, 0)","traced":{"any":[]}},
{"op":"Jump","target":100}]},
{"label":"102([mcore:[#724]#336])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"103([#344])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"104([#345])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([match_def@[mcore:[#735]#342]#343])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":104,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2715]","target":103,"args":{"any":[]}}}]},
{"label":"106([k@[k@[k@[#350]#352]#358]#364])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([k@[k@[#350]#352]#358])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":102}]},
{"label":"108([k@[#350]#352])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, yy)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":107,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, yy)","traced":{"any":[]}},
{"op":"Jump","target":110}]},
{"label":"109([#350])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1092) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1092>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(y, yy)), (std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(y, yy)","traced":{"any":[]}},
{"op":"Push","target":108,"args":{"any":[3,0]}},
{"op":"Copy","from":3,"to":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(y, yy)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(y, yy)), (std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1092) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1092>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"110([mcore:[#735]#342])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"23\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":109,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2716]","target":105,"args":{"any":[]}}}]},
{"label":"111([mcore:[#739]#366])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, xs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-map-peek@4795<a,a,(e :: E)>(f, xs)","traced":{"any":[]}},
{"op":"Jump","target":110}]},
{"label":"112([mcore:[#740]#370])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"113([mcore:[#745]#376])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Jump","target":112}]},
{"label":"114([#386])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([#387])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"116([match_def@[mcore:[#747]#384]#385])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":115,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2717]","target":114,"args":{"any":[]}}}]},
{"label":"117([#392])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1137) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1137>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1137) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1137>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"118([mcore:[#747]#384])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":117,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2718]","target":116,"args":{"any":[]}}}]},
{"label":"119([mcore:[#749]#393])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"120([#401])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"121([#402])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"122([match_def@[mcore:[#764]#399]#400])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":121,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2719]","target":120,"args":{"any":[]}}}]},
{"label":"123([k@[#407]#409])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"124([match_def@[match_def@[#407]#411]#412])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"125([#413])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"126([match_def@[#407]#411])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":4,"clauses":[{"tag":"std/core/types/Nil","target":125,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2720]","target":124,"args":{"any":[]}}}]},
{"label":"127([k@[k@[#422]#428]#434])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"128([k@[#422]#428])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":119}]},
{"label":"129([#422])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)","traced":{"any":[]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":128,"args":{"any":[0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":5,"to":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"130([match_std/core/types/Cons@[#407]#418])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1210) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1210>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val i@0@10013 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10013\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[4]},"in":{"any":[3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(i, x, y)","traced":{"any":[]}},
{"op":"Push","target":129,"args":{"any":[1,6,2,4]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":5,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(i, x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(i, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10013\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val i@0@10013 : int\n      = std/core/int/int-add(i, 1);\nstd/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1210) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1210>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"131([#407])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1209) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1209>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Cons((y: 1210) : a, (yy: (list :: V -> V)<1210>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1210>))\n     -> val i@0@10013 : int\n              = std/core/int/int-add(i, 1);\n    std/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1210>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":4,"to":0},
{"op":"Copy","from":3,"to":4},
{"op":"Copy","from":1,"to":3},
{"op":"Copy","from":5,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"29\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"30\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Cons((y: 1210) : a, (yy: (list :: V -> V)<1210>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1210>))\n     -> val i@0@10013 : int\n              = std/core/int/int-add(i, 1);\n    std/core/types/Cons<a>((f(i, x, y)), (std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, i@0@10013, xx, yy)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1210>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1209) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1209>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":4,"clauses":[{"tag":"std/core/types/Cons","target":130,"args":{"any":[5,6]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2721]","target":126,"args":{"any":[]}}}]},
{"label":"132([mcore:[#764]#399])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"27\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":131,"args":{"any":[4,5]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2722]","target":122,"args":{"any":[]}}}]},
{"label":"133([mcore:[#770]#436])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, 0, xs0, ys0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-zipwith-indexed@4796<a,a,a,(e :: E)>(f, 0, xs0, ys0)","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"134([#444])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"135([#445])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"136([match_def@[mcore:[#771]#442]#443])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":135,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2723]","target":134,"args":{"any":[]}}}]},
{"label":"137([#446])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1238) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<1238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1238) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<1238>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([mcore:[#771]#442])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"31\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":137,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2724]","target":136,"args":{"any":[]}}}]},
{"label":"139([mcore:[#772]#447])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"140([#455])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"141([#456])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"142([match_def@[mcore:[#779]#453]#454])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":141,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2725]","target":140,"args":{"any":[]}}}]},
{"label":"143([k@[k@[#457]#462]#468])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"144([k@[#457]#462])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":139}]},
{"label":"145([#457])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1271) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1271>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/append<a>(xx, ys)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/append<a>(xx, ys)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":144,"args":{"any":[2]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/append<a>(xx, ys)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/append<a>(xx, ys)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1271) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1271>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":146}]},
{"label":"146([mcore:[#779]#453])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":145,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2726]","target":142,"args":{"any":[]}}}]},
{"label":"147([mcore:[#783]#470])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/append<a>(xs, ys)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/append<a>(xs, ys)","traced":{"any":[]}},
{"op":"Jump","target":146}]},
{"label":"148([#476])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"149([k@[#477]#479])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"150([match_def@[match_def@[#477]#481]#482])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"151([#483])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@7: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@8: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@7: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@8: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"152([match_def@[#477]#481])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"40\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":151,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2727]","target":150,"args":{"any":[]}}}]},
{"label":"153([match_std/core/types/Nil@[#477]#486])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"154([#477])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<1353>))\n     -> std/core/types/True;\n  ((@skip std/core/types/Cons((@pat@7: 1353) : a, (@pat@8: (list :: V -> V)<1353>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@6: ((list :: V -> V)<1353>))\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<1353>))\n     -> std/core/types/True;\n  ((@skip std/core/types/Cons((@pat@7: 1353) : a, (@pat@8: (list :: V -> V)<1353>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@6: ((list :: V -> V)<1353>))\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":153,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2728]","target":152,"args":{"any":[]}}}]},
{"label":"155([match_def@[mcore:[#791]#474]#475])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":154,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2729]","target":148,"args":{"any":[]}}}]},
{"label":"156([k@[#489]#491])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"157([match_def@[match_def@[#489]#493]#494])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"158([k@[k@[#495]#497]#499])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"159([k@[switch case for Bool(true)#501]#503])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"160([switch case for Bool(true)#501])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/(==)<a>(xx, yy, ?(==))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/(==)<a>(xx, yy, ?(==))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":167}]},
{"label":"161([switch default case#505])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x39\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"162([k@[#495]#497])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[160],"default":161}]},
{"label":"163([#495])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((?(==)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/list/(==)<a>(xx, yy, ?(==));\n  (@pat@3: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?(==)(x, y)","traced":{"any":[]}},
{"op":"Push","target":162,"args":{"any":[1,4,2]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?(==)(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((?(==)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/list/(==)<a>(xx, yy, ?(==));\n  (@pat@3: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"164([match_def@[#489]#493])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"37\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Cons","target":163,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2730]","target":157,"args":{"any":[]}}}]},
{"label":"165([match_std/core/types/Nil@[#489]#508])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"166([#489])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1353>))\n     -> std/core/types/False;\n  ((@skip std/core/types/Cons((y: 1353) : a, (yy: (list :: V -> V)<1353>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1353>))\n     -> (match ((?(==)(x, y))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/list/(==)<a>(xx, yy, ?(==));\n      (@pat@3: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Copy","from":4,"to":1},
{"op":"Swap","a":0,"b":3},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1353>))\n     -> std/core/types/False;\n  ((@skip std/core/types/Cons((y: 1353) : a, (yy: (list :: V -> V)<1353>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1353>))\n     -> (match ((?(==)(x, y))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/list/(==)<a>(xx, yy, ?(==));\n      (@pat@3: bool)\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1353) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1353>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Nil","target":165,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2731]","target":164,"args":{"any":[]}}}]},
{"label":"167([mcore:[#791]#474])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":166,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2732]","target":155,"args":{"any":[]}}}]},
{"label":"168([mcore:[#802]#511])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"169([#518])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"170([#519])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"171([match_def@[mcore:[#809]#516]#517])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":170,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2733]","target":169,"args":{"any":[]}}}]},
{"label":"172([k@[#524]#529])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"173([k@[switch case for Bool(true)#531]#539])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"174([switch case for Bool(true)#531])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":185}]},
{"label":"175([k@[switch case for Bool(false)#545]#550])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"176([k@[switch case for Bool(true)#552]#557])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"177([switch case for Bool(true)#552])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":168}]},
{"label":"178([switch case for Bool(false)#563])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"179([switch default case#568])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"180([switch default case#559])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[178],"default":179}]},
{"label":"181([switch case for Bool(false)#545])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)(n, 0))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/Just<a>(x);\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> std/core/types/Nothing<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)(n, 0))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/Just<a>(x);\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> std/core/types/Nothing<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[177],"default":180}]},
{"label":"182([switch default case#569])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"183([switch default case#541])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[2,1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[181],"default":182}]},
{"label":"184([#524])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1426) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1426>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(>)(n, 0))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> (match ((std/core/int/(==)(n, 0))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/types/Just<a>(x);\n      ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n         -> std/core/types/Nothing<a>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(>)(n, 0))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/@index<a>(xx, (std/core/int/int-sub(n, 1)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> (match ((std/core/int/(==)(n, 0))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/types/Just<a>(x);\n      ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n         -> std/core/types/Nothing<a>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1426) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1426>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[174],"default":183}]},
{"label":"185([mcore:[#809]#516])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":184,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2734]","target":171,"args":{"any":[]}}}]},
{"label":"186([#572])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"187([#573])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"188([match_def@[mcore:[#815]#570]#571])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":187,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2735]","target":186,"args":{"any":[]}}}]},
{"label":"189([k@[k@[#576]#578]#580])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"190([k@[switch case for Bool(true)#582]#584])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"191([switch case for Bool(true)#582])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/all<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/all<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":197}]},
{"label":"192([switch case for Bool(false)#587])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"193([switch default case#590])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"194([switch default case#586])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Switch","arg":1,"values":[false],"targets":[192],"default":193}]},
{"label":"195([k@[#576]#578])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[191],"default":194}]},
{"label":"196([#576])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1461) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1461>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/all<a,(e :: E)>(xx, predicate);\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Push","target":195,"args":{"any":[3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/all<a,(e :: E)>(xx, predicate);\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1461) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1461>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"197([mcore:[#815]#570])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":196,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2736]","target":188,"args":{"any":[]}}}]},
{"label":"198([#593])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"199([#594])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"200([match_def@[mcore:[#821]#591]#592])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":199,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2737]","target":198,"args":{"any":[]}}}]},
{"label":"201([k@[k@[#597]#599]#601])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"202([switch case for Bool(true)#603])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"203([k@[switch case for Bool(false)#607]#609])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"204([switch case for Bool(false)#607])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/any<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/any<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":209}]},
{"label":"205([switch default case#611])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"206([switch default case#606])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[204],"default":205}]},
{"label":"207([k@[#597]#599])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[202],"default":206}]},
{"label":"208([#597])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1499) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1499>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/any<a,(e :: E)>(xx, predicate);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Push","target":207,"args":{"any":[3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/True;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/any<a,(e :: E)>(xx, predicate);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1499) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1499>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"209([mcore:[#821]#591])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"47\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":208,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2738]","target":200,"args":{"any":[]}}}]},
{"label":"210([#614])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"211([k@[#615]#617])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"212([match_def@[match_def@[#615]#619]#620])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"213([#621])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@6: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@7: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@6: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@7: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"214([match_def@[#615]#619])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"55\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":213,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2739]","target":212,"args":{"any":[]}}}]},
{"label":"215([match_std/core/types/Nil@[#615]#626])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Eq"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"216([#615])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@4: ((list :: V -> V)<1562>))\n     -> std/core/types/Eq;\n  ((@skip std/core/types/Cons((@pat@6: 1562) : a, (@pat@7: (list :: V -> V)<1562>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<1562>))\n     -> std/core/types/Lt;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@4: ((list :: V -> V)<1562>))\n     -> std/core/types/Eq;\n  ((@skip std/core/types/Cons((@pat@6: 1562) : a, (@pat@7: (list :: V -> V)<1562>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@5: ((list :: V -> V)<1562>))\n     -> std/core/types/Lt;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":215,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2740]","target":214,"args":{"any":[]}}}]},
{"label":"217([match_def@[mcore:[#832]#612]#613])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":216,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2741]","target":210,"args":{"any":[]}}}]},
{"label":"218([k@[#631]#633])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"219([match_def@[match_def@[#631]#635]#636])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"220([k@[k@[#637]#639]#641])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"221([match_def@[k@[#637]#639]#643])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(lg,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(lg,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"222([#646])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"223([match_std/core/types/Eq@[k@[#637]#639]#644])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/cmp<a>(xx, yy, ?cmp)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/cmp<a>(xx, yy, ?cmp)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":229}]},
{"label":"224([k@[#637]#639])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/order","scrutinee":3,"clauses":[{"tag":"std/core/types/Eq","target":223,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2742]","target":221,"args":{"any":[]}}}]},
{"label":"225([#637])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((?cmp(x, y))) {\n  ((std/core/types/Eq() : order ) as @pat@2: order)\n     -> std/core/list/cmp<a>(xx, yy, ?cmp);\n  (lg: order)\n     -> lg;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":224,"args":{"any":[1,4,2]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((?cmp(x, y))) {\n  ((std/core/types/Eq() : order ) as @pat@2: order)\n     -> std/core/list/cmp<a>(xx, yy, ?cmp);\n  (lg: order)\n     -> lg;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"226([match_def@[#631]#635])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Cons","target":225,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2743]","target":219,"args":{"any":[]}}}]},
{"label":"227([match_std/core/types/Nil@[#631]#648])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"228([#631])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1562>))\n     -> std/core/types/Gt;\n  ((@skip std/core/types/Cons((y: 1562) : a, (yy: (list :: V -> V)<1562>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1562>))\n     -> (match ((?cmp(x, y))) {\n      ((std/core/types/Eq() : order ) as @pat@2: order)\n         -> std/core/list/cmp<a>(xx, yy, ?cmp);\n      (lg: order)\n         -> lg;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Copy","from":4,"to":1},
{"op":"Swap","a":0,"b":3},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<1562>))\n     -> std/core/types/Gt;\n  ((@skip std/core/types/Cons((y: 1562) : a, (yy: (list :: V -> V)<1562>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<1562>))\n     -> (match ((?cmp(x, y))) {\n      ((std/core/types/Eq() : order ) as @pat@2: order)\n         -> std/core/list/cmp<a>(xx, yy, ?cmp);\n      (lg: order)\n         -> lg;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1562) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1562>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Nil","target":227,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2744]","target":226,"args":{"any":[]}}}]},
{"label":"229([mcore:[#832]#612])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"50\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":228,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2745]","target":217,"args":{"any":[]}}}]},
{"label":"230([mcore:[#834]#653])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"231([#661])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"232([#662])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"233([match_def@[mcore:[#844]#659]#660])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":232,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2746]","target":231,"args":{"any":[]}}}]},
{"label":"234([k@[#667]#669])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"235([match_def@[match_def@[#667]#671]#672])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"236([k@[#673]#678])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"237([#673])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/concat-maybe<a>(xx)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/concat-maybe<a>(xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":243}]},
{"label":"238([match_def@[#667]#671])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":237,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2747]","target":235,"args":{"any":[]}}}]},
{"label":"239([k@[#685]#691])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"240([#685])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":230}]},
{"label":"241([match_std/core/types/Just@[#667]#680])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1616) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/concat-maybe<a>(xx)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":240,"args":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/concat-maybe<a>(xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1616) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":243}]},
{"label":"242([#667])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<maybe<1616>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (x) {\n  ((std/core/types/Just((y: 1616) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1616>))\n     -> std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1616>))\n     -> std/core/list/concat-maybe<a>(xx);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"59\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (x) {\n  ((std/core/types/Just((y: 1616) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1616>))\n     -> std/core/types/Cons<a>(y, (std/core/list/concat-maybe<a>(xx)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1616>))\n     -> std/core/list/concat-maybe<a>(xx);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: maybe<1616>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<maybe<1616>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":241,"args":{"any":[2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2748]","target":238,"args":{"any":[]}}}]},
{"label":"243([mcore:[#844]#659])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":242,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2749]","target":233,"args":{"any":[]}}}]},
{"label":"244([match_def@[mcore:[#851]#693]#694])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"245([k@[switch case for Bool(true)#699]#704])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"246([switch case for Bool(true)#699])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/drop<a>(xx, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/drop<a>(xx, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Jump","target":249}]},
{"label":"247([switch default case#706])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"248([#695])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1650) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1650>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>)(n, 0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>)(n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1650) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1650>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[246],"default":247}]},
{"label":"249([mcore:[#851]#693])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":248,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2750]","target":244,"args":{"any":[]}}}]},
{"label":"250([#709])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"251([#710])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"252([match_def@[mcore:[#858]#707]#708])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":251,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2751]","target":250,"args":{"any":[]}}}]},
{"label":"253([k@[k@[#715]#717]#719])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"254([k@[switch case for Bool(true)#721]#723])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"255([switch case for Bool(true)#721])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/drop-while<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/drop-while<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":261}]},
{"label":"256([switch case for Bool(false)#726])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x64\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"257([switch default case#727])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"258([switch default case#725])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Copy","from":3,"to":0},
{"op":"Switch","arg":1,"values":[false],"targets":[256],"default":257}]},
{"label":"259([k@[#715]#717])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[255],"default":258}]},
{"label":"260([#715])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1687) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1687>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/drop-while<a,(e :: E)>(xx, predicate);\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> xs;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Push","target":259,"args":{"any":[3,0,1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/drop-while<a,(e :: E)>(xx, predicate);\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> xs;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1687) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1687>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"261([mcore:[#858]#707])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":260,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2752]","target":252,"args":{"any":[]}}}]},
{"label":"262([mcore:[#861]#728])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"263([#736])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"264([#737])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"265([match_def@[mcore:[#872]#734]#735])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":264,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2753]","target":263,"args":{"any":[]}}}]},
{"label":"266([k@[k@[#742]#744]#746])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"267([#759])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"268([k@[switch case for Bool(true)#748]#753])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":262}]},
{"label":"269([switch case for Bool(true)#748])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/filter<a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":268,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/filter<a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":276}]},
{"label":"270([k@[switch case for Bool(false)#762]#767])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"271([switch case for Bool(false)#762])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/filter<a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/filter<a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x67\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":276}]},
{"label":"272([switch default case#769])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"273([switch default case#761])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Switch","arg":2,"values":[false],"targets":[271],"default":272}]},
{"label":"274([k@[#742]#744])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[269],"default":273}]},
{"label":"275([#742])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1742) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1742>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/filter<a,(e :: E)>(xx, pred);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Push","target":274,"args":{"any":[2,3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Cons<a>(x, (std/core/list/filter<a,(e :: E)>(xx, pred)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/filter<a,(e :: E)>(xx, pred);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1742) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1742>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"276([mcore:[#872]#734])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":275,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2754]","target":265,"args":{"any":[]}}}]},
{"label":"277([mcore:[#879]#770])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"278([#778])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"279([k@[k@[#779]#781]#783])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"280([#786])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"281([k@[k@[#787]#792]#798])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"282([k@[#787]#792])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":277}]},
{"label":"283([#787])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/filter-map<a,a,(e :: E)>(xx, pred)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/filter-map<a,a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":282,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/filter-map<a,a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/filter-map<a,a,(e :: E)>(xx, pred)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 1810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":291}]},
{"label":"284([match_def@[k@[#779]#781]#785])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"71\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":2,"clauses":[{"tag":"std/core/types/Just","target":283,"args":{"any":[2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2755]","target":280,"args":{"any":[]}}}]},
{"label":"285([k@[#800]#805])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"286([#800])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/filter-map<a,a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/filter-map<a,a,(e :: E)>(xx, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":291}]},
{"label":"287([k@[#779]#781])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x70\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":286,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2756]","target":284,"args":{"any":[]}}}]},
{"label":"288([#779])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1809) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1809>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((pred(x))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1810>))\n     -> std/core/list/filter-map<a,a,(e :: E)>(xx, pred);\n  ((@skip std/core/types/Just((y: 1810) : a) : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<1810>))\n     -> std/core/types/Cons<a>(y, (std/core/list/filter-map<a,a,(e :: E)>(xx, pred)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Push","target":287,"args":{"any":[2,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((pred(x))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1810>))\n     -> std/core/list/filter-map<a,a,(e :: E)>(xx, pred);\n  ((@skip std/core/types/Just((y: 1810) : a) : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<1810>))\n     -> std/core/types/Cons<a>(y, (std/core/list/filter-map<a,a,(e :: E)>(xx, pred)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1809) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1809>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"289([match_def@[mcore:[#886]#776]#777])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"68\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":288,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2757]","target":278,"args":{"any":[]}}}]},
{"label":"290([#807])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"291([mcore:[#886]#776])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":290,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2758]","target":289,"args":{"any":[]}}}]},
{"label":"292([#814])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"293([k@[k@[#815]#817]#819])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"294([match_def@[k@[#815]#817]#821])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(just,{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(just,{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"295([k@[#822]#824])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"296([#822])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":301}]},
{"label":"297([k@[#815]#817])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x74\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":296,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2759]","target":294,"args":{"any":[]}}}]},
{"label":"298([#815])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1860) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1860>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((action(x))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1861>))\n     -> std/core/list/foreach-while<a,a,(e :: E)>(xx, action);\n  (just: ((maybe :: V -> V)<1861>))\n     -> just;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(x)","traced":{"any":[]}},
{"op":"Push","target":297,"args":{"any":[2,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((action(x))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1861>))\n     -> std/core/list/foreach-while<a,a,(e :: E)>(xx, action);\n  (just: ((maybe :: V -> V)<1861>))\n     -> just;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1860) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<1860>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"299([match_def@[mcore:[#893]#812]#813])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"72\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"73\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":298,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2760]","target":292,"args":{"any":[]}}}]},
{"label":"300([#826])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"301([mcore:[#893]#812])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":300,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2761]","target":299,"args":{"any":[]}}}]},
{"label":"302([mcore:[#898]#831])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"303([k@[switch case for Bool(true)#839]#844])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"304([switch case for Bool(true)#839])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":302}]},
{"label":"305([switch case for Bool(false)#847])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x75\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"306([switch default case#852])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"307([switch default case#846])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[305],"default":306}]},
{"label":"308([k@[mcore:[#902]#836]#838])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[304],"default":307}]},
{"label":"309([mcore:[#902]#836])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Push","target":308,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"310([method_apply@[mcore:[#904]#853]#856])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":309}]},
{"label":"311([mcore:[#904]#853])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xs, (fn<(e :: E)>(x: 1906){\n    (match ((pred(x))) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/Just<a>(x);\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/Nothing<a>;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[310],"args":{"any":[1]},"tags":["apply"]},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xs, (fn<(e :: E)>(x: 1906){\n    (match ((pred(x))) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/Just<a>(x);\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/Nothing<a>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":301}]},
{"label":"312([mcore:[#908]#862])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xs, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foreach-while<a,a,(e :: E)>(xs, pred)","traced":{"any":[]}},
{"op":"Jump","target":301}]},
{"label":"313([mcore:[#911]#863])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"314([#871])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"315([#872])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"316([match_def@[mcore:[#922]#869]#870])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":315,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2762]","target":314,"args":{"any":[]}}}]},
{"label":"317([k@[k@[#877]#879]#881])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"318([#884])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"319([k@[#885]#890])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"320([#885])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":327}]},
{"label":"321([match_def@[k@[#877]#879]#883])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":2,"clauses":[{"tag":"std/core/types/Nothing","target":320,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2763]","target":318,"args":{"any":[]}}}]},
{"label":"322([k@[k@[#892]#897]#903])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"323([k@[#892]#897])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":313}]},
{"label":"324([#892])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 2008) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":323,"args":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 2008) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":327}]},
{"label":"325([k@[#877]#879])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":324,"args":{"any":[3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2764]","target":321,"args":{"any":[]}}}]},
{"label":"326([#877])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2007) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((f(x))) {\n  ((std/core/types/Just((y: 2008) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<2008>))\n     -> std/core/types/Cons<a>(y, (std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<2008>))\n     -> std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(x)","traced":{"any":[]}},
{"op":"Push","target":325,"args":{"any":[3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((f(x))) {\n  ((std/core/types/Just((y: 2008) : a) : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<2008>))\n     -> std/core/types/Cons<a>(y, (std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<2008>))\n     -> std/core/list/flatmap-maybe<a,a,(e :: E)>(xx, f);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2007) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"327([mcore:[#922]#869])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"76\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"77\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":326,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2765]","target":316,"args":{"any":[]}}}]},
{"label":"328([#907])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"329([#908])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"330([match_def@[mcore:[#930]#905]#906])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":329,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2766]","target":328,"args":{"any":[]}}}]},
{"label":"331([k@[k@[#909]#911]#914])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"332([k@[#909]#911])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":334}]},
{"label":"333([#909])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2052) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2052>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<a,a,(e :: E)>(xx, (f(z, x)), f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(z, x)","traced":{"any":[]}},
{"op":"Push","target":332,"args":{"any":[4,0]}},
{"op":"Copy","from":3,"to":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(z, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<a,a,(e :: E)>(xx, (f(z, x)), f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2052) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2052>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"334([mcore:[#930]#905])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"80\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":333,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2767]","target":330,"args":{"any":[]}}}]},
{"label":"335([mcore:[#935]#916])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@open-at2"}]},
{"label":"336([mcore:[#937]#924])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"337([mcore:[#942]#929])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"338([#937])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"339([method_apply@[k@[#938]#947]#958])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":337}]},
{"label":"340([k@[k@[#938]#947]#968])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"341([k@[#938]#947])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"unexpected Nil in std/core/foldl1\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"unexpected Nil in std/core/foldl1"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"New","out":3,"targets":[339],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"unexpected Nil in std/core/foldl1\"","traced":{"any":[]}},
{"op":"Jump","target":335}]},
{"label":"342([#938])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@tag-exn","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/exn/@tag-exn"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":341,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@tag-exn","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":336}]},
{"label":"343([match_def@[mcore:[#947]#935]#936])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":342,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2768]","target":338,"args":{"any":[]}}}]},
{"label":"344([k@[#970]#972])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"345([#970])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2101) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2101>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2101) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2101>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":334}]},
{"label":"346([mcore:[#947]#935])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"82\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":345,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2769]","target":343,"args":{"any":[]}}}]},
{"label":"347([mcore:[#952]#974])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"348([mcore:[#963]#982])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: f(y, x)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(y, x)","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"349([method_apply@[k@[mcore:[#965]#983]#992]#997])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":348}]},
{"label":"350([k@[mcore:[#965]#983]#992])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":1,"targets":[349],"args":{"any":[1]},"tags":["apply"]},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":334}]},
{"label":"351([mcore:[#965]#983])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<a,a,(e :: E)>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)), z, (fn<(e :: E)>(x: 2162, y: 2161){\n    (f(y, x));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":350,"args":{"any":[2,1]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<a,a,(e :: E)>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)), z, (fn<(e :: E)>(x: 2162, y: 2161){\n    (f(y, x));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"352([mcore:[#974]#1000])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@open-at2"}]},
{"label":"353([mcore:[#976]#1008])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"354([mcore:[#981]#1013])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/exn/throw"}]},
{"label":"355([#1030])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"356([method_apply@[k@[#1031]#1040]#1051])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/exn)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":354}]},
{"label":"357([k@[k@[#1031]#1040]#1061])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"358([k@[#1031]#1040])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"unexpected Nil in std/core/foldl1\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"unexpected Nil in std/core/foldl1"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"New","out":3,"targets":[356],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<exception-info>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"unexpected Nil in std/core/foldl1\"","traced":{"any":[]}},
{"op":"Jump","target":352}]},
{"label":"359([#1031])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/exn/@tag-exn","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/exn/@tag-exn"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":358,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/exn/@tag-exn","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at2<string,? exception-info,a,(exn :: (E, V) -> V),<(exn :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(exn :: (E, V) -> V)|(e :: E)>,(exn :: (E, V) -> V)>(std/core/exn/@tag-exn)), (std/core/exn/throw<a>), \"unexpected Nil in std/core/foldl1\", (std/core/types/@None<exception-info>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":353}]},
{"label":"360([match_def@[k@[mcore:[#986]#1019]#1028]#1029])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":359,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2770]","target":355,"args":{"any":[]}}}]},
{"label":"361([k@[#1063]#1065])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"362([#1063])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2195) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2195>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f)","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<a,a,<(exn :: (E, V) -> V)|(e :: E)>>(xx, x, f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2195) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2195>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":334}]},
{"label":"363([k@[mcore:[#986]#1019]#1028])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":362,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2771]","target":360,"args":{"any":[]}}}]},
{"label":"364([mcore:[#986]#1019])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":363,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@0@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"365([#1069])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"366([#1070])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"367([match_def@[mcore:[#992]#1067]#1068])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":366,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2772]","target":365,"args":{"any":[]}}}]},
{"label":"368([k@[k@[#1073]#1075]#1077])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"369([k@[#1073]#1075])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foreach<a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foreach<a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Jump","target":371}]},
{"label":"370([#1073])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2229) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _ : ()\n      = action(x);\nstd/core/list/foreach<a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(x)","traced":{"any":[]}},
{"op":"Push","target":369,"args":{"any":[3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _ : ()\n      = action(x);\nstd/core/list/foreach<a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2229) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"371([mcore:[#992]#1067])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"86\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":370,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2773]","target":367,"args":{"any":[]}}}]},
{"label":"372([mcore:[#993]#1079])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"373([k@[mcore:[#1006]#1085]#1087])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@0@10086\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(i)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@0@10086, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@0@10086, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@0@10086\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"374([mcore:[#1006]#1085])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(i)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[3]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(j, x)","traced":{"any":[]}},
{"op":"Push","target":373,"args":{"any":[2]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(j, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"j\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"375([method_apply@[mcore:[#1008]#1091]#1094])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":374}]},
{"label":"376([mcore:[#1008]#1091])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n    val j : int;\n    val _ : ();\n    val x@0@10086 : int;\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[375],"args":{"any":[1,0]},"tags":["apply"]},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n    val j : int;\n    val _ : ();\n    val x@0@10086 : int;\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":371}]},
{"label":"377([method_apply@[mcore:[#1010]#1097]#1102])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":376}]},
{"label":"378([mcore:[#1010]#1097])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(2329 :: H),int>){\n    (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n        val j : int;\n        val _ : ();\n        val x@0@10086 : int;\n        (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n      })));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":0,"targets":[377],"args":{"any":[0,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(2329 :: H),int>){\n    (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n        val j : int;\n        val _ : ();\n        val x@0@10086 : int;\n        (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n      })));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":372}]},
{"label":"379([mcore:[#1012]#1108])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n          val j : int;\n          val _ : ();\n          val x@0@10086 : int;\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n        })));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,(),(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (std/core/list/foreach<a,<(local :: H -> X)<(h :: H)>|(e :: E)>>(xs, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: 2335){\n          val j : int;\n          val _ : ();\n          val x@0@10086 : int;\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(i, (std/core/int/int-add(x@0@10086, 1))));\n        })));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":378}]},
{"label":"380([#1114])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"381([#1115])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: -1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":-1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: -1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"382([match_def@[mcore:[#1020]#1112]#1113])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":381,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2774]","target":380,"args":{"any":[]}}}]},
{"label":"383([k@[k@[#1118]#1120]#1122])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"384([switch case for Bool(true)#1124])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x90\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x90\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"385([k@[switch case for Bool(false)#1126]#1131])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"386([switch case for Bool(false)#1126])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x90\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(idx, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(idx, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x90\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":391}]},
{"label":"387([switch default case#1133])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"388([switch default case#1125])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":3,"values":[false],"targets":[386],"default":387}]},
{"label":"389([k@[#1118]#1120])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[384],"default":388}]},
{"label":"390([#1118])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2378) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2378>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> idx;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Push","target":389,"args":{"any":[4,0,1]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> idx;\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/list/index-of-acc<a,(e :: E)>(xx, pred, (std/core/int/int-add(idx, 1)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2378) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2378>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"391([mcore:[#1020]#1112])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"88\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":390,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2775]","target":382,"args":{"any":[]}}}]},
{"label":"392([mcore:[#1025]#1134])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/index-of-acc<a,(e :: E)>(xs, pred, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/index-of-acc<a,(e :: E)>(xs, pred, 0)","traced":{"any":[]}},
{"op":"Jump","target":391}]},
{"label":"393([mcore:[#1027]#1137])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"394([match_def@[mcore:[#1035]#1143]#1144])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"395([match_def@[#1149]#1150])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"396([k@[#1160]#1166])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"397([#1160])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":393}]},
{"label":"398([match_std/core/types/Cons@[#1149]#1155])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2441) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"93\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 2441) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/init<a>(xx)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/init<a>(xx)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":397,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/init<a>(xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/init<a>(xx)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2441) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"93\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 2441) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":400}]},
{"label":"399([#1149])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"93\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((@pat@0: 2441), (@pat@1: list<2441>)) : list<a> ) as xx: list<2441>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"93\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":398,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2776]","target":395,"args":{"any":[]}}}]},
{"label":"400([mcore:[#1035]#1143])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":399,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2777]","target":394,"args":{"any":[]}}}]},
{"label":"401([mcore:[#1036]#1168])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"402([mcore:[#1039]#1174])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"403([#1182])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"404([#1183])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"405([match_def@[mcore:[#1048]#1180]#1181])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":404,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2778]","target":403,"args":{"any":[]}}}]},
{"label":"406([k@[k@[k@[#1184]#1189]#1195]#1200])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"407([k@[k@[#1184]#1189]#1195])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030)","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"408([k@[#1184]#1189])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":407,"args":{"any":[1,3]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":4,"to":2},
{"op":"Jump","target":401}]},
{"label":"409([#1184])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val acc@0@10030 : string\n      = std/core/types/(++)(acc, (std/core/types/(++)(sep, y)));\nstd/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"acc@0@10030\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(acc, (std/core/types/(++)(sep, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(sep, y)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":408,"args":{"any":[4,0,1]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(sep, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(acc, (std/core/types/(++)(sep, y)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"acc@0@10030\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val acc@0@10030 : string\n      = std/core/types/(++)(acc, (std/core/types/(++)(sep, y)));\nstd/core/list/@lift-joinsep@4797(sep, yy, acc@0@10030)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":402}]},
{"label":"410([mcore:[#1048]#1180])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"95\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"96\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":409,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2779]","target":405,"args":{"any":[]}}}]},
{"label":"411([#1204])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"412([k@[#1205]#1210])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"413([#1205])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(sep, xx, x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(sep, xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"414([match_def@[mcore:[#1053]#1202]#1203])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"97\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":413,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2780]","target":411,"args":{"any":[]}}}]},
{"label":"415([#1212])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"416([mcore:[#1053]#1202])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":415,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2781]","target":414,"args":{"any":[]}}}]},
{"label":"417([#1217])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"418([k@[#1218]#1225])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"419([#1218])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"420([match_def@[mcore:[#1058]#1215]#1216])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":419,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2782]","target":417,"args":{"any":[]}}}]},
{"label":"421([#1227])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"422([mcore:[#1058]#1215])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":421,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2783]","target":420,"args":{"any":[]}}}]},
{"label":"423([mcore:[#1059]#1230])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"424([#1245])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"425([k@[match_def@[mcore:[#1067]#1236]#1237]#1239])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":423}]},
{"label":"426([match_def@[#1247]#1248])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"427([#1254])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"428([match_std/core/types/Cons@[#1247]#1249])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(end, xx, x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(end, xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"429([#1247])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"101\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":428,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2784]","target":426,"args":{"any":[]}}}]},
{"label":"430([#1256])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"431([match_def@[mcore:[#1067]#1236]#1237])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(end, xx, x);\n  }), end)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(end, xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Push","target":425,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(end, xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (xs) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(end, xx, x);\n  }), end)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":430,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2785]","target":429,"args":{"any":[]}}}]},
{"label":"432([#1259])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"433([mcore:[#1067]#1236])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":432,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2786]","target":431,"args":{"any":[]}}}]},
{"label":"434([mcore:[#1069]#1262])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"435([match_def@[#1269]#1270])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"436([match_std/core/types/Nil@[#1269]#1271])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"437([#1269])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":436,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2787]","target":435,"args":{"any":[]}}}]},
{"label":"438([k@[#1276]#1281])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"439([#1276])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/last<a>(xx)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/last<a>(xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":450}]},
{"label":"440([match_def@[mcore:[#1078]#1267]#1268])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":439,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2788]","target":437,"args":{"any":[]}}}]},
{"label":"441([#1286])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"442([#1287])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"443([match_def@[match_def@[#1283]#1284]#1285])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":442,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2789]","target":441,"args":{"any":[]}}}]},
{"label":"444([k@[#1292]#1297])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"445([#1292])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/last<a>(xx)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/last<a>(xx)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":450}]},
{"label":"446([match_def@[#1283]#1284])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":445,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2790]","target":443,"args":{"any":[]}}}]},
{"label":"447([#1304])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"448([match_std/core/types/Nil@[#1283]#1299])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2569) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":434}]},
{"label":"449([#1283])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<a> ) as @pat@0: list<2569>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":448,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2791]","target":446,"args":{"any":[]}}}]},
{"label":"450([mcore:[#1078]#1267])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"103\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":449,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2792]","target":440,"args":{"any":[]}}}]},
{"label":"451([mcore:[#1081]#1306])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"452([match_def@[mcore:[#1091]#1312]#1313])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"453([#1336])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"454([k@[switch case for Bool(true)#1322]#1330])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":451}]},
{"label":"455([switch case for Bool(true)#1322])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[2]},"in":{"any":[2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":454,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/take<a>(xx, (std/core/int/int-sub(n, 1)))))","traced":{"any":[]}},
{"op":"Jump","target":458}]},
{"label":"456([switch default case#1338])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"457([#1318])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2612) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2612>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>)(n, 0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>)(n, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2612) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<2612>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[455],"default":456}]},
{"label":"458([mcore:[#1091]#1312])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"107\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":457,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2793]","target":452,"args":{"any":[]}}}]},
{"label":"459([mcore:[#1092]#1343])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"460([k@[k@[mcore:[#1102]#1349]#1354]#1357])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":459}]},
{"label":"461([k@[mcore:[#1102]#1349]#1354])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/drop<a>(xs, n)","traced":{"any":[]}},
{"op":"Push","target":460,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/drop<a>(xs, n)","traced":{"any":[]}},
{"op":"Jump","target":249}]},
{"label":"462([mcore:[#1102]#1349])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/take<a>(xs, n)), (std/core/list/drop<a>(xs, n)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/take<a>(xs, n)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":461,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/take<a>(xs, n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/take<a>(xs, n)), (std/core/list/drop<a>(xs, n)))","traced":{"any":[]}},
{"op":"Jump","target":458}]},
{"label":"463([mcore:[#1103]#1362])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"464([mcore:[#1108]#1368])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s, \"\\x0A\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s, \"\\x0A\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":463}]},
{"label":"465([mcore:[#1110]#1378])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"466([#1400])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"467([k@[switch case for Bool(true)#1386]#1394])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":465}]},
{"label":"468([switch case for Bool(true)#1386])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<int>(lo, (std/core/list/list((std/core/int/int-add(lo, 1)), hi)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/list((std/core/int/int-add(lo, 1)), hi)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(lo, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":467,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(lo, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/list((std/core/int/int-add(lo, 1)), hi)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<int>(lo, (std/core/list/list((std/core/int/int-add(lo, 1)), hi)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"469([switch case for Bool(false)#1404])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<int>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<int>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"470([switch default case#1409])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"471([switch default case#1402])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[469],"default":470}]},
{"label":"472([mcore:[#1120]#1384])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[468],"default":471}]},
{"label":"473([mcore:[#1121]#1410])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"474([#1418])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"475([#1419])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"476([match_def@[mcore:[#1131]#1416]#1417])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":475,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2794]","target":474,"args":{"any":[]}}}]},
{"label":"477([k@[k@[k@[#1424]#1426]#1432]#1438])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"478([k@[k@[#1424]#1426]#1432])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":473}]},
{"label":"479([k@[#1424]#1426])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/map<a,a,(e :: E)>(xx, f)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":478,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/map<a,a,(e :: E)>(xx, f)","traced":{"any":[]}},
{"op":"Jump","target":481}]},
{"label":"480([#1424])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3009) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3009>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(x)), (std/core/list/map<a,a,(e :: E)>(xx, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(x)","traced":{"any":[]}},
{"op":"Push","target":479,"args":{"any":[3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(x)), (std/core/list/map<a,a,(e :: E)>(xx, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3009) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3009>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"481([mcore:[#1131]#1416])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"109\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":480,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2795]","target":476,"args":{"any":[]}}}]},
{"label":"482([mcore:[#1137]#1440])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"(#1)","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"483([#1452])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":482}]},
{"label":"484([k@[mcore:[#1139]#1441]#1448])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":1,"targets":[483],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":481}]},
{"label":"485([mcore:[#1139]#1441])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/map<int,char,(total :: E)>((std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))), std/core/char/int/char)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(lo)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(hi)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":484,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(hi)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(lo)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/map<int,char,(total :: E)>((std/core/list/list((std/core/char/int(lo)), (std/core/char/int(hi)))), std/core/char/int/char)","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"486([mcore:[#1141]#1458])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"487([k@[#1477]#1483])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"488([#1477])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":486}]},
{"label":"489([k@[switch case for Bool(true)#1466]#1468])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(lo, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[3]},"in":{"any":[3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":488,"args":{"any":[0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":4,"to":3},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(lo, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)","traced":{"any":[]}},
{"op":"Jump","target":494}]},
{"label":"490([switch case for Bool(true)#1466])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(lo)), (std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(lo)","traced":{"any":[]}},
{"op":"Push","target":489,"args":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(lo)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(lo)), (std/core/list/function/list<a,(e :: E)>((std/core/int/int-add(lo, 1)), hi, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"491([switch case for Bool(false)#1487])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"492([switch default case#1492])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"493([switch default case#1485])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[2,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[491],"default":492}]},
{"label":"494([mcore:[#1154]#1464])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,1]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[490],"default":493}]},
{"label":"495([mcore:[#1156]#1493])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"496([#1513])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"497([k@[switch case for Bool(true)#1501]#1507])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":495}]},
{"label":"498([switch case for Bool(true)#1501])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<int>(lo, (std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(lo, stride)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[3]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":497,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":4,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(lo, stride)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<int>(lo, (std/core/list/stride/list((std/core/int/int-add(lo, stride)), hi, stride)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":502}]},
{"label":"499([switch case for Bool(false)#1517])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<int>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<int>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"500([switch default case#1522])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"501([switch default case#1515])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[499],"default":500}]},
{"label":"502([mcore:[#1166]#1499])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[498],"default":501}]},
{"label":"503([mcore:[#1168]#1523])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"504([k@[#1540]#1546])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"505([#1540])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":503}]},
{"label":"506([k@[switch case for Bool(true)#1531]#1533])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(lo, stride)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[3]},"in":{"any":[3,4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":505,"args":{"any":[0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":1,"to":3},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(lo, stride)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)","traced":{"any":[]}},
{"op":"Jump","target":511}]},
{"label":"507([switch case for Bool(true)#1531])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(lo)), (std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(lo)","traced":{"any":[]}},
{"op":"Push","target":506,"args":{"any":[0,1,2,3]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(lo)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(lo)), (std/core/list/stridefunction/list<a,(e :: E)>((std/core/int/int-add(lo, stride)), hi, stride, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"508([switch case for Bool(false)#1550])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"lo\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"hi\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"509([switch default case#1555])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"510([switch default case#1548])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[2,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[508],"default":509}]},
{"label":"511([mcore:[#1181]#1529])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":3},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[507],"default":510}]},
{"label":"512([mcore:[#1182]#1556])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"513([mcore:[#1185]#1561])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/list"}]},
{"label":"514([k@[k@[mcore:[#1191]#1566]#1571]#1577])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":512}]},
{"label":"515([k@[mcore:[#1191]#1566]#1571])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":514,"args":{"any":[]}},
{"op":"Jump","target":481}]},
{"label":"516([mcore:[#1191]#1566])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/list(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":515,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/list(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/core/list/map<char,char,(e :: E)>((std/core/string/list(s)), f)))","traced":{"any":[]}},
{"op":"Jump","target":513}]},
{"label":"517([mcore:[#1196]#1582])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"518([#1601])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"519([k@[switch case for Bool(true)#1593]#1595])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":517}]},
{"label":"520([#1603])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"521([#1604])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"115\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 3159) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 3160) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"115\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 3159) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 3160) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"522([switch case for Bool(true)#1593])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x112\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>((match (kv) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n     -> @x@0;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (kv) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"115\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":519,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"115\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"116\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (kv) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>((match (kv) {\n  ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n     -> @x@0;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x112\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":521,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2796]","target":520,"args":{"any":[]}}}]},
{"label":"523([switch case for Bool(false)#1606])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x112\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x112\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"524([switch default case#1611])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"525([switch default case#1605])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[523],"default":524}]},
{"label":"526([k@[k@[mcore:[#1200]#1587]#1589]#1592])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[522],"default":525}]},
{"label":"527([k@[mcore:[#1200]#1587]#1589])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":526,"args":{"any":[1]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"528([match_def@[mcore:[#1200]#1587]#1612])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"529([#1613])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 3159) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 3160) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 3159) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 3160) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"530([mcore:[#1200]#1587])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: pred((match (kv) {\n  ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n     -> @x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (kv) {\n  ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"114\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":527,"args":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"kv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"113\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"114\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (kv) {\n  ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred((match (kv) {\n  ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n     -> @x;\n}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":529,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2797]","target":528,"args":{"any":[]}}}]},
{"label":"531([method_apply@[mcore:[#1202]#1614]#1617])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":530}]},
{"label":"532([mcore:[#1202]#1614])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foreach-while<(a, b),a,(e :: E)>(xs, (fn<(e :: E)>(kv: (3159, 3160)){\n    (match ((pred((match (kv) {\n      ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n         -> @x;\n    })))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> std/core/types/Just<a>((match (kv) {\n          ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n             -> @x@0;\n        }));\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Nothing<a>;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[531],"args":{"any":[1]},"tags":["apply"]},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foreach-while<(a, b),a,(e :: E)>(xs, (fn<(e :: E)>(kv: (3159, 3160)){\n    (match ((pred((match (kv) {\n      ((@skip std/core/types/Tuple2((@x: 3159) : a, (@pat@0: 3160) : a) : (a, b) ) as @pat: (3159, 3160))\n         -> @x;\n    })))) {\n      ((std/core/types/True() : bool ) as @pat@1: bool)\n         -> std/core/types/Just<a>((match (kv) {\n          ((@skip std/core/types/Tuple2((@pat@0@0: 3159) : a, (@x@0: 3160) : a) : (a, b) ) as @pat@2: (3159, 3160))\n             -> @x@0;\n        }));\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Nothing<a>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":301}]},
{"label":"533([mcore:[#1206]#1623])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"534([#1631])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"535([k@[k@[#1632]#1634]#1636])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"536([#1639])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"537([#1640])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"538([match_def@[k@[#1632]#1634]#1638])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":537,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2798]","target":536,"args":{"any":[]}}}]},
{"label":"539([k@[k@[#1645]#1650]#1656])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"540([k@[#1645]#1650])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":533}]},
{"label":"541([#1645])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3222) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/list/map-while<a,a,(e :: E)>(xx, action)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/map-while<a,a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":540,"args":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/map-while<a,a,(e :: E)>(xx, action)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/list/map-while<a,a,(e :: E)>(xx, action)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3222) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":546}]},
{"label":"542([k@[#1632]#1634])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x119\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":541,"args":{"any":[3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2799]","target":538,"args":{"any":[]}}}]},
{"label":"543([#1632])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3221) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3221>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"118\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((action(x))) {\n  ((std/core/types/Just((y: 3222) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<3222>))\n     -> std/core/types/Cons<a>(y, (std/core/list/map-while<a,a,(e :: E)>(xx, action)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<3222>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: action(x)","traced":{"any":[]}},
{"op":"Push","target":542,"args":{"any":[2,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: action(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((action(x))) {\n  ((std/core/types/Just((y: 3222) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<3222>))\n     -> std/core/types/Cons<a>(y, (std/core/list/map-while<a,a,(e :: E)>(xx, action)));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<3222>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3221) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3221>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"118\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"544([match_def@[mcore:[#1214]#1629]#1630])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"117\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":543,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2800]","target":534,"args":{"any":[]}}}]},
{"label":"545([#1658])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"546([mcore:[#1214]#1629])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":545,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2801]","target":544,"args":{"any":[]}}}]},
{"label":"547([mcore:[#1218]#1663])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/max"}]},
{"label":"548([#1671])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"549([method_apply@[#1672]#1676])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":547}]},
{"label":"550([k@[#1672]#1683])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"551([#1672])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max)","traced":{"any":[]}},
{"op":"New","out":2,"targets":[549],"args":{"any":[]},"tags":["apply"]},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":334}]},
{"label":"552([match_def@[mcore:[#1220]#1669]#1670])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"122\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":551,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2802]","target":548,"args":{"any":[]}}}]},
{"label":"553([k@[#1685]#1687])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"554([match_def@[match_def@[#1685]#1689]#1690])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"555([#1691])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"556([match_def@[#1685]#1689])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":555,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2803]","target":554,"args":{"any":[]}}}]},
{"label":"557([match_std/core/types/@Optional@[#1685]#1694])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3236: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3236: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"558([#1685])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (default) {\n  ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3236;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (default) {\n  ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3236;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":557,"args":{"any":[1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2804]","target":556,"args":{"any":[]}}}]},
{"label":"559([mcore:[#1220]#1669])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":558,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2805]","target":552,"args":{"any":[]}}}]},
{"label":"560([mcore:[#1224]#1695])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/min"}]},
{"label":"561([#1703])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"562([method_apply@[#1704]#1708])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":560}]},
{"label":"563([k@[#1704]#1715])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"564([#1704])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/min)","traced":{"any":[]}},
{"op":"New","out":2,"targets":[562],"args":{"any":[]},"tags":["apply"]},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/min)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":334}]},
{"label":"565([match_def@[mcore:[#1226]#1701]#1702])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"125\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":564,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2806]","target":561,"args":{"any":[]}}}]},
{"label":"566([k@[#1717]#1719])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"567([match_def@[match_def@[#1717]#1721]#1722])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"568([#1723])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"569([match_def@[#1717]#1721])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":568,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2807]","target":567,"args":{"any":[]}}}]},
{"label":"570([match_std/core/types/@Optional@[#1717]#1726])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3266,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3266: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3266,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3266: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"571([#1717])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (default) {\n  ((std/core/types/@Optional((@uniq-default@3266: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3266;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"default\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (default) {\n  ((std/core/types/@Optional((@uniq-default@3266: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3266;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":570,"args":{"any":[1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2808]","target":569,"args":{"any":[]}}}]},
{"label":"572([mcore:[#1226]#1701])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":571,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2809]","target":565,"args":{"any":[]}}}]},
{"label":"573([mcore:[#1227]#1727])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"574([mcore:[#1233]#1733])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"575([mcore:[#1242]#1739])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"576([#1747])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"577([k@[k@[#1748]#1750]#1752])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"578([#1772])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"579([k@[switch case for Bool(true)#1754]#1762])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3378\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3377, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3377\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3377, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3378\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":591}]},
{"label":"580([switch case for Bool(true)#1754])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @cctx-x3377 : (list :: V -> V)<a>;\nval @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3377\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":579,"args":{"any":[1,4,5]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3377\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @cctx-x3377 : (list :: V -> V)<a>;\nval @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":574}]},
{"label":"581([#1793])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"582([k@[switch case for Bool(false)#1775]#1783])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3421\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3420, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3420\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3420, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3421\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":591}]},
{"label":"583([switch case for Bool(false)#1775])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @cctx-x3420 : (list :: V -> V)<a>;\nval @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3420\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":582,"args":{"any":[1,2,3]}},
{"op":"Copy","from":5,"to":2},
{"op":"Copy","from":4,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3420\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @cctx-x3420 : (list :: V -> V)<a>;\nval @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":575}]},
{"label":"584([switch default case#1795])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"585([switch default case#1774])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Copy","from":2,"to":4},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":5,"to":3},
{"op":"Switch","arg":4,"values":[false],"targets":[583],"default":584}]},
{"label":"586([k@[#1748]#1750])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[580],"default":585}]},
{"label":"587([#1748])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3429) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3429>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> val @cctx-x3377 : (list :: V -> V)<a>;\n        val @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n    std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val @cctx-x3420 : (list :: V -> V)<a>;\n        val @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n    std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Push","target":586,"args":{"any":[3,4,0,1,2]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((pred(x))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> val @cctx-x3377 : (list :: V -> V)<a>;\n        val @cctx-x3378 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n    std/core/list/partition-acc<a,(e :: E)>(xx, pred, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3377, @cctx-x3378)))), acc2);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> val @cctx-x3420 : (list :: V -> V)<a>;\n        val @cctx-x3421 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\n    std/core/list/partition-acc<a,(e :: E)>(xx, pred, acc1, (std/core/types/cctx/(++)<(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3420, @cctx-x3421)))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3429) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3429>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"588([match_def@[mcore:[#1251]#1745]#1746])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"127\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"128\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Cons","target":587,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2810]","target":576,"args":{"any":[]}}}]},
{"label":"589([k@[#1796]#1807])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"590([#1796])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":573}]},
{"label":"591([mcore:[#1251]#1745])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Nil","target":590,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2811]","target":588,"args":{"any":[]}}}]},
{"label":"592([mcore:[#1257]#1809])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/partition-acc<a,(e :: E)>(xs, pred, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/partition-acc<a,(e :: E)>(xs, pred, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Jump","target":591}]},
{"label":"593([switch case for Bool(true)#1822])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"594([switch case for Bool(false)#1826])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"595([switch default case#1829])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"596([switch default case#1825])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[594],"default":595}]},
{"label":"597([k@[mcore:[#1262]#1819]#1821])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[593],"default":596}]},
{"label":"598([mcore:[#1262]#1819])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Push","target":597,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10095\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"599([method_apply@[mcore:[#1264]#1830]#1833])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":598}]},
{"label":"600([mcore:[#1264]#1830])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/filter<a,(e :: E)>(xs, (fn<(e :: E)>(x: 3506){\n    val b@10095 : bool\n          = (pred(x));\n    (match (b@10095) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/True;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[599],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/filter<a,(e :: E)>(xs, (fn<(e :: E)>(x: 3506){\n    val b@10095 : bool\n          = (pred(x));\n    (match (b@10095) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n         -> std/core/types/True;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":276}]},
{"label":"601([mcore:[#1267]#1839])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"602([#1863])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"603([k@[switch case for Bool(true)#1849]#1857])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":601}]},
{"label":"604([switch case for Bool(true)#1849])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":603,"args":{"any":[1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/replicate<a>(x, (std/core/int/int-sub(n, 1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":608}]},
{"label":"605([switch case for Bool(false)#1869])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"606([switch default case#1874])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"607([switch default case#1865])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[605],"default":606}]},
{"label":"608([mcore:[#1278]#1845])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[604],"default":607}]},
{"label":"609([#1886])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"610([k@[#1887]#1894])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"611([#1887])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"612([match_def@[k@[mcore:[#1287]#1875]#1884]#1885])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"130\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"131\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":611,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2812]","target":609,"args":{"any":[]}}}]},
{"label":"613([#1896])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"614([k@[mcore:[#1287]#1875]#1884])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":613,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2813]","target":612,"args":{"any":[]}}}]},
{"label":"615([mcore:[#1287]#1875])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":614,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), xs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@0@10045\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"616([#1901])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"617([k@[#1902]#1907])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"618([#1902])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(sep, xx, x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(sep, xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"619([match_def@[mcore:[#1292]#1899]#1900])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"132\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":618,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2814]","target":616,"args":{"any":[]}}}]},
{"label":"620([#1909])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"621([mcore:[#1292]#1899])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":620,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2815]","target":619,"args":{"any":[]}}}]},
{"label":"622([mcore:[#1296]#1912])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"623([mcore:[#1299]#1918])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"624([#1941])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":622}]},
{"label":"625([k@[k@[mcore:[#1308]#1924]#1929]#1933])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"]\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"]"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":624,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"]\"","traced":{"any":[]}},
{"op":"Jump","target":623}]},
{"label":"626([#1947])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"627([k@[#1948]#1955])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"628([#1948])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\",\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \",\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":","},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \",\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\",\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"629([match_def@[k@[mcore:[#1308]#1924]#1929]#1946])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":628,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2816]","target":626,"args":{"any":[]}}}]},
{"label":"630([#1957])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"631([k@[mcore:[#1308]#1924]#1929])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"[\", (std/core/types/(++)((match (xs@0@10096) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n    }), \"]\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"[\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"["},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (xs@0@10096) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n  }), \"]\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@0@10096) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Push","target":625,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@0@10096) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (xs@0@10096) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n  }), \"]\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"[\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"[\", (std/core/types/(++)((match (xs@0@10096) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\",\", xx, x);\n    }), \"]\")))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":630,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2817]","target":629,"args":{"any":[]}}}]},
{"label":"632([mcore:[#1308]#1924])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/map<a,string,(e :: E)>(xs, ?show)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":631,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/map<a,string,(e :: E)>(xs, ?show)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@0@10096\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":481}]},
{"label":"633([mcore:[#1312]#1960])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/show<a,(e :: E)>(xs, show-elem)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/show<a,(e :: E)>(xs, show-elem)","traced":{"any":[]}},
{"op":"Jump","target":632}]},
{"label":"634([mcore:[#1318]#1964])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"635([mcore:[#1323]#1970])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"636([mcore:[#1331]#1976])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"637([#1984])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"638([k@[k@[#1985]#1994]#2000])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"639([k@[#1985]#1994])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":636}]},
{"label":"640([#1985])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":639,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"641([match_def@[mcore:[#1339]#1982]#1983])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":640,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2818]","target":637,"args":{"any":[]}}}]},
{"label":"642([k@[k@[#2002]#2004]#2006])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"643([#2019])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"644([k@[switch case for Bool(true)#2008]#2013])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Jump","target":653}]},
{"label":"645([switch case for Bool(true)#2008])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, acc)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":644,"args":{"any":[1,4]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":634}]},
{"label":"646([#2037])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"647([k@[switch case for Bool(false)#2022]#2031])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":635}]},
{"label":"648([switch case for Bool(false)#2022])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":647,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"649([switch default case#2039])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"650([switch default case#2021])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Switch","arg":2,"values":[false],"targets":[648],"default":649}]},
{"label":"651([k@[#2002]#2004])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[645],"default":650}]},
{"label":"652([#2002])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3762) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<3762>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((predicate(y))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: predicate(y)","traced":{"any":[]}},
{"op":"Push","target":651,"args":{"any":[3,4,0,1,2]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: predicate(y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((predicate(y))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/list/@lift-span@4798<a,(e :: E)>(predicate, yy, (std/core/types/Cons<a>(y, acc)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/Tuple2<(list :: V -> V)<a>,(list :: V -> V)<a>>((std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)), ys);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3762) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<3762>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"653([mcore:[#1339]#1982])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":652,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2819]","target":641,"args":{"any":[]}}}]},
{"label":"654([mcore:[#1345]#2040])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-span@4798<a,(e :: E)>(predicate, xs, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-span@4798<a,(e :: E)>(predicate, xs, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Jump","target":653}]},
{"label":"655([mcore:[#1349]#2048])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/(+)"}]},
{"label":"656([method_apply@[mcore:[#1351]#2054]#2060])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":655}]},
{"label":"657([mcore:[#1351]#2054])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<int,int,(total :: E)>(xs, 0, std/core/int/(+))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":2,"targets":[656],"args":{"any":[]},"tags":["apply"]},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<int,int,(total :: E)>(xs, 0, std/core/int/(+))","traced":{"any":[]}},
{"op":"Jump","target":334}]},
{"label":"658([mcore:[#1354]#2066])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"659([#2074])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"660([#2075])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"661([match_def@[mcore:[#1363]#2072]#2073])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":660,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2820]","target":659,"args":{"any":[]}}}]},
{"label":"662([k@[k@[#2080]#2082]#2084])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"663([#2097])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"664([k@[switch case for Bool(true)#2086]#2091])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":658}]},
{"label":"665([switch case for Bool(true)#2086])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/take-while<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":664,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/take-while<a,(e :: E)>(xx, predicate)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":671}]},
{"label":"666([switch case for Bool(false)#2100])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"667([switch default case#2105])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"668([switch default case#2099])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Switch","arg":2,"values":[false],"targets":[666],"default":667}]},
{"label":"669([k@[#2080]#2082])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[665],"default":668}]},
{"label":"670([#2080])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3832) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3832>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Push","target":669,"args":{"any":[2,3,0]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: predicate(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((predicate(x))) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/types/Cons<a>(x, (std/core/list/take-while<a,(e :: E)>(xx, predicate)));\n  ((@skip std/core/types/False() : bool ) as @pat@1: bool)\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3832) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<3832>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"671([mcore:[#1363]#2072])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"139\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":670,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2821]","target":661,"args":{"any":[]}}}]},
{"label":"672([#2108])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"673([k@[#2109]#2116])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"674([#2109])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\"\\x0A\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x0A\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"\n"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x0A\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\"\\x0A\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"675([match_def@[mcore:[#1368]#2106]#2107])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"142\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":674,"args":{"any":[0,1]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2822]","target":672,"args":{"any":[]}}}]},
{"label":"676([#2118])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"677([mcore:[#1368]#2106])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":676,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2823]","target":675,"args":{"any":[]}}}]},
{"label":"678([mcore:[#1370]#2121])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"679([mcore:[#1374]#2127])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"680([mcore:[#1382]#2133])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"681([mcore:[#1386]#2139])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"682([#2147])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"683([k@[#2148]#2159])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"684([#2148])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":681}]},
{"label":"685([match_def@[mcore:[#1390]#2145]#2146])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":684,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2824]","target":682,"args":{"any":[]}}}]},
{"label":"686([match_def@[match_def@[#2161]#2162]#2163])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"687([k@[#2164]#2175])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"688([#2164])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":680}]},
{"label":"689([match_def@[#2161]#2162])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":688,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2825]","target":686,"args":{"any":[]}}}]},
{"label":"690([k@[k@[#2185]#2195]#2208])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"691([k@[#2185]#2195])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3936\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3935, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3935\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-unzip@4799<a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-unzip@4799<a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3935, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3936\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":695}]},
{"label":"692([#2185])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3896\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3895, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x3895\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3935\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":691,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3935\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x3895, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3896\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":679}]},
{"label":"693([match_std/core/types/Tuple2@[#2161]#2177])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3864) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3865) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(3864, 3865)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @cctx-x3895 : (list :: V -> V)<a>;\nval @cctx-x3896 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x3935 : (list :: V -> V)<a>;\nval @cctx-x3936 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip@4799<a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3895\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":692,"args":{"any":[3,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":4,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x3895\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @cctx-x3895 : (list :: V -> V)<a>;\nval @cctx-x3896 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x3935 : (list :: V -> V)<a>;\nval @cctx-x3936 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip@4799<a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3895, @cctx-x3896)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x3935, @cctx-x3936)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 3864) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 3865) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(3864, 3865)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":678}]},
{"label":"694([#2161])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x: 3864), (y: 3865)) : (a, b) ) as @pat@0: (3864, 3865)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"146\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"147\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":2,"clauses":[{"tag":"std/core/types/Tuple2","target":693,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2826]","target":689,"args":{"any":[]}}}]},
{"label":"695([mcore:[#1390]#2145])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"144\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":694,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2827]","target":685,"args":{"any":[]}}}]},
{"label":"696([mcore:[#1395]#2210])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-unzip@4799<a,a,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-unzip@4799<a,a,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Jump","target":695}]},
{"label":"697([mcore:[#1397]#2220])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"698([mcore:[#1401]#2226])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"699([mcore:[#1405]#2232])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"700([mcore:[#1414]#2238])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/types/Tuple3"}]},
{"label":"701([mcore:[#1419]#2245])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/types/Tuple3"}]},
{"label":"702([#2254])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"703([k@[#2255]#2269])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"704([#2255])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple3<a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple3<a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":701}]},
{"label":"705([match_def@[mcore:[#1424]#2252]#2253])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":704,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2828]","target":702,"args":{"any":[]}}}]},
{"label":"706([match_def@[match_def@[#2271]#2272]#2273])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"707([k@[#2274]#2288])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"708([#2274])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple3<a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple3<a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":700}]},
{"label":"709([match_def@[#2271]#2272])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":708,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2829]","target":706,"args":{"any":[]}}}]},
{"label":"710([k@[k@[k@[#2298]#2308]#2318]#2334])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"711([k@[k@[#2298]#2308]#2318])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4166, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-unzip3@4800<a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-unzip3@4800<a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4166, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":716}]},
{"label":"712([k@[#2298]#2308])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4126, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4126\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(z, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":711,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(z, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4126, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":699}]},
{"label":"713([#2298])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4087\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4086, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4086\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":712,"args":{"any":[2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4086, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4087\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":698}]},
{"label":"714([match_std/core/types/Tuple3@[#2271]#2290])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4054) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4055) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 4056) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(4054, 4055, 4056)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @cctx-x4086 : (list :: V -> V)<a>;\nval @cctx-x4087 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4126 : (list :: V -> V)<a>;\nval @cctx-x4127 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4166 : (list :: V -> V)<a>;\nval @cctx-x4167 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip3@4800<a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":713,"args":{"any":[3,0,4]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":5,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @cctx-x4086 : (list :: V -> V)<a>;\nval @cctx-x4087 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4126 : (list :: V -> V)<a>;\nval @cctx-x4127 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4166 : (list :: V -> V)<a>;\nval @cctx-x4167 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip3@4800<a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4086, @cctx-x4087)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4126, @cctx-x4127)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4166, @cctx-x4167)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4054) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4055) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 4056) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(4054, 4055, 4056)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":697}]},
{"label":"715([#2271])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple3((x: 4054), (y: 4055), (z: 4056)) : (a, b, c) ) as @pat@0: (4054, 4055, 4056)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"150\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"152\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple3","scrutinee":2,"clauses":[{"tag":"std/core/types/Tuple3","target":714,"args":{"any":[2,3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2830]","target":709,"args":{"any":[]}}}]},
{"label":"716([mcore:[#1424]#2252])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"148\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"149\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":715,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2831]","target":705,"args":{"any":[]}}}]},
{"label":"717([mcore:[#1430]#2336])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-unzip3@4800<a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-unzip3@4800<a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Jump","target":716}]},
{"label":"718([mcore:[#1432]#2349])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"719([mcore:[#1436]#2355])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"720([mcore:[#1440]#2361])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"721([mcore:[#1444]#2367])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"722([mcore:[#1454]#2373])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/types/Tuple4"}]},
{"label":"723([mcore:[#1460]#2381])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/types/Tuple4"}]},
{"label":"724([#2391])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"725([k@[#2392]#2409])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"726([#2392])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple4<a,a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple4<a,a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":723}]},
{"label":"727([match_def@[mcore:[#1466]#2389]#2390])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":726,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2832]","target":724,"args":{"any":[]}}}]},
{"label":"728([match_def@[match_def@[#2411]#2412]#2413])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"729([k@[#2414]#2431])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"730([#2414])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple4<a,a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/(++.)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple4<a,a,a,a>((std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc1, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc2, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc3, (std/core/types/Nil<a>))), (std/core/types/cctx/(++.)<a,(list :: V -> V)<a>>(acc4, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":722}]},
{"label":"731([match_def@[#2411]#2412])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":730,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2833]","target":728,"args":{"any":[]}}}]},
{"label":"732([k@[k@[k@[k@[#2441]#2451]#2461]#2471]#2490])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"733([k@[k@[k@[#2441]#2451]#2461]#2471])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4478\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4477, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4477\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Undefined:  std/core/types/#cctx/(++)"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4477, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4478\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":739}]},
{"label":"734([k@[k@[#2441]#2451]#2461])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4438\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4437, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4437\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4477\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(w, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":733,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(w, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4477\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4437, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4438\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":721}]},
{"label":"735([k@[#2441]#2451])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4398\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4397, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4397\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4437\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(z, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":734,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(z, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4437\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4397, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4398\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":720}]},
{"label":"736([#2441])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4358\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4357, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"{obj: {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@cctx-x4357\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}, field_name: \\\"\\\"tail\\\"\\\"}\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4397\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":735,"args":{"any":[1,3,4]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":5,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(y, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4397\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@field-addr-of<(list :: V -> V)<a>>(@cctx-x4357, \"(\\x22std/core/types\\x22,\\x22\\x22,\\x22Cons\\x22)\", \"(\\x22\\x22,\\x22\\x22,\\x22tail\\x22)\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4358\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":719}]},
{"label":"737([match_std/core/types/Tuple4@[#2411]#2433])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4324) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4325) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 4326) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (w: 4327) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(4324, 4325, 4326, 4327)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @cctx-x4357 : (list :: V -> V)<a>;\nval @cctx-x4358 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4397 : (list :: V -> V)<a>;\nval @cctx-x4398 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4437 : (list :: V -> V)<a>;\nval @cctx-x4438 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4477 : (list :: V -> V)<a>;\nval @cctx-x4478 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4357\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  \"std/core/types/@cctx-hole-create\""},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":736,"args":{"any":[5,3,0,4]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":6,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, (std/core/types/@cctx-hole-create<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@cctx-x4357\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @cctx-x4357 : (list :: V -> V)<a>;\nval @cctx-x4358 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4397 : (list :: V -> V)<a>;\nval @cctx-x4398 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4437 : (list :: V -> V)<a>;\nval @cctx-x4438 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nval @cctx-x4477 : (list :: V -> V)<a>;\nval @cctx-x4478 : (@field-addr :: V -> V)<(list :: V -> V)<a>>;\nstd/core/list/@lift-unzip4@4801<a,a,a,a,a,a,a,a>(xx, (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc1, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4357, @cctx-x4358)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc2, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4397, @cctx-x4398)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc3, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4437, @cctx-x4438)))), (std/core/types/cctx/(++)<a,(list :: V -> V)<a>,(list :: V -> V)<a>>(acc4, (std/core/types/@cctx-create<(list :: V -> V)<a>,(list :: V -> V)<a>>(@cctx-x4477, @cctx-x4478)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4324) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4325) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(z,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (z: 4326) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(w,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (w: 4327) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<(4324, 4325, 4326, 4327)>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":718}]},
{"label":"738([#2411])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple4((x: 4324), (y: 4325), (z: 4326), (w: 4327)) : (a, b, c, d) ) as @pat@0: (4324, 4325, 4326, 4327)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"155\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"157\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"158\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple4","scrutinee":2,"clauses":[{"tag":"std/core/types/Tuple4","target":737,"args":{"any":[2,3,4,5]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2834]","target":731,"args":{"any":[]}}}]},
{"label":"739([mcore:[#1466]#2389])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"153\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"154\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":738,"args":{"any":[1,2]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2835]","target":727,"args":{"any":[]}}}]},
{"label":"740([mcore:[#1473]#2492])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Undefined:  std/core/types/#cctx/empty"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/cctx/empty<(list :: V -> V)<a>>()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-unzip4@4801<a,a,a,a,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>,(list :: V -> V)<a>>(xs, (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()), (std/core/types/cctx/empty<(list :: V -> V)<a>>()))","traced":{"any":[]}},
{"op":"Jump","target":739}]},
{"label":"741([mcore:[#1474]#2508])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"742([mcore:[#1476]#2514])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"743([#2522])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"744([#2523])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<(a, b)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<(a, b)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"745([match_def@[mcore:[#1487]#2520]#2521])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":744,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2836]","target":743,"args":{"any":[]}}}]},
{"label":"746([k@[#2528]#2530])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"747([match_def@[match_def@[#2528]#2532]#2533])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"748([#2534])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<(a, b)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<(a, b)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"749([match_def@[#2528]#2532])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":748,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2837]","target":747,"args":{"any":[]}}}]},
{"label":"750([k@[k@[#2544]#2550]#2556])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"751([k@[#2544]#2550])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":741}]},
{"label":"752([#2544])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/zip<a,a>(xx, yy)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":751,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/zip<a,a>(xx, yy)","traced":{"any":[]}},
{"op":"Jump","target":755}]},
{"label":"753([match_std/core/types/Cons@[#2528]#2539])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4707) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<4707>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,a>(x, y)), (std/core/list/zip<a,a>(xx, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<a,a>(x, y)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":752,"args":{"any":[1,4]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<a,a>(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,a>(x, y)), (std/core/list/zip<a,a>(xx, yy)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4707) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<4707>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":742}]},
{"label":"754([#2528])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4706) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<4706>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Cons((y: 4707) : a, (yy: (list :: V -> V)<4707>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<4707>))\n     -> std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,a>(x, y)), (std/core/list/zip<a,a>(xx, yy)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<4707>))\n     -> std/core/types/Nil<(a, b)>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"161\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Cons((y: 4707) : a, (yy: (list :: V -> V)<4707>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<4707>))\n     -> std/core/types/Cons<(a, b)>((std/core/types/Tuple2<a,a>(x, y)), (std/core/list/zip<a,a>(xx, yy)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<4707>))\n     -> std/core/types/Nil<(a, b)>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4706) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<4706>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":753,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2838]","target":749,"args":{"any":[]}}}]},
{"label":"755([mcore:[#1487]#2520])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"159\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":754,"args":{"any":[2,3]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2839]","target":745,"args":{"any":[]}}}]},
{"label":"756([mcore:[#1488]#2558])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"757([#2566])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"758([#2567])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"759([match_def@[mcore:[#1501]#2564]#2565])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":758,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2840]","target":757,"args":{"any":[]}}}]},
{"label":"760([k@[#2572]#2574])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"761([match_def@[match_def@[#2572]#2576]#2577])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"762([#2578])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"763([match_def@[#2572]#2576])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Nil","target":762,"args":{"any":[]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2841]","target":761,"args":{"any":[]}}}]},
{"label":"764([k@[k@[#2585]#2591]#2597])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"765([k@[#2585]#2591])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":756}]},
{"label":"766([#2585])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":765,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)","traced":{"any":[]}},
{"op":"Jump","target":769}]},
{"label":"767([match_std/core/types/Cons@[#2572]#2583])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4773) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<4773>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((f(x, y)), (std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(x, y)","traced":{"any":[]}},
{"op":"Push","target":766,"args":{"any":[1,5,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((f(x, y)), (std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(y,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (y: 4773) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(yy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (yy: list<4773>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"768([#2572])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<4772>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ys) {\n  ((std/core/types/Cons((y: 4773) : a, (yy: (list :: V -> V)<4773>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<4773>))\n     -> std/core/types/Cons<a>((f(x, y)), (std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<4773>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":4,"to":1},
{"op":"Swap","a":0,"b":3},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ys\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"165\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ys) {\n  ((std/core/types/Cons((y: 4773) : a, (yy: (list :: V -> V)<4773>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat@0: ((list :: V -> V)<4773>))\n     -> std/core/types/Cons<a>((f(x, y)), (std/core/list/zipwith<a,a,a,(e :: E)>(xx, yy, f)));\n  ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@1: ((list :: V -> V)<4773>))\n     -> std/core/types/Nil<a>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 4772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<4772>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Cons","target":767,"args":{"any":[4,5]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2842]","target":763,"args":{"any":[]}}}]},
{"label":"769([mcore:[#1501]#2564])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":768,"args":{"any":[3,4]}}],"default":{"tag":"6b7674cb-2057-4c06-a4c3-880bffe3a6af#[Missing Tag#2843]","target":759,"args":{"any":[]}}}]},
{"label":"770([k@[k@[#2659]#2669]#2679])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_27db61b0-554e-48da-b343-4f5661801919"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"771([k@[#2659]#2669])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#589]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":770,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"772([#2659])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#588]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":771,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"773([k@[k@[k@[k@[#2609]#2619]#2629]#2639]#2649])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#587]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":772,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"774([k@[k@[k@[#2609]#2619]#2629]#2639])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#586]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":773,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"775([k@[k@[#2609]#2619]#2629])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#585]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":774,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"776([k@[#2609]#2619])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#584]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":775,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"777([#2609])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#583]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_undiv.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/undiv)"},
{"op":"Push","target":776,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"778([mcore:[static initializers#1545]#2599])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#582]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":777,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"779([k@[main entrypoint#2]#2687])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"780([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":779,"args":{"any":[]}},
{"op":"Jump","target":778}]}],
"symbols":[{"name":"std/core/list/@lift-concat@4788","position":13},
{"name":"std/core/list/concat","position":14},
{"name":"std/core/list/@lift-flatmap@4789","position":29},
{"name":"std/core/list/flatmap","position":30},
{"name":"std/core/list/@lift-reverse-append@4790","position":38},
{"name":"std/core/list/reverse-append","position":39},
{"name":"std/core/list/head","position":46},
{"name":"std/core/list/@lift-intersperse@4791","position":56},
{"name":"std/core/list/intersperse","position":64},
{"name":"std/core/list/is-empty","position":67},
{"name":"std/core/list/@lift-length@4792","position":73},
{"name":"std/core/list/length","position":74},
{"name":"std/core/list/maybe/list","position":81},
{"name":"std/core/list/@lift-map-indexed@4793","position":90},
{"name":"std/core/list/map-indexed","position":91},
{"name":"std/core/list/@lift-map-indexed-peek@4794","position":100},
{"name":"std/core/list/map-indexed-peek","position":101},
{"name":"std/core/list/@lift-map-peek@4795","position":110},
{"name":"std/core/list/map-peek","position":111},
{"name":"std/core/list/single","position":113},
{"name":"std/core/list/tail","position":118},
{"name":"std/core/list/@lift-zipwith-indexed@4796","position":132},
{"name":"std/core/list/zipwith-indexed","position":133},
{"name":"std/core/list/default/head","position":138},
{"name":"std/core/list/append","position":146},
{"name":"std/core/list/(++)","position":147},
{"name":"std/core/list/(==)","position":167},
{"name":"std/core/list/@index","position":185},
{"name":"std/core/list/all","position":197},
{"name":"std/core/list/any","position":209},
{"name":"std/core/list/cmp","position":229},
{"name":"std/core/list/concat-maybe","position":243},
{"name":"std/core/list/drop","position":249},
{"name":"std/core/list/drop-while","position":261},
{"name":"std/core/list/filter","position":276},
{"name":"std/core/list/filter-map","position":291},
{"name":"std/core/list/foreach-while","position":301},
{"name":"std/core/list/find","position":311},
{"name":"std/core/list/find-maybe","position":312},
{"name":"std/core/list/flatmap-maybe","position":327},
{"name":"std/core/list/foldl","position":334},
{"name":"std/core/list/foldl1","position":346},
{"name":"std/core/list/reverse","position":347},
{"name":"std/core/list/foldr","position":351},
{"name":"std/core/list/foldr1","position":364},
{"name":"std/core/list/foreach","position":371},
{"name":"std/core/list/foreach-indexed","position":379},
{"name":"std/core/list/index-of-acc","position":391},
{"name":"std/core/list/index-of","position":392},
{"name":"std/core/list/init","position":400},
{"name":"std/core/list/@lift-joinsep@4797","position":410},
{"name":"std/core/list/joinsep","position":416},
{"name":"std/core/list/join","position":422},
{"name":"std/core/list/join-end","position":433},
{"name":"std/core/list/last","position":450},
{"name":"std/core/list/take","position":458},
{"name":"std/core/list/split","position":462},
{"name":"std/core/list/lines","position":464},
{"name":"std/core/list/list","position":472},
{"name":"std/core/list/map","position":481},
{"name":"std/core/list/char/list","position":485},
{"name":"std/core/list/function/list","position":494},
{"name":"std/core/list/stride/list","position":502},
{"name":"std/core/list/stridefunction/list","position":511},
{"name":"std/core/list/string/map","position":516},
{"name":"std/core/list/lookup","position":532},
{"name":"std/core/list/map-while","position":546},
{"name":"std/core/list/maximum","position":559},
{"name":"std/core/list/minimum","position":572},
{"name":"std/core/list/partition-acc","position":591},
{"name":"std/core/list/partition","position":592},
{"name":"std/core/list/remove","position":600},
{"name":"std/core/list/replicate","position":608},
{"name":"std/core/list/reverse-join","position":615},
{"name":"std/core/list/joinsep/join","position":621},
{"name":"std/core/list/show","position":632},
{"name":"std/core/list/show-list","position":633},
{"name":"std/core/list/@lift-span@4798","position":653},
{"name":"std/core/list/span","position":654},
{"name":"std/core/list/sum","position":657},
{"name":"std/core/list/take-while","position":671},
{"name":"std/core/list/unlines","position":677},
{"name":"std/core/list/@lift-unzip@4799","position":695},
{"name":"std/core/list/unzip","position":696},
{"name":"std/core/list/@lift-unzip3@4800","position":716},
{"name":"std/core/list/unzip3","position":717},
{"name":"std/core/list/@lift-unzip4@4801","position":739},
{"name":"std/core/list/unzip4","position":740},
{"name":"std/core/list/zip","position":755},
{"name":"std/core/list/zipwith","position":769},
{"name":"$static-init","position":778},
{"name":"$entrypoint","position":780}],
"frameSize":{"regs_any":16}}