module interface main
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/os/env = std/os/env = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// ctl fail
// ```
recursive effect type fail[7,1,7,11] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-fail[7,1,7,11](@cfc: std/core/types/int, @ctl-fail: forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(fail :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(fail :: (E, V) -> V),(e :: E),a>) -> (fail :: (E, V) -> V)<(e :: E),a>;
};

// Operations:
// ```koka
// ctl flip
// ```
recursive effect type flip[5,1,5,11] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-flip[5,1,5,11](@cfc: std/core/types/int, @ctl-flip: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) -> (flip :: (E, V) -> V)<(e :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:fail` type.
 fun fail/@cfc[7,1,7,11] : forall<(e :: E),a> (^ fail : (fail :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@ctl-fail` constructor field of the `:fail` type.
 fun fail/@ctl-fail[8,7,8,19] : forall<(e :: E),a,b> (^ fail : (fail :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(fail :: (E, V) -> V),(e :: E),a>;
// Automatically generated. Retrieves the `@cfc` constructor field of the `:flip` type.
 fun flip/@cfc[5,1,5,11] : forall<(e :: E),a> (^ flip : (flip :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@ctl-flip` constructor field of the `:flip` type.
 fun flip/@ctl-flip[6,7,6,19] : forall<(e :: E),a> (^ flip : (flip :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:fail`
val @tag-fail[7,1,7,11] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(fail :: (E, V) -> V)>;
// handler for the effect `:fail`
 fun @handle-fail[7,8,7,11] : forall<a,(e :: E),b> (hnd : (fail :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// runtime tag for the effect `:flip`
val @tag-flip[5,1,5,11] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(flip :: (E, V) -> V)>;
// handler for the effect `:flip`
 fun @handle-flip[5,8,5,11] : forall<a,(e :: E),b> (hnd : (flip :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `fail` operation out of effect `:fail`
 fun @select-fail[8,7,8,19] : forall<a,(e :: E),b> (^ hnd : (fail :: (E, V) -> V)<(e :: E),b>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(fail :: (E, V) -> V),(e :: E),b>;
// select `flip` operation out of effect `:flip`
 fun @select-flip[6,7,6,19] : forall<(e :: E),a> (^ hnd : (flip :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>;
 fun hash[25,5,25,8] : (@pat-x25_10 : (std/core/types/int, std/core/types/int, std/core/types/int)) -> std/core/types/int;
// Call the `ctl fail` operation of the effect `:fail`
 fun fail[8,7,8,10] : forall<a> () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>> a;
// Call the `ctl flip` operation of the effect `:flip`
 fun flip[6,7,6,10] : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> std/core/types/bool;
// monadic lift
 fun @mlift-choice@10050[1,0,1,0] : (n : std/core/types/int, @y-x10023 : std/core/types/bool) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/div :: X)> std/core/types/int;
 fun choice[10,5,10,10] : (n : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> std/core/types/int;
// monadic lift
 fun @mlift-triple@10051[1,0,1,0] : (i : std/core/types/int, j : std/core/types/int, s : std/core/types/int, k : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> (std/core/types/int, std/core/types/int, std/core/types/int);
// monadic lift
 fun @mlift-triple@10052[1,0,1,0] : (i : std/core/types/int, s : std/core/types/int, j : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> (std/core/types/int, std/core/types/int, std/core/types/int);
// monadic lift
 fun @mlift-triple@10053[1,0,1,0] : (s : std/core/types/int, i : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> (std/core/types/int, std/core/types/int, std/core/types/int);
 fun triple[17,5,17,10] : (n : std/core/types/int, s : std/core/types/int) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> (std/core/types/int, std/core/types/int, std/core/types/int);
// monadic lift
 fun @mlift-run@10054[1,0,1,0] : (@y-x10033 : (std/core/types/int, std/core/types/int, std/core/types/int)) -> <(std/core/types/div :: X),(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>,(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> std/core/types/int;
 fun run[28,5,28,7] : (n : std/core/types/int, s : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
pub  fun main[35,9,35,12] : () -> <(std/core/console/console :: X),(std/core/types/div :: X),(std/core/types/ndet :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun fail/@cfc // inline size: 0
  = forall<(e :: E),a> fn(fail@0: (fail :: (E, V) -> V)<(e :: E),a>){
    (match (fail@0) {
      ((@skip main/@Hnd-fail((@x: std/core/types/int) : std/core/types/int, (@pat@0: (forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(fail :: (E, V) -> V),(e :: E),a>)) : (forall<b> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(fail :: (E, V) -> V),(e :: E),a>)) : (fail :: (E, V) -> V)<(e :: E),a> ) as @pat: ((fail :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun fail/@ctl-fail // inline size: 0
  = forall<(e :: E),a,b> fn(fail@0: (fail :: (E, V) -> V)<(e :: E),a>){
    (match (fail@0) {
      ((@skip main/@Hnd-fail((@pat@0: std/core/types/int) : std/core/types/int, (@x: (forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(fail :: (E, V) -> V),(e :: E),a>)) : (forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(fail :: (E, V) -> V),(e :: E),a>)) : (fail :: (E, V) -> V)<(e :: E),a> ) as @pat: ((fail :: (E, V) -> V)<(e :: E),a>))
         -> @x<b>;
    });
  };
inline borrow "^"  fun flip/@cfc // inline size: 0
  = forall<(e :: E),a> fn(flip@0: (flip :: (E, V) -> V)<(e :: E),a>){
    (match (flip@0) {
      ((@skip main/@Hnd-flip((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) : (flip :: (E, V) -> V)<(e :: E),a> ) as @pat: ((flip :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun flip/@ctl-flip // inline size: 0
  = forall<(e :: E),a> fn(flip@0: (flip :: (E, V) -> V)<(e :: E),a>){
    (match (flip@0) {
      ((@skip main/@Hnd-flip((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) : (flip :: (E, V) -> V)<(e :: E),a> ) as @pat: ((flip :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-fail // inline size: 0
  = forall<a,(e :: E),b> fn(hnd: (fail :: (E, V) -> V)<(e :: E),b>){
    (match (hnd) {
      ((@skip main/@Hnd-fail((@pat@0: std/core/types/int) : std/core/types/int, (@ctl-fail: (forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(fail :: (E, V) -> V),(e :: E),b>)) : (forall<c> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(fail :: (E, V) -> V),(e :: E),b>)) : (fail :: (E, V) -> V)<(e :: E),b> ) as @pat: ((fail :: (E, V) -> V)<(e :: E),b>))
         -> @ctl-fail<a>;
    });
  };
inline borrow "^"  fun @select-flip // inline size: 0
  = forall<(e :: E),a> fn(hnd: (flip :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip main/@Hnd-flip((@pat@0: std/core/types/int) : std/core/types/int, (@ctl-flip: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<std/core/types/bool,(flip :: (E, V) -> V),(e :: E),a>) : (flip :: (E, V) -> V)<(e :: E),a> ) as @pat: ((flip :: (E, V) -> V)<(e :: E),a>))
         -> @ctl-flip;
    });
  };
inline  fun fail // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>>>(){
    std/core/hnd/@perform0<a,<(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>>,(fail :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(fail :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(fail :: (E, V) -> V)>>((std/core/hnd/@evv-at<(fail :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(fail :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), (forall<(e :: E),b> main/@select-fail<a,(e :: E),b>));
  };
inline  fun flip // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>>>(){
    std/core/hnd/@perform0<std/core/types/bool,<(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>>,(flip :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(flip :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(flip :: (E, V) -> V)>>((std/core/hnd/@evv-at<(flip :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(flip :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), main/@select-flip);
  };