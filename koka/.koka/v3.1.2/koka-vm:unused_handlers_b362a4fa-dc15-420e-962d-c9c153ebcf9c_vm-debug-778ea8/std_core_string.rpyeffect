{"blocks":[{"label":"0([mcore:[#95]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-string-cmp"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([mcore:[#96]#6])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-count"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#98]#9])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"3([mcore:[#100]#12])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"(#1 != #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([mcore:[#101]#15])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-list"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#102]#18])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-repeatz"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"6([mcore:[#103]#21])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/#char/@extern-string"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([mcore:[#104]#24])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/#listchar/@extern-string"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([#29])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"9([#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_def@[mcore:[#105]#27]#28])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":9,"args":{"any":[0]}}],"default":{"tag":"1e009af9-8591-44c2-bd0d-de23b8b27d7f#[Missing Tag#436]","target":8,"args":{"any":[]}}}]},
{"label":"11([#31])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([mcore:[#105]#27])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":11,"args":{"any":[]}}],"default":{"tag":"1e009af9-8591-44c2-bd0d-de23b8b27d7f#[Missing Tag#437]","target":10,"args":{"any":[]}}}]},
{"label":"13([mcore:[#106]#34])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/#vector/@extern-string"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([mcore:[#107]#37])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-to-lower"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([mcore:[#108]#40])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-to-upper"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([mcore:[#109]#43])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/trim-right((std/core/string/trim-left(s)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/trim-right"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/trim-right((std/core/string/trim-left(s)))","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([mcore:[#110]#46])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/@extern-vector"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([switch case for Bool(true)#55])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([k@[switch case for Bool(false)#64]#69])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([switch case for Bool(true)#71])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"21([switch case for Bool(false)#80])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Eq"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Eq","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([switch default case#85])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([switch default case#76])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[21],"default":22}]},
{"label":"24([switch case for Bool(false)#64])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(>)(i@10000, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(>)(i@10000, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[20],"default":23}]},
{"label":"25([switch default case#86])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([switch default case#60])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[24],"default":25}]},
{"label":"27([k@[mcore:[#125]#49]#51])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[18],"default":26}]},
{"label":"28([mcore:[#125]#49])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/string-cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":27,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/string-cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":0}]},
{"label":"29([mcore:[#126]#87])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(==)"}]},
{"label":"30([k@[mcore:[#134]#93]#95])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Jump","target":29}]},
{"label":"31([mcore:[#134]#93])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":30,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"32([mcore:[#135]#104])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(<)"}]},
{"label":"33([k@[mcore:[#143]#110]#112])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Jump","target":32}]},
{"label":"34([mcore:[#143]#110])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":33,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"35([mcore:[#144]#121])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(==)"}]},
{"label":"36([k@[mcore:[#152]#127]#129])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"37([mcore:[#152]#127])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":36,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"38([mcore:[#153]#138])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(>)"}]},
{"label":"39([k@[mcore:[#161]#144]#146])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Lt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Lt","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"40([mcore:[#161]#144])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(>)((std/core/string/cmp(x, y)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":39,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(>)((std/core/string/cmp(x, y)), std/core/types/Lt)","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"41([mcore:[#167]#155])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"42([switch case for Bool(true)#164])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([k@[switch case for Bool(false)#173]#178])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([switch case for Bool(false)#173])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<string>(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<string>(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":41}]},
{"label":"45([switch default case#180])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([switch default case#169])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[44],"default":45}]},
{"label":"47([mcore:[#170]#160])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[42],"default":46}]},
{"label":"48([mcore:[#171]#181])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/order/(<)"}]},
{"label":"49([mcore:[#179]#187])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"50([mcore:[#183]#193])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"51([k@[switch case for Bool(true)#212]#217])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([switch case for Bool(true)#212])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>(x, y)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":49}]},
{"label":"53([k@[switch case for Bool(false)#220]#225])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([switch case for Bool(false)#220])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>(y, x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>(y, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":50}]},
{"label":"55([switch default case#227])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([switch default case#219])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[false],"targets":[54],"default":55}]},
{"label":"57([k@[k@[mcore:[#187]#199]#201]#211])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[52],"default":56}]},
{"label":"58([k@[mcore:[#187]#199]#201])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/Gt"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/order)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":57,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Gt","traced":{"any":[]}},
{"op":"Jump","target":48}]},
{"label":"59([mcore:[#187]#199])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Push","target":58,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/cmp(x, y)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt)","traced":{"any":[]}},
{"op":"Jump","target":28}]},
{"label":"60([mcore:[#190]#228])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/ssize_t"}]},
{"label":"61([k@[mcore:[#194]#233]#238])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":5}]},
{"label":"62([mcore:[#194]#233])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/repeatz(s, (std/core/int/ssize_t(n)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/ssize_t(n)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":61,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/ssize_t(n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/repeatz(s, (std/core/int/ssize_t(n)))","traced":{"any":[]}},
{"op":"Jump","target":60}]},
{"label":"63([mcore:[#201]#240])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"64([mcore:[#205]#246])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/ssize_t"}]},
{"label":"65([switch case for Bool(true)#255])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"66([k@[k@[k@[#263]#268]#271]#277])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"67([k@[k@[#263]#268]#271])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":63}]},
{"label":"68([k@[#263]#268])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":67,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":5}]},
{"label":"69([#263])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"n@0@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(width, n)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[3,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/ssize_t(n@0@10005)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":68,"args":{"any":[2,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/ssize_t(n@0@10005)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(width, n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"n@0@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":64}]},
{"label":"70([k@[switch case for Bool(false)#258]#260])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":69,"args":{"any":[1,2,3]}},
{"op":"Jump","target":6}]},
{"label":"71([match_def@[#279]#280])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"72([match_std/core/types/@None@[#279]#281])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ' '","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":" "},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ' '","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"73([#279])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":72,"args":{"any":[]}}],"default":{"tag":"1e009af9-8591-44c2-bd0d-de23b8b27d7f#[Missing Tag#438]","target":71,"args":{"any":[]}}}]},
{"label":"74([#284])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fill@332,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fill@332: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fill@332,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fill@332: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([switch case for Bool(false)#258])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val s@0@10004 : string;\nval n@0@10005 : int;\nstd/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@0@10004\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/char/string((match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@332: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@332;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@332: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@332;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":70,"args":{"any":[1,2,3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@332: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@332;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/char/string((match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@332: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@332;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@0@10004\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val s@0@10004 : string;\nval n@0@10005 : int;\nstd/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":74,"args":{"any":[1]}}],"default":{"tag":"1e009af9-8591-44c2-bd0d-de23b8b27d7f#[Missing Tag#439]","target":73,"args":{"any":[]}}}]},
{"label":"76([switch default case#285])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([switch default case#256])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,1]}},
{"op":"Switch","arg":4,"values":[false],"targets":[75],"default":76}]},
{"label":"78([k@[mcore:[#211]#251]#253])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[65],"default":77}]},
{"label":"79([mcore:[#211]#251])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/count(s)","traced":{"any":[]}},
{"op":"Push","target":78,"args":{"any":[2,0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/count(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":1}]},
{"label":"80([mcore:[#218]#286])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"81([mcore:[#223]#292])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/ssize_t"}]},
{"label":"82([switch case for Bool(true)#301])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"83([k@[k@[k@[#309]#314]#317]#323])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([k@[k@[#309]#314]#317])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":80}]},
{"label":"85([k@[#309]#314])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":84,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Jump","target":5}]},
{"label":"86([#309])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"n@0@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(width, n)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[3,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/ssize_t(n@0@10009)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":85,"args":{"any":[2,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/ssize_t(n@0@10009)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(width, n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"n@0@10009\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":81}]},
{"label":"87([k@[switch case for Bool(false)#304]#306])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":86,"args":{"any":[1,2,3]}},
{"op":"Jump","target":6}]},
{"label":"88([match_def@[#325]#326])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"89([match_std/core/types/@None@[#325]#327])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ' '","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":" "},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ' '","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([#325])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":89,"args":{"any":[]}}],"default":{"tag":"1e009af9-8591-44c2-bd0d-de23b8b27d7f#[Missing Tag#440]","target":88,"args":{"any":[]}}}]},
{"label":"91([#330])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fill@378,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fill@378: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fill@378,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fill@378: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([switch case for Bool(false)#304])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val s@0@10008 : string;\nval n@0@10009 : int;\nstd/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@0@10008\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/char/string((match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@378: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@378;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@378: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@378;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":87,"args":{"any":[1,2,3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@378: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@378;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/char/string((match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@378: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@378;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@0@10008\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val s@0@10008 : string;\nval n@0@10009 : int;\nstd/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":91,"args":{"any":[1]}}],"default":{"tag":"1e009af9-8591-44c2-bd0d-de23b8b27d7f#[Missing Tag#441]","target":90,"args":{"any":[]}}}]},
{"label":"93([switch default case#331])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([switch default case#302])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,1]}},
{"op":"Switch","arg":4,"values":[false],"targets":[92],"default":93}]},
{"label":"95([k@[mcore:[#228]#297]#299])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[3,0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[82],"default":94}]},
{"label":"96([mcore:[#228]#297])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/count(s)","traced":{"any":[]}},
{"op":"Push","target":95,"args":{"any":[2,0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/count(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":1}]},
{"label":"97([mcore:[#229]#332])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"98([mcore:[#234]#338])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s, sep)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s, sep)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":97}]},
{"label":"99([switch case for Bool(true)#352])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"100([switch case for Bool(false)#357])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"101([switch default case#358])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"102([switch default case#353])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[100],"default":101}]},
{"label":"103([mcore:[#239]#348])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[99],"default":102}]},
{"label":"104([mcore:[#240]#359])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"105([mcore:[#245]#365])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitvn(s, sep, (std/core/int/ssize_t(n)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitvn"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10014, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10014, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitvn(s, sep, (std/core/int/ssize_t(n)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":104}]},
{"label":"106([k@[k@[k@[#395]#405]#415]#425])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_95847fb5-ffb2-4adf-8f9f-24c4cf5b5995"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([k@[k@[#395]#405]#415])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#94]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":106,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"108([k@[#395]#405])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#93]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":107,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"109([#395])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#92]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":108,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"110([k@[mcore:[static initializers#247]#375]#385])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#91]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":109,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"111([mcore:[static initializers#247]#375])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#90]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":110,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"112([k@[main entrypoint#2]#433])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"113([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":112,"args":{"any":[]}},
{"op":"Jump","target":111}]}],
"symbols":[{"name":"std/core/string/string-cmp","position":0},
{"name":"std/core/string/count","position":1},
{"name":"std/core/string/is-empty","position":2},
{"name":"std/core/string/is-notempty","position":3},
{"name":"std/core/string/list","position":4},
{"name":"std/core/string/repeatz","position":5},
{"name":"std/core/string/char/string","position":6},
{"name":"std/core/string/listchar/string","position":7},
{"name":"std/core/string/maybe/string","position":12},
{"name":"std/core/string/vector/string","position":13},
{"name":"std/core/string/to-lower","position":14},
{"name":"std/core/string/to-upper","position":15},
{"name":"std/core/string/trim","position":16},
{"name":"std/core/string/vector","position":17},
{"name":"std/core/string/cmp","position":28},
{"name":"std/core/string/(<)","position":31},
{"name":"std/core/string/(<=)","position":34},
{"name":"std/core/string/(>)","position":37},
{"name":"std/core/string/(>=)","position":40},
{"name":"std/core/string/maybe","position":47},
{"name":"std/core/string/order2","position":59},
{"name":"std/core/string/repeat","position":62},
{"name":"std/core/string/pad-left","position":79},
{"name":"std/core/string/pad-right","position":96},
{"name":"std/core/string/split","position":98},
{"name":"std/core/string/(||)","position":103},
{"name":"std/core/string/splitn/split","position":105},
{"name":"$static-init","position":111},
{"name":"$entrypoint","position":113}],
"frameSize":{"regs_any":16}}