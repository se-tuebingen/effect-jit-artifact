{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "main"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_os_env.rpyeffect"}}}, {"name": {"op": "Var","id": "main/emit/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/emit"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "emit@0","type": {"op": "Ptr","extern_ptr_name": "main/emit"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "emit@0","type": {"op": "Ptr","extern_ptr_name": "main/emit"}},"type_tag": "main/emit","clauses": [{"tag": "main/@Hnd-emit","params": [{"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-emit\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,(),main/emit,169,170>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(emit@0: (main/emit :: (E, V) -> V)<(e :: E),a>){\n  (match (emit@0) {\n    ((@skip main/@Hnd-emit((@x: int) : int, (@pat@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/emit/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/emit/@cfc"]}, {"name": {"op": "Var","id": "main/emit/@fun-emit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/emit"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "emit@0","type": {"op": "Ptr","extern_ptr_name": "main/emit"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "emit@0","type": {"op": "Ptr","extern_ptr_name": "main/emit"}},"type_tag": "main/emit","clauses": [{"tag": "main/@Hnd-emit","params": [{"op": "Var","id": "@\"@cfc\"2","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-emit\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-emit\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@x: hnd/clause1<int,(),main/emit,193,194>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,(),main/emit,193,194>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(emit@0: (main/emit :: (E, V) -> V)<(e :: E),a>){\n  (match (emit@0) {\n    ((@skip main/@Hnd-emit((@pat@0: int) : int, (@x: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/emit/@fun-emit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/emit/@fun-emit"]}, {"name": {"op": "Var","id": "main/read/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/read"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "read@0","type": {"op": "Ptr","extern_ptr_name": "main/read"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "read@0","type": {"op": "Ptr","extern_ptr_name": "main/read"}},"type_tag": "main/read","clauses": [{"tag": "main/@Hnd-read","params": [{"op": "Var","id": "@\"@cfc\"4","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-read\"5","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"4","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"read@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<main/chr,main/read,217,218>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"read@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}}: \"main/read\".\"main/@Hnd-read\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(read@0: (main/read :: (E, V) -> V)<(e :: E),a>){\n  (match (read@0) {\n    ((@skip main/@Hnd-read((@x: int) : int, (@pat@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/read :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/read/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/read/@cfc"]}, {"name": {"op": "Var","id": "main/read/@fun-read","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/read"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "read@0","type": {"op": "Ptr","extern_ptr_name": "main/read"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "read@0","type": {"op": "Ptr","extern_ptr_name": "main/read"}},"type_tag": "main/read","clauses": [{"tag": "main/@Hnd-read","params": [{"op": "Var","id": "@\"@cfc\"6","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-read\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-read\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: hnd/clause0<main/chr,main/read,241,242>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"read@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<main/chr,main/read,241,242>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"read@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}}: \"main/read\".\"main/@Hnd-read\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(read@0: (main/read :: (E, V) -> V)<(e :: E),a>){\n  (match (read@0) {\n    ((@skip main/@Hnd-read((@pat@0: int) : int, (@x: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/read :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/read/@fun-read\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/read/@fun-read"]}, {"name": {"op": "Var","id": "main/stop/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "stop@0","type": {"op": "Ptr","extern_ptr_name": "main/stop"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "stop@0","type": {"op": "Ptr","extern_ptr_name": "main/stop"}},"type_tag": "main/stop","clauses": [{"tag": "main/@Hnd-stop","params": [{"op": "Var","id": "@\"@cfc\"8","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-stop\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"8","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stop@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: forall<a> hnd/clause0<a,main/stop,265,266>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-stop\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"stop@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}}: \"main/stop\".\"main/@Hnd-stop\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(stop@0: (main/stop :: (E, V) -> V)<(e :: E),a>){\n  (match (stop@0) {\n    ((@skip main/@Hnd-stop((@x: int) : int, (@pat@0: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/stop/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/stop/@cfc"]}, {"name": {"op": "Var","id": "main/stop/@ctl-stop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "stop@0","type": {"op": "Ptr","extern_ptr_name": "main/stop"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "stop@0","type": {"op": "Ptr","extern_ptr_name": "main/stop"}},"type_tag": "main/stop","clauses": [{"tag": "main/@Hnd-stop","params": [{"op": "Var","id": "@\"@cfc\"10","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-stop\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-stop\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: forall<a> hnd/clause0<a,main/stop,294,295>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stop@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause0<a,main/stop,294,295>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-stop\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"stop@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}}: \"main/stop\".\"main/@Hnd-stop\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,b> fn(stop@0: (main/stop :: (E, V) -> V)<(e :: E),a>){\n  (match (stop@0) {\n    ((@skip main/@Hnd-stop((@pat@0: int) : int, (@x: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n       -> @x<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/stop/@ctl-stop\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/stop/@ctl-stop"]}, {"name": {"op": "Var","id": "main/@tag-emit","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/emit :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "emit@main"},"annotation": "genExpr: \"emit@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/emit :: (E, V) -> V)>(\"emit@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-emit\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-emit"]}, {"name": {"op": "Var","id": "main/@handle-emit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/emit"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/emit"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-emit","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-emit"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/emit"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),a>(main/@tag-emit, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/emit :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/emit :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),b>(main/@tag-emit, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-emit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-emit"]}, {"name": {"op": "Var","id": "main/@tag-read","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/read :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "read@main"},"annotation": "genExpr: \"read@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/read :: (E, V) -> V)>(\"read@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-read\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-read"]}, {"name": {"op": "Var","id": "main/@handle-read","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/read"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/read"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/read :: (E, V) -> V)|(e :: E)>,(main/read :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-read","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-read"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/read"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/read :: (E, V) -> V)|(e :: E)>,(main/read :: (E, V) -> V),a>(main/@tag-read, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/read :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/read :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/read :: (E, V) -> V)|(e :: E)>,(main/read :: (E, V) -> V),b>(main/@tag-read, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-read\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-read"]}, {"name": {"op": "Var","id": "main/@tag-stop","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/stop :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "stop@main"},"annotation": "genExpr: \"stop@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/stop :: (E, V) -> V)>(\"stop@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-stop\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-stop"]}, {"name": {"op": "Var","id": "main/@handle-stop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/stop"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/stop :: (E, V) -> V)|(e :: E)>,(main/stop :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-stop","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-stop"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/stop"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/stop :: (E, V) -> V)|(e :: E)>,(main/stop :: (E, V) -> V),a>(main/@tag-stop, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/stop :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/stop :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/stop :: (E, V) -> V)|(e :: E)>,(main/stop :: (E, V) -> V),b>(main/@tag-stop, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-stop\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-stop"]}, {"name": {"op": "Var","id": "main/@select-emit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/emit"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/emit"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/emit"}},"type_tag": "main/emit","clauses": [{"tag": "main/@Hnd-emit","params": [{"op": "Var","id": "@\"@cfc\"12","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-emit\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-emit\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,469,470>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @fun-emit"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,469,470>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (main/emit :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip main/@Hnd-emit((@pat@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n       -> @fun-emit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-emit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-emit"]}, {"name": {"op": "Var","id": "main/@select-read","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/read"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/read"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/read"}},"type_tag": "main/read","clauses": [{"tag": "main/@Hnd-read","params": [{"op": "Var","id": "@\"@cfc\"14","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-read\"15","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-read\"15","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,493,494>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @fun-read"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"14\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-read,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,493,494>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}}: \"main/read\".\"main/@Hnd-read\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"14\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (main/read :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip main/@Hnd-read((@pat@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/read :: (E, V) -> V)<(e :: E),a>))\n       -> @fun-read;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-read\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/read\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-read"]}, {"name": {"op": "Var","id": "main/@select-stop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/stop"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/stop"}},"type_tag": "main/stop","clauses": [{"tag": "main/@Hnd-stop","params": [{"op": "Var","id": "@\"@cfc\"16","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-stop\"17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-stop\"17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,523,524>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-stop<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-stop,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,523,524>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-stop\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}}: \"main/stop\".\"main/@Hnd-stop\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(hnd: (main/stop :: (E, V) -> V)<(e :: E),b>){\n  (match (hnd) {\n    ((@skip main/@Hnd-stop((@pat@0: int) : int, (@ctl-stop: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),b>)) : (main/stop :: (E, V) -> V)<(e :: E),b> ) as @pat: ((main/stop :: (E, V) -> V)<(e :: E),b>))\n       -> @ctl-stop<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-stop\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/stop\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-stop"]}, {"name": {"op": "Var","id": "main/dollar","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "Int"},"value": 36}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  36;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/dollar\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/dollar"]}, {"name": {"op": "Var","id": "main/newline","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "Int"},"value": 10}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  10;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/newline\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/newline"]}, {"name": {"op": "Var","id": "main/is-dollar","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "c","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 36}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: main/chr){\n  std/core/int/(==)(c, 36);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/is-dollar\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/is-dollar"]}, {"name": {"op": "Var","id": "main/is-newline","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "c","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 10}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: main/chr){\n  std/core/int/(==)(c, 10);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/is-newline\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/is-newline"]}, {"name": {"op": "Var","id": "main/stop","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10028","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10028\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10028"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10028","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"19","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"20","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"20","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/stop<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"20\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/stop","clauses": [{"tag": "main/@Hnd-stop","params": [{"op": "Var","id": "@\"@cfc\"22","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-stop\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-stop\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"25","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"25","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/stop>) -> 1005 653) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"25\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"19","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10028","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10028"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10028)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"25\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/stop>) -> 1005 653) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"25\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-stop<a>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (1005 :: E) 653) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<653,(main/stop :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10028);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-stop,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-stop\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/stop\".\"main/@Hnd-stop\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"22\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-stop((@pat@0@0: int) : int, (@ctl-stop: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-stop<a>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (1005 :: E) 653) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<653,(main/stop :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10028);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10028\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/stop>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10028\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"20\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(main/stop :: (E, V) -> V)>(){\n  val ev@10028 : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10028) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (main/stop :: (E, V) -> V)<(e :: E),b>) : (main/stop :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-stop((@pat@0@0: int) : int, (@ctl-stop: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),b>)) : (main/stop :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@ctl-stop<a>)) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b>))\n               -> std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),b>(f)(m, ev@10028);\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/stop\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/stop"]}, {"name": {"op": "Var","id": "main/catch","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-stop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-stop<(),(e :: E),()>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-stop","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/stop"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-stop<(e :: E),()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),(e :: E),()>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),()>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,(e :: E),()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "Literal","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@_wildcard-x730_55: (), r: (717) -> (727 :: E) ()){\n  std/core/types/Unit;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (717) -> (727 :: E) ()){\n    std/core/types/Unit;\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> (727 :: E) ()){\n  std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (717) -> (727 :: E) ()){\n      std/core/types/Unit;\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> (727 :: E) ()){\n    (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (717) -> (727 :: E) ()){\n        std/core/types/Unit;\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(727 :: E),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> (727 :: E) ()){\n      (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (717) -> (727 :: E) ()){\n          std/core/types/Unit;\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),(e :: E),()>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(727 :: E),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> (727 :: E) ()){\n      (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (717) -> (727 :: E) ()){\n          std/core/types/Unit;\n        }), k));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),(e :: E),()>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(727 :: E),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> (727 :: E) ()){\n      (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (a) -> (727 :: E) ()){\n          std/core/types/Unit;\n        }), k));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-stop<(e :: E),()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),(e :: E),()>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(727 :: E),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> (727 :: E) ()){\n        (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (a) -> (727 :: E) ()){\n            std/core/types/Unit;\n          }), k));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Unit"}}],"body": {"op": "Var","id": "@x","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(@x: ()){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: main/@handle-stop<(),(e :: E),()>((main/@Hnd-stop<(e :: E),()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),(e :: E),()>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(727 :: E),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> (727 :: E) ()){\n          (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (a) -> (727 :: E) ()){\n              std/core/types/Unit;\n            }), k));\n        })));\n    }))))), (fn<(e :: E)>(@x: ()){\n    @x;\n  }), action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(action: () -> <(main/stop :: (E, V) -> V)|(e :: E)> ()){\n  main/@handle-stop<(),(e :: E),()>((main/@Hnd-stop<(e :: E),()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),(e :: E),()>((fn<(e :: E)>(m: (hnd/marker :: (E, V) -> V)<(e :: E),()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,(e :: E),()>(m, (fn<(e :: E)>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> (e :: E) ()){\n            (std/core/hnd/protect<(),a,(e :: E),()>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x730_55: (), r: (a) -> (e :: E) ()){\n                std/core/types/Unit;\n              }), k));\n          })));\n      }))))), (fn<(e :: E)>(@x: ()){\n      @x;\n    }), action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/catch\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/catch"]}, {"name": {"op": "Var","id": "main/emit","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "e","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10031","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10031"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10031","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"26","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"27","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"28","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"29","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"28","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/emit<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"28\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/emit","clauses": [{"tag": "main/@Hnd-emit","params": [{"op": "Var","id": "@\"@cfc\"30","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-emit\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-emit\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"32","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"32","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"27","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10031","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10031"}, {"op": "DebugWrap","inner": {"op": "Var","id": "e","type": {"op": "Int"}},"annotation": "genExpr: e"}]},"annotation": "genExpr: f(m, ev@10031, e)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"32\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10031, e);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"30\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"30\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10031, e);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10031\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"28\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/emit :: (E, V) -> V)>(e: int){\n  val ev@10031 : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10031) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-emit((@pat@0@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@fun-emit) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n               -> f(m, ev@10031, e);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/emit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/emit"]}, {"name": {"op": "Var","id": "main/read","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10034","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/read :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10034\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10034"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10034","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"33","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"34","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"35","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"36","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"35","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/read<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"35\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/read","clauses": [{"tag": "main/@Hnd-read","params": [{"op": "Var","id": "@\"@cfc\"37","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-read\"38","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-read\"38","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"39","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"39","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/read>) -> 1005 main/chr) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"39\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"34","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10034","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10034"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10034)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"39\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/read>) -> 1005 main/chr) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"39\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@fun-read) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (1005 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10034);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/read<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"37\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-read,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/read<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/read\".\"main/@Hnd-read\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"37\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-read((@pat@0@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/read :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-read) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (1005 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10034);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10034\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/read>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/read<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10034\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/read :: (E, V) -> V)>(){\n  val ev@10034 : (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/read :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10034) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/read :: (E, V) -> V)<(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-read((@pat@0@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/read :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@fun-read) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10034);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/read\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/read"]}, {"name": {"op": "Var","id": "main/feed","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "j","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-read","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/read"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-read","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/read"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/clause-tail0","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x40","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x40","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-stop","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-stop"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10036","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10036"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10036","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"41","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"43","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"44","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"43","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/stop<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/stop","clauses": [{"tag": "main/@Hnd-stop","params": [{"op": "Var","id": "@\"@cfc\"45","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-stop\"46","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-stop\"46","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"48","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"48","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/stop>) -> 1005 main/chr) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"48\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"42","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10036","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10036"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"48\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/stop>) -> 1005 main/chr) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"48\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-stop<main/chr>)) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (1005 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-stop,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-stop\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/stop\".\"main/@Hnd-stop\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-stop<main/chr>)) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (1005 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/stop>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10036\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"42\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"43\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"44\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/stop :: (E, V) -> V)>(){\n  val ev@10036 : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10036) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n           -> (match ((@ctl-stop<main/chr>)) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n    val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10036) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-stop<main/chr>)) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n            });\n        });\n    });\n  }))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x40\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x40","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x49","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: j"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x49","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10011","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10011\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10011"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10011","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10011, 1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(i, (std/core/int/int-add(x@10011, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: j"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: i"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(j, (std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 10},"annotation": "genExpr: 10"}},"annotation": "genExpr: val x@10011 : int;\nval _ : ();\nval _@0 : ();\n10"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x49","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@0@10013","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: j"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10013\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10013"]}, {"name": {"op": "Var","id": "_@1","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "j","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: j"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@0@10013","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@0@10013, 1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(j, (std/core/int/int-sub(x@0@10013, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@1\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@1"]}],"body": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 36},"annotation": "genExpr: 36"}},"annotation": "genExpr: val x@0@10013 : int;\nval _@1 : ();\n36"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x49\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> val x@10011 : int;\n        val _ : ();\n        val _@0 : ();\n    10;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n     -> val x@0@10013 : int;\n        val _@1 : ();\n    36;\n}"}}]},"annotation": "genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"@x40\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n  match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n          val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@10036) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n               -> (match (h) {\n                ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                   -> (match ((@ctl-stop<main/chr>)) {\n                    ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                       -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                  });\n              });\n          });\n        }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n       -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n           -> val x@10011 : int;\n              val _ : ();\n              val _@0 : ();\n          10;\n        ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n           -> val x@0@10013 : int;\n              val _@1 : ();\n          36;\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n  (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n          val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@10036) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n               -> (match (h) {\n                ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                   -> (match ((@ctl-stop<main/chr>)) {\n                    ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                       -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                  });\n              });\n          });\n        }));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n       -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n           -> val x@10011 : int;\n              val _ : ();\n              val _@0 : ();\n          10;\n        ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n           -> val x@0@10013 : int;\n              val _@1 : ();\n          36;\n      });\n  });\n}))"}]},"annotation": "genExpr: main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n    (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n      ((std/core/types/True() : bool ) as @pat: bool)\n         -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n            val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                  = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n            (match (ev@10036) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                 -> (match (h) {\n                  ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-stop<main/chr>)) {\n                      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                         -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                    });\n                });\n            });\n          }));\n      ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n         -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n          ((std/core/types/True() : bool ) as @pat@1@0: bool)\n             -> val x@10011 : int;\n                val _ : ();\n                val _@0 : ();\n            10;\n          ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n             -> val x@0@10013 : int;\n                val _@1 : ();\n            36;\n        });\n    });\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Unit"}}],"body": {"op": "Var","id": "@x","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n      (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n        ((std/core/types/True() : bool ) as @pat: bool)\n           -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n              val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                    = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n              (match (ev@10036) {\n                ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                   -> (match (h) {\n                    ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                       -> (match ((@ctl-stop<main/chr>)) {\n                        ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                           -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                      });\n                  });\n              });\n            }));\n        ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n           -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n            ((std/core/types/True() : bool ) as @pat@1@0: bool)\n               -> val x@10011 : int;\n                  val _ : ();\n                  val _@0 : ();\n              10;\n            ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n               -> val x@0@10013 : int;\n                  val _@1 : ();\n              36;\n          });\n      });\n    }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n    @x;\n  }), action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(1316 :: H),int>){\n  main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n        (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n          ((std/core/types/True() : bool ) as @pat: bool)\n             -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                      = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                (match (ev@10036) {\n                  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                     -> (match (h) {\n                      ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                         -> (match ((@ctl-stop<main/chr>)) {\n                          ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                             -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                        });\n                    });\n                });\n              }));\n          ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n             -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n              ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                 -> val x@10011 : int;\n                    val _ : ();\n                    val _@0 : ();\n                10;\n              ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                 -> val x@0@10013 : int;\n                    val _@1 : ();\n                36;\n            });\n        });\n      }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n      @x;\n    }), action);\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(1316 :: H),int>){\n    (main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n          (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n            ((std/core/types/True() : bool ) as @pat: bool)\n               -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                  val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                        = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                  (match (ev@10036) {\n                    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                       -> (match (h) {\n                        ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                           -> (match ((@ctl-stop<main/chr>)) {\n                            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                               -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                          });\n                      });\n                  });\n                }));\n            ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n               -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n                ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                   -> val x@10011 : int;\n                      val _ : ();\n                      val _@0 : ();\n                  10;\n                ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                   -> val x@0@10013 : int;\n                      val _@1 : ();\n                  36;\n              });\n          });\n        }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n        @x;\n      }), action));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(i: (local-var :: (H, V) -> V)<(1316 :: H),int>){\n  std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(1316 :: H),int>){\n      (main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n            (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n              ((std/core/types/True() : bool ) as @pat: bool)\n                 -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                    val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                          = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                    (match (ev@10036) {\n                      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                         -> (match (h) {\n                          ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                             -> (match ((@ctl-stop<main/chr>)) {\n                              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                                 -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                            });\n                        });\n                    });\n                  }));\n              ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n                 -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n                  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                     -> val x@10011 : int;\n                        val _ : ();\n                        val _@0 : ();\n                    10;\n                  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                     -> val x@0@10013 : int;\n                        val _@1 : ();\n                    36;\n                });\n            });\n          }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n          @x;\n        }), action));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(i: (local-var :: (H, V) -> V)<(1316 :: H),int>){\n    (std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(1316 :: H),int>){\n        (main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n              (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n                ((std/core/types/True() : bool ) as @pat: bool)\n                   -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                      val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                            = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                      (match (ev@10036) {\n                        ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                           -> (match (h) {\n                            ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                               -> (match ((@ctl-stop<main/chr>)) {\n                                ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                                   -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                              });\n                          });\n                      });\n                    }));\n                ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n                   -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n                    ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                       -> val x@10011 : int;\n                          val _ : ();\n                          val _@0 : ();\n                      10;\n                    ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                       -> val x@0@10013 : int;\n                          val _@1 : ();\n                      36;\n                  });\n              });\n            }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n            @x;\n          }), action));\n      })));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n  std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(h :: H),int>){\n          (main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n                (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n                  ((std/core/types/True() : bool ) as @pat: bool)\n                     -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                        val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                              = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                        (match (ev@10036) {\n                          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                             -> (match (h) {\n                              ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                                 -> (match ((@ctl-stop<main/chr>)) {\n                                  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                                     -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                                });\n                            });\n                        });\n                      }));\n                  ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n                     -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n                      ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                         -> val x@10011 : int;\n                            val _ : ();\n                            val _@0 : ();\n                        10;\n                      ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                         -> val x@0@10013 : int;\n                            val _@1 : ();\n                        36;\n                    });\n                });\n              }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n              @x;\n            }), action));\n        })));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n  std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(h :: H),int>){\n          (main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n                (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n                  ((std/core/types/True() : bool ) as @pat: bool)\n                     -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                        val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                              = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                        (match (ev@10036) {\n                          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                             -> (match (h) {\n                              ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                                 -> (match ((@ctl-stop<main/chr>)) {\n                                  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e :: E),a>))\n                                     -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                                });\n                            });\n                        });\n                      }));\n                  ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n                     -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n                      ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                         -> val x@10011 : int;\n                            val _ : ();\n                            val _@0 : ();\n                        10;\n                      ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                         -> val x@0@10013 : int;\n                            val _@1 : ();\n                        36;\n                    });\n                });\n              }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n              @x;\n            }), action));\n        })));\n    }));\n})()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<<(main/stop :: (E, V) -> V)|(e :: E)>>(n: int, action: () -> <(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V)|(e :: E)> ()){\n  (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n    std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(i: (local-var :: (H, V) -> V)<(h :: H),int>){\n        (std/core/hnd/local-var<int,(),<(main/stop :: (E, V) -> V)|(e :: E)>,(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(j: (local-var :: (H, V) -> V)<(h :: H),int>){\n            (main/@handle-read<(),<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>((main/@Hnd-read<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,()>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>,(),(main/read :: (E, V) -> V),main/chr>((fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(){\n                  (match ((std/core/int/(>)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(i)), n))) {\n                    ((std/core/types/True() : bool ) as @pat: bool)\n                       -> std/core/hnd/@open-at0<main/chr,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>((std/core/hnd/@evv-index<<(main/stop :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>,(main/stop :: (E, V) -> V)>(main/@tag-stop)), (fn<(main/stop :: (E, V) -> V)>(){\n                          val ev@10036 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                                = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                          (match (ev@10036) {\n                            ((@skip std/core/hnd/Ev<(e1 :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),a>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),a>, (h: (main/stop :: (E, V) -> V)<(e1 :: E),a>) : (main/stop :: (E, V) -> V)<(e1 :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                               -> (match (h) {\n                                ((@skip main/@Hnd-stop((@pat@0@1: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e1 :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e1 :: E),a>)) : (main/stop :: (E, V) -> V)<(e1 :: E),a> ) as @pat@2: ((main/stop :: (E, V) -> V)<(e1 :: E),a>))\n                                   -> (match ((@ctl-stop<main/chr>)) {\n                                    ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e1 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e1 :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e1 :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/stop :: (E, V) -> V),(e1 :: E),a>))\n                                       -> std/core/hnd/cast-clause0<main/chr,(main/stop :: (E, V) -> V),(e1 :: E),(main/stop :: (E, V) -> V),a>(f)(m, ev@10036);\n                                  });\n                              });\n                          });\n                        }));\n                    ((@skip std/core/types/False() : bool ) as @pat@0@1@0: bool)\n                       -> (match ((std/core/int/(==)((std/core/types/local-get<int,(h :: H),<(main/stop :: (E, V) -> V)|(e :: E)>>(j)), 0))) {\n                        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n                           -> val x@10011 : int;\n                              val _ : ();\n                              val _@0 : ();\n                          10;\n                        ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                           -> val x@0@10013 : int;\n                              val _@1 : ();\n                          36;\n                      });\n                  });\n                }))))), (fn<<(local :: H -> X)<(h :: H)>,(main/stop :: (E, V) -> V)|(e :: E)>>(@x: ()){\n                @x;\n              }), action));\n          })));\n      }));\n  })();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/feed\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/feed"]}, {"name": {"op": "Var","id": "main/parse","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "a","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "c","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<main/chr,(main/read :: (E, V) -> V),<(main/read :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: std/core/types/@make-ssize_t(1)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/read :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10039"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"50","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"52","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"52","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/read<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/read","clauses": [{"tag": "main/@Hnd-read","params": [{"op": "Var","id": "@\"@cfc\"54","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-read\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-read\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"56","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"56","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/read>) -> 1005 main/chr) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"56\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10039"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10039)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"56\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/read>) -> 1005 main/chr) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"56\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@fun-read) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (1005 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10039);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/read<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"54\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-read,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-read: hnd/clause0<main/chr,main/read,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-read\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/read<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/read\".\"main/@Hnd-read\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"54\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-read\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-read((@pat@0@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/read :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-read) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (1005 :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10039);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/read>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/read<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/read :: (E, V) -> V)>(){\n  val ev@10039 : (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/read :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10039) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/read :: (E, V) -> V)<(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-read((@pat@0@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/read :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@fun-read) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10039);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<main/chr,(main/read :: (E, V) -> V),<(main/read :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/read :: (E, V) -> V)>(){\n    val ev@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/read :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10039) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/read :: (E, V) -> V)<(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip main/@Hnd-read((@pat@0@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>) : (main/read :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/read :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@fun-read) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),a>(f)(m, ev@10039);\n            });\n        });\n    });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["c"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "c","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 36}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/parse","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/parse<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "a","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(a, 1)"}]},"annotation": "genExpr: main/parse<a>((std/core/int/int-add(a, 1)))"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 36}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "c","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 36}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "c","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 10}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at1<int,(),(main/emit :: (E, V) -> V),<(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "e","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@0@10041","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@0@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@0@10041"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@0@10041","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"50","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"52","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"52","type": {"op": "Top"}},"annotation": "genTest: normal: (h@0: main/emit<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/emit","clauses": [{"tag": "main/@Hnd-emit","params": [{"op": "Var","id": "@\"@cfc\"54","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-emit\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-emit\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"56","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"56","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"56\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@0@10041","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@0@10041"}, {"op": "DebugWrap","inner": {"op": "Var","id": "e","type": {"op": "Int"}},"annotation": "genExpr: e"}]},"annotation": "genExpr: f@0(m@0, ev@0@10041, e)"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"56\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"56\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10041, e);\n}"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"54\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"54\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@0) {\n  ((@skip main/@Hnd-emit((@pat@0@2: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10041, e);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@1: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10041\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/emit :: (E, V) -> V)>(e: int){\n  val ev@0@10041 : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@0@10041) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n       -> (match (h@0) {\n        ((@skip main/@Hnd-emit((@pat@0@2: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@fun-emit) {\n            ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n               -> f@0(m@0, ev@0@10041, e);\n          });\n      });\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "a","type": {"op": "Int"}},"annotation": "genExpr: a"}]},"annotation": "genExpr: std/core/hnd/@open-at1<int,(),(main/emit :: (E, V) -> V),<(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/emit :: (E, V) -> V)>(e: int){\n    val ev@0@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10041) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip main/@Hnd-emit((@pat@0@2: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@fun-emit) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10041, e);\n            });\n        });\n    });\n  }), a)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/parse","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/parse<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: main/parse<a>(0)"}},"annotation": "genExpr: val _ : ()\n      = std/core/hnd/@open-at1<int,(),(main/emit :: (E, V) -> V),<(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/emit :: (E, V) -> V)>(e: int){\n          val ev@0@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@0@10041) {\n            ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n               -> (match (h@0) {\n                ((@skip main/@Hnd-emit((@pat@0@2: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n                   -> (match (@fun-emit) {\n                    ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n                       -> f@0(m@0, ev@0@10041, e);\n                  });\n              });\n          });\n        }), a);\nmain/parse<a>(0)"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 10}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "c","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 10}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<a,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 2},"annotation": "genExpr: std/core/types/@make-ssize_t(2)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@1@10044","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@1@10044\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@1@10044"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@1@10044","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"50","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"52","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"52","type": {"op": "Top"}},"annotation": "genTest: normal: (h@1: main/stop<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/stop","clauses": [{"tag": "main/@Hnd-stop","params": [{"op": "Var","id": "@\"@cfc\"54","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-stop\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-stop\"55","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"57","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"57","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@1: (hnd/marker<1005,1006>, hnd/ev<main/stop>) -> 1005 128) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"57\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@1: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@1"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@1@10044","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@1@10044"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)(m@1, ev@1@10044)"}}]},"annotation": "genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"@x56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}),(f@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"57\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@1: (hnd/marker<1005,1006>, hnd/ev<main/stop>) -> 1005 128) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"57\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-stop<a>)) {\n  ((@skip std/core/hnd/Clause0((f@1: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (1005 :: E) 128) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b> ) as @pat@2@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<128,(main/stop :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)(m@1, ev@1@10044);\n}"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@1: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"54\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-stop,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-stop: forall<a> hnd/clause0<a,main/stop,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-stop\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@1: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/stop\".\"main/@Hnd-stop\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"54\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-stop\\\"55\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@1) {\n  ((@skip main/@Hnd-stop((@pat@0@3: int) : int, (@ctl-stop: (forall<a> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@6: ((main/stop :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match ((@ctl-stop<a>)) {\n      ((@skip std/core/hnd/Clause0((f@1: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (1005 :: E) 128) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b> ) as @pat@2@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<128,(main/stop :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)(m@1, ev@1@10044);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"ev@1@10044\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: hnd/htag<main/stop>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@1: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@1: main/stop<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@1@10044\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"50\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/stop :: (E, V) -> V)>(){\n  val ev@1@10044 : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@1@10044) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@1: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@5@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n       -> (match (h@1) {\n        ((@skip main/@Hnd-stop((@pat@0@3: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@6: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n           -> (match ((@ctl-stop<b>)) {\n            ((@skip std/core/hnd/Clause0((f@1: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) 128) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) b) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<128,(main/stop :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<b,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)(m@1, ev@1@10044);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<a,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(2)), (fn<(main/stop :: (E, V) -> V)>(){\n    val ev@1@10044 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@1@10044) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@1: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@5@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n         -> (match (h@1) {\n          ((@skip main/@Hnd-stop((@pat@0@3: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@6: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-stop<b>)) {\n              ((@skip std/core/hnd/Clause0((f@1: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) 128) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) b) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<128,(main/stop :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<b,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)(m@1, ev@1@10044);\n            });\n        });\n    });\n  }))"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 10}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)(c, 10))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> val _ : ()\n              = std/core/hnd/@open-at1<int,(),(main/emit :: (E, V) -> V),<(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/emit :: (E, V) -> V)>(e: int){\n                  val ev@0@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>)\n                        = (std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                  (match (ev@0@10041) {\n                    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n                       -> (match (h@0) {\n                        ((@skip main/@Hnd-emit((@pat@0@2: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n                           -> (match (@fun-emit) {\n                            ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n                               -> f@0(m@0, ev@0@10041, e);\n                          });\n                      });\n                  });\n                }), a);\n    main/parse<a>(0);\n  ((@skip std/core/types/False() : bool ) as @pat@2@1: bool)\n     -> std/core/hnd/@open-at0<a,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(2)), (fn<(main/stop :: (E, V) -> V)>(){\n        val ev@1@10044 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n              = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n        (match (ev@1@10044) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m@1: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@1: (main/stop :: (E, V) -> V)<(e :: E),a>) : (main/stop :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@5@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n             -> (match (h@1) {\n              ((@skip main/@Hnd-stop((@pat@0@3: int) : int, (@ctl-stop: (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a>)) : (main/stop :: (E, V) -> V)<(e :: E),a> ) as @pat@6: ((main/stop :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-stop<b>)) {\n                  ((@skip std/core/hnd/Clause0((f@1: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) 128) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) b) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<b,(main/stop :: (E, V) -> V),(e :: E),a> ) as @pat@2@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<128,(main/stop :: (E, V) -> V),(e :: E),a>))\n                     -> std/core/hnd/cast-clause0<b,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),a>(f@1)(m@1, ev@1@10044);\n                });\n            });\n        });\n      }));\n}"}}]},"annotation": "genBranch: [(@pat@0@0@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 36}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<<(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>(a: int){\n  val c : main/chr\n        = std/core/hnd/@open-at0<main/chr,(main/read :: (E, V) -> V),<(main/read :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(1)), (fn<(main/read :: (E, V) -> V)>(){\n            val ev@10039 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>)\n                  = (std/core/hnd/@evv-at<(main/read :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n            (match (ev@10039) {\n              ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (main/read :: (E, V) -> V)<(e :: E),b>) : (main/read :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>))\n                 -> (match (h) {\n                  ((@skip main/@Hnd-read((@pat@0@0: int) : int, (@fun-read: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),b>) : (main/read :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((main/read :: (E, V) -> V)<(e :: E),b>))\n                     -> (match (@fun-read) {\n                      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/read :: (E, V) -> V)>) -> (e :: E) main/chr) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),b> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<main/chr,(main/read :: (E, V) -> V),(e :: E),b>))\n                         -> std/core/hnd/cast-clause0<main/chr,(main/read :: (E, V) -> V),(e :: E),(main/read :: (E, V) -> V),b>(f)(m, ev@10039);\n                    });\n                });\n            });\n          }));\n  (match ((std/core/int/(==)(c, 36))) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> main/parse<a>((std/core/int/int-add(a, 1)));\n    ((@skip std/core/types/False() : bool ) as @pat@0@0@0: bool)\n       -> (match ((std/core/int/(==)(c, 10))) {\n        ((std/core/types/True() : bool ) as @pat@1@0: bool)\n           -> val _ : ()\n                    = std/core/hnd/@open-at1<int,(),(main/emit :: (E, V) -> V),<(main/emit :: (E, V) -> V),(main/stop :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(0)), (fn<(main/emit :: (E, V) -> V)>(e: int){\n                        val ev@0@10041 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>)\n                              = (std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n                        (match (ev@0@10041) {\n                          ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h@0: (main/emit :: (E, V) -> V)<(e :: E),b>) : (main/emit :: (E, V) -> V)<(e :: E),b>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n                             -> (match (h@0) {\n                              ((@skip main/@Hnd-emit((@pat@0@2: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),b>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),b>) : (main/emit :: (E, V) -> V)<(e :: E),b> ) as @pat@5: ((main/emit :: (E, V) -> V)<(e :: E),b>))\n                                 -> (match (@fun-emit) {\n                                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),b>))\n                                     -> f@0(m@0, ev@0@10041, e);\n                                });\n                            });\n                        });\n                      }), a);\n          main/parse<a>(0);\n        ((@skip std/core/types/False() : bool ) as @pat@2@1: bool)\n           -> std/core/hnd/@open-at0<a,(main/stop :: (E, V) -> V),<(main/stop :: (E, V) -> V),(main/emit :: (E, V) -> V),(main/read :: (E, V) -> V),(div :: X)>>((std/core/types/@make-ssize_t(2)), (fn<(main/stop :: (E, V) -> V)>(){\n              val ev@1@10044 : ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>)\n                    = (std/core/hnd/@evv-at<(main/stop :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n              (match (ev@1@10044) {\n                ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0@2@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>, (m@1: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h@1: (main/stop :: (E, V) -> V)<(e :: E),b>) : (main/stop :: (E, V) -> V)<(e :: E),b>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)> ) as @pat@5@0: ((hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>))\n                   -> (match (h@1) {\n                    ((@skip main/@Hnd-stop((@pat@0@3: int) : int, (@ctl-stop: (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(main/stop :: (E, V) -> V),(e :: E),b>)) : (main/stop :: (E, V) -> V)<(e :: E),b> ) as @pat@6: ((main/stop :: (E, V) -> V)<(e :: E),b>))\n                       -> (match ((@ctl-stop<a>)) {\n                        ((@skip std/core/hnd/Clause0((f@1: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>) -> (e :: E) a) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b> ) as @pat@2@2: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(main/stop :: (E, V) -> V),(e :: E),b>))\n                           -> std/core/hnd/cast-clause0<a,(main/stop :: (E, V) -> V),(e :: E),(main/stop :: (E, V) -> V),b>(f@1)(m@1, ev@1@10044);\n                      });\n                  });\n              });\n            }));\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/parse\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/parse"]}, {"name": {"op": "Var","id": "main/sum","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-emit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/emit"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-emit","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "main/emit"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/clause-tail1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "e","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10022","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: s"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),(e :: E)>(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10022\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10022"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10022","type": {"op": "Int"}}, {"op": "Var","id": "e","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10022, e)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n  val x@10022 : int\n        = std/core/types/local-get<int,(h :: H),(e :: E)>(s);\n  std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e)));\n}"}]},"annotation": "genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n  val x@10022 : int\n        = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n  (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n}))"}]},"annotation": "genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n    val x@10022 : int\n          = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n    (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Int"}}],"body": {"op": "Var","id": "@x","type": {"op": "Int"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: s"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  val _ : ()\n        = action();\n  std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s);\n}"}]},"annotation": "genExpr: main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n      val x@10022 : int\n            = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n      (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n    @x;\n  }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    val _ : ()\n          = (action());\n    (std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(1508 :: H),int>){\n  main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n        val x@10022 : int\n              = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n        (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n      }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n      @x;\n    }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n      val _ : ()\n            = (action());\n      (std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(1508 :: H),int>){\n    (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n          val x@10022 : int\n                = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n          (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n        @x;\n      }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n        val _ : ()\n              = (action());\n        (std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s));\n      })));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n            val x@10022 : int\n                  = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n          @x;\n        }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          val _ : ()\n                = (action());\n          (std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s));\n        })));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n            val x@10022 : int\n                  = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n            (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n          @x;\n        }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          val _ : ()\n                = (action());\n          (std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s));\n        })));\n    }));\n})()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(action: () -> <(main/emit :: (E, V) -> V)|(e :: E)> ()){\n  (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    std/core/hnd/local-var<int,int,(e :: E),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(h :: H),int>){\n        (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>|(e :: E)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>|(e :: E)>,int>(1, (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,int,(main/emit :: (E, V) -> V),int,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(e: int){\n              val x@10022 : int\n                    = (std/core/types/local-get<int,(h :: H),(e :: E)>(s));\n              (std/core/types/local-set<int,(e :: E),(h :: H)>(s, (std/core/int/int-add(x@10022, e))));\n            }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: int){\n            @x;\n          }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            val _ : ()\n                  = (action());\n            (std/core/types/local-get<int,(h :: H),<(main/emit :: (E, V) -> V)|(e :: E)>>(s));\n          })));\n      }));\n  })();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/sum\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/sum"]}, {"name": {"op": "Var","id": "main/run","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/sum","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/sum<(div :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-stop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-stop","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/stop"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "Literal","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n  std/core/types/Unit;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n    std/core/types/Unit;\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n  std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      std/core/types/Unit;\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n    (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n        std/core/types/Unit;\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          std/core/types/Unit;\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          std/core/types/Unit;\n        }), k));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          std/core/types/Unit;\n        }), k));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n        (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n            std/core/types/Unit;\n          }), k));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Unit"}}],"body": {"op": "Var","id": "@x","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/feed","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/parse","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/parse<()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: main/parse<()>(0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n  main/parse<()>(0);\n}"}]},"annotation": "genExpr: main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>(n, (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n    (main/parse<()>(0));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n  main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>(n, (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n      (main/parse<()>(0));\n    }));\n}"}]},"annotation": "genExpr: main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n              std/core/types/Unit;\n            }), k));\n        })));\n    }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n    @x;\n  }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n    (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>(n, (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n        (main/parse<()>(0));\n      })));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(){\n  main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n            (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n                std/core/types/Unit;\n              }), k));\n          })));\n      }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n      @x;\n    }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n      (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>(n, (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n          (main/parse<()>(0));\n        })));\n    }));\n}"}]},"annotation": "genExpr: main/sum<(div :: X)>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(){\n  (main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n            (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n                std/core/types/Unit;\n              }), k));\n          })));\n      }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n      @x;\n    }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n      (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>(n, (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n          (main/parse<()>(0));\n        })));\n    })));\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int){\n  main/sum<(div :: X)>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(){\n    (main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n              (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n                  std/core/types/Unit;\n                }), k));\n            })));\n        }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n        @x;\n      }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n        (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>(n, (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n            (main/parse<()>(0));\n          })));\n      })));\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/run\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/run"]}, {"name": {"op": "Var","id": "main/main","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10005","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"name": "std/os/env/get-args","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/get-args"},"args": []},"annotation": "genExpr: std/os/env/get-args()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10005\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10005"]}, {"name": {"op": "Var","id": "m@10003","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/parse-int"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10005","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"58","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"59","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"58","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10005\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10005\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"58\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10005","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10005\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10005\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10005) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}]},"annotation": "genExpr: std/core/int/parse-int((match (xs@10005) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m@10003\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["m@10003"]}, {"name": {"op": "Var","id": "r@0","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/sum","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/sum<(div :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-stop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/stop"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-stop","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/stop"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "Literal","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n  std/core/types/Unit;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n    std/core/types/Unit;\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n  std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      std/core/types/Unit;\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n    (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n        std/core/types/Unit;\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          std/core/types/Unit;\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<717,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (717) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          std/core/types/Unit;\n        }), k));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n      (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          std/core/types/Unit;\n        }), k));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n        (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n            std/core/types/Unit;\n          }), k));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Unit"}}],"body": {"op": "Var","id": "@x","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/feed","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10003","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 10},"annotation": "genExpr: 10"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10003\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10003\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10003","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"60","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"60","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10003\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10003\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"60\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10003) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 10;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/parse","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/parse<()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: main/parse<()>(0)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n  main/parse<()>(0);\n}"}]},"annotation": "genExpr: main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>((match (m@10003) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> 10;\n    ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x;\n  }), (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n    (main/parse<()>(0));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n  main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>((match (m@10003) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n         -> 10;\n      ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n         -> x;\n    }), (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n      (main/parse<()>(0));\n    }));\n}"}]},"annotation": "genExpr: main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n          (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n              std/core/types/Unit;\n            }), k));\n        })));\n    }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n    @x;\n  }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n    (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>((match (m@10003) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n           -> 10;\n        ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n           -> x;\n      }), (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n        (main/parse<()>(0));\n      })));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(main/emit :: (E, V) -> V)>>(){\n  main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n            (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n                std/core/types/Unit;\n              }), k));\n          })));\n      }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n      @x;\n    }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n      (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>((match (m@10003) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n             -> 10;\n          ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n             -> x;\n        }), (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n          (main/parse<()>(0));\n        })));\n    }));\n}"}]},"annotation": "genExpr: main/sum<(div :: X)>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(){\n  (main/@handle-stop<(),<(div :: X),(main/emit :: (E, V) -> V)>,()>((main/@Hnd-stop<<(div :: X),(main/emit :: (E, V) -> V)>,()>(3, (forall<a> std/core/hnd/Clause0<a,(main/stop :: (E, V) -> V),<(div :: X),(main/emit :: (E, V) -> V)>,()>((fn<<(div :: X),(main/emit :: (E, V) -> V)>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(main/emit :: (E, V) -> V)>,()>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/stop :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(m, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(k: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n            (std/core/hnd/protect<(),a,<(div :: X),(main/emit :: (E, V) -> V)>,()>(std/core/types/Unit, (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@_wildcard-x730_55: (), r: (a) -> <(div :: X),(main/emit :: (E, V) -> V)> ()){\n                std/core/types/Unit;\n              }), k));\n          })));\n      }))))), (fn<<(div :: X),(main/emit :: (E, V) -> V)>>(@x: ()){\n      @x;\n    }), (fn<<(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n      (main/feed<<(div :: X),(main/emit :: (E, V) -> V)>>((match (m@10003) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n             -> 10;\n          ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n             -> x;\n        }), (fn<<(main/read :: (E, V) -> V),(main/stop :: (E, V) -> V),(div :: X),(main/emit :: (E, V) -> V)>>(){\n          (main/parse<()>(0));\n        })));\n    })));\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r@0\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r@0","type": {"op": "Int"}},"annotation": "genExpr: r@0"}]},"annotation": "genExpr: std/core/int/show(r@0)"}]},"annotation": "genExpr: std/core/console/printsln((std/core/int/show(r@0)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X),(div :: X),(ndet :: X)>>(){\n  val xs@10005 : (list :: V -> V)<string>;\n  val m@10003 : (maybe :: V -> V)<int>;\n  val r@0 : int;\n  std/core/console/printsln((std/core/int/show(r@0)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/main\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/main"]}, {"name": {"op": "Var","id": "main/@Hnd-emit","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "main/emit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@fun-emit","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "Construct","type_tag": "main/emit","tag": "main/@Hnd-emit","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@fun-emit","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-emit"]}, {"name": {"op": "Var","id": "main/@Hnd-read","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/read"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@fun-read","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "Construct","type_tag": "main/read","tag": "main/@Hnd-read","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@fun-read","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-read"]}, {"name": {"op": "Var","id": "main/@Hnd-stop","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/stop"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-stop","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "Construct","type_tag": "main/stop","tag": "main/@Hnd-stop","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-stop","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-stop"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}