{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/char"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/char/cmp","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}, {"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 > #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 > #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: char, y: char){\n  match ((std/core/char/(<)(x, y))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Lt;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/char/(>)(x, y))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Gt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Eq;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/cmp"]}, {"name": {"op": "Var","id": "std/core/char/is-lower","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "a"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "z"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'z')"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(>=)(c, 'a'))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/char/(<=)(c, 'z');\n    (@pat@0: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-lower\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-lower"]}, {"name": {"op": "Var","id": "std/core/char/is-upper","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "Z"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'Z')"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(>=)(c, 'A'))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/char/(<=)(c, 'Z');\n    (@pat@0: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-upper\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-upper"]}, {"name": {"op": "Var","id": "std/core/char/is-digit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "9"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, '9')"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(>=)(c, '0'))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/char/(<=)(c, '9');\n    (@pat@0: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-digit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-digit"]}, {"name": {"op": "Var","id": "std/core/char/is-ascii","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\u007F"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  std/core/char/(<=)(c, '\\x7F');\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-ascii\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-ascii"]}, {"name": {"op": "Var","id": "std/core/char/is-control","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": " "}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  std/core/char/(<)(c, ' ');\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-control\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-control"]}, {"name": {"op": "Var","id": "std/core/char/is-white","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": " "}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\t"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\n"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "\r"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(==)(c, '\\x0D')"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/True;\n  (@pat@4: bool)\n     -> std/core/char/(==)(c, '\\x0D');\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@2: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/True;\n      (@pat@4: bool)\n         -> std/core/char/(==)(c, '\\x0D');\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(==)(c, ' '))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/True;\n    (@pat@0: bool)\n       -> (match ((std/core/char/(==)(c, '\\x09'))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/True;\n        (@pat@2: bool)\n           -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> std/core/types/True;\n            (@pat@4: bool)\n               -> std/core/char/(==)(c, '\\x0D');\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-white\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-white"]}, {"name": {"op": "Var","id": "std/core/char/order2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}, {"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq2","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Eq2<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Eq2<char>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Lt2<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/Lt2<char>(x, y)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 < #2)","args": [{"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Gt2<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Gt2<char>(y, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(<)(x, y))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Lt2<char>(x, y);\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Gt2<char>(y, x);\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Var\",\"id\": \"y\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: char, y: char){\n  match ((std/core/char/(==)(x, y))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Eq2<char>(x);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/char/(<)(x, y))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Lt2<char>(x, y);\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Gt2<char>(y, x);\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/order2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/order2"]}, {"name": {"op": "Var","id": "std/core/char/(+)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}, {"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "d","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10000","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10000\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10000"]}, {"name": {"op": "Var","id": "y@10001","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "d","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(d)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10001\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10001"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1)","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@10000","type": {"op": "Int"}}, {"op": "Var","id": "y@10001","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@10000, y@10001)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}},"annotation": "genExpr: std/core/char/int/char((std/core/int/int-add(x@10000, y@10001)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char, d: char){\n  val x@10000 : int;\n  val y@10001 : int;\n  std/core/char/int/char((std/core/int/int-add(x@10000, y@10001)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/(+)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/(+)"]}, {"name": {"op": "Var","id": "std/core/char/(-)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}, {"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "d","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10002"]}, {"name": {"op": "Var","id": "y@10003","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "d","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(d)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10003\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10003"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1)","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@10002","type": {"op": "Int"}}, {"op": "Var","id": "y@10003","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@10002, y@10003)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}},"annotation": "genExpr: std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char, d: char){\n  val x@10002 : int;\n  val y@10003 : int;\n  std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/(-)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/(-)"]}, {"name": {"op": "Var","id": "std/core/char/is-alpha","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "a"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "z"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"z\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "Z"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'Z')"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/char/(<=)(c, 'Z');\n  (@pat@0@1: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"z\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(<=)(c, 'z'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@0@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@2: bool)\n         -> std/core/char/(<=)(c, 'Z');\n      (@pat@0@1: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "Z"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'Z')"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@1@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> std/core/char/(<=)(c, 'Z');\n  (@pat@0@1@0: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(>=)(c, 'a'))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((std/core/char/(<=)(c, 'z'))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/True;\n        (@pat@0@0: bool)\n           -> (match ((std/core/char/(>=)(c, 'A'))) {\n            ((std/core/types/True() : bool ) as @pat@2: bool)\n               -> std/core/char/(<=)(c, 'Z');\n            (@pat@0@1: bool)\n               -> std/core/types/False;\n          });\n      });\n    (@pat@0: bool)\n       -> (match ((std/core/char/(>=)(c, 'A'))) {\n        ((std/core/types/True() : bool ) as @pat@2@0: bool)\n           -> std/core/char/(<=)(c, 'Z');\n        (@pat@0@1@0: bool)\n           -> std/core/types/False;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-alpha\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-alpha"]}, {"name": {"op": "Var","id": "std/core/char/is-alpha-num","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/char/is-alpha","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-alpha"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/char/is-alpha(c)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x0","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "9"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, '9')"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@0: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x0\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/is-alpha(c))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/True;\n    (@pat@0: bool)\n       -> (match ((std/core/char/(>=)(c, '0'))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/char/(<=)(c, '9');\n        (@pat@0@0: bool)\n           -> std/core/types/False;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-alpha-num\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-alpha-num"]}, {"name": {"op": "Var","id": "std/core/char/is-hex-digit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "9"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"9\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "a"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "F"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'F')"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(<=)(c, 'f'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/True;\n  (@pat@4: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "F"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'F')"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@0: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@0: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'a'))) {\n  ((std/core/types/True() : bool ) as @pat@1@0: bool)\n     -> (match ((std/core/char/(<=)(c, 'f'))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/True;\n      (@pat@4: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6: bool)\n             -> std/core/types/False;\n        });\n    });\n  (@pat@2: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@0: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@0: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"9\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(<=)(c, '9'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/True;\n  (@pat@0@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'a'))) {\n      ((std/core/types/True() : bool ) as @pat@1@0: bool)\n         -> (match ((std/core/char/(<=)(c, 'f'))) {\n          ((std/core/types/True() : bool ) as @pat@3: bool)\n             -> std/core/types/True;\n          (@pat@4: bool)\n             -> (match ((std/core/char/(>=)(c, 'A'))) {\n              ((std/core/types/True() : bool ) as @pat@5: bool)\n                 -> std/core/char/(<=)(c, 'F');\n              (@pat@6: bool)\n                 -> std/core/types/False;\n            });\n        });\n      (@pat@2: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5@0: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6@0: bool)\n             -> std/core/types/False;\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "a"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "F"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'F')"}}]},"annotation": "genBranch: [(@pat@5@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@1: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@1: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"(#1 <= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"f\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(<=)(c, 'f'))) {\n  ((std/core/types/True() : bool ) as @pat@3@0: bool)\n     -> std/core/types/True;\n  (@pat@4@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@1: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@1: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "A"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "F"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, 'F')"}}]},"annotation": "genBranch: [(@pat@5@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"A\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'A'))) {\n  ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n     -> std/core/char/(<=)(c, 'F');\n  (@pat@6@0@0: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"a\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, 'a'))) {\n  ((std/core/types/True() : bool ) as @pat@1@0@0: bool)\n     -> (match ((std/core/char/(<=)(c, 'f'))) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/True;\n      (@pat@4@0: bool)\n         -> (match ((std/core/char/(>=)(c, 'A'))) {\n          ((std/core/types/True() : bool ) as @pat@5@1: bool)\n             -> std/core/char/(<=)(c, 'F');\n          (@pat@6@1: bool)\n             -> std/core/types/False;\n        });\n    });\n  (@pat@2@0: bool)\n     -> (match ((std/core/char/(>=)(c, 'A'))) {\n      ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n         -> std/core/char/(<=)(c, 'F');\n      (@pat@6@0@0: bool)\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  match ((std/core/char/(>=)(c, '0'))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((std/core/char/(<=)(c, '9'))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/True;\n        (@pat@0@0: bool)\n           -> (match ((std/core/char/(>=)(c, 'a'))) {\n            ((std/core/types/True() : bool ) as @pat@1@0: bool)\n               -> (match ((std/core/char/(<=)(c, 'f'))) {\n                ((std/core/types/True() : bool ) as @pat@3: bool)\n                   -> std/core/types/True;\n                (@pat@4: bool)\n                   -> (match ((std/core/char/(>=)(c, 'A'))) {\n                    ((std/core/types/True() : bool ) as @pat@5: bool)\n                       -> std/core/char/(<=)(c, 'F');\n                    (@pat@6: bool)\n                       -> std/core/types/False;\n                  });\n              });\n            (@pat@2: bool)\n               -> (match ((std/core/char/(>=)(c, 'A'))) {\n                ((std/core/types/True() : bool ) as @pat@5@0: bool)\n                   -> std/core/char/(<=)(c, 'F');\n                (@pat@6@0: bool)\n                   -> std/core/types/False;\n              });\n          });\n      });\n    (@pat@0: bool)\n       -> (match ((std/core/char/(>=)(c, 'a'))) {\n        ((std/core/types/True() : bool ) as @pat@1@0@0: bool)\n           -> (match ((std/core/char/(<=)(c, 'f'))) {\n            ((std/core/types/True() : bool ) as @pat@3@0: bool)\n               -> std/core/types/True;\n            (@pat@4@0: bool)\n               -> (match ((std/core/char/(>=)(c, 'A'))) {\n                ((std/core/types/True() : bool ) as @pat@5@1: bool)\n                   -> std/core/char/(<=)(c, 'F');\n                (@pat@6@1: bool)\n                   -> std/core/types/False;\n              });\n          });\n        (@pat@2@0: bool)\n           -> (match ((std/core/char/(>=)(c, 'A'))) {\n            ((std/core/types/True() : bool ) as @pat@5@0@0: bool)\n               -> std/core/char/(<=)(c, 'F');\n            (@pat@6@0@0: bool)\n               -> std/core/types/False;\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/char/is-hex-digit\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/char/is-hex-digit"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}