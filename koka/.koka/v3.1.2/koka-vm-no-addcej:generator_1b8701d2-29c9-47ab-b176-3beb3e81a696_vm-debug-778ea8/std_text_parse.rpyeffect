{"blocks":[{"label":"0([match_def@[mcore:[#742]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([#5])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<sslice/sslice,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<sslice/sslice,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#742]#3])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":1,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4338]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#743]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([#8])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<sslice/sslice,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<sslice/sslice,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#743]#6])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"5\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"5\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":4,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4339]","target":3,"args":{"any":[]}}}]},
{"label":"6([match_def@[mcore:[#744]#9]#10])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([#11])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<string,a,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<string,a,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([mcore:[#744]#9])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":7,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4340]","target":6,"args":{"any":[]}}}]},
{"label":"9([match_def@[mcore:[#745]#12]#13])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([#14])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"15\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"15\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([mcore:[#745]#12])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"15\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"15\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":10,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4341]","target":9,"args":{"any":[]}}}]},
{"label":"12([match_def@[mcore:[#746]#15]#16])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([#17])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([mcore:[#746]#15])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":13,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4342]","target":12,"args":{"any":[]}}}]},
{"label":"15([#20])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([match_def@[#21]#22])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([match_std/core/sslice/Sslice@[#21]#23])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([#21])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":17,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4343]","target":16,"args":{"any":[]}}}]},
{"label":"19([match_def@[mcore:[#750]#18]#19])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseError","target":18,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4344]","target":15,"args":{"any":[]}}}]},
{"label":"20([match_def@[match_def@[#24]#25]#26])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"21([match_def@[#27]#28])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([match_std/core/sslice/Sslice@[#27]#29])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([#27])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":22,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4345]","target":21,"args":{"any":[]}}}]},
{"label":"24([match_def@[#24]#25])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":1,"clauses":[{"tag":"std/text/parse/ParseError","target":23,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4346]","target":20,"args":{"any":[]}}}]},
{"label":"25([match_std/core/sslice/Sslice@[#24]#30])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 436) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"27\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"28\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"29\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 436) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"27\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"28\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"29\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([#24])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"27\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"28\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"29\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"27\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"28\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"29\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":25,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4347]","target":24,"args":{"any":[]}}}]},
{"label":"27([mcore:[#750]#18])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseOk","target":26,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4348]","target":19,"args":{"any":[]}}}]},
{"label":"28([match_def@[mcore:[#752]#31]#32])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([match_def@[#35]#36])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([match_std/core/sslice/Sslice@[#35]#39])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 445) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 445) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"31([#35])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":30,"args":{"any":[0,1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4349]","target":29,"args":{"any":[]}}}]},
{"label":"32([mcore:[#752]#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseOk","target":31,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4350]","target":28,"args":{"any":[]}}}]},
{"label":"33([match_def@[mcore:[#754]#42]#43])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([match_def@[#46]#47])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([match_std/core/sslice/Sslice@[#46]#50])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"40\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"42\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"43\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"40\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"42\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"43\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([#46])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"42\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"43\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"44\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"42\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"43\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"44\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":35,"args":{"any":[0,1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4351]","target":34,"args":{"any":[]}}}]},
{"label":"37([mcore:[#754]#42])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"40\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"40\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseError","target":36,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4352]","target":33,"args":{"any":[]}}}]},
{"label":"38([mcore:[#755]#53])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"39([mcore:[#758]#58])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"40([mcore:[#764]#66])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V),a>(std/text/parse/@tag-parse, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V),a>(std/text/parse/@tag-parse, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":39}]},
{"label":"41([match_def@[mcore:[#765]#73]#74])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([#75])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-current-input,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-current-input,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"43([mcore:[#765]#73])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":42,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4353]","target":41,"args":{"any":[]}}}]},
{"label":"44([match_def@[mcore:[#766]#76]#77])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"45([#78])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"46([mcore:[#766]#76])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":45,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4354]","target":44,"args":{"any":[]}}}]},
{"label":"47([match_def@[mcore:[#767]#79]#80])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([#81])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"55\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"55\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([mcore:[#767]#79])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"55\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"55\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":48,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4355]","target":47,"args":{"any":[]}}}]},
{"label":"50([match_def@[mcore:[#768]#82]#83])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([#84])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"60\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"62\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"60\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"62\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([mcore:[#768]#82])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"60\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"62\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"60\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"62\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":0,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":51,"args":{"any":[0,1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4356]","target":50,"args":{"any":[]}}}]},
{"label":"53([mcore:[#770]#85])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Right"}]},
{"label":"54([mcore:[#774]#90])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Left"}]},
{"label":"55([mcore:[#778]#95])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Left"}]},
{"label":"56([#102])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([match_def@[#103]#104])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([#110])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([match_std/core/sslice/Sslice@[#103]#105])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Left<string,a>(msg)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Left<string,a>(msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":55}]},
{"label":"60([#103])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":59,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4357]","target":57,"args":{"any":[]}}}]},
{"label":"61([match_def@[mcore:[#781]#100]#101])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseError","target":60,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4358]","target":56,"args":{"any":[]}}}]},
{"label":"62([match_def@[match_def@[#112]#113]#114])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([match_def@[#115]#116])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([#122])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"65([match_std/core/sslice/Sslice@[#115]#117])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Left<string,a>(msg)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Left<string,a>(msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":54}]},
{"label":"66([#115])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":65,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4359]","target":63,"args":{"any":[]}}}]},
{"label":"67([match_def@[#112]#113])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":1,"clauses":[{"tag":"std/text/parse/ParseError","target":66,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4360]","target":62,"args":{"any":[]}}}]},
{"label":"68([#129])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([match_std/core/sslice/Sslice@[#112]#124])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 669) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"67\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"68\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"69\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Right<string,a>(x)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Right<string,a>(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 669) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"67\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"68\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"69\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":53}]},
{"label":"70([#112])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"67\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"68\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"69\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"67\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"68\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"69\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":2,"clauses":[{"tag":"std/core/sslice/Sslice","target":69,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4361]","target":67,"args":{"any":[]}}}]},
{"label":"71([mcore:[#781]#100])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseOk","target":70,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4362]","target":61,"args":{"any":[]}}}]},
{"label":"72([mcore:[#782]#131])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"73([mcore:[#783]#137])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"74([#156])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([k@[#157]#159])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([match_def@[#157]#161])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([#164])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([#166])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"79([k@[#167]#169])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"80([#167])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 722) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10083, msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10083, msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 722) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"81([match_std/text/parse/@Hnd-parse@[#157]#162])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 722) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,722,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10083, msg);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 722) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,722,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10083, msg);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause1","target":80,"args":{"any":[3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4363]","target":78,"args":{"any":[]}}}]},
{"label":"82([#157])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 722) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,722,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10083, msg);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 722) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,722,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10083, msg);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":4,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":81,"args":{"any":[3,4,5,6,7]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4364]","target":76,"args":{"any":[]}}}]},
{"label":"83([k@[k@[mcore:[#791]#141]#147]#155])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":82,"args":{"any":[2,3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4365]","target":74,"args":{"any":[]}}}]},
{"label":"84([k@[mcore:[#791]#141]#147])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":83,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":72}]},
{"label":"85([mcore:[#791]#141])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":84,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":73}]},
{"label":"86([mcore:[#792]#171])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"87([mcore:[#793]#177])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"88([#196])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"89([k@[#197]#199])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([match_def@[#197]#201])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"91([#204])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([#206])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"93([k@[#207]#209])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([#207])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(777, sslice/sslice)>) -> 1007 maybe<777>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10086, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10086, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(777, sslice/sslice)>) -> 1007 maybe<777>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"95([match_std/text/parse/@Hnd-parse@[#197]#202])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"90\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"91\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"93\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@fun-satisfy<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<777>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>,(maybe :: V -> V)<777>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10086, pred);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@fun-satisfy<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<777>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>,(maybe :: V -> V)<777>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10086, pred);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"90\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"91\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"93\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":7,"clauses":[{"tag":"std/core/hnd/Clause1","target":94,"args":{"any":[3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4366]","target":92,"args":{"any":[]}}}]},
{"label":"96([#197])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"86\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<777>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>,(maybe :: V -> V)<777>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10086, pred);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"90\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"91\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"93\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"90\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"91\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"93\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<777>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>,(maybe :: V -> V)<777>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10086, pred);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"86\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":4,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":95,"args":{"any":[3,4,5,6,7]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4367]","target":90,"args":{"any":[]}}}]},
{"label":"97([k@[k@[mcore:[#801]#181]#187]#195])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"86\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"86\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":96,"args":{"any":[2,3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4368]","target":88,"args":{"any":[]}}}]},
{"label":"98([k@[mcore:[#801]#181]#187])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":97,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":86}]},
{"label":"99([mcore:[#801]#181])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":98,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":87}]},
{"label":"100([mcore:[#802]#211])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"101([mcore:[#803]#217])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"102([mcore:[#811]#221])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"103([mcore:[#812]#227])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"104([#246])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([k@[#247]#249])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"106([match_def@[#247]#251])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([#254])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([#256])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"109([k@[k@[#257]#259]#261])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"110([#264])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"111([#265])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: 810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: 810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"112([match_def@[k@[#257]#259]#263])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":111,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4369]","target":110,"args":{"any":[]}}}]},
{"label":"113([k@[k@[k@[#266]#272]#280]#282])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"114([match_def@[k@[k@[#266]#272]#280]#284])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([k@[#285]#287])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"116([match_def@[#285]#289])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"117([#292])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"118([#294])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"119([k@[#295]#297])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"120([#295])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f@0(m@0, ev@0@10092, msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f@0(m@0, ev@0@10092, msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"121([match_std/text/parse/@Hnd-parse@[#285]#290])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"113\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"116\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@2: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10092, msg);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10092, msg);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"113\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"116\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@2: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause1","target":120,"args":{"any":[3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4370]","target":118,"args":{"any":[]}}}]},
{"label":"122([#285])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"112\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10092, msg);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"113\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"116\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"113\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"116\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10092, msg);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"112\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":4,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":121,"args":{"any":[3,4,5,6,7]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4371]","target":116,"args":{"any":[]}}}]},
{"label":"123([k@[k@[#266]#272]#280])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@0@10092) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<b>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10092, msg);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"112\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"112\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@0@10092) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<b>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10092, msg);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":122,"args":{"any":[2,3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4372]","target":114,"args":{"any":[]}}}]},
{"label":"124([k@[#266]#272])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":123,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":102}]},
{"label":"125([#266])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10092) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<b>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10092, msg);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":124,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10092) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<b>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10092, msg);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":103}]},
{"label":"126([k@[#257]#259])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":125,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4373]","target":112,"args":{"any":[]}}}]},
{"label":"127([#257])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(810, sslice/sslice)>) -> 1007 maybe<810>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((f(m, ev@10089, pred))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n     -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10092) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<b>)) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10092, msg);\n            });\n        });\n    });\n  ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10089, pred)","traced":{"any":[]}},
{"op":"Push","target":126,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10089, pred)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((f(m, ev@10089, pred))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n     -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10092) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<b>)) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10092, msg);\n            });\n        });\n    });\n  ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(810, sslice/sslice)>) -> 1007 maybe<810>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":4,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"128([match_std/text/parse/@Hnd-parse@[#247]#252])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"101\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@fun-satisfy<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<810>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>,(maybe :: V -> V)<810>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10089, pred))) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n         -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10092) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-fail<b>)) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10092, msg);\n                });\n            });\n        });\n      ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@fun-satisfy<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<810>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>,(maybe :: V -> V)<810>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10089, pred))) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n         -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10092) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-fail<b>)) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10092, msg);\n                });\n            });\n        });\n      ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"101\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":8,"clauses":[{"tag":"std/core/hnd/Clause1","target":127,"args":{"any":[4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4374]","target":108,"args":{"any":[]}}}]},
{"label":"129([#247])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<810>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>,(maybe :: V -> V)<810>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10089, pred))) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n             -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n            (match (ev@0@10092) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                 -> (match (h@0) {\n                  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-fail<b>)) {\n                      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                         -> f@0(m@0, ev@0@10092, msg);\n                    });\n                });\n            });\n          ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"101\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":2,"to":3},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"101\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<810>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>,(maybe :: V -> V)<810>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10089, pred))) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n             -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n            (match (ev@0@10092) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                 -> (match (h@0) {\n                  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-fail<b>)) {\n                      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                         -> f@0(m@0, ev@0@10092, msg);\n                    });\n                });\n            });\n          ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":5,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":128,"args":{"any":[4,5,6,7,8]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4375]","target":106,"args":{"any":[]}}}]},
{"label":"130([k@[k@[mcore:[#820]#231]#237]#245])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":129,"args":{"any":[3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4376]","target":104,"args":{"any":[]}}}]},
{"label":"131([k@[mcore:[#820]#231]#237])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":130,"args":{"any":[2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Jump","target":100}]},
{"label":"132([mcore:[#820]#231])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":131,"args":{"any":[2,0,1]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":101}]},
{"label":"133([mcore:[#823]#299])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"134([mcore:[#830]#304])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"135([mcore:[#832]#309])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"136([match_def@[k@[mcore:[#840]#315]#320]#321])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"137([match_def@[#326]#327])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([#347])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"139([k@[switch case for Bool(true)#336]#341])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":134}]},
{"label":"140([switch case for Bool(true)#336])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":139,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":135}]},
{"label":"141([switch default case#349])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"142([#334])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[140],"default":141}]},
{"label":"143([match_std/core/types/Tuple2@[#326]#332])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(c)","traced":{"any":[]}},
{"op":"Push","target":142,"args":{"any":[1,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"144([#326])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":143,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4377]","target":137,"args":{"any":[]}}}]},
{"label":"145([k@[mcore:[#840]#315]#320])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":144,"args":{"any":[1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4378]","target":136,"args":{"any":[]}}}]},
{"label":"146([mcore:[#840]#315])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":145,"args":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":133}]},
{"label":"147([method_apply@[mcore:[#842]#354]#357])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":146}]},
{"label":"148([mcore:[#842]#354])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(msg, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | pred(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[147],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(msg, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | pred(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"149([mcore:[#845]#369])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"150([mcore:[#849]#374])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-alpha"}]},
{"label":"151([mcore:[#853]#379])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"152([mcore:[#855]#384])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"153([match_def@[k@[mcore:[#863]#390]#395]#396])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"154([match_def@[#401]#402])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"155([#425])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"156([k@[switch case for Bool(true)#414]#419])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":151}]},
{"label":"157([switch case for Bool(true)#414])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":156,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":152}]},
{"label":"158([switch default case#427])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"159([#412])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[157],"default":158}]},
{"label":"160([match_std/core/types/Tuple2@[#401]#407])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/is-alpha(c)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":159,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/is-alpha(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":150}]},
{"label":"161([#401])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":160,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4379]","target":154,"args":{"any":[]}}}]},
{"label":"162([k@[mcore:[#863]#390]#395])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":161,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4380]","target":153,"args":{"any":[]}}}]},
{"label":"163([mcore:[#863]#390])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":162,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":149}]},
{"label":"164([method_apply@[mcore:[#865]#432]#437])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":163}]},
{"label":"165([mcore:[#865]#432])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"alpha\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-alpha(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"alpha\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"alpha"},
{"op":"New","out":1,"targets":[164],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"alpha\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"alpha\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-alpha(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"166([mcore:[#868]#452])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"167([mcore:[#872]#457])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-alpha-num"}]},
{"label":"168([mcore:[#876]#462])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"169([mcore:[#878]#467])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"170([match_def@[k@[mcore:[#886]#473]#478]#479])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"171([match_def@[#484]#485])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"172([#508])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"173([k@[switch case for Bool(true)#497]#502])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":168}]},
{"label":"174([switch case for Bool(true)#497])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":173,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":169}]},
{"label":"175([switch default case#510])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"176([#495])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[174],"default":175}]},
{"label":"177([match_std/core/types/Tuple2@[#484]#490])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/is-alpha-num(c)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":176,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/is-alpha-num(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":167}]},
{"label":"178([#484])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":177,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4381]","target":171,"args":{"any":[]}}}]},
{"label":"179([k@[mcore:[#886]#473]#478])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":178,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4382]","target":170,"args":{"any":[]}}}]},
{"label":"180([mcore:[#886]#473])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":179,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":166}]},
{"label":"181([method_apply@[mcore:[#888]#515]#520])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":180}]},
{"label":"182([mcore:[#888]#515])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"alpha-num\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-alpha-num(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"alpha-num\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"alpha-num"},
{"op":"New","out":1,"targets":[181],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"alpha-num\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"alpha-num\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-alpha-num(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"183([mcore:[#889]#535])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"184([mcore:[#892]#541])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"185([mcore:[#894]#547])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/show/show-char"}]},
{"label":"186([mcore:[#902]#552])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"187([mcore:[#908]#557])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"188([mcore:[#910]#562])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"189([match_def@[k@[mcore:[#918]#568]#573]#574])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"190([match_def@[#579]#580])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"191([#598])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"192([k@[switch case for Bool(true)#587]#592])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":187}]},
{"label":"193([switch case for Bool(true)#587])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":192,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)))","traced":{"any":[]}},
{"op":"Jump","target":188}]},
{"label":"194([switch default case#600])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"195([match_std/core/types/Tuple2@[#579]#585])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c@0: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(==)(c, c@0)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(==)(c, c@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c@0: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[193],"default":194}]},
{"label":"196([#579])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":195,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4383]","target":190,"args":{"any":[]}}}]},
{"label":"197([k@[mcore:[#918]#568]#573])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":196,"args":{"any":[1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4384]","target":189,"args":{"any":[]}}}]},
{"label":"198([mcore:[#918]#568])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":197,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":186}]},
{"label":"199([#629])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":198}]},
{"label":"200([k@[k@[k@[mcore:[#920]#605]#612]#620]#626])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(msg@10006, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c@0: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/(==)(c, c@0) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[199],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(msg@10006, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c@0: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/(==)(c, c@0) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"201([k@[k@[mcore:[#920]#605]#612]#620])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":200,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":183}]},
{"label":"202([k@[mcore:[#920]#605]#612])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"'"},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":201,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Jump","target":184}]},
{"label":"203([mcore:[#920]#605])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"msg@10006\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"'"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-char(c)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":202,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-char(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"msg@10006\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":185}]},
{"label":"204([mcore:[#921]#641])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"205([mcore:[#931]#646])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"206([mcore:[#936]#652])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"207([mcore:[#938]#658])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"208([mcore:[#945]#664])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"209([mcore:[#947]#670])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"210([mcore:[#954]#676])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"211([mcore:[#956]#682])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"212([k@[#703]#709])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"213([#703])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":210}]},
{"label":"214([match_def@[k@[mcore:[#963]#688]#693]#694])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":213,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":211}]},
{"label":"215([k@[k@[match_def@[#711]#712]#721]#727])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"216([k@[match_def@[#711]#712]#721])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":208}]},
{"label":"217([match_def@[#711]#712])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":216,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":209}]},
{"label":"218([#750])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"219([k@[switch case for Bool(true)#733]#738])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":228}]},
{"label":"220([switch case for Bool(true)#733])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(rest, pred, (std/core/types/Cons<char>(c, acc)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<char>(c, acc)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":219,"args":{"any":[1,3]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":4,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<char>(c, acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(rest, pred, (std/core/types/Cons<char>(c, acc)))","traced":{"any":[]}},
{"op":"Jump","target":205}]},
{"label":"221([k@[k@[switch default case#752]#761]#767])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"222([k@[switch default case#752]#761])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":206}]},
{"label":"223([switch default case#752])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":222,"args":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":207}]},
{"label":"224([#731])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":4,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":0,"b":5},
{"op":"Switch","arg":5,"values":[true],"targets":[220],"default":223}]},
{"label":"225([match_std/core/types/Tuple2@[#711]#729])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: pred(c)","traced":{"any":[]}},
{"op":"Push","target":224,"args":{"any":[3,4,0,1,2]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"226([#711])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":3,"clauses":[{"tag":"std/core/types/Tuple2","target":225,"args":{"any":[3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4385]","target":217,"args":{"any":[]}}}]},
{"label":"227([k@[mcore:[#963]#688]#693])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":3,"clauses":[{"tag":"std/core/types/Just","target":226,"args":{"any":[3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4386]","target":214,"args":{"any":[]}}}]},
{"label":"228([mcore:[#963]#688])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":227,"args":{"any":[2,1,0]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":204}]},
{"label":"229([mcore:[#975]#769])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"230([mcore:[#977]#774])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"231([mcore:[#983]#780])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"232([mcore:[#985]#785])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"233([mcore:[#991]#791])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"234([mcore:[#993]#796])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"235([#819])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"236([match_def@[#820]#821])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"237([k@[#827]#833])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"238([#827])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":233}]},
{"label":"239([match_std/core/sslice/Sslice@[#820]#822])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":238,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":234}]},
{"label":"240([#820])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":239,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4387]","target":236,"args":{"any":[]}}}]},
{"label":"241([match_def@[k@[mcore:[#998]#802]#817]#818])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":240,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4388]","target":235,"args":{"any":[]}}}]},
{"label":"242([match_def@[match_def@[#835]#836]#837])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"243([match_def@[#838]#839])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"244([k@[#845]#851])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"245([#845])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":231}]},
{"label":"246([match_std/core/sslice/Sslice@[#838]#840])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":245,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":232}]},
{"label":"247([#838])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":246,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4389]","target":243,"args":{"any":[]}}}]},
{"label":"248([match_def@[#835]#836])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":247,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4390]","target":242,"args":{"any":[]}}}]},
{"label":"249([match_def@[#854]#855])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"250([#857])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"251([k@[k@[#858]#863]#869])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"252([k@[#858]#863])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":229}]},
{"label":"253([#858])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":252,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":230}]},
{"label":"254([match_std/core/types/Tuple2@[#854]#856])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":253,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4391]","target":250,"args":{"any":[]}}}]},
{"label":"255([#854])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":254,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4392]","target":249,"args":{"any":[]}}}]},
{"label":"256([#871])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"257([match_std/core/types/Nil@[#835]#853])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":256,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4393]","target":255,"args":{"any":[]}}}]},
{"label":"258([#835])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":257,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4394]","target":248,"args":{"any":[]}}}]},
{"label":"259([k@[mcore:[#998]#802]#817])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":258,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4395]","target":241,"args":{"any":[]}}}]},
{"label":"260([mcore:[#998]#802])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":259,"args":{"any":[]}},
{"op":"Swap","a":1,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":3,"b":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"261([method_apply@[mcore:[#1000]#876]#879])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Jump","target":260}]},
{"label":"262([mcore:[#1000]#876])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(msg, (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[261],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(msg, (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"263([mcore:[#1001]#894])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"264([mcore:[#1002]#900])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"265([#919])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"266([k@[#920]#922])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"267([match_def@[#920]#924])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"268([#927])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"269([#929])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"270([k@[#930]#932])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"271([#930])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"272([match_std/text/parse/@Hnd-parse@[#920]#925])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"156\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"158\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"156\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"158\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause0","target":271,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4396]","target":269,"args":{"any":[]}}}]},
{"label":"273([#920])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"156\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"158\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"156\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"158\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":272,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4397]","target":267,"args":{"any":[]}}}]},
{"label":"274([k@[k@[mcore:[#1010]#904]#910]#918])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":273,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4398]","target":265,"args":{"any":[]}}}]},
{"label":"275([k@[mcore:[#1010]#904]#910])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":274,"args":{"any":[]}},
{"op":"Jump","target":263}]},
{"label":"276([mcore:[#1010]#904])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":275,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":264}]},
{"label":"277([mcore:[#1011]#934])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/@open-at1"}]},
{"label":"278([mcore:[#1013]#941])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"279([mcore:[#1017]#946])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"280([mcore:[#1018]#952])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"281([#971])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"282([k@[#972]#974])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"283([match_def@[#972]#976])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"284([#979])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"285([#981])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"286([k@[#982]#984])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"287([#982])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x171\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 1144) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10097, msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10097, msg)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x171\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 1144) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"288([match_std/text/parse/@Hnd-parse@[#972]#977])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"166\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10097, msg);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x171\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x171\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10097, msg);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"166\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause1","target":287,"args":{"any":[3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4399]","target":285,"args":{"any":[]}}}]},
{"label":"289([#972])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10097, msg);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"166\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"166\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10097, msg);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":4,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":288,"args":{"any":[3,4,5,6,7]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4400]","target":283,"args":{"any":[]}}}]},
{"label":"290([k@[k@[mcore:[#1026]#956]#962]#970])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":289,"args":{"any":[2,3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4401]","target":281,"args":{"any":[]}}}]},
{"label":"291([k@[mcore:[#1026]#956]#962])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":290,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":279}]},
{"label":"292([mcore:[#1026]#956])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":291,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":280}]},
{"label":"293([mcore:[#1031]#986])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"294([mcore:[#1033]#992])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"295([mcore:[#1037]#997])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"296([mcore:[#1038]#1003])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"297([#1022])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"298([k@[#1023]#1025])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"299([match_def@[#1023]#1027])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"300([#1030])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"301([#1032])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"302([k@[#1033]#1035])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"303([#1033])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"187\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"187\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"304([match_std/text/parse/@Hnd-parse@[#1023]#1028])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"183\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"186\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"183\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"186\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause0","target":303,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4402]","target":301,"args":{"any":[]}}}]},
{"label":"305([#1023])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":304,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4403]","target":299,"args":{"any":[]}}}]},
{"label":"306([k@[k@[mcore:[#1046]#1007]#1013]#1021])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":305,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4404]","target":297,"args":{"any":[]}}}]},
{"label":"307([k@[mcore:[#1046]#1007]#1013])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":306,"args":{"any":[]}},
{"op":"Jump","target":295}]},
{"label":"308([mcore:[#1046]#1007])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":307,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":296}]},
{"label":"309([mcore:[#1051]#1037])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"310([mcore:[#1053]#1043])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"311([mcore:[#1057]#1048])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"312([mcore:[#1058]#1054])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"313([#1073])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"314([k@[#1074]#1076])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"315([match_def@[#1074]#1078])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"316([#1081])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"317([#1083])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"318([k@[#1084]#1086])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"319([#1084])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"187\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"187\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"320([match_std/text/parse/@Hnd-parse@[#1074]#1079])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"183\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"186\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"183\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"186\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause0","target":319,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4405]","target":317,"args":{"any":[]}}}]},
{"label":"321([#1074])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":320,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4406]","target":315,"args":{"any":[]}}}]},
{"label":"322([k@[k@[mcore:[#1066]#1058]#1064]#1072])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":321,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4407]","target":313,"args":{"any":[]}}}]},
{"label":"323([k@[mcore:[#1066]#1058]#1064])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":322,"args":{"any":[]}},
{"op":"Jump","target":311}]},
{"label":"324([mcore:[#1066]#1058])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":323,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":312}]},
{"label":"325([match_def@[#1090]#1091])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"326([method_apply@[#1100]#1103])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":324}]},
{"label":"327([k@[k@[#1100]#1113]#1115])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"328([k@[switch case for Bool(true)#1117]#1119])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"329([switch case for Bool(true)#1117])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p@0()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p@0()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"330([k@[switch case for Bool(false)#1122]#1130])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"331([switch case for Bool(false)#1122])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/choose<a,(e :: E)>(pp)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/choose<a,(e :: E)>(pp)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":359}]},
{"label":"332([switch default case#1132])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"333([switch default case#1121])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Switch","arg":2,"values":[false],"targets":[331],"default":332}]},
{"label":"334([k@[#1100]#1113])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[329],"default":333}]},
{"label":"335([#1100])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":3,"targets":[326],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":334,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Jump","target":309}]},
{"label":"336([match_std/core/types/Cons@[#1090]#1092])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p@0: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@3@0@0: bool)\n     -> p@0();\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> std/text/parse/choose<a,(e :: E)>(pp);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":335,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@3@0@0: bool)\n     -> p@0();\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> std/text/parse/choose<a,(e :: E)>(pp);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p@0: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":310}]},
{"label":"337([#1090])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":336,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4408]","target":325,"args":{"any":[]}}}]},
{"label":"338([match_def@[match_def@[#1133]#1134]#1135])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"339([method_apply@[k@[#1136]#1144]#1147])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":308}]},
{"label":"340([k@[k@[k@[#1136]#1144]#1157]#1159])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"341([k@[switch case for Bool(true)#1161]#1163])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"342([switch case for Bool(true)#1161])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p@0()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p@0()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"343([k@[switch case for Bool(false)#1166]#1174])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"344([switch case for Bool(false)#1166])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/choose<a,(e :: E)>(pp)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/choose<a,(e :: E)>(pp)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":359}]},
{"label":"345([switch default case#1176])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"346([switch default case#1165])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Copy","from":1,"to":0},
{"op":"Switch","arg":2,"values":[false],"targets":[344],"default":345}]},
{"label":"347([k@[k@[#1136]#1144]#1157])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[342],"default":346}]},
{"label":"348([k@[#1136]#1144])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":3,"targets":[339],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":347,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Jump","target":293}]},
{"label":"349([#1136])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p@0: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@3@0@0: bool)\n     -> p@0();\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> std/text/parse/choose<a,(e :: E)>(pp);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":348,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@3@0@0: bool)\n     -> p@0();\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> std/text/parse/choose<a,(e :: E)>(pp);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p@0: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":294}]},
{"label":"350([match_def@[#1133]#1134])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":349,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4409]","target":338,"args":{"any":[]}}}]},
{"label":"351([#1179])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"352([match_std/core/types/Nil@[#1133]#1177])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"173\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"173\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"353([#1133])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":352,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4410]","target":350,"args":{"any":[]}}}]},
{"label":"354([match_def@[mcore:[#1071]#1088]#1089])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":353,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4411]","target":337,"args":{"any":[]}}}]},
{"label":"355([method_apply@[k@[#1181]#1189]#1195])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":292}]},
{"label":"356([k@[k@[#1181]#1189]#1205])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"357([k@[#1181]#1189])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"no further alternatives\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"no further alternatives"},
{"op":"New","out":2,"targets":[355],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"no further alternatives\"","traced":{"any":[]}},
{"op":"Jump","target":277}]},
{"label":"358([#1181])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at1<string,a,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string){\n    val ev@10097 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10097) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<b>)) {\n              ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) c) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f(m, ev@10097, msg);\n            });\n        });\n    });\n  }), \"no further alternatives\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":357,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at1<string,a,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string){\n    val ev@10097 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10097) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<b>)) {\n              ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) c) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f(m, ev@10097, msg);\n            });\n        });\n    });\n  }), \"no further alternatives\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":278}]},
{"label":"359([mcore:[#1071]#1088])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":358,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4412]","target":354,"args":{"any":[]}}}]},
{"label":"360([mcore:[#1074]#1207])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"361([mcore:[#1085]#1213])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"362([k@[switch case for Bool(true)#1223]#1232])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"363([switch case for Bool(true)#1223])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":360}]},
{"label":"364([k@[#1248]#1257])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"365([#1248])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":370}]},
{"label":"366([k@[switch case for Bool(false)#1238]#1240])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[2]},"in":{"any":[2,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, acc)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":365,"args":{"any":[3,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(n, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p)","traced":{"any":[]}},
{"op":"Jump","target":361}]},
{"label":"367([switch case for Bool(false)#1238])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val x : a\n      = p();\nstd/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p()","traced":{"any":[]}},
{"op":"Push","target":366,"args":{"any":[0,1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val x : a\n      = p();\nstd/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[]}}]},
{"label":"368([switch default case#1259])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"369([switch default case#1234])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[1,3]}},
{"op":"Switch","arg":3,"values":[false],"targets":[367],"default":368}]},
{"label":"370([mcore:[#1091]#1219])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":3,"value":0},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[3]},"in":{"any":[0,3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":3,"values":[true],"targets":[363],"default":369}]},
{"label":"371([mcore:[#1097]#1260])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/count-acc<a,(e :: E)>(n, (std/core/types/Nil<a>), p)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/count-acc<a,(e :: E)>(n, (std/core/types/Nil<a>), p)","traced":{"any":[]}},
{"op":"Jump","target":370}]},
{"label":"372([mcore:[#1098]#1271])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"373([mcore:[#1099]#1277])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"374([#1296])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"375([k@[#1297]#1299])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"376([match_def@[#1297]#1301])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"377([#1304])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"378([#1306])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"379([k@[#1307]#1309])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"380([#1307])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"197\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"197\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"381([match_std/text/parse/@Hnd-parse@[#1297]#1302])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"192\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"192\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-current-input,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"194\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"194\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"195\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"195\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"196\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"196\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-current-input) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-current-input) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"192\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"192\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-current-input,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"194\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"194\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"195\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"195\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"196\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"196\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":380,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4413]","target":378,"args":{"any":[]}}}]},
{"label":"382([#1297])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"188\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"188\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"189\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"191\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"191\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@fun-current-input: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-current-input) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"192\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"194\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"195\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"196\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"192\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"194\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"195\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"196\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@fun-current-input: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-current-input) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"188\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"188\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"189\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"191\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"191\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":381,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4414]","target":376,"args":{"any":[]}}}]},
{"label":"383([k@[k@[mcore:[#1107]#1281]#1287]#1295])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"188\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"191\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"188\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"191\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":382,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4415]","target":374,"args":{"any":[]}}}]},
{"label":"384([k@[mcore:[#1107]#1281]#1287])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":383,"args":{"any":[]}},
{"op":"Jump","target":372}]},
{"label":"385([mcore:[#1107]#1281])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":384,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":373}]},
{"label":"386([mcore:[#1110]#1311])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"387([mcore:[#1120]#1316])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"388([mcore:[#1122]#1321])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"389([match_def@[k@[mcore:[#1130]#1327]#1332]#1333])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"390([match_def@[#1338]#1339])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"391([#1362])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"392([k@[switch case for Bool(true)#1351]#1356])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":387}]},
{"label":"393([switch case for Bool(true)#1351])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":392,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":388}]},
{"label":"394([switch default case#1364])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"395([#1349])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[393],"default":394}]},
{"label":"396([switch case for Bool(true)#1369])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"9"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"397([switch default case#1373])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"398([match_std/core/types/Tuple2@[#1338]#1344])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"201\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"0"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Push","target":395,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@0: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"201\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[396],"default":397}]},
{"label":"399([#1338])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":398,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4416]","target":390,"args":{"any":[]}}}]},
{"label":"400([k@[mcore:[#1130]#1327]#1332])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":399,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4417]","target":389,"args":{"any":[]}}}]},
{"label":"401([mcore:[#1130]#1327])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":400,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":386}]},
{"label":"402([mcore:[#1132]#1376])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/@open-none2"}]},
{"label":"403([mcore:[#1135]#1383])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c@1)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"y@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(d)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-sub(x@10002, y@10003)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"PrimOp","name":"(#1)","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-sub(x@10002, y@10003)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(d)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"y@10003\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c@1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"404([method_apply@[mcore:[#1140]#1385]#1390])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":401}]},
{"label":"405([#1409])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":403}]},
{"label":"406([k@[k@[mcore:[#1140]#1385]#1403]#1416])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"407([k@[mcore:[#1140]#1385]#1403])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int((std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n    val x@10002 : int;\n    val y@10003 : int;\n    (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n  }), c@0@0, '0')))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n    val x@10002 : int;\n    val y@10003 : int;\n    (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n  }), c@0@0, '0')","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: '0'","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"0"},
{"op":"New","out":2,"targets":[405],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":406,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: '0'","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n    val x@10002 : int;\n    val y@10003 : int;\n    (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n  }), c@0@0, '0')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int((std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n    val x@10002 : int;\n    val y@10003 : int;\n    (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n  }), c@0@0, '0')))","traced":{"any":[]}},
{"op":"Jump","target":402}]},
{"label":"408([mcore:[#1140]#1385])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"c@0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | (match ((std/core/char/(>=)(c, '0'))) {\n          ((std/core/types/True() : bool ) as @pat@1: bool)\n             -> std/core/char/(<=)(c, '9');\n          (@pat@0@0: bool)\n             -> std/core/types/False;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1@0: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"digit"},
{"op":"New","out":1,"targets":[404],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":407,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | (match ((std/core/char/(>=)(c, '0'))) {\n          ((std/core/types/True() : bool ) as @pat@1: bool)\n             -> std/core/char/(<=)(c, '9');\n          (@pat@0@0: bool)\n             -> std/core/types/False;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1@0: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"c@0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"409([mcore:[#1141]#1418])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"410([mcore:[#1147]#1423])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-digit"}]},
{"label":"411([mcore:[#1155]#1428])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"412([mcore:[#1157]#1433])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"413([mcore:[#1163]#1439])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"414([mcore:[#1165]#1444])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"415([mcore:[#1171]#1450])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"416([mcore:[#1173]#1455])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"417([method_apply@[mcore:[#1178]#1461]#1468])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":410}]},
{"label":"418([#1486])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"419([match_def@[#1487]#1488])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"420([k@[#1494]#1500])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"421([#1494])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":415}]},
{"label":"422([match_std/core/sslice/Sslice@[#1487]#1489])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":421,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":416}]},
{"label":"423([#1487])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":422,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4418]","target":419,"args":{"any":[]}}}]},
{"label":"424([match_def@[k@[mcore:[#1178]#1461]#1484]#1485])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":423,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4419]","target":418,"args":{"any":[]}}}]},
{"label":"425([match_def@[match_def@[#1502]#1503]#1504])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"426([match_def@[#1505]#1506])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"427([k@[#1512]#1518])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"428([#1512])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":413}]},
{"label":"429([match_std/core/sslice/Sslice@[#1505]#1507])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":428,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":414}]},
{"label":"430([#1505])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":429,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4420]","target":426,"args":{"any":[]}}}]},
{"label":"431([match_def@[#1502]#1503])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":430,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4421]","target":425,"args":{"any":[]}}}]},
{"label":"432([match_def@[#1521]#1522])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"433([#1524])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"434([k@[k@[#1525]#1530]#1536])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"435([k@[#1525]#1530])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":411}]},
{"label":"436([#1525])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":435,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":412}]},
{"label":"437([match_std/core/types/Tuple2@[#1521]#1523])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":436,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4422]","target":433,"args":{"any":[]}}}]},
{"label":"438([#1521])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":437,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4423]","target":432,"args":{"any":[]}}}]},
{"label":"439([#1538])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"201\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"201\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"202\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"202\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"203\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"203\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"201\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"201\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"202\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"202\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"203\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"203\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"440([match_std/core/types/Nil@[#1502]#1520])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"201\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"202\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"203\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"201\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"202\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"203\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":439,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4424]","target":438,"args":{"any":[]}}}]},
{"label":"441([#1502])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":440,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4425]","target":431,"args":{"any":[]}}}]},
{"label":"442([k@[mcore:[#1178]#1461]#1484])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":441,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4426]","target":424,"args":{"any":[]}}}]},
{"label":"443([mcore:[#1178]#1461])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[417],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":442,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"444([method_apply@[mcore:[#1181]#1543]#1548])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":443}]},
{"label":"445([k@[mcore:[#1181]#1543]#1567])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":409}]},
{"label":"446([mcore:[#1181]#1543])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"digit"},
{"op":"New","out":1,"targets":[444],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":445,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"447([mcore:[#1182]#1572])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"448([mcore:[#1184]#1578])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"449([mcore:[#1188]#1583])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"450([mcore:[#1189]#1589])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"451([#1608])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"452([k@[#1609]#1611])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"453([match_def@[#1609]#1613])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"454([#1616])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"455([#1618])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"456([k@[#1619]#1621])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"457([#1619])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"219\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"219\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"458([match_std/text/parse/@Hnd-parse@[#1609]#1614])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"214\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"214\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"215\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"215\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"216\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"216\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"218\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"218\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"214\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"214\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"215\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"215\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"216\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"216\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"218\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"218\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause0","target":457,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4427]","target":455,"args":{"any":[]}}}]},
{"label":"459([#1609])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"210\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"210\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"211\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"213\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"213\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"214\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"215\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"216\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"218\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"214\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"215\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"216\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"218\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"210\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"210\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"211\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"213\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"213\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":458,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4428]","target":453,"args":{"any":[]}}}]},
{"label":"460([k@[k@[mcore:[#1197]#1593]#1599]#1607])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"210\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"213\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"210\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"213\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":459,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4429]","target":451,"args":{"any":[]}}}]},
{"label":"461([k@[mcore:[#1197]#1593]#1599])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":460,"args":{"any":[]}},
{"op":"Jump","target":449}]},
{"label":"462([mcore:[#1197]#1593])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":461,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":450}]},
{"label":"463([#1634])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":462}]},
{"label":"464([k@[switch case for Bool(true)#1645]#1647])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"465([switch case for Bool(true)#1645])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x209\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p1()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p1()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x209\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[]}}]},
{"label":"466([k@[switch case for Bool(false)#1650]#1652])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"467([switch case for Bool(false)#1650])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x209\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p2()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p2()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x209\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"468([switch default case#1654])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"469([switch default case#1649])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Switch","arg":1,"values":[false],"targets":[467],"default":468}]},
{"label":"470([k@[k@[mcore:[#1201]#1623]#1631]#1644])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[465],"default":469}]},
{"label":"471([k@[mcore:[#1201]#1623]#1631])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":3,"targets":[463],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":470,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Jump","target":447}]},
{"label":"472([mcore:[#1201]#1623])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@10104 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10104) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":471,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@10104 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10104) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n            });\n        });\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":448}]},
{"label":"473([mcore:[#1204]#1655])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"474([method_apply@[mcore:[#1206]#1656]#1658])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":473}]},
{"label":"475([mcore:[#1206]#1656])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<a,(e :: E)>(p, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    default;\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[474],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<a,(e :: E)>(p, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    default;\n  }))","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"476([mcore:[#1208]#1667])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"477([mcore:[#1214]#1672])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-digit"}]},
{"label":"478([mcore:[#1222]#1677])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"479([mcore:[#1224]#1682])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"480([mcore:[#1230]#1688])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"481([mcore:[#1232]#1693])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"482([mcore:[#1238]#1699])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"483([mcore:[#1240]#1704])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"484([method_apply@[mcore:[#1245]#1710]#1717])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":477}]},
{"label":"485([#1735])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"486([match_def@[#1736]#1737])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"487([k@[#1743]#1749])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"488([#1743])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":482}]},
{"label":"489([match_std/core/sslice/Sslice@[#1736]#1738])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":488,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":483}]},
{"label":"490([#1736])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":489,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4430]","target":486,"args":{"any":[]}}}]},
{"label":"491([match_def@[k@[mcore:[#1245]#1710]#1733]#1734])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":490,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4431]","target":485,"args":{"any":[]}}}]},
{"label":"492([match_def@[match_def@[#1751]#1752]#1753])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"493([match_def@[#1754]#1755])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"494([k@[#1761]#1767])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"495([#1761])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":480}]},
{"label":"496([match_std/core/sslice/Sslice@[#1754]#1756])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":495,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":481}]},
{"label":"497([#1754])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":496,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4432]","target":493,"args":{"any":[]}}}]},
{"label":"498([match_def@[#1751]#1752])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":497,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4433]","target":492,"args":{"any":[]}}}]},
{"label":"499([match_def@[#1770]#1771])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"500([#1773])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"501([k@[k@[#1774]#1779]#1785])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"502([k@[#1774]#1779])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":478}]},
{"label":"503([#1774])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":502,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":479}]},
{"label":"504([match_std/core/types/Tuple2@[#1770]#1772])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":503,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4434]","target":500,"args":{"any":[]}}}]},
{"label":"505([#1770])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":504,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4435]","target":499,"args":{"any":[]}}}]},
{"label":"506([#1787])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"221\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"222\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"223\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"223\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"224\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"224\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"225\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"225\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"221\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"222\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"223\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"223\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"224\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"224\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"225\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"225\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"507([match_std/core/types/Nil@[#1751]#1769])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"222\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"223\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"224\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"225\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"222\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"223\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"224\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"225\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":506,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4436]","target":505,"args":{"any":[]}}}]},
{"label":"508([#1751])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"221\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"221\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":507,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4437]","target":498,"args":{"any":[]}}}]},
{"label":"509([k@[mcore:[#1245]#1710]#1733])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":508,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4438]","target":491,"args":{"any":[]}}}]},
{"label":"510([mcore:[#1245]#1710])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[484],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":509,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"511([method_apply@[mcore:[#1248]#1792]#1797])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":510}]},
{"label":"512([k@[mcore:[#1248]#1792]#1816])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":476}]},
{"label":"513([mcore:[#1248]#1792])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"digit"},
{"op":"New","out":1,"targets":[511],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":512,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"514([mcore:[#1250]#1821])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"0"},
{"op":"Return","args":{"any":[0]}}]},
{"label":"515([method_apply@[mcore:[#1252]#1823]#1825])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Jump","target":513}]},
{"label":"516([method_apply@[mcore:[#1252]#1823]#1847])",
"frameDescriptor":{"regs_any":0},
"instructions":[{"op":"Jump","target":514}]},
{"label":"517([mcore:[#1252]#1823])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n        (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n          ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n          ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n        });\n      })))));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    \"0\";\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[515],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[516],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n        (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n          ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n          ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n        });\n      })))));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    \"0\";\n  }))","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"518([mcore:[#1253]#1856])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"519([mcore:[#1254]#1862])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"520([mcore:[#1264]#1866])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"521([mcore:[#1266]#1871])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"522([switch case for Bool(true)#1883])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((), sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((), sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"523([#1902])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"524([k@[switch case for Bool(false)#1889]#1896])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":520}]},
{"label":"525([switch case for Bool(false)#1889])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":524,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":521}]},
{"label":"526([switch default case#1904])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"527([switch default case#1888])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[525],"default":526}]},
{"label":"528([k@[mcore:[#1271]#1877]#1879])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[522],"default":527}]},
{"label":"529([match_def@[mcore:[#1271]#1877]#1905])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"530([#1906])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"243\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"243\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"244\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"244\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"243\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"243\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"244\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"244\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"531([mcore:[#1271]#1877])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(>)((match (s) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (s) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"243\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"244\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":528,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"243\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"244\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (s) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(>)((match (s) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n       -> @x;\n  }), 0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":530,"args":{"any":[0,1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4439]","target":529,"args":{"any":[]}}}]},
{"label":"532([mcore:[#1273]#1907])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"533([mcore:[#1274]#1913])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"534([#1932])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"535([k@[#1933]#1935])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"536([match_def@[#1933]#1937])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"537([#1940])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"538([#1942])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"539([method_apply@[#1943]#1946])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":531}]},
{"label":"540([k@[k@[#1943]#1953]#1955])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"541([#1958])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"542([match_def@[#1959]#1960])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"543([match_std/core/types/Unit@[#1959]#1961])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0@0,{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@3@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"254\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0@0,{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@3@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"254\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"544([#1959])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"254\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/unit\".\"std/core/types/Unit\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"254\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/unit\".\"std/core/types/Unit\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/unit","scrutinee":0,"clauses":[{"tag":"std/core/types/Unit","target":543,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4440]","target":542,"args":{"any":[]}}}]},
{"label":"545([match_def@[k@[#1943]#1953]#1957])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":544,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4441]","target":541,"args":{"any":[]}}}]},
{"label":"546([k@[k@[k@[#1964]#1970]#1978]#1980])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"547([match_def@[k@[k@[#1964]#1970]#1978]#1982])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"548([k@[#1983]#1985])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"549([match_def@[#1983]#1987])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"550([#1990])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"551([#1992])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"552([k@[#1993]#1997])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"553([#1993])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x252\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"253\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f@0(m@0, ev@0@10109, \"expecting end-of-input\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"expecting end-of-input\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"expecting end-of-input"},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"expecting end-of-input\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f@0(m@0, ev@0@10109, \"expecting end-of-input\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x252\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"253\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"554([match_std/text/parse/@Hnd-parse@[#1983]#1988])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"247\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"247\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"248\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@3: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"248\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"249\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"250\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@2: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"250\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"251\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"251\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@ctl-fail<()>)) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x252\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x252\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@ctl-fail<()>)) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"247\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"247\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"248\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@3: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"248\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"249\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"250\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@2: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"250\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"251\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"251\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":553,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4442]","target":551,"args":{"any":[]}}}]},
{"label":"555([#1983])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"243\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"243\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"244\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"246\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"246\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<()>)) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"247\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"248\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"250\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"251\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"247\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"248\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"250\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"251\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<()>)) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"243\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"243\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"244\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"246\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"246\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":554,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4443]","target":549,"args":{"any":[]}}}]},
{"label":"556([k@[k@[#1964]#1970]#1978])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@0@10109) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<()>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"243\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"246\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"243\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"246\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@0@10109) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<()>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":555,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4444]","target":547,"args":{"any":[]}}}]},
{"label":"557([k@[#1964]#1970])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":556,"args":{"any":[]}},
{"op":"Jump","target":532}]},
{"label":"558([#1964])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10109) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<()>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":557,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10109) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<()>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":533}]},
{"label":"559([k@[#1943]#1953])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":558,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4445]","target":545,"args":{"any":[]}}}]},
{"label":"560([#1943])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x240\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<((), sslice/sslice)>) -> 1007 maybe<()>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"241\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((f(m, ev@10106, (fn(s: sslice/sslice){\n    val b@10013 : bool\n          = (std/core/int/(>)((match (s) {\n              ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                 -> @x;\n            }), 0));\n    (match (b@10013) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/Nothing<((), sslice/sslice)>;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n    });\n  })))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n     -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10109) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<()>)) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n            });\n        });\n    });\n  ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n     -> std/core/types/Unit;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10106, (fn(s: sslice/sslice){\n    val b@10013 : bool\n          = (std/core/int/(>)((match (s) {\n              ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                 -> @x;\n            }), 0));\n    (match (b@10013) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/Nothing<((), sslice/sslice)>;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":3,"targets":[539],"args":{"any":[]},"tags":["apply"]},
{"op":"Push","target":559,"args":{"any":[]}},
{"op":"Swap","a":2,"b":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10106, (fn(s: sslice/sslice){\n    val b@10013 : bool\n          = (std/core/int/(>)((match (s) {\n              ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                 -> @x;\n            }), 0));\n    (match (b@10013) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/Nothing<((), sslice/sslice)>;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((f(m, ev@10106, (fn(s: sslice/sslice){\n    val b@10013 : bool\n          = (std/core/int/(>)((match (s) {\n              ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                 -> @x;\n            }), 0));\n    (match (b@10013) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/Nothing<((), sslice/sslice)>;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n    });\n  })))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n     -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10109) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<()>)) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n            });\n        });\n    });\n  ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n     -> std/core/types/Unit;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x240\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<((), sslice/sslice)>) -> 1007 maybe<()>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"241\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"561([match_std/text/parse/@Hnd-parse@[#1933]#1938])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"235\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"235\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"236\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"236\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"237\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"237\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"238\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"238\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"239\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((@fun-satisfy<()>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n        val b@10013 : bool\n              = (std/core/int/(>)((match (s) {\n                  ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                     -> @x;\n                }), 0));\n        (match (b@10013) {\n          ((std/core/types/True() : bool ) as @pat@3@0: bool)\n             -> std/core/types/Nothing<((), sslice/sslice)>;\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n        });\n      })))) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n         -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10109) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-fail<()>)) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                });\n            });\n        });\n      ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n         -> std/core/types/Unit;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x240\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x240\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((@fun-satisfy<()>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n        val b@10013 : bool\n              = (std/core/int/(>)((match (s) {\n                  ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                     -> @x;\n                }), 0));\n        (match (b@10013) {\n          ((std/core/types/True() : bool ) as @pat@3@0: bool)\n             -> std/core/types/Nothing<((), sslice/sslice)>;\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n        });\n      })))) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n         -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10109) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-fail<()>)) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                });\n            });\n        });\n      ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n         -> std/core/types/Unit;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"235\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"235\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"236\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"236\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"237\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"237\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"238\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"238\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"239\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":6,"clauses":[{"tag":"std/core/hnd/Clause1","target":560,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4446]","target":538,"args":{"any":[]}}}]},
{"label":"562([#1933])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"231\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"231\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"232\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"234\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"234\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<()>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n            val b@10013 : bool\n                  = (std/core/int/(>)((match (s) {\n                      ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                         -> @x;\n                    }), 0));\n            (match (b@10013) {\n              ((std/core/types/True() : bool ) as @pat@3@0: bool)\n                 -> std/core/types/Nothing<((), sslice/sslice)>;\n              ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n                 -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n            });\n          })))) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n             -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n            (match (ev@0@10109) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                 -> (match (h@0) {\n                  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-fail<()>)) {\n                      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                         -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                    });\n                });\n            });\n          ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n             -> std/core/types/Unit;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"235\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"236\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"237\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"238\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"235\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"236\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"237\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"238\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<()>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n            val b@10013 : bool\n                  = (std/core/int/(>)((match (s) {\n                      ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                         -> @x;\n                    }), 0));\n            (match (b@10013) {\n              ((std/core/types/True() : bool ) as @pat@3@0: bool)\n                 -> std/core/types/Nothing<((), sslice/sslice)>;\n              ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n                 -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n            });\n          })))) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n             -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n            (match (ev@0@10109) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                 -> (match (h@0) {\n                  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-fail<()>)) {\n                      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                         -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                    });\n                });\n            });\n          ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n             -> std/core/types/Unit;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"231\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"231\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"232\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"234\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"234\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse","scrutinee":3,"clauses":[{"tag":"std/text/parse/@Hnd-parse","target":561,"args":{"any":[2,3,4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4447]","target":536,"args":{"any":[]}}}]},
{"label":"563([k@[k@[mcore:[#1283]#1917]#1923]#1931])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"231\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"234\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"231\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"234\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":562,"args":{"any":[1,2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4448]","target":534,"args":{"any":[]}}}]},
{"label":"564([k@[mcore:[#1283]#1917]#1923])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":563,"args":{"any":[]}},
{"op":"Jump","target":518}]},
{"label":"565([mcore:[#1283]#1917])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":564,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":519}]},
{"label":"566([mcore:[#1284]#1999])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"567([mcore:[#1290]#2004])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-hex-digit"}]},
{"label":"568([mcore:[#1298]#2009])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"569([mcore:[#1300]#2014])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"570([mcore:[#1306]#2020])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"571([mcore:[#1308]#2025])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"572([mcore:[#1314]#2031])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"573([mcore:[#1316]#2036])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"574([method_apply@[mcore:[#1321]#2042]#2049])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":567}]},
{"label":"575([#2067])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"576([match_def@[#2068]#2069])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"577([k@[#2075]#2081])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"578([#2075])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":572}]},
{"label":"579([match_std/core/sslice/Sslice@[#2068]#2070])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":578,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":573}]},
{"label":"580([#2068])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":579,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4449]","target":576,"args":{"any":[]}}}]},
{"label":"581([match_def@[k@[mcore:[#1321]#2042]#2065]#2066])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":580,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4450]","target":575,"args":{"any":[]}}}]},
{"label":"582([match_def@[match_def@[#2083]#2084]#2085])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"583([match_def@[#2086]#2087])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"584([k@[#2093]#2099])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"585([#2093])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":570}]},
{"label":"586([match_std/core/sslice/Sslice@[#2086]#2088])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":585,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":571}]},
{"label":"587([#2086])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":586,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4451]","target":583,"args":{"any":[]}}}]},
{"label":"588([match_def@[#2083]#2084])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":587,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4452]","target":582,"args":{"any":[]}}}]},
{"label":"589([match_def@[#2102]#2103])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"590([#2105])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"591([k@[k@[#2106]#2111]#2117])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"592([k@[#2106]#2111])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":568}]},
{"label":"593([#2106])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":592,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":569}]},
{"label":"594([match_std/core/types/Tuple2@[#2102]#2104])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":593,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4453]","target":590,"args":{"any":[]}}}]},
{"label":"595([#2102])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":594,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4454]","target":589,"args":{"any":[]}}}]},
{"label":"596([#2119])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"256\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"257\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"258\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"258\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"259\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"259\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"260\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"260\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"256\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"257\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"258\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"258\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"259\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"259\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"260\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"260\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"597([match_std/core/types/Nil@[#2083]#2101])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"257\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"258\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"259\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"260\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"257\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"258\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"259\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"260\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":596,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4455]","target":595,"args":{"any":[]}}}]},
{"label":"598([#2083])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"256\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"256\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":597,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4456]","target":588,"args":{"any":[]}}}]},
{"label":"599([k@[mcore:[#1321]#2042]#2065])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":598,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4457]","target":581,"args":{"any":[]}}}]},
{"label":"600([mcore:[#1321]#2042])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[574],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":599,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"601([method_apply@[mcore:[#1324]#2124]#2129])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":600}]},
{"label":"602([k@[mcore:[#1324]#2124]#2148])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":566}]},
{"label":"603([mcore:[#1324]#2124])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"digit"},
{"op":"New","out":1,"targets":[601],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":602,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"604([mcore:[#1329]#2153])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"605([k@[k@[mcore:[#1334]#2159]#2161]#2166])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":612}]},
{"label":"606([k@[mcore:[#1334]#2159]#2161])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>(x, acc)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":605,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>(x, acc)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc)))","traced":{"any":[]}},
{"op":"Jump","target":604}]},
{"label":"607([mcore:[#1334]#2159])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p()","traced":{"any":[]}},
{"op":"Push","target":606,"args":{"any":[0,4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":4,"tag":"apply","args":{"any":[]}}]},
{"label":"608([mcore:[#1336]#2181])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"609([mcore:[#1341]#2187])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)","traced":{"any":[]}},
{"op":"Jump","target":608}]},
{"label":"610([method_apply@[mcore:[#1343]#2180]#2196])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Jump","target":607}]},
{"label":"611([method_apply@[mcore:[#1343]#2180]#2212])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":609}]},
{"label":"612([mcore:[#1343]#2180])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<(list :: V -> V)<a>,(e :: E)>((fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    val x : a\n          = (p());\n    (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc))));\n  }), (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    (std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc));\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[610],"args":{"any":[1,0]},"tags":["apply"]},
{"op":"New","out":1,"targets":[611],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<(list :: V -> V)<a>,(e :: E)>((fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    val x : a\n          = (p());\n    (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc))));\n  }), (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    (std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"613([mcore:[#1348]#2224])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Jump","target":612}]},
{"label":"614([mcore:[#1349]#2241])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"615([k@[k@[mcore:[#1358]#2247]#2249]#2268])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":614}]},
{"label":"616([k@[mcore:[#1358]#2247]#2249])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":615,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))","traced":{"any":[]}},
{"op":"Jump","target":612}]},
{"label":"617([mcore:[#1358]#2247])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<a>((p()), (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p()","traced":{"any":[]}},
{"op":"Push","target":616,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<a>((p()), (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))))","traced":{"any":[]}},
{"op":"Invoke","receiver":0,"tag":"apply","args":{"any":[]}}]},
{"label":"618([mcore:[#1360]#2273])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"619([#2280])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"620([match_def@[#2281]#2282])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"621([match_std/core/sslice/Sslice@[#2281]#2283])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"271\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"273\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"274\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"275\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"271\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"273\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"274\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"275\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"622([#2281])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":621,"args":{"any":[0,1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4458]","target":620,"args":{"any":[]}}}]},
{"label":"623([match_def@[mcore:[#1367]#2278]#2279])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseError","target":622,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4459]","target":619,"args":{"any":[]}}}]},
{"label":"624([match_def@[match_def@[#2288]#2289]#2290])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"625([match_def@[#2291]#2292])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"626([match_std/core/sslice/Sslice@[#2291]#2293])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"271\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"273\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"274\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"275\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"271\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"273\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"274\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"275\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"627([#2291])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":626,"args":{"any":[0,1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4460]","target":625,"args":{"any":[]}}}]},
{"label":"628([match_def@[#2288]#2289])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":1,"clauses":[{"tag":"std/text/parse/ParseError","target":627,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4461]","target":624,"args":{"any":[]}}}]},
{"label":"629([#2303])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"630([match_std/core/sslice/Sslice@[#2288]#2298])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 1598) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"266\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"267\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"268\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"268\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"269\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"269\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"270\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"270\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 1598) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"266\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"267\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"268\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"268\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"269\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"269\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"270\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"270\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":618}]},
{"label":"631([#2288])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"267\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"268\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"269\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"270\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"267\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"268\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"269\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"270\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":2,"clauses":[{"tag":"std/core/sslice/Sslice","target":630,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4462]","target":628,"args":{"any":[]}}}]},
{"label":"632([mcore:[#1367]#2278])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseOk","target":631,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4463]","target":623,"args":{"any":[]}}}]},
{"label":"633([mcore:[#1368]#2305])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"634([mcore:[#1371]#2310])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"635([#2317])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"636([k@[k@[#2318]#2323]#2325])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"637([match_def@[k@[#2318]#2323]#2327])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"638([match_def@[#2332]#2333])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"639([k@[switch case for Bool(true)#2340]#2348])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"640([switch case for Bool(true)#2340])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-match(rest, cc)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-match(rest, cc)","traced":{"any":[]}},
{"op":"Jump","target":649}]},
{"label":"641([switch default case#2350])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<sslice/sslice>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"642([match_std/core/types/Tuple2@[#2332]#2338])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"279\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(d,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (d: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"280\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"281\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(==)(c, d)","traced":{"any":[]}},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(==)(c, d)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"279\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(d,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (d: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"280\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"281\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[640],"default":641}]},
{"label":"643([#2332])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"279\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"279\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":2,"clauses":[{"tag":"std/core/types/Tuple2","target":642,"args":{"any":[2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4464]","target":638,"args":{"any":[]}}}]},
{"label":"644([k@[#2318]#2323])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":2,"clauses":[{"tag":"std/core/types/Just","target":643,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4465]","target":637,"args":{"any":[]}}}]},
{"label":"645([#2318])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"276\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cc,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (cc: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"277\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/next(slice))) {\n  ((std/core/types/Just(((std/core/types/Tuple2((d: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n     | std/core/char/(==)(c, d) -> std/text/parse/next-match(rest, cc);\n  (@pat@3: ((maybe :: V -> V)<(char, sslice/sslice)>))\n     -> std/core/types/Nothing<sslice/sslice>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":644,"args":{"any":[1,2]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/next(slice))) {\n  ((std/core/types/Just(((std/core/types/Tuple2((d: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n     | std/core/char/(==)(c, d) -> std/text/parse/next-match(rest, cc);\n  (@pat@3: ((maybe :: V -> V)<(char, sslice/sslice)>))\n     -> std/core/types/Nothing<sslice/sslice>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"276\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cc,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (cc: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"277\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":634}]},
{"label":"646([match_def@[mcore:[#1384]#2315]#2316])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":645,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4466]","target":635,"args":{"any":[]}}}]},
{"label":"647([k@[#2355]#2360])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"648([#2355])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<sslice/sslice>(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<sslice/sslice>(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":633}]},
{"label":"649([mcore:[#1384]#2315])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":648,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4467]","target":646,"args":{"any":[]}}}]},
{"label":"650([mcore:[#1387]#2362])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"651([mcore:[#1397]#2367])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"652([mcore:[#1399]#2372])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"653([match_def@[k@[mcore:[#1407]#2378]#2383]#2384])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"654([match_def@[#2389]#2390])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"655([#2415])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"656([k@[switch case for Bool(true)#2404]#2409])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":651}]},
{"label":"657([switch case for Bool(true)#2404])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":656,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":652}]},
{"label":"658([switch default case#2417])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"659([k@[#2400]#2402])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[657],"default":658}]},
{"label":"660([switch case for Bool(true)#2422])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"661([switch case for Bool(false)#2426])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"662([switch default case#2429])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"663([switch default case#2425])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[661],"default":662}]},
{"label":"664([#2400])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (b@10027) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":659,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (b@10027) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[660],"default":663}]},
{"label":"665([switch case for Bool(true)#2430])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"9"},
{"op":"PrimOp","name":"(#1 <= #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(<=)(c, '9')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"666([switch default case#2434])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"667([match_std/core/types/Tuple2@[#2389]#2395])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"283\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"285\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val b@10027 : bool\n      = match ((std/core/char/(>=)(c, '0'))) {\n        ((std/core/types/True() : bool ) as @pat@3: bool)\n           -> std/core/char/(<=)(c, '9');\n        (@pat@0@1: bool)\n           -> std/core/types/False;\n      };\nmatch (b@10027) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"0"},
{"op":"PrimOp","name":"(#1 >= #2)","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Push","target":664,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@1: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val b@10027 : bool\n      = match ((std/core/char/(>=)(c, '0'))) {\n        ((std/core/types/True() : bool ) as @pat@3: bool)\n           -> std/core/char/(<=)(c, '9');\n        (@pat@0@1: bool)\n           -> std/core/types/False;\n      };\nmatch (b@10027) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"283\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"285\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[665],"default":666}]},
{"label":"668([#2389])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"283\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"283\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":667,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4468]","target":654,"args":{"any":[]}}}]},
{"label":"669([k@[mcore:[#1407]#2378]#2383])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":668,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4469]","target":653,"args":{"any":[]}}}]},
{"label":"670([mcore:[#1407]#2378])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":669,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":650}]},
{"label":"671([method_apply@[mcore:[#1409]#2437]#2442])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":670}]},
{"label":"672([mcore:[#1409]#2437])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"not a digit\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | val b@10027 : bool\n                 = (match ((std/core/char/(>=)(c, '0'))) {\n                   ((std/core/types/True() : bool ) as @pat@3: bool)\n                      -> std/core/char/(<=)(c, '9');\n                   (@pat@0@1: bool)\n                      -> std/core/types/False;\n                 });\n        (match (b@10027) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"not a digit\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"not a digit"},
{"op":"New","out":1,"targets":[671],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"not a digit\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"not a digit\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | val b@10027 : bool\n                 = (match ((std/core/char/(>=)(c, '0'))) {\n                   ((std/core/types/True() : bool ) as @pat@3: bool)\n                      -> std/core/char/(<=)(c, '9');\n                   (@pat@0@1: bool)\n                      -> std/core/types/False;\n                 });\n        (match (b@10027) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"673([mcore:[#1412]#2454])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"674([mcore:[#1417]#2459])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"675([mcore:[#1419]#2464])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"676([match_def@[k@[mcore:[#1427]#2470]#2475]#2476])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"677([match_def@[#2481]#2482])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"678([#2504])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"679([k@[switch case for Bool(true)#2493]#2498])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":674}]},
{"label":"680([switch case for Bool(true)#2493])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":679,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":675}]},
{"label":"681([switch default case#2506])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"682([#2491])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[680],"default":681}]},
{"label":"683([switch case for Bool(true)#2511])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"684([switch case for Bool(false)#2515])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"685([switch default case#2518])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"686([switch default case#2514])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[684],"default":685}]},
{"label":"687([match_std/core/types/Tuple2@[#2481]#2487])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"287\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"288\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"289\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val b@10031 : bool\n      = std/core/string/contains(chars, (std/core/string/char/string(c)));\nmatch (b@10031) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/string/contains"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: match (b@10031) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":682,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (b@10031) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val b@10031 : bool\n      = std/core/string/contains(chars, (std/core/string/char/string(c)));\nmatch (b@10031) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"287\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"288\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"289\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[683],"default":686}]},
{"label":"688([#2481])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"287\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"287\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":687,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4470]","target":677,"args":{"any":[]}}}]},
{"label":"689([k@[mcore:[#1427]#2470]#2475])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":688,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4471]","target":676,"args":{"any":[]}}}]},
{"label":"690([mcore:[#1427]#2470])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":689,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":673}]},
{"label":"691([method_apply@[mcore:[#1429]#2519]#2524])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":690}]},
{"label":"692([mcore:[#1429]#2519])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | val b@10031 : bool\n                 = std/core/string/contains(chars, (std/core/string/char/string(c)));\n        (match (b@10031) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"New","out":1,"targets":[691],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | val b@10031 : bool\n                 = std/core/string/contains(chars, (std/core/string/char/string(c)));\n        (match (b@10031) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"693([mcore:[#1430]#2536])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"694([switch case for Bool(true)#2544])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"695([switch case for Bool(false)#2548])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"696([switch default case#2551])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"697([switch default case#2547])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[695],"default":696}]},
{"label":"698([mcore:[#1436]#2541])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/contains"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[694],"default":697}]},
{"label":"699([mcore:[#1444]#2552])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"700([mcore:[#1446]#2557])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"701([mcore:[#1452]#2563])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"702([mcore:[#1454]#2568])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"703([mcore:[#1460]#2574])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"704([mcore:[#1462]#2579])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"705([method_apply@[mcore:[#1467]#2585]#2592])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":698}]},
{"label":"706([#2607])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"707([match_def@[#2608]#2609])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"708([k@[#2615]#2621])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"709([#2615])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":703}]},
{"label":"710([match_std/core/sslice/Sslice@[#2608]#2610])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":709,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":704}]},
{"label":"711([#2608])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":710,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4472]","target":707,"args":{"any":[]}}}]},
{"label":"712([match_def@[k@[mcore:[#1467]#2585]#2605]#2606])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":711,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4473]","target":706,"args":{"any":[]}}}]},
{"label":"713([match_def@[match_def@[#2623]#2624]#2625])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"714([match_def@[#2626]#2627])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"715([k@[#2633]#2639])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"716([#2633])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":701}]},
{"label":"717([match_std/core/sslice/Sslice@[#2626]#2628])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":716,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":702}]},
{"label":"718([#2626])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":717,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4474]","target":714,"args":{"any":[]}}}]},
{"label":"719([match_def@[#2623]#2624])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":718,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4475]","target":713,"args":{"any":[]}}}]},
{"label":"720([match_def@[#2642]#2643])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"721([#2645])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"722([k@[k@[#2646]#2651]#2657])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"723([k@[#2646]#2651])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":699}]},
{"label":"724([#2646])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":723,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":700}]},
{"label":"725([match_std/core/types/Tuple2@[#2642]#2644])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":724,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4476]","target":721,"args":{"any":[]}}}]},
{"label":"726([#2642])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":725,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4477]","target":720,"args":{"any":[]}}}]},
{"label":"727([#2659])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"291\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"292\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"293\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"293\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"294\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"294\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"295\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"295\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"291\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"292\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"293\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"293\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"294\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"294\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"295\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"295\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"728([match_std/core/types/Nil@[#2623]#2641])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"292\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"293\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"294\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"295\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"292\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"293\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"294\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"295\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":727,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4478]","target":726,"args":{"any":[]}}}]},
{"label":"729([#2623])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"291\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"291\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":728,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4479]","target":719,"args":{"any":[]}}}]},
{"label":"730([k@[mcore:[#1467]#2585]#2605])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":729,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4480]","target":712,"args":{"any":[]}}}]},
{"label":"731([mcore:[#1467]#2585])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, (fn(c: char){\n    val b@10034 : bool\n          = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n    (match (b@10034) {\n      ((std/core/types/True() : bool ) as @pat@9: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> std/core/types/True;\n    });\n  }), (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[705],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":730,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, (fn(c: char){\n    val b@10034 : bool\n          = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n    (match (b@10034) {\n      ((std/core/types/True() : bool ) as @pat@9: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> std/core/types/True;\n    });\n  }), (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"732([method_apply@[mcore:[#1470]#2664]#2669])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":731}]},
{"label":"733([k@[mcore:[#1470]#2664]#2685])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":693}]},
{"label":"734([mcore:[#1470]#2664])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, (fn(c: char){\n        val b@10034 : bool\n              = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n        (match (b@10034) {\n          ((std/core/types/True() : bool ) as @pat@9: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        });\n      }), (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, (fn(c: char){\n        val b@10034 : bool\n              = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n        (match (b@10034) {\n          ((std/core/types/True() : bool ) as @pat@9: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        });\n      }), (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"New","out":1,"targets":[732],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":733,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, (fn(c: char){\n        val b@10034 : bool\n              = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n        (match (b@10034) {\n          ((std/core/types/True() : bool ) as @pat@9: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        });\n      }), (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, (fn(c: char){\n        val b@10034 : bool\n              = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n        (match (b@10034) {\n          ((std/core/types/True() : bool ) as @pat@9: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        });\n      }), (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"735([mcore:[#1473]#2690])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"736([mcore:[#1478]#2695])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"737([mcore:[#1480]#2700])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"738([match_def@[k@[mcore:[#1488]#2706]#2711]#2712])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"739([match_def@[#2717]#2718])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"740([#2738])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"741([k@[switch case for Bool(true)#2727]#2732])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":736}]},
{"label":"742([switch case for Bool(true)#2727])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":741,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":737}]},
{"label":"743([switch default case#2740])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"744([match_std/core/types/Tuple2@[#2717]#2723])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"302\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"303\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"304\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/string/contains"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"302\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"303\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"304\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[742],"default":743}]},
{"label":"745([#2717])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"302\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"302\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":744,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4481]","target":739,"args":{"any":[]}}}]},
{"label":"746([k@[mcore:[#1488]#2706]#2711])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":745,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4482]","target":738,"args":{"any":[]}}}]},
{"label":"747([mcore:[#1488]#2706])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":746,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":735}]},
{"label":"748([method_apply@[mcore:[#1490]#2745]#2748])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":747}]},
{"label":"749([mcore:[#1490]#2745])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(chars, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(chars, (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[748],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(chars, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(chars, (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"750([mcore:[#1494]#2760])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/one-of(chars)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/one-of(chars)","traced":{"any":[]}},
{"op":"Jump","target":749}]},
{"label":"751([mcore:[#1496]#2770])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"752([method_apply@[mcore:[#1498]#2771]#2773])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":750}]},
{"label":"753([method_apply@[mcore:[#1498]#2771]#2786])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":751}]},
{"label":"754([mcore:[#1498]#2771])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/one-of(chars));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    default;\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[752],"args":{"any":[0]},"tags":["apply"]},
{"op":"New","out":1,"targets":[753],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/one-of(chars));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    default;\n  }))","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"755([mcore:[#1499]#2795])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"756([mcore:[#1505]#2801])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail0"}]},
{"label":"757([mcore:[#1508]#2806])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"758([mcore:[#1511]#2807])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"759([mcore:[#1513]#2812])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to-final"}]},
{"label":"760([mcore:[#1520]#2818])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)))","traced":{"any":[]}},
{"op":"Jump","target":1054}]},
{"label":"761([method_apply@[mcore:[#1522]#2821]#2824])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":760}]},
{"label":"762([mcore:[#1522]#2821])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[761],"args":{"any":[4,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":759}]},
{"label":"763([mcore:[#1525]#2830])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause0"}]},
{"label":"764([mcore:[#1527]#2835])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/yield-to"}]},
{"label":"765([mcore:[#1530]#2841])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/protect"}]},
{"label":"766([k@[#2857]#2859])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"767([match_def@[#2857]#2861])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"768([#2863])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"769([k@[#2864]#2866])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"770([#2864])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"312\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"314\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"315\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"316\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/ParseOk<a>(x2, rest2)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/ParseOk<a>(x2, rest2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"312\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"314\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"315\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"316\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1053}]},
{"label":"771([match_std/text/parse/ParseOk@[#2857]#2862])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":770,"args":{"any":[3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4483]","target":768,"args":{"any":[]}}}]},
{"label":"772([#2857])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":1,"clauses":[{"tag":"std/text/parse/ParseOk","target":771,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4484]","target":767,"args":{"any":[]}}}]},
{"label":"773([match_def@[k@[mcore:[#1556]#2848]#2852]#2853])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(err1,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _ : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\nmatch ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save)","traced":{"any":[]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Debug","msg":"BGN: genExpr: match ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":1,"value":false},
{"op":"Push","target":772,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _ : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\nmatch ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(err1,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0]}}]},
{"label":"774([k@[k@[match_def@[#2869]#2870]#2874]#2876])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"775([#2878])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"776([match_def@[#2879]#2880])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"777([#2883])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"778([match_std/core/sslice/Sslice@[#2879]#2881])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"312\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"314\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"315\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"316\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/ParseOk<a>(x2, rest2)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/ParseOk<a>(x2, rest2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"312\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"314\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"315\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"316\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1053}]},
{"label":"779([#2879])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":778,"args":{"any":[3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4485]","target":776,"args":{"any":[]}}}]},
{"label":"780([k@[match_def@[#2869]#2870]#2874])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":1,"clauses":[{"tag":"std/text/parse/ParseOk","target":779,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4486]","target":775,"args":{"any":[]}}}]},
{"label":"781([match_def@[#2869]#2870])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(err1,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _ : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\nmatch ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save)","traced":{"any":[]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[3,5]}},
{"op":"Debug","msg":"BGN: genExpr: match ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Push","target":780,"args":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/False)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _ : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\nmatch ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(err1,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Invoke","receiver":4,"tag":"apply","args":{"any":[0]}}]},
{"label":"782([#2887])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"783([match_std/core/sslice/Sslice@[#2869]#2885])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"306\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"307\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"308\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"308\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"309\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"309\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"310\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"310\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/ParseOk<a>(x1, rest1)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/ParseOk<a>(x1, rest1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"306\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"307\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"308\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"308\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"309\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"309\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"310\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"310\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1053}]},
{"label":"784([#2869])",
"frameDescriptor":{"regs_any":9},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"307\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"308\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"309\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"310\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":5},
{"op":"Swap","a":2,"b":5},
{"op":"Swap","a":4,"b":5},
{"op":"Swap","a":1,"b":5},
{"op":"Swap","a":3,"b":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"307\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"308\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"309\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"310\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":783,"args":{"any":[6,7,8]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4487]","target":781,"args":{"any":[]}}}]},
{"label":"785([k@[mcore:[#1556]#2848]#2852])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseOk","target":784,"args":{"any":[4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4488]","target":773,"args":{"any":[]}}}]},
{"label":"786([mcore:[#1556]#2848])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"save\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: r(std/core/types/True)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":3,"value":true},
{"op":"Push","target":785,"args":{"any":[2,1,0]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: r(std/core/types/True)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"save\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"787([method_apply@[mcore:[#1559]#2889]#2895])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Jump","target":786}]},
{"label":"788([mcore:[#1559]#2889])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    val save : sslice/sslice\n          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    (match ((r(std/core/types/True))) {\n      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n         -> std/text/parse/ParseOk<a>(x1, rest1);\n      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n         -> val _ : ()\n                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n        (match ((r(std/core/types/False))) {\n          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> std/text/parse/ParseOk<a>(x2, rest2);\n          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> err1;\n        });\n    });\n  }), k)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":1,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"New","out":2,"targets":[787],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    val save : sslice/sslice\n          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    (match ((r(std/core/types/True))) {\n      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n         -> std/text/parse/ParseOk<a>(x1, rest1);\n      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n         -> val _ : ()\n                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n        (match ((r(std/core/types/False))) {\n          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> std/text/parse/ParseOk<a>(x2, rest2);\n          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> err1;\n        });\n    });\n  }), k)","traced":{"any":[]}},
{"op":"Jump","target":765}]},
{"label":"789([method_apply@[mcore:[#1561]#2901]#2904])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":788}]},
{"label":"790([mcore:[#1561]#2901])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        val save : sslice/sslice\n              = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        (match ((r(std/core/types/True))) {\n          ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> std/text/parse/ParseOk<a>(x1, rest1);\n          (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> val _ : ()\n                      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n            (match ((r(std/core/types/False))) {\n              ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> std/text/parse/ParseOk<a>(x2, rest2);\n              (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> err1;\n            });\n        });\n      }), k));\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[789],"args":{"any":[3]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        val save : sslice/sslice\n              = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        (match ((r(std/core/types/True))) {\n          ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> std/text/parse/ParseOk<a>(x1, rest1);\n          (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> val _ : ()\n                      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n            (match ((r(std/core/types/False))) {\n              ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> std/text/parse/ParseOk<a>(x2, rest2);\n              (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> err1;\n            });\n        });\n      }), k));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":764}]},
{"label":"791([mcore:[#1564]#2913])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail1"}]},
{"label":"792([mcore:[#1573]#2918])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"793([#2927])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"794([#2928])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"795([match_def@[k@[mcore:[#1579]#2923]#2925]#2926])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":794,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4489]","target":793,"args":{"any":[]}}}]},
{"label":"796([match_def@[match_def@[#2933]#2934]#2935])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"797([#2936])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"798([match_def@[#2933]#2934])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":797,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4490]","target":796,"args":{"any":[]}}}]},
{"label":"799([match_def@[#2942]#2943])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"800([match_std/core/types/Nothing@[#2942]#2944])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<a>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"801([#2942])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":2,"clauses":[{"tag":"std/core/types/Nothing","target":800,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4491]","target":799,"args":{"any":[]}}}]},
{"label":"802([k@[#2949]#2954])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"803([#2949])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"318\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 2404) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"319\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cap,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"320\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@10,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"321\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@10: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"321\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@11,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"322\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@11: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"322\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@12,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"323\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@12: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"323\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val _@0 : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\nstd/core/types/Just<a>(x@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap)","traced":{"any":[]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[1]},"in":{"any":[3,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<a>(x@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<a>(x@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val _@0 : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\nstd/core/types/Just<a>(x@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"318\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 2404) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"319\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cap,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"320\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@10,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"321\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@10: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"321\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@11,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"322\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@11: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"322\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@12,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"323\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@12: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"323\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":792}]},
{"label":"804([match_std/core/types/Tuple2@[#2933]#2941])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"320\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"321\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"322\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"323\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"320\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"321\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"322\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"323\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":803,"args":{"any":[4,5,6]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4492]","target":801,"args":{"any":[]}}}]},
{"label":"805([#2933])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"318\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"318\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":2,"clauses":[{"tag":"std/core/types/Tuple2","target":804,"args":{"any":[2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4493]","target":798,"args":{"any":[]}}}]},
{"label":"806([k@[mcore:[#1579]#2923]#2925])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":805,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4494]","target":795,"args":{"any":[]}}}]},
{"label":"807([mcore:[#1579]#2923])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"inp\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[1]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: pred(inp)","traced":{"any":[]}},
{"op":"Push","target":806,"args":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: pred(inp)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"inp\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"808([mcore:[#1587]#2956])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)))","traced":{"any":[]}},
{"op":"Jump","target":1053}]},
{"label":"809([method_apply@[mcore:[#1590]#2958]#2962])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":757}]},
{"label":"810([#2975])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":4},
{"op":"Jump","target":762}]},
{"label":"811([#2990])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":3},
{"op":"Jump","target":790}]},
{"label":"812([method_apply@[#3000]#3004])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":807}]},
{"label":"813([method_apply@[k@[k@[#3000]#3014]#3017]#3021])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":808}]},
{"label":"814([k@[k@[#3000]#3014]#3017])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":1,"targets":[813],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":40}]},
{"label":"815([k@[#3000]#3014])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":814,"args":{"any":[1,2]}},
{"op":"Copy","from":5,"to":2},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":0,"to":4},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":6,"to":3},
{"op":"Jump","target":1052}]},
{"label":"816([#3000])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n  val inp : sslice/sslice\n        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  (match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  });\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(2404, sslice/sslice)>){\n  val inp : sslice/sslice\n        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  (match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: 2404) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  });\n}))","traced":{"any":[]}},
{"op":"New","out":6,"targets":[812],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Push","target":815,"args":{"any":[1,2,3,4,5,0]}},
{"op":"Copy","from":7,"to":1},
{"op":"Copy","from":6,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(2404, sslice/sslice)>){\n  val inp : sslice/sslice\n        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  (match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: 2404) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  });\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n  val inp : sslice/sslice\n        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  (match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  });\n}))","traced":{"any":[]}},
{"op":"Jump","target":791}]},
{"label":"817([k@[k@[mcore:[#1590]#2958]#2969]#2985])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          val save : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((r(std/core/types/True))) {\n            ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> std/text/parse/ParseOk<a>(x1, rest1);\n            (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> val _ : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n              (match ((r(std/core/types/False))) {\n                ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x2, rest2);\n                (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> err1;\n              });\n          });\n        }), k));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":5,"targets":[811],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":816,"args":{"any":[1,2,3,4,0]}},
{"op":"Copy","from":5,"to":0},
{"op":"Copy","from":6,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          val save : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((r(std/core/types/True))) {\n            ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> std/text/parse/ParseOk<a>(x1, rest1);\n            (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> val _ : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n              (match ((r(std/core/types/False))) {\n                ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x2, rest2);\n                (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> err1;\n              });\n          });\n        }), k));\n    })));\n}))","traced":{"any":[]}},
{"op":"Jump","target":763}]},
{"label":"818([k@[mcore:[#1590]#2958]#2969])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    })));\n}))","traced":{"any":[]}},
{"op":"New","out":4,"targets":[810],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":817,"args":{"any":[1,2,3,0]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    })));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    })));\n}))","traced":{"any":[]}},
{"op":"Jump","target":758}]},
{"label":"819([mcore:[#1590]#2958])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n      (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n      (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        })));\n    }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              val save : sslice/sslice\n                    = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n              (match ((r(std/core/types/True))) {\n                ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x1, rest1);\n                (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> val _ : ()\n                            = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                  (match ((r(std/core/types/False))) {\n                    ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> std/text/parse/ParseOk<a>(x2, rest2);\n                    (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> err1;\n                  });\n              });\n            }), k));\n        })));\n    }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n      val inp : sslice/sslice\n            = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n      (match ((pred(inp))) {\n        ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n           -> val _@0 : ()\n                    = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n          std/core/types/Just<a>(x@0);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n           -> std/core/types/Nothing<a>;\n      });\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n    (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n  }), p)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n    (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n      })));\n  }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n            val save : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((r(std/core/types/True))) {\n              ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> std/text/parse/ParseOk<a>(x1, rest1);\n              (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> val _ : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                (match ((r(std/core/types/False))) {\n                  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> std/text/parse/ParseOk<a>(x2, rest2);\n                  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> err1;\n                });\n            });\n          }), k));\n      })));\n  }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n    val inp : sslice/sslice\n          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    (match ((pred(inp))) {\n      ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n         -> val _@0 : ()\n                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n        std/core/types/Just<a>(x@0);\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n         -> std/core/types/Nothing<a>;\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 3","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":3},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[809],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":818,"args":{"any":[0,3,1]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 3","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n    (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n      })));\n  }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n            val save : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((r(std/core/types/True))) {\n              ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> std/text/parse/ParseOk<a>(x1, rest1);\n              (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> val _ : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                (match ((r(std/core/types/False))) {\n                  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> std/text/parse/ParseOk<a>(x2, rest2);\n                  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> err1;\n                });\n            });\n          }), k));\n      })));\n  }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n    val inp : sslice/sslice\n          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    (match ((pred(inp))) {\n      ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n         -> val _@0 : ()\n                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n        std/core/types/Just<a>(x@0);\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n         -> std/core/types/Nothing<a>;\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n      (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n      (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        })));\n    }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              val save : sslice/sslice\n                    = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n              (match ((r(std/core/types/True))) {\n                ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x1, rest1);\n                (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> val _ : ()\n                            = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                  (match ((r(std/core/types/False))) {\n                    ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> std/text/parse/ParseOk<a>(x2, rest2);\n                    (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> err1;\n                  });\n              });\n            }), k));\n        })));\n    }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n      val inp : sslice/sslice\n            = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n      (match ((pred(inp))) {\n        ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n           -> val _@0 : ()\n                    = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n          std/core/types/Just<a>(x@0);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n           -> std/core/types/Nothing<a>;\n      });\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n    (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n  }), p)","traced":{"any":[]}},
{"op":"Jump","target":756}]},
{"label":"820([method_apply@[mcore:[#1592]#3031]#3034])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":819}]},
{"label":"821([mcore:[#1592]#3031])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(2440 :: H),sslice/sslice>){\n    (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n          (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n            })));\n        }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                  val save : sslice/sslice\n                        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                  (match ((r(std/core/types/True))) {\n                    ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> std/text/parse/ParseOk<a>(x1, rest1);\n                    (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> val _ : ()\n                                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                      (match ((r(std/core/types/False))) {\n                        ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                           -> std/text/parse/ParseOk<a>(x2, rest2);\n                        (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                           -> err1;\n                      });\n                  });\n                }), k));\n            })));\n        }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n          val inp : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((pred(inp))) {\n            ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n               -> val _@0 : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n              std/core/types/Just<a>(x@0);\n            ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n               -> std/core/types/Nothing<a>;\n          });\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n        (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n      }), p));\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[820],"args":{"any":[3]},"tags":["apply"]},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(2440 :: H),sslice/sslice>){\n    (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n          (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n            })));\n        }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                  val save : sslice/sslice\n                        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                  (match ((r(std/core/types/True))) {\n                    ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> std/text/parse/ParseOk<a>(x1, rest1);\n                    (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> val _ : ()\n                                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                      (match ((r(std/core/types/False))) {\n                        ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                           -> std/text/parse/ParseOk<a>(x2, rest2);\n                        (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                           -> err1;\n                      });\n                  });\n                }), k));\n            })));\n        }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n          val inp : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((pred(inp))) {\n            ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n               -> val _@0 : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n              std/core/types/Just<a>(x@0);\n            ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n               -> std/core/types/Nothing<a>;\n          });\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n        (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n      }), p));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":755}]},
{"label":"822([mcore:[#1594]#3049])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(h :: H),sslice/sslice>){\n      (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n            (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n              })));\n          }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n            (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                    val save : sslice/sslice\n                          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                    (match ((r(std/core/types/True))) {\n                      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> std/text/parse/ParseOk<a>(x1, rest1);\n                      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> val _ : ()\n                                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                        (match ((r(std/core/types/False))) {\n                          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> std/text/parse/ParseOk<a>(x2, rest2);\n                          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> err1;\n                        });\n                    });\n                  }), k));\n              })));\n          }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n            val inp : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((pred(inp))) {\n              ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> val _@0 : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n                std/core/types/Just<a>(x@0);\n              ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> std/core/types/Nothing<a>;\n            });\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n          (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        }), p));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(h :: H),sslice/sslice>){\n      (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n            (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n              })));\n          }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n            (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                    val save : sslice/sslice\n                          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                    (match ((r(std/core/types/True))) {\n                      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> std/text/parse/ParseOk<a>(x1, rest1);\n                      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> val _ : ()\n                                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                        (match ((r(std/core/types/False))) {\n                          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> std/text/parse/ParseOk<a>(x2, rest2);\n                          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> err1;\n                        });\n                    });\n                  }), k));\n              })));\n          }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n            val inp : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((pred(inp))) {\n              ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> val _@0 : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n                std/core/types/Just<a>(x@0);\n              ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> std/core/types/Nothing<a>;\n            });\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n          (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        }), p));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":821}]},
{"label":"823([mcore:[#1598]#3059])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-at0"}]},
{"label":"824([mcore:[#1600]#3065])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/@evv-index"}]},
{"label":"825([#3083])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":565}]},
{"label":"826([#3096])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"827([k@[k@[mcore:[#1605]#3070]#3072]#3080])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[825],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":826,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":823}]},
{"label":"828([k@[mcore:[#1605]#3070]#3072])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-at0<(),(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), std/text/parse/eof)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":827,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-at0<(),(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), std/text/parse/eof)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Jump","target":824}]},
{"label":"829([mcore:[#1605]#3070])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: p()","traced":{"any":[]}},
{"op":"Push","target":828,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: p()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[]}}]},
{"label":"830([method_apply@[mcore:[#1607]#3097]#3099])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":829}]},
{"label":"831([mcore:[#1607]#3097])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/parse<a,(e :: E)>(input, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    val x : a;\n    val _ : ();\n    x;\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[830],"args":{"any":[1]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/parse<a,(e :: E)>(input, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    val x : a;\n    val _ : ();\n    x;\n  }))","traced":{"any":[]}},
{"op":"Jump","target":822}]},
{"label":"832([mcore:[#1608]#3120])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/parse-int"}]},
{"label":"833([mcore:[#1610]#3126])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"834([mcore:[#1616]#3131])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-digit"}]},
{"label":"835([mcore:[#1624]#3136])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"836([mcore:[#1626]#3141])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"837([mcore:[#1632]#3147])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"838([mcore:[#1634]#3152])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"839([mcore:[#1640]#3158])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"840([mcore:[#1642]#3163])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"841([method_apply@[mcore:[#1647]#3169]#3176])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":834}]},
{"label":"842([#3194])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"843([match_def@[#3195]#3196])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"844([k@[#3202]#3208])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"845([#3202])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":839}]},
{"label":"846([match_std/core/sslice/Sslice@[#3195]#3197])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":845,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":840}]},
{"label":"847([#3195])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":846,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4495]","target":843,"args":{"any":[]}}}]},
{"label":"848([match_def@[k@[mcore:[#1647]#3169]#3192]#3193])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":847,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4496]","target":842,"args":{"any":[]}}}]},
{"label":"849([match_def@[match_def@[#3210]#3211]#3212])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"850([match_def@[#3213]#3214])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"851([k@[#3220]#3226])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"852([#3220])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":837}]},
{"label":"853([match_std/core/sslice/Sslice@[#3213]#3215])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":852,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":838}]},
{"label":"854([#3213])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":853,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4497]","target":850,"args":{"any":[]}}}]},
{"label":"855([match_def@[#3210]#3211])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":854,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4498]","target":849,"args":{"any":[]}}}]},
{"label":"856([match_def@[#3229]#3230])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"857([#3232])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"858([k@[k@[#3233]#3238]#3244])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"859([k@[#3233]#3238])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":835}]},
{"label":"860([#3233])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":859,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":836}]},
{"label":"861([match_std/core/types/Tuple2@[#3229]#3231])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":860,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4499]","target":857,"args":{"any":[]}}}]},
{"label":"862([#3229])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":861,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4500]","target":856,"args":{"any":[]}}}]},
{"label":"863([#3246])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"325\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"329\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"325\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"329\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"864([match_std/core/types/Nil@[#3210]#3228])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":863,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4501]","target":862,"args":{"any":[]}}}]},
{"label":"865([#3210])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"325\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"325\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":864,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4502]","target":855,"args":{"any":[]}}}]},
{"label":"866([k@[mcore:[#1647]#3169]#3192])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":865,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4503]","target":848,"args":{"any":[]}}}]},
{"label":"867([mcore:[#1647]#3169])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[841],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":866,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"868([mcore:[#1653]#3251])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/@open-none2"}]},
{"label":"869([#3260])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"870([#3261])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"324\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"324\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"871([match_def@[mcore:[#1655]#3258]#3259])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":870,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4504]","target":869,"args":{"any":[]}}}]},
{"label":"872([#3262])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"873([mcore:[#1655]#3258])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":872,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4505]","target":871,"args":{"any":[]}}}]},
{"label":"874([method_apply@[mcore:[#1659]#3263]#3268])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":867}]},
{"label":"875([method_apply@[#3303]#3309])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":873}]},
{"label":"876([#3303])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none2<(maybe :: V -> V)<int>,int,int,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(m: (maybe :: V -> V)<int>, nothing: int){\n    (match (m) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n         -> nothing;\n      ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n         -> x;\n    });\n  }), @x-x1@10080, 0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"New","out":2,"targets":[875],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none2<(maybe :: V -> V)<int>,int,int,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(m: (maybe :: V -> V)<int>, nothing: int){\n    (match (m) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n         -> nothing;\n      ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n         -> x;\n    });\n  }), @x-x1@10080, 0)","traced":{"any":[]}},
{"op":"Jump","target":868}]},
{"label":"877([k@[k@[mcore:[#1659]#3263]#3287]#3293])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":876,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":832}]},
{"label":"878([k@[mcore:[#1659]#3263]#3287])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":877,"args":{"any":[]}},
{"op":"Jump","target":833}]},
{"label":"879([mcore:[#1659]#3263])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10080\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/parse-int((std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))))), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"digit"},
{"op":"New","out":1,"targets":[874],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":878,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"digit\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/parse-int((std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))))), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10080\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"880([mcore:[#1663]#3315])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"881([mcore:[#1668]#3320])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"882([mcore:[#1670]#3325])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"883([match_def@[k@[mcore:[#1678]#3331]#3336]#3337])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"884([match_def@[#3342]#3343])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"885([#3363])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"886([k@[switch case for Bool(true)#3352]#3357])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":881}]},
{"label":"887([switch case for Bool(true)#3352])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":886,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":882}]},
{"label":"888([switch default case#3365])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"889([match_std/core/types/Tuple2@[#3342]#3348])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/contains(\"+-\", (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/string/contains"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/contains(\"+-\", (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[887],"default":888}]},
{"label":"890([#3342])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":889,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4506]","target":884,"args":{"any":[]}}}]},
{"label":"891([k@[mcore:[#1678]#3331]#3336])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":890,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4507]","target":883,"args":{"any":[]}}}]},
{"label":"892([mcore:[#1678]#3331])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":891,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":880}]},
{"label":"893([method_apply@[mcore:[#1680]#3370]#3375])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":892}]},
{"label":"894([mcore:[#1680]#3370])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"+-\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"+-"},
{"op":"New","out":1,"targets":[893],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"+-\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"895([mcore:[#1682]#3387])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"+"},
{"op":"Return","args":{"any":[0]}}]},
{"label":"896([method_apply@[mcore:[#1685]#3389]#3391])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":894}]},
{"label":"897([method_apply@[mcore:[#1685]#3389]#3404])",
"frameDescriptor":{"regs_any":0},
"instructions":[{"op":"Jump","target":895}]},
{"label":"898([k@[mcore:[#1685]#3389]#3414])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"-"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"899([mcore:[#1685]#3389])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"c@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n        (match ((std/core/sslice/next(slice))) {\n          ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n          (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             -> std/core/types/Nothing<(char, sslice/sslice)>;\n        });\n      })));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    '+';\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[896],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[897],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":898,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n        (match ((std/core/sslice/next(slice))) {\n          ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n          (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             -> std/core/types/Nothing<(char, sslice/sslice)>;\n        });\n      })));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    '+';\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"c@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"900([mcore:[#1689]#3417])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"901([mcore:[#1694]#3422])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"902([mcore:[#1696]#3427])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"903([match_def@[k@[mcore:[#1704]#3433]#3438]#3439])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"904([match_def@[#3444]#3445])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"905([#3465])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"906([k@[switch case for Bool(true)#3454]#3459])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":901}]},
{"label":"907([switch case for Bool(true)#3454])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":906,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":902}]},
{"label":"908([switch default case#3467])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"909([match_std/core/types/Tuple2@[#3444]#3450])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/contains(\"+-\", (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Undefined:  std/core/string/contains"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/contains(\"+-\", (std/core/string/char/string(c)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[907],"default":908}]},
{"label":"910([#3444])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":909,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4508]","target":904,"args":{"any":[]}}}]},
{"label":"911([k@[mcore:[#1704]#3433]#3438])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":910,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4509]","target":903,"args":{"any":[]}}}]},
{"label":"912([mcore:[#1704]#3433])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":911,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":900}]},
{"label":"913([method_apply@[mcore:[#1706]#3472]#3477])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":912}]},
{"label":"914([mcore:[#1706]#3472])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"+-\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"+-"},
{"op":"New","out":1,"targets":[913],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"+-\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"915([mcore:[#1708]#3489])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"+"},
{"op":"Return","args":{"any":[0]}}]},
{"label":"916([method_apply@[mcore:[#1712]#3491]#3493])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":914}]},
{"label":"917([method_apply@[mcore:[#1712]#3491]#3506])",
"frameDescriptor":{"regs_any":0},
"instructions":[{"op":"Jump","target":915}]},
{"label":"918([switch case for Bool(true)#3542])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(~)(i)","traced":{"any":[]}},
{"op":"PrimOp","name":"neg(Int): Int","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(~)(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"919([switch case for Bool(false)#3545])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"920([switch default case#3546])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"921([switch default case#3544])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[919],"default":920}]},
{"label":"922([k@[k@[mcore:[#1712]#3491]#3516]#3541])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[918],"default":921}]},
{"label":"923([k@[mcore:[#1712]#3491]#3516])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/(==)(c@0, '-')","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"-"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/pnat()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Push","target":922,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Copy","from":7,"to":6},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/pnat()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/(==)(c@0, '-')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Jump","target":879}]},
{"label":"924([mcore:[#1712]#3491])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6,7]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"c@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n        (match ((std/core/sslice/next(slice))) {\n          ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n          (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             -> std/core/types/Nothing<(char, sslice/sslice)>;\n        });\n      })));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    '+';\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[916],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[917],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":923,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n        (match ((std/core/sslice/next(slice))) {\n          ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n          (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             -> std/core/types/Nothing<(char, sslice/sslice)>;\n        });\n      })));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    '+';\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"c@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"925([mcore:[#1717]#3547])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/list"}]},
{"label":"926([mcore:[#1722]#3552])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"927([mcore:[#1724]#3557])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"928([match_def@[#3578]#3579])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"929([match_std/core/types/Nothing@[#3578]#3580])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(string, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(string, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"930([#3578])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":929,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4510]","target":928,"args":{"any":[]}}}]},
{"label":"931([match_def@[match_def@[#3585]#3586]#3587])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"932([#3588])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(string, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(string, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"933([match_def@[#3585]#3586])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":932,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4511]","target":931,"args":{"any":[]}}}]},
{"label":"934([k@[#3598]#3604])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"935([#3598])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":926}]},
{"label":"936([match_std/core/sslice/Sslice@[#3585]#3593])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"329\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,sslice/sslice>(s, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":935,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,sslice/sslice>(s, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"329\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":927}]},
{"label":"937([#3585])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":936,"args":{"any":[3,4,5]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4512]","target":933,"args":{"any":[]}}}]},
{"label":"938([k@[k@[mcore:[#1731]#3563]#3568]#3577])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":937,"args":{"any":[2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4513]","target":930,"args":{"any":[]}}}]},
{"label":"939([k@[mcore:[#1731]#3563]#3568])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":938,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Jump","target":649}]},
{"label":"940([mcore:[#1731]#3563])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-match(slice, (std/core/string/list(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/list(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":939,"args":{"any":[4,0]}},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/list(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-match(slice, (std/core/string/list(s)))","traced":{"any":[]}},
{"op":"Jump","target":925}]},
{"label":"941([method_apply@[mcore:[#1733]#3606]#3609])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Jump","target":940}]},
{"label":"942([mcore:[#1733]#3606])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<string>(s, (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-match(slice, (std/core/string/list(s))))) {\n      ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n         -> std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)));\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3: ((maybe :: V -> V)<sslice/sslice>))\n         -> std/core/types/Nothing<(string, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"New","out":1,"targets":[941],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<string>(s, (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-match(slice, (std/core/string/list(s))))) {\n      ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n         -> std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)));\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3: ((maybe :: V -> V)<sslice/sslice>))\n         -> std/core/types/Nothing<(string, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"943([mcore:[#1735]#3624])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"944([mcore:[#1743]#3631])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"945([mcore:[#1745]#3636])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"946([#3665])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(a, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(a, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"947([match_def@[#3670]#3671])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(a, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(a, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"948([k@[#3681]#3687])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"949([#3681])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":944}]},
{"label":"950([match_std/core/sslice/Sslice@[#3670]#3676])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2665) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"333\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"335\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"335\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(a, sslice/sslice)>((std/core/types/Tuple2<a,sslice/sslice>(x, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<a,sslice/sslice>(x, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":949,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<a,sslice/sslice>(x, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(a, sslice/sslice)>((std/core/types/Tuple2<a,sslice/sslice>(x, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2665) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"333\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"335\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"335\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":945}]},
{"label":"951([#3670])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"333\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"334\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"335\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"333\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"334\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"335\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":950,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4514]","target":947,"args":{"any":[]}}}]},
{"label":"952([k@[k@[mcore:[#1752]#3642]#3652]#3664])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/text/parse/parse-error","scrutinee":0,"clauses":[{"tag":"std/text/parse/ParseOk","target":951,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4515]","target":946,"args":{"any":[]}}}]},
{"label":"953([k@[mcore:[#1752]#3642]#3652])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":952,"args":{"any":[]}},
{"op":"Jump","target":822}]},
{"label":"954([mcore:[#1752]#3642])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/parse<a,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), p)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":953,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/parse<a,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), p)","traced":{"any":[]}},
{"op":"Jump","target":943}]},
{"label":"955([mcore:[#1755]#3689])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/next"}]},
{"label":"956([mcore:[#1759]#3694])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-white"}]},
{"label":"957([mcore:[#1763]#3699])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"958([mcore:[#1765]#3704])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"959([match_def@[k@[mcore:[#1773]#3710]#3715]#3716])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"960([match_def@[#3721]#3722])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"961([#3745])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"962([k@[switch case for Bool(true)#3734]#3739])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":957}]},
{"label":"963([switch case for Bool(true)#3734])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":962,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))","traced":{"any":[]}},
{"op":"Jump","target":958}]},
{"label":"964([switch default case#3747])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<(char, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"965([#3732])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Switch","arg":2,"values":[true],"targets":[963],"default":964}]},
{"label":"966([match_std/core/types/Tuple2@[#3721]#3727])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"337\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"338\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"339\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/is-white(c)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":965,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/is-white(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"337\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"338\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"339\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":956}]},
{"label":"967([#3721])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"337\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"337\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":966,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4516]","target":960,"args":{"any":[]}}}]},
{"label":"968([k@[mcore:[#1773]#3710]#3715])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":967,"args":{"any":[0]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4517]","target":959,"args":{"any":[]}}}]},
{"label":"969([mcore:[#1773]#3710])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":968,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/next(slice)","traced":{"any":[]}},
{"op":"Jump","target":955}]},
{"label":"970([method_apply@[mcore:[#1775]#3752]#3757])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":969}]},
{"label":"971([mcore:[#1775]#3752])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-white(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"New","out":1,"targets":[970],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-white(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"972([mcore:[#1776]#3772])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"973([mcore:[#1782]#3777])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-white"}]},
{"label":"974([mcore:[#1790]#3782])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"975([mcore:[#1792]#3787])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"976([mcore:[#1798]#3793])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"977([mcore:[#1800]#3798])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"978([mcore:[#1806]#3804])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"979([mcore:[#1808]#3809])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"980([method_apply@[mcore:[#1813]#3815]#3822])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":973}]},
{"label":"981([#3840])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"982([match_def@[#3841]#3842])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"983([k@[#3848]#3854])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"984([#3848])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":978}]},
{"label":"985([match_std/core/sslice/Sslice@[#3841]#3843])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":984,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":979}]},
{"label":"986([#3841])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":985,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4518]","target":982,"args":{"any":[]}}}]},
{"label":"987([match_def@[k@[mcore:[#1813]#3815]#3838]#3839])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":986,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4519]","target":981,"args":{"any":[]}}}]},
{"label":"988([match_def@[match_def@[#3856]#3857]#3858])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"989([match_def@[#3859]#3860])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"990([k@[#3866]#3872])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"991([#3866])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":976}]},
{"label":"992([match_std/core/sslice/Sslice@[#3859]#3861])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":991,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":977}]},
{"label":"993([#3859])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":992,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4520]","target":989,"args":{"any":[]}}}]},
{"label":"994([match_def@[#3856]#3857])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":993,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4521]","target":988,"args":{"any":[]}}}]},
{"label":"995([match_def@[#3875]#3876])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"996([#3878])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"997([k@[k@[#3879]#3884]#3890])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"998([k@[#3879]#3884])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":974}]},
{"label":"999([#3879])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":998,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":975}]},
{"label":"1000([match_std/core/types/Tuple2@[#3875]#3877])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":999,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4522]","target":996,"args":{"any":[]}}}]},
{"label":"1001([#3875])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":1000,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4523]","target":995,"args":{"any":[]}}}]},
{"label":"1002([#3892])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"341\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"342\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"343\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"343\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"344\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"344\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"345\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"345\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"341\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"342\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"343\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"343\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"344\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"344\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"345\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"345\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1003([match_std/core/types/Nil@[#3856]#3874])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"342\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"343\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"344\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"345\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"342\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"343\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"344\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"345\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":1002,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4524]","target":1001,"args":{"any":[]}}}]},
{"label":"1004([#3856])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"341\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"341\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":1003,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4525]","target":994,"args":{"any":[]}}}]},
{"label":"1005([k@[mcore:[#1813]#3815]#3838])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":1004,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4526]","target":987,"args":{"any":[]}}}]},
{"label":"1006([mcore:[#1813]#3815])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[980],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":1005,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"1007([method_apply@[mcore:[#1816]#3897]#3902])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":1006}]},
{"label":"1008([k@[mcore:[#1816]#3897]#3921])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":972}]},
{"label":"1009([mcore:[#1816]#3897])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"New","out":1,"targets":[1007],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1008,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"1010([mcore:[#1818]#3926])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/listchar/string"}]},
{"label":"1011([mcore:[#1824]#3931])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-white"}]},
{"label":"1012([mcore:[#1832]#3936])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"1013([mcore:[#1834]#3941])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"1014([mcore:[#1840]#3947])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"1015([mcore:[#1842]#3952])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"1016([mcore:[#1848]#3958])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"1017([mcore:[#1850]#3963])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"1018([method_apply@[mcore:[#1855]#3969]#3976])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":1011}]},
{"label":"1019([#3994])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1020([match_def@[#3995]#3996])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1021([k@[#4002]#4008])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1022([#4002])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":1016}]},
{"label":"1023([match_std/core/sslice/Sslice@[#3995]#3997])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1022,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1017}]},
{"label":"1024([#3995])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":1023,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4527]","target":1020,"args":{"any":[]}}}]},
{"label":"1025([match_def@[k@[mcore:[#1855]#3969]#3992]#3993])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":1024,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4528]","target":1019,"args":{"any":[]}}}]},
{"label":"1026([match_def@[match_def@[#4010]#4011]#4012])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1027([match_def@[#4013]#4014])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1028([k@[#4020]#4026])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1029([#4020])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":1014}]},
{"label":"1030([match_std/core/sslice/Sslice@[#4013]#4015])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1029,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1015}]},
{"label":"1031([#4013])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":1030,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4529]","target":1027,"args":{"any":[]}}}]},
{"label":"1032([match_def@[#4010]#4011])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":1,"clauses":[{"tag":"std/core/types/Tuple2","target":1031,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4530]","target":1026,"args":{"any":[]}}}]},
{"label":"1033([match_def@[#4029]#4030])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1034([#4032])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1035([k@[k@[#4033]#4038]#4044])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1036([k@[#4033]#4038])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":1012}]},
{"label":"1037([#4033])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1036,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1013}]},
{"label":"1038([match_std/core/types/Tuple2@[#4029]#4031])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":1037,"args":{"any":[2,3,4]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4531]","target":1034,"args":{"any":[]}}}]},
{"label":"1039([#4029])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":1038,"args":{"any":[0,1]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4532]","target":1033,"args":{"any":[]}}}]},
{"label":"1040([#4046])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"352\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"353\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"354\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"354\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"355\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"355\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"356\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"356\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"352\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"353\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"354\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"354\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"355\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"355\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"356\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"356\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1041([match_std/core/types/Nil@[#4010]#4028])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"353\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"354\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"355\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"356\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"353\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"354\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"355\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"356\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":1040,"args":{"any":[1,2,3]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4533]","target":1039,"args":{"any":[]}}}]},
{"label":"1042([#4010])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"352\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"352\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Nil","target":1041,"args":{"any":[]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4534]","target":1032,"args":{"any":[]}}}]},
{"label":"1043([k@[mcore:[#1855]#3969]#3992])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":1042,"args":{"any":[1,2]}}],"default":{"tag":"f926e3f3-ff44-4632-a85a-73cb23c0a19c#[Missing Tag#4535]","target":1025,"args":{"any":[]}}}]},
{"label":"1044([mcore:[#1855]#3969])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[1018],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":1043,"args":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":228}]},
{"label":"1045([method_apply@[mcore:[#1858]#4051]#4056])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":1044}]},
{"label":"1046([k@[mcore:[#1858]#4051]#4075])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":1010}]},
{"label":"1047([mcore:[#1858]#4051])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"New","out":1,"targets":[1045],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1046,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))","traced":{"any":[]}},
{"op":"Jump","target":132}]},
{"label":"1048([mcore:[#1860]#4080])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1049([method_apply@[mcore:[#1862]#4082]#4084])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Jump","target":1047}]},
{"label":"1050([method_apply@[mcore:[#1862]#4082]#4106])",
"frameDescriptor":{"regs_any":0},
"instructions":[{"op":"Jump","target":1048}]},
{"label":"1051([mcore:[#1862]#4082])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n        (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n          ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n          ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n        });\n      })))));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    \"\";\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[1049],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[1050],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n        (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n          ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n          ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n        });\n      })))));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    \"\";\n  }))","traced":{"any":[]}},
{"op":"Jump","target":472}]},
{"label":"1052([mcore:[#1863]#3030])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Construct","out":0,"type":"std/text/parse/parse","tag":"std/text/parse/@Hnd-parse","args":{"any":[0,1,2,3,4]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1053([mcore:[#1864]#2868])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/text/parse/parse-error","tag":"std/text/parse/ParseOk","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1054([mcore:[#1865]#2820])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/text/parse/parse-error","tag":"std/text/parse/ParseError","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1055([#4325])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"std/text/parse/@tag-parse"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_0c060b90-0f12-49af-ab86-bfba8dbbc1eb"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1056([k@[k@[k@[k@[#4278]#4288]#4298]#4308]#4318])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(std/text/parse/@tag-parse)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@tag-parse\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(std/text/parse/parse :: (E, V) -> V)>(\"parse@parse\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"parse@parse\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"parse@parse"},
{"op":"Push","target":1055,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"parse@parse\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(std/text/parse/parse :: (E, V) -> V)>(\"parse@parse\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@tag-parse\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"1057([k@[k@[k@[#4278]#4288]#4298]#4308])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#741]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_undiv.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/undiv)"},
{"op":"Push","target":1056,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1058([k@[k@[#4278]#4288]#4298])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#740]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":1057,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1059([k@[#4278]#4288])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#739]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":1058,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1060([#4278])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#738]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":1059,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1061([k@[k@[k@[k@[#4228]#4238]#4248]#4258]#4268])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#737]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":1060,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1062([k@[k@[k@[#4228]#4238]#4248]#4258])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#736]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":1061,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1063([k@[k@[#4228]#4238]#4248])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#735]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":1062,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1064([k@[#4228]#4238])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#734]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":1063,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1065([#4228])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#733]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":1064,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1066([k@[k@[k@[k@[#4178]#4188]#4198]#4208]#4218])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#732]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":1065,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1067([k@[k@[k@[#4178]#4188]#4198]#4208])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#731]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":1066,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1068([k@[k@[#4178]#4188]#4198])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#730]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":1067,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1069([k@[#4178]#4188])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#729]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":1068,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1070([#4178])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#728]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":1069,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1071([k@[k@[k@[k@[#4128]#4138]#4148]#4158]#4168])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#727]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":1070,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1072([k@[k@[k@[#4128]#4138]#4148]#4158])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#726]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":1071,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1073([k@[k@[#4128]#4138]#4148])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#725]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":1072,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"1074([k@[#4128]#4138])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#724]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":1073,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"1075([#4128])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#723]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":1074,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1076([mcore:[static initializers#2028]#4118])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#722]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":1075,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"1077([k@[main entrypoint#2]#4335])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1078([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":1077,"args":{"any":[]}},
{"op":"Jump","target":1076}]}],
"symbols":[{"name":"std/text/parse/parse/@cfc","position":2},
{"name":"std/text/parse/parse/@fun-current-input","position":5},
{"name":"std/text/parse/parse/@ctl-fail","position":8},
{"name":"std/text/parse/parse/@ctl-pick","position":11},
{"name":"std/text/parse/parse/@fun-satisfy","position":14},
{"name":"std/text/parse/parse-error/rest","position":27},
{"name":"std/text/parse/is-parseOk","position":32},
{"name":"std/text/parse/is-parseError","position":37},
{"name":"std/text/parse/@handle-parse","position":40},
{"name":"std/text/parse/@select-current-input","position":43},
{"name":"std/text/parse/@select-fail","position":46},
{"name":"std/text/parse/@select-pick","position":49},
{"name":"std/text/parse/@select-satisfy","position":52},
{"name":"std/text/parse/either","position":71},
{"name":"std/text/parse/fail","position":85},
{"name":"std/text/parse/satisfy","position":99},
{"name":"std/text/parse/satisfy-fail","position":132},
{"name":"std/text/parse/char-is","position":148},
{"name":"std/text/parse/alpha","position":165},
{"name":"std/text/parse/alpha-num","position":182},
{"name":"std/text/parse/char","position":203},
{"name":"std/text/parse/next-while0","position":228},
{"name":"std/text/parse/chars-are","position":262},
{"name":"std/text/parse/pick","position":276},
{"name":"std/text/parse/choose","position":359},
{"name":"std/text/parse/count-acc","position":370},
{"name":"std/text/parse/count","position":371},
{"name":"std/text/parse/current-input","position":385},
{"name":"std/text/parse/digit","position":408},
{"name":"std/text/parse/digits","position":446},
{"name":"std/text/parse/(||)","position":472},
{"name":"std/text/parse/optional","position":475},
{"name":"std/text/parse/digits0","position":517},
{"name":"std/text/parse/eof","position":565},
{"name":"std/text/parse/hex-digits","position":603},
{"name":"std/text/parse/many-acc","position":612},
{"name":"std/text/parse/many","position":613},
{"name":"std/text/parse/many1","position":617},
{"name":"std/text/parse/maybe","position":632},
{"name":"std/text/parse/next-match","position":649},
{"name":"std/text/parse/no-digit","position":672},
{"name":"std/text/parse/none-of","position":692},
{"name":"std/text/parse/none-of-many1","position":734},
{"name":"std/text/parse/one-of","position":749},
{"name":"std/text/parse/one-of-or","position":754},
{"name":"std/text/parse/parse","position":822},
{"name":"std/text/parse/parse-eof","position":831},
{"name":"std/text/parse/pnat","position":879},
{"name":"std/text/parse/sign","position":899},
{"name":"std/text/parse/pint","position":924},
{"name":"std/text/parse/pstring","position":942},
{"name":"std/text/parse/starts-with","position":954},
{"name":"std/text/parse/white","position":971},
{"name":"std/text/parse/whitespace","position":1009},
{"name":"std/text/parse/whitespace0","position":1051},
{"name":"std/text/parse/@Hnd-parse","position":1052},
{"name":"std/text/parse/ParseOk","position":1053},
{"name":"std/text/parse/ParseError","position":1054},
{"name":"$static-init","position":1076},
{"name":"$entrypoint","position":1078}],
"frameSize":{"regs_any":16}}