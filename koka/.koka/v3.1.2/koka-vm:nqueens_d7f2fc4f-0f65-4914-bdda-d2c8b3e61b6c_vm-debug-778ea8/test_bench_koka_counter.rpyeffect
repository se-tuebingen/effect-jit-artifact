{"blocks":[{"label":"0([match_def@[mcore:[#86]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([#5])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<int32,test/bench/koka/counter/st,83,84>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int32,(),test/bench/koka/counter/st,83,84>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<int32,test/bench/koka/counter/st,83,84>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int32,(),test/bench/koka/counter/st,83,84>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#86]#3])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":0,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":1,"args":{"any":[0,1,2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#603]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#87]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([#8])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"3\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<int32,test/bench/koka/counter/st,107,108>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int32,(),test/bench/koka/counter/st,107,108>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"3\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<int32,test/bench/koka/counter/st,107,108>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int32,(),test/bench/koka/counter/st,107,108>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#87]#6])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"3\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"3\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":0,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":4,"args":{"any":[0,1,2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#604]","target":3,"args":{"any":[]}}}]},
{"label":"6([match_def@[mcore:[#88]#9]#10])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"7([#11])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<int32,test/bench/koka/counter/st,131,132>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int32,(),test/bench/koka/counter/st,131,132>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<int32,test/bench/koka/counter/st,131,132>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int32,(),test/bench/koka/counter/st,131,132>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([mcore:[#88]#9])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"6\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":0,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":7,"args":{"any":[0,1,2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#605]","target":6,"args":{"any":[]}}}]},
{"label":"9([mcore:[#89]#12])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"10([mcore:[#92]#17])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"11([mcore:[#98]#25])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(test/bench/koka/counter/st :: (E, V) -> V)|(e :: E)>,(test/bench/koka/counter/st :: (E, V) -> V),a>(test/bench/koka/counter/@tag-st, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(test/bench/koka/counter/@tag-st)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(test/bench/koka/counter/st :: (E, V) -> V)|(e :: E)>,(test/bench/koka/counter/st :: (E, V) -> V),a>(test/bench/koka/counter/@tag-st, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":10}]},
{"label":"12([match_def@[mcore:[#99]#32]#33])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"13([#34])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"9\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-get,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,204,205>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int32,(),test/bench/koka/counter/st,204,205>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"9\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-get,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,204,205>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause1<int32,(),test/bench/koka/counter/st,204,205>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([mcore:[#99]#32])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"9\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"9\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":0,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":13,"args":{"any":[0,1,2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#606]","target":12,"args":{"any":[]}}}]},
{"label":"15([match_def@[mcore:[#100]#35]#36])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([#37])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<int32,test/bench/koka/counter/st,228,229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-set,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,228,229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<int32,test/bench/koka/counter/st,228,229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-set,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,228,229>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([mcore:[#100]#35])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"test/bench/koka/counter/st\"}}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"12\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":0,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":16,"args":{"any":[0,1,2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#607]","target":15,"args":{"any":[]}}}]},
{"label":"18([mcore:[#101]#38])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"19([mcore:[#102]#44])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"20([#63])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"21([k@[#64]#66])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([match_def@[#64]#68])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([k@[#69]#71])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"24([match_def@[#69]#73])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([k@[match_std/core/hnd/Clause0@[#69]#74]#76])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([match_std/core/hnd/Clause0@[#69]#74])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<test/bench/koka/counter/st>) -> 1005 int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10008)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10008)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<test/bench/koka/counter/st>) -> 1005 int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"27([#69])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-get,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause1<int32,(),test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-get) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10008);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"22\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-get) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10008);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-get,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause1<int32,(),test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":26,"args":{"any":[2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#608]","target":24,"args":{"any":[]}}}]},
{"label":"28([#64])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10008\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@fun-get: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-get) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10008);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"19\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"20\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@fun-get: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-get) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10008);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10008\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":3,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":27,"args":{"any":[2,3,4]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#609]","target":22,"args":{"any":[]}}}]},
{"label":"29([k@[k@[mcore:[#110]#48]#54]#62])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10008\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10008\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":28,"args":{"any":[1,2,3,4]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#610]","target":20,"args":{"any":[]}}}]},
{"label":"30([k@[mcore:[#110]#48]#54])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":29,"args":{"any":[]}},
{"op":"Jump","target":18}]},
{"label":"31([mcore:[#110]#48])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10008\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":30,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10008\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":19}]},
{"label":"32([mcore:[#111]#78])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"33([mcore:[#112]#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"34([#103])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([k@[#104]#106])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([match_def@[#104]#108])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"37([k@[#109]#111])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"38([match_def@[#109]#113])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([#116])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"40([match_std/core/hnd/Clause1@[#109]#114])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"30\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<test/bench/koka/counter/st>, int32) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10010, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10010, i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"30\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<test/bench/koka/counter/st>, int32) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"41([#109])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<int32,test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-set,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-set) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10010, i);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"30\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"30\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-set) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10010, i);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<int32,test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-set,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause1","target":40,"args":{"any":[3]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#611]","target":38,"args":{"any":[]}}}]},
{"label":"42([#104])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@fun-set: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-set) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10010, i);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"27\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"28\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@fun-set: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-set) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10010, i);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":4,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":41,"args":{"any":[3,4,5]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#612]","target":36,"args":{"any":[]}}}]},
{"label":"43([k@[k@[mcore:[#121]#88]#94]#102])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":42,"args":{"any":[2,3,4,5]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#613]","target":34,"args":{"any":[]}}}]},
{"label":"44([k@[mcore:[#121]#88]#94])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":43,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":32}]},
{"label":"45([mcore:[#121]#88])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":44,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10010\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":33}]},
{"label":"46([mcore:[#122]#118])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"47([mcore:[#123]#124])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"48([mcore:[#139]#128])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"49([mcore:[#140]#134])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"50([switch case for Bool(true)#160])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Qualified\",\"lib\": {\"op\": \"Var\",\"id\": \"import$std/num/int32\",\"type\": {\"op\": \"Ptr\"}},\"name\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Qualified\",\"lib\": {\"op\": \"Var\",\"id\": \"import$std/num/int32\",\"type\": {\"op\": \"Ptr\"}},\"name\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([k@[k@[#183]#185]#193])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([k@[#183]#185])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: test/bench/koka/counter/counter((std/num/int32/(+)(c, (std/num/int32/int32(1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(+)(c, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(+)(c, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: test/bench/koka/counter/counter((std/num/int32/(+)(c, (std/num/int32/int32(1)))))","traced":{"any":[]}},
{"op":"Jump","target":79}]},
{"label":"53([match_def@[#183]#195])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([k@[match_std/core/hnd/Ev@[#183]#196]#198])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"55([#200])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([k@[#201]#203])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([match_def@[#201]#205])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([#208])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"59([match_std/core/hnd/Clause1@[#201]#206])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<test/bench/koka/counter/st>, int32) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f@0(m@0, ev@0@10015, i@0@10000)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f@0(m@0, ev@0@10015, i@0@10000)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<test/bench/koka/counter/st>, int32) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"60([#201])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/clause0<int32,test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-set,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-set) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10015, i@0@10000);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-set) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10015, i@0@10000);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/clause0<int32,test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-set,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-set: hnd/clause1<int32,(),test/bench/koka/counter/st,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":5,"clauses":[{"tag":"std/core/hnd/Clause1","target":59,"args":{"any":[3]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#614]","target":57,"args":{"any":[]}}}]},
{"label":"61([match_std/core/hnd/Ev@[#183]#196])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@1: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h@0) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@2: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@fun-set: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((test/bench/koka/counter/st :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-set) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10015, i@0@10000);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h@0) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@2: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@fun-set: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((test/bench/koka/counter/st :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-set) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10015, i@0@10000);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@1: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: test/bench/koka/counter/st<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":4,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":60,"args":{"any":[3,4,5]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#615]","target":55,"args":{"any":[]}}}]},
{"label":"62([#183])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@0@10015) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@2: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@fun-set: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-set) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10015, i@0@10000);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Push","target":52,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@0@10015) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@1: (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@2: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@fun-set: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-set) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, int32) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10015, i@0@10000);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":61,"args":{"any":[2,3,4,5]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#616]","target":53,"args":{"any":[]}}}]},
{"label":"63([k@[switch case for Bool(false)#167]#175])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":62,"args":{"any":[2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Jump","target":48}]},
{"label":"64([switch case for Bool(false)#167])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Qualified\",\"lib\": {\"op\": \"Var\",\"id\": \"import$std/num/int32\",\"type\": {\"op\": \"Ptr\"}},\"name\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val i@0@10000 : int32;\nval ev@0@10015 : (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>;\nval _ : ();\ntest/bench/koka/counter/counter((std/num/int32/(+)(c, (std/num/int32/int32(1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i@0@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/(-)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"PrimOp","name":"infixSub(Int, Int): Int","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@0@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":63,"args":{"any":[2,0,1]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@0@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/(-)(i, (std/num/int32/int32(1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i@0@10000\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val i@0@10000 : int32;\nval ev@0@10015 : (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>;\nval _ : ();\ntest/bench/koka/counter/counter((std/num/int32/(+)(c, (std/num/int32/int32(1)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Qualified\",\"lib\": {\"op\": \"Var\",\"id\": \"import$std/num/int32\",\"type\": {\"op\": \"Ptr\"}},\"name\": \"std/num/int32/zero\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":49}]},
{"label":"65([switch default case#210])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"66([switch default case#161])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":"std/num/int32/zero"},
{"op":"PrimOp","name":"getGlobal(String): Num","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[1,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[64],"default":65}]},
{"label":"67([k@[k@[k@[mcore:[#153]#138]#144]#152]#154])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/num/int32/zero"},
{"op":"PrimOp","name":"getGlobal(String): Num","out":{"any":[2]},"in":{"any":[2]}},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[50],"default":66}]},
{"label":"68([#211])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([k@[#212]#214])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([match_def@[#212]#216])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"71([k@[#217]#219])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"72([match_def@[#217]#221])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"73([#224])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([match_std/core/hnd/Clause0@[#217]#222])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<test/bench/koka/counter/st>) -> 1005 int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<test/bench/koka/counter/st>) -> 1005 int32) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":2,"tag":"apply","args":{"any":[0,1]}}]},
{"label":"75([#217])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-get,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause1<int32,(),test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-get) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"38\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-get) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-get,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-get: hnd/clause0<int32,test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-get\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause1<int32,(),test/bench/koka/counter/st,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-set\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause0","scrutinee":3,"clauses":[{"tag":"std/core/hnd/Clause0","target":74,"args":{"any":[2]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#617]","target":72,"args":{"any":[]}}}]},
{"label":"76([#212])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@fun-get: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-get) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"test/bench/koka/counter/st\".\"test/bench/koka/counter/@Hnd-st\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"35\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-get\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-set\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@fun-get: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-get) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (1005 :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<test/bench/koka/counter/st>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: test/bench/koka/counter/st<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"test/bench/koka/counter/st","scrutinee":3,"clauses":[{"tag":"test/bench/koka/counter/@Hnd-st","target":75,"args":{"any":[2,3,4]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#618]","target":70,"args":{"any":[]}}}]},
{"label":"77([k@[k@[mcore:[#153]#138]#144]#152])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@10013) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@fun-get: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-get) {\n          ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>))\n             -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Push","target":67,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"32\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"34\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@10013) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip test/bench/koka/counter/@Hnd-st((@pat@0@0: int) : int, (@fun-get: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>, (@pat@1@0: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int32,(),(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>) : (test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((test/bench/koka/counter/st :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-get) {\n          ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(test/bench/koka/counter/st :: (E, V) -> V)>) -> (e :: E) int32) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),a>))\n             -> std/core/hnd/cast-clause0<int32,(test/bench/koka/counter/st :: (E, V) -> V),(e :: E),(test/bench/koka/counter/st :: (E, V) -> V),a>(f)(m, ev@10013);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":76,"args":{"any":[1,2,3,4]}}],"default":{"tag":"1d07eab0-8ac1-4161-8f83-c347ad792b4c#[Missing Tag#619]","target":68,"args":{"any":[]}}}]},
{"label":"78([k@[mcore:[#153]#138]#144])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":77,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":46}]},
{"label":"79([mcore:[#153]#138])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":78,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(test/bench/koka/counter/st :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":47}]},
{"label":"80([mcore:[#154]#226])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"81([mcore:[#160]#232])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail0"}]},
{"label":"82([mcore:[#163]#237])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int32,(h :: H),(e :: E)>(s)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int32,(h :: H),(e :: E)>(s)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"83([mcore:[#166]#238])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/clause-tail1"}]},
{"label":"84([mcore:[#170]#243])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x)","traced":{"any":[]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"85([mcore:[#174]#244])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"86([method_apply@[mcore:[#177]#245]#249])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":82}]},
{"label":"87([method_apply@[k@[mcore:[#177]#245]#256]#260])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Jump","target":84}]},
{"label":"88([#274])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":85}]},
{"label":"89([k@[k@[k@[mcore:[#177]#245]#256]#267]#270])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[88],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(test/bench/koka/counter/@tag-st)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":11}]},
{"label":"90([k@[k@[mcore:[#177]#245]#256]#267])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":89,"args":{"any":[1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Swap","a":2,"b":0},
{"op":"Jump","target":107}]},
{"label":"91([k@[mcore:[#177]#245]#256])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n  (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[87],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":90,"args":{"any":[1,3,0]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n  (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n}))","traced":{"any":[]}},
{"op":"Jump","target":83}]},
{"label":"92([mcore:[#177]#245])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: test/bench/koka/counter/@handle-st<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,a>((test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n      (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n    }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n      (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: 618){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n  }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n    (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n}))","traced":{"any":[]}},
{"op":"New","out":3,"targets":[86],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":91,"args":{"any":[1,0,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n  }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n    (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: test/bench/koka/counter/@handle-st<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,a>((test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n      (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n    }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n      (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: 618){\n    @x;\n  }), action)","traced":{"any":[]}},
{"op":"Jump","target":81}]},
{"label":"93([method_apply@[mcore:[#179]#284]#287])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(test/bench/koka/counter/@tag-st)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":92}]},
{"label":"94([mcore:[#179]#284])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int32,a,(e :: E),(h :: H)>(i, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(612 :: H),int32>){\n    (test/bench/koka/counter/@handle-st<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,a>((test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n        }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n          (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: 618){\n        @x;\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[93],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int32,a,(e :: E),(h :: H)>(i, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(612 :: H),int32>){\n    (test/bench/koka/counter/@handle-st<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,a>((test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n        }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n          (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: 618){\n        @x;\n      }), action));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":80}]},
{"label":"95([mcore:[#181]#299])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int32,a,(e :: E),(h :: H)>(i, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(h :: H),int32>){\n      (test/bench/koka/counter/@handle-st<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,a>((test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n          }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n            (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: 618){\n          @x;\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(test/bench/koka/counter/@tag-st)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<int32,a,(e :: E),(h :: H)>(i, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(s: (local-var :: (H, V) -> V)<(h :: H),int32>){\n      (test/bench/koka/counter/@handle-st<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,a>((test/bench/koka/counter/@Hnd-st<<(local :: H -> X)<(h :: H)>|(e :: E)>,a>(1, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            (std/core/types/local-get<int32,(h :: H),(e :: E)>(s));\n          }))), (std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,a,(test/bench/koka/counter/st :: (E, V) -> V),int32,()>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x: int32){\n            (std/core/types/local-set<int32,(e :: E),(h :: H)>(s, x));\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@x: 618){\n          @x;\n        }), action));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":94}]},
{"label":"96([mcore:[#187]#306])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/hnd/@open-none2"}]},
{"label":"97([mcore:[#189]#313])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"98([k@[mcore:[#194]#318]#320])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":97}]},
{"label":"99([mcore:[#194]#318])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((?show(x)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ?show(x)","traced":{"any":[]}},
{"op":"Push","target":98,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ?show(x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((?show(x)))","traced":{"any":[]}},
{"op":"Invoke","receiver":1,"tag":"apply","args":{"any":[0]}}]},
{"label":"100([mcore:[#197]#325])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"101([method_apply@[k@[mcore:[#199]#330]#339]#343])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":99}]},
{"label":"102([method_apply@[k@[mcore:[#199]#330]#339]#351])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":100}]},
{"label":"103([k@[mcore:[#199]#330]#339])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none2<int,(int) -> string,(),(console/console :: X),<(console/console :: X),(div :: X),(test/bench/koka/counter/st :: (E, V) -> V)>>((fn<(console/console :: X)>(x: int, @implicit/show: (int) -> string){\n    (std/core/console/printsln((?show(x))));\n  }), @x-x1@10005, std/core/int/show)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[101],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":2,"targets":[102],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none2<int,(int) -> string,(),(console/console :: X),<(console/console :: X),(div :: X),(test/bench/koka/counter/st :: (E, V) -> V)>>((fn<(console/console :: X)>(x: int, @implicit/show: (int) -> string){\n    (std/core/console/printsln((?show(x))));\n  }), @x-x1@10005, std/core/int/show)","traced":{"any":[]}},
{"op":"Jump","target":96}]},
{"label":"104([mcore:[#199]#330])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: test/bench/koka/counter/counter(std/num/int32/zero)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/zero","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/num/int32/zero"},
{"op":"PrimOp","name":"getGlobal(String): Num","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":103,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/zero","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: test/bench/koka/counter/counter(std/num/int32/zero)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10005\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Jump","target":79}]},
{"label":"105([method_apply@[mcore:[#201]#360]#364])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":104}]},
{"label":"106([mcore:[#201]#360])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: test/bench/koka/counter/state<(),<(console/console :: X),(div :: X)>>((std/num/int32/int32(100100100)), (fn<<(test/bench/koka/counter/st :: (E, V) -> V),(console/console :: X),(div :: X)>>(){\n    val @x-x1@10005 : int\n          = (test/bench/koka/counter/counter(std/num/int32/zero));\n    (std/core/hnd/@open-none2<int,(int) -> string,(),(console/console :: X),<(console/console :: X),(div :: X),(test/bench/koka/counter/st :: (E, V) -> V)>>((fn<(console/console :: X)>(x: int, @implicit/show: (int) -> string){\n        (std/core/console/printsln((?show(x))));\n      }), @x-x1@10005, std/core/int/show));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/num/int32/int32(100100100)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":100100100},
{"op":"New","out":1,"targets":[105],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(test/bench/koka/counter/@tag-st)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/num/int32/int32(100100100)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: test/bench/koka/counter/state<(),<(console/console :: X),(div :: X)>>((std/num/int32/int32(100100100)), (fn<<(test/bench/koka/counter/st :: (E, V) -> V),(console/console :: X),(div :: X)>>(){\n    val @x-x1@10005 : int\n          = (test/bench/koka/counter/counter(std/num/int32/zero));\n    (std/core/hnd/@open-none2<int,(int) -> string,(),(console/console :: X),<(console/console :: X),(div :: X),(test/bench/koka/counter/st :: (E, V) -> V)>>((fn<(console/console :: X)>(x: int, @implicit/show: (int) -> string){\n        (std/core/console/printsln((?show(x))));\n      }), @x-x1@10005, std/core/int/show));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":95}]},
{"label":"107([mcore:[#202]#283])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Construct","out":0,"type":"test/bench/koka/counter/st","tag":"test/bench/koka/counter/@Hnd-st","args":{"any":[0,1,2]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([k@[k@[k@[k@[#553]#563]#573]#583]#590])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"test/bench/koka/counter/@tag-st"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_f2bdd256-43f8-4c02-9cb4-0785a2e2dbaf"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"109([k@[k@[k@[#553]#563]#573]#583])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(test/bench/koka/counter/@tag-st)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"test/bench/koka/counter/@tag-st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(test/bench/koka/counter/st :: (E, V) -> V)>(\"st@counter\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"st@counter\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"st@counter"},
{"op":"Push","target":108,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"st@counter\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(test/bench/koka/counter/st :: (E, V) -> V)>(\"st@counter\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"test/bench/koka/counter/@tag-st\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":9}]},
{"label":"110([k@[k@[#553]#563]#573])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#85]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_num_int32.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/num/int32)"},
{"op":"Push","target":109,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"111([k@[#553]#563])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#84]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":110,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"112([#553])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#83]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":111,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"113([k@[k@[k@[k@[#503]#513]#523]#533]#543])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#82]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":112,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"114([k@[k@[k@[#503]#513]#523]#533])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#81]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":113,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"115([k@[k@[#503]#513]#523])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#80]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":114,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"116([k@[#503]#513])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#79]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":115,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"117([#503])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#78]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":116,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"118([k@[k@[k@[k@[#453]#463]#473]#483]#493])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#77]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":117,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"119([k@[k@[k@[#453]#463]#473]#483])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#76]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":118,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"120([k@[k@[#453]#463]#473])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#75]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":119,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"121([k@[#453]#463])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#74]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":120,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"122([#453])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#73]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":121,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"123([k@[k@[k@[k@[#403]#413]#423]#433]#443])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#72]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":122,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"124([k@[k@[k@[#403]#413]#423]#433])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#71]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":123,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"125([k@[k@[#403]#413]#423])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#70]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":124,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"126([k@[#403]#413])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#69]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":125,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"127([#403])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#68]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":126,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"128([k@[mcore:[static initializers#224]#383]#393])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#67]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":127,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"129([mcore:[static initializers#224]#383])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#66]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":128,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"130([k@[main entrypoint#2]#600])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"131([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":130,"args":{"any":[]}},
{"op":"Jump","target":129}]}],
"symbols":[{"name":"test/bench/koka/counter/st/@cfc","position":2},
{"name":"test/bench/koka/counter/st/@fun-get","position":5},
{"name":"test/bench/koka/counter/st/@fun-set","position":8},
{"name":"test/bench/koka/counter/@handle-st","position":11},
{"name":"test/bench/koka/counter/@select-get","position":14},
{"name":"test/bench/koka/counter/@select-set","position":17},
{"name":"test/bench/koka/counter/get","position":31},
{"name":"test/bench/koka/counter/set","position":45},
{"name":"test/bench/koka/counter/counter","position":79},
{"name":"test/bench/koka/counter/state","position":95},
{"name":"test/bench/koka/counter/main","position":106},
{"name":"test/bench/koka/counter/@Hnd-st","position":107},
{"name":"$static-init","position":129},
{"name":"$entrypoint","position":131}],
"frameSize":{"regs_any":16}}