{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/types"},"includes": [],"definitions": [{"name": {"op": "Var","id": "std/core/types/is-false","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "bool","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "bool","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"bool\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "bool","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"bool\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(bool: bool){\n  match (bool) {\n    ((std/core/types/False() : bool ) as @pat: bool)\n       -> std/core/types/True;\n    ((@skip std/core/types/True() : bool ) as @pat@0: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-false\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-false"]}, {"name": {"op": "Var","id": "std/core/types/is-true","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "bool","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "bool","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"bool\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "bool","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"bool\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(bool: bool){\n  match (bool) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/True;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-true\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-true"]}, {"name": {"op": "Var","id": "std/core/types/box/unbox","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"box\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "box","type": {"op": "Ptr","extern_ptr_name": "\"box\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "box","type": {"op": "Ptr","extern_ptr_name": "\"box\""}},"type_tag": "std/core/types/box","clauses": [{"tag": "std/core/types/Box","params": [{"op": "Var","id": "@\"unbox\"0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"unbox\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 470) -> {\"op\": \"Var\",\"id\": \"@\\\"unbox\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"box\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"unbox\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 470) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"unbox\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"box\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"}}: \"std/core/types/box\".\"std/core/types/Box\"(({\"op\": \"Var\",\"id\": \"@\\\"unbox\\\"0\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(box: (box :: V -> V)<a>){\n  (match (box) {\n    ((@skip std/core/types/Box((@x: a) : a) : (box :: V -> V)<a> ) as @pat: ((box :: V -> V)<a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/box/unbox\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/box/unbox"]}, {"name": {"op": "Var","id": "std/core/types/box/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"box\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"box\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"box\""}}, {"op": "Var","id": "unbox","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/types/Box","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"box\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Box<a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "unbox","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"1","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"1","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-unbox@485: 497) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-unbox@485"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"unbox\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-unbox@485,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-unbox@485: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"unbox\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "unbox","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"box\""}},"type_tag": "std/core/types/box","clauses": [{"tag": "std/core/types/Box","params": [{"op": "Var","id": "@\"unbox\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"unbox\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 497) -> {\"op\": \"Var\",\"id\": \"@\\\"unbox\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"unbox\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 497) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"unbox\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"}}: \"std/core/types/box\".\"std/core/types/Box\"(({\"op\": \"Var\",\"id\": \"@\\\"unbox\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Box((@x: 497) : a) : (box :: V -> V)<a> ) as @pat@1: ((box :: V -> V)<497>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"unbox\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"unbox\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (unbox) {\n  ((std/core/types/@Optional((@uniq-unbox@485: 497) : a) : ? a ) as @pat: ? 497)\n     -> @uniq-unbox@485;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 497)\n     -> (match (@this) {\n      ((@skip std/core/types/Box((@x: 497) : a) : (box :: V -> V)<a> ) as @pat@1: ((box :: V -> V)<497>))\n         -> @x;\n    });\n}"}]},"annotation": "genExpr: std/core/types/Box<a>((match (unbox) {\n  ((std/core/types/@Optional((@uniq-unbox@485: 497) : a) : ? a ) as @pat: ? 497)\n     -> @uniq-unbox@485;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 497)\n     -> (match (@this) {\n      ((@skip std/core/types/Box((@x: 497) : a) : (box :: V -> V)<a> ) as @pat@1: ((box :: V -> V)<497>))\n         -> @x;\n    });\n}))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(@this: (box :: V -> V)<a>, unbox: ? a){\n  std/core/types/Box<a>((match (unbox) {\n    ((std/core/types/@Optional((@uniq-unbox@485: a) : a) : ? a ) as @pat: ? a)\n       -> @uniq-unbox@485;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? a)\n       -> (match (@this) {\n        ((@skip std/core/types/Box((@x: a) : a) : (box :: V -> V)<a> ) as @pat@1: ((box :: V -> V)<a>))\n           -> @x;\n      });\n  }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/box/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"box\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/box/@copy"]}, {"name": {"op": "Var","id": "std/core/types/cctx/res","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cctx","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "cctx","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"type_tag": "std/core/types/cctx","clauses": [{"tag": "std/core/types/@Cctx","params": [{"op": "Var","id": "@\"res\"3","type": {"op": "Top"}}, {"op": "Var","id": "@\"holeptr\"4","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"res\"3","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 517) -> {\"op\": \"Var\",\"id\": \"@\\\"res\\\"3\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"cctx\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"res\\\"3\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 517) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"res\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"holeptr\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: @field-addr<518>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"holeptr\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"@field-addr\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"cctx\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}}: \"std/core/types/cctx\".\"std/core/types/@Cctx\"(({\"op\": \"Var\",\"id\": \"@\\\"res\\\"3\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"holeptr\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(cctx: (cctx :: (V, V) -> V)<a,b>){\n  (match (cctx) {\n    ((@skip std/core/types/@Cctx((@x: a) : a, (@pat@0: (@field-addr :: V -> V)<b>) : (@field-addr :: V -> V)<b>) : (cctx :: (V, V) -> V)<a,b> ) as @pat: ((cctx :: (V, V) -> V)<a,b>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/cctx/res\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/cctx/res"]}, {"name": {"op": "Var","id": "std/core/types/cctx/holeptr","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"cctx\""}],"return": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cctx","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "cctx","type": {"op": "Ptr","extern_ptr_name": "\"cctx\""}},"type_tag": "std/core/types/cctx","clauses": [{"tag": "std/core/types/@Cctx","params": [{"op": "Var","id": "@\"res\"5","type": {"op": "Top"}}, {"op": "Var","id": "@\"holeptr\"6","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"holeptr\"6","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}},"annotation": "genTest: normal: (@x: @field-addr<542>) -> {\"op\": \"Var\",\"id\": \"@\\\"holeptr\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"cctx\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"res\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 541) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"res\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"holeptr\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}},\"annotation\": \"genTest: normal: (@x: @field-addr<542>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"holeptr\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"@field-addr\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"cctx\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}}: \"std/core/types/cctx\".\"std/core/types/@Cctx\"(({\"op\": \"Var\",\"id\": \"@\\\"res\\\"5\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"holeptr\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(cctx: (cctx :: (V, V) -> V)<a,b>){\n  (match (cctx) {\n    ((@skip std/core/types/@Cctx((@pat@0: a) : a, (@x: (@field-addr :: V -> V)<b>) : (@field-addr :: V -> V)<b>) : (cctx :: (V, V) -> V)<a,b> ) as @pat: ((cctx :: (V, V) -> V)<a,b>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/cctx/holeptr\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"cctx\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/cctx/holeptr"]}, {"name": {"op": "Var","id": "std/core/types/is-left","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"either\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "either","type": {"op": "Ptr","extern_ptr_name": "\"either\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "either","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Left","params": [{"op": "Var","id": "@\"left\"7","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"either\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 554) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"either\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Left\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"either\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(either: (either :: (V, V) -> V)<a,b>){\n  (match (either) {\n    ((std/core/types/Left((@pat@0: a) : a) : (either :: (V, V) -> V)<a,b> ) as @pat: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/True;\n    (@pat@1: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-left\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-left"]}, {"name": {"op": "Var","id": "std/core/types/is-right","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"either\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "either","type": {"op": "Ptr","extern_ptr_name": "\"either\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "either","type": {"op": "Ptr","extern_ptr_name": "\"either\""}},"type_tag": "std/core/types/either","clauses": [{"tag": "std/core/types/Right","params": [{"op": "Var","id": "@\"right\"8","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"either\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"either\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}}: \"std/core/types/either\".\"std/core/types/Right\"(({\"op\": \"Var\",\"id\": \"@\\\"right\\\"8\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"either\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(either: (either :: (V, V) -> V)<a,b>){\n  (match (either) {\n    ((std/core/types/Right((@pat@0: b) : b) : (either :: (V, V) -> V)<a,b> ) as @pat: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/True;\n    (@pat@1: ((either :: (V, V) -> V)<a,b>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-right\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-right"]}, {"name": {"op": "Var","id": "std/core/types/is-nil","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "list","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "list","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(list: (list :: V -> V)<a>){\n  (match (list) {\n    ((std/core/types/Nil() : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@0: ((list :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-nil\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-nil"]}, {"name": {"op": "Var","id": "std/core/types/is-cons","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "list","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "list","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"9","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"10","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"9\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 609) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1: list<609>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"9\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "list","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"list\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(list: (list :: V -> V)<a>){\n  (match (list) {\n    ((std/core/types/Cons((@pat@0: a) : a, (@pat@1: (list :: V -> V)<a>) : (list :: V -> V)<a>) : (list :: V -> V)<a> ) as @pat: ((list :: V -> V)<a>))\n       -> std/core/types/True;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<a> ) as @pat@2: ((list :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-cons\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-cons"]}, {"name": {"op": "Var","id": "std/core/types/is-nothing","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"maybe\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "maybe","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(maybe: (maybe :: V -> V)<a>){\n  (match (maybe) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat: ((maybe :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@0: ((maybe :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-nothing\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-nothing"]}, {"name": {"op": "Var","id": "std/core/types/is-just","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"maybe\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "maybe","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"11","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 640) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"11\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(maybe: (maybe :: V -> V)<a>){\n  (match (maybe) {\n    ((std/core/types/Just((@pat@0: a) : a) : (maybe :: V -> V)<a> ) as @pat: ((maybe :: V -> V)<a>))\n       -> std/core/types/True;\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-just\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-just"]}, {"name": {"op": "Var","id": "std/core/types/is-lt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "order","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "order","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Lt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Lt\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(order: order){\n  match (order) {\n    ((std/core/types/Lt() : order ) as @pat: order)\n       -> std/core/types/True;\n    (@pat@0: order)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-lt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-lt"]}, {"name": {"op": "Var","id": "std/core/types/is-eq","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "order","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "order","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(order: order){\n  match (order) {\n    ((std/core/types/Eq() : order ) as @pat: order)\n       -> std/core/types/True;\n    (@pat@0: order)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-eq\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-eq"]}, {"name": {"op": "Var","id": "std/core/types/is-gt","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "order","type": {"op": "Ptr","extern_ptr_name": "\"order\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "order","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Gt","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Gt\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"order\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(order: order){\n  match (order) {\n    ((std/core/types/Gt() : order ) as @pat: order)\n       -> std/core/types/True;\n    (@pat@0: order)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-gt\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-gt"]}, {"name": {"op": "Var","id": "std/core/types/is-lt2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order2\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "order2","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "order2","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}},"type_tag": "std/core/types/order2","clauses": [{"tag": "std/core/types/Lt2","params": [{"op": "Var","id": "@\"lt\"12","type": {"op": "Top"}}, {"op": "Var","id": "@\"gt\"13","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"lt\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 689) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"lt\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 689) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"gt\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}: \"std/core/types/order2\".\"std/core/types/Lt2\"(({\"op\": \"Var\",\"id\": \"@\\\"lt\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"13\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(order2: (order2 :: V -> V)<a>){\n  (match (order2) {\n    ((std/core/types/Lt2((@pat@0: a) : a, (@pat@1: a) : a) : (order2 :: V -> V)<a> ) as @pat: ((order2 :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@2: ((order2 :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-lt2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-lt2"]}, {"name": {"op": "Var","id": "std/core/types/is-eq2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order2\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "order2","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "order2","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}},"type_tag": "std/core/types/order2","clauses": [{"tag": "std/core/types/Eq2","params": [{"op": "Var","id": "@\"eq\"14","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"eq\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 705) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"eq\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}: \"std/core/types/order2\".\"std/core/types/Eq2\"(({\"op\": \"Var\",\"id\": \"@\\\"eq\\\"14\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(order2: (order2 :: V -> V)<a>){\n  (match (order2) {\n    ((std/core/types/Eq2((@pat@0: a) : a) : (order2 :: V -> V)<a> ) as @pat: ((order2 :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@1: ((order2 :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-eq2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-eq2"]}, {"name": {"op": "Var","id": "std/core/types/is-gt2","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order2\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "order2","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "order2","type": {"op": "Ptr","extern_ptr_name": "\"order2\""}},"type_tag": "std/core/types/order2","clauses": [{"tag": "std/core/types/Gt2","params": [{"op": "Var","id": "@\"lt\"15","type": {"op": "Top"}}, {"op": "Var","id": "@\"gt\"16","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"lt\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 721) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"lt\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"16\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 721) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"gt\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}}: \"std/core/types/order2\".\"std/core/types/Gt2\"(({\"op\": \"Var\",\"id\": \"@\\\"lt\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"gt\\\"16\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"order2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(order2: (order2 :: V -> V)<a>){\n  (match (order2) {\n    ((std/core/types/Gt2((@pat@0: a) : a, (@pat@1: a) : a) : (order2 :: V -> V)<a> ) as @pat: ((order2 :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@2: ((order2 :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/is-gt2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order2\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/is-gt2"]}, {"name": {"op": "Var","id": "std/core/types/tuple2/fst","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple2","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"17","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"18","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"17","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 748) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"17\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 748) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"18\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 749) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"17\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"18\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(tuple2: (a, b)){\n  (match (tuple2) {\n    ((@skip std/core/types/Tuple2((@x: a) : a, (@pat@0: b) : b) : (a, b) ) as @pat: (a, b))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple2/fst\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple2/fst"]}, {"name": {"op": "Var","id": "std/core/types/tuple2/snd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple2","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"19","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"20","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"20","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 773) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"20\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"19\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 772) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"20\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 773) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"19\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"20\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(tuple2: (a, b)){\n  (match (tuple2) {\n    ((@skip std/core/types/Tuple2((@pat@0: a) : a, (@x: b) : b) : (a, b) ) as @pat: (a, b))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple2/snd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple2/snd"]}, {"name": {"op": "Var","id": "std/core/types/tuple2/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple2\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}}, {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"21","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"21","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-fst@795: 826) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"21\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-fst@795"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fst@795,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"21\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fst@795: 826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"21\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"22","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"23","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"22","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 826) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"23\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple2((@x: 826) : a, (@pat@0@0: 827) : a) : (a, b) ) as @pat@1: (826, 827))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (fst) {\n  ((std/core/types/@Optional((@uniq-fst@795: 826) : a) : ? a ) as @pat: ? 826)\n     -> @uniq-fst@795;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 826)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple2((@x: 826) : a, (@pat@0@0: 827) : a) : (a, b) ) as @pat@1: (826, 827))\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"24","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"24","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-snd@808: 827) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-snd@808"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-snd@808,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-snd@808: 827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"25","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"26","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"26","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 827) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"26\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"26\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"26\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple2((@pat@0@1: 826) : a, (@x@0: 827) : a) : (a, b) ) as @pat@3: (826, 827))\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (snd) {\n  ((std/core/types/@Optional((@uniq-snd@808: 827) : a) : ? a ) as @pat@1@0: ? 827)\n     -> @uniq-snd@808;\n  ((@skip std/core/types/@None() : ? a ) as @pat@2: ? 827)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple2((@pat@0@1: 826) : a, (@x@0: 827) : a) : (a, b) ) as @pat@3: (826, 827))\n         -> @x@0;\n    });\n}"}]},"annotation": "genExpr: std/core/types/Tuple2<a,a>((match (fst) {\n    ((std/core/types/@Optional((@uniq-fst@795: 826) : a) : ? a ) as @pat: ? 826)\n       -> @uniq-fst@795;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 826)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple2((@x: 826) : a, (@pat@0@0: 827) : a) : (a, b) ) as @pat@1: (826, 827))\n           -> @x;\n      });\n  }), (match (snd) {\n    ((std/core/types/@Optional((@uniq-snd@808: 827) : a) : ? a ) as @pat@1@0: ? 827)\n       -> @uniq-snd@808;\n    ((@skip std/core/types/@None() : ? a ) as @pat@2: ? 827)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple2((@pat@0@1: 826) : a, (@x@0: 827) : a) : (a, b) ) as @pat@3: (826, 827))\n           -> @x@0;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(@this: (a, b), fst: ? a, snd: ? b){\n  std/core/types/Tuple2<a,b>((match (fst) {\n      ((std/core/types/@Optional((@uniq-fst@795: a) : a) : ? a ) as @pat: ? a)\n         -> @uniq-fst@795;\n      ((@skip std/core/types/@None() : ? a ) as @pat@0: ? a)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple2((@x: a) : a, (@pat@0@0: b) : b) : (a, b) ) as @pat@1: (a, b))\n             -> @x;\n        });\n    }), (match (snd) {\n      ((std/core/types/@Optional((@uniq-snd@808: b) : b) : ? b ) as @pat@1@0: ? b)\n         -> @uniq-snd@808;\n      ((@skip std/core/types/@None() : ? b ) as @pat@2: ? b)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple2((@pat@0@1: a) : a, (@x@0: b) : b) : (a, b) ) as @pat@3: (a, b))\n             -> @x@0;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple2/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple2/@copy"]}, {"name": {"op": "Var","id": "std/core/types/tuple3/fst","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple3","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple3","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"27","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"28","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"29","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"27","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 854) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"27\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 854) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 855) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"29\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 856) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"27\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"28\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"29\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(tuple3: (a, b, c)){\n  (match (tuple3) {\n    ((@skip std/core/types/Tuple3((@x: a) : a, (@pat@0: b) : b, (@pat@1: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple3/fst\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple3/fst"]}, {"name": {"op": "Var","id": "std/core/types/tuple3/snd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple3","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple3","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"30","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"31","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"32","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"31","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 887) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"31\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"30\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 886) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"31\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 887) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 888) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"30\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"31\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"32\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(tuple3: (a, b, c)){\n  (match (tuple3) {\n    ((@skip std/core/types/Tuple3((@pat@0: a) : a, (@x: b) : b, (@pat@1: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple3/snd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple3/snd"]}, {"name": {"op": "Var","id": "std/core/types/tuple3/thd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple3","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple3","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"33","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"34","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"35","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"35","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 920) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"35\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"33\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 918) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"34\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 919) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 920) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"33\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"34\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"35\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(tuple3: (a, b, c)){\n  (match (tuple3) {\n    ((@skip std/core/types/Tuple3((@pat@0: a) : a, (@pat@1: b) : b, (@x: c) : c) : (a, b, c) ) as @pat: (a, b, c))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple3/thd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple3/thd"]}, {"name": {"op": "Var","id": "std/core/types/tuple3/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple3\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}}, {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/types/Tuple3","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"36","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"36","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-fst@956: 1019) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-fst@956"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fst@956,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fst@956: 1019) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"37","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"38","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"39","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"37","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1019) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"37\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"37\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1019) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"38\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 1020) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"39\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 1021) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"37\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"38\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"39\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple3((@x: 1019) : a, (@pat@0@0: 1020) : a, (@pat@1@0: 1021) : a) : (a, b, c) ) as @pat@1: (1019, 1020, 1021))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (fst) {\n  ((std/core/types/@Optional((@uniq-fst@956: 1019) : a) : ? a ) as @pat: ? 1019)\n     -> @uniq-fst@956;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 1019)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple3((@x: 1019) : a, (@pat@0@0: 1020) : a, (@pat@1@0: 1021) : a) : (a, b, c) ) as @pat@1: (1019, 1020, 1021))\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"40","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"40","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-snd@979: 1020) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"40\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-snd@979"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-snd@979,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"40\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-snd@979: 1020) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"40\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"41","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"42","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"43","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"42","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 1020) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"42\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"41\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 1019) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 1020) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"43\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@2: 1021) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"41\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"43\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple3((@pat@0@1: 1019) : a, (@x@0: 1020) : a, (@pat@1@2: 1021) : a) : (a, b, c) ) as @pat@3: (1019, 1020, 1021))\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (snd) {\n  ((std/core/types/@Optional((@uniq-snd@979: 1020) : a) : ? a ) as @pat@1@1: ? 1020)\n     -> @uniq-snd@979;\n  ((@skip std/core/types/@None() : ? a ) as @pat@2: ? 1020)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple3((@pat@0@1: 1019) : a, (@x@0: 1020) : a, (@pat@1@2: 1021) : a) : (a, b, c) ) as @pat@3: (1019, 1020, 1021))\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"44","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"44","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-thd@995: 1021) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"44\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-thd@995"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-thd@995,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-thd@995: 1021) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"44\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple3\""}},"type_tag": "std/core/types/tuple3","clauses": [{"tag": "std/core/types/Tuple3","params": [{"op": "Var","id": "@\"fst\"45","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"46","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"47","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"47","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@1: 1021) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"47\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"45\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@2: 1019) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"46\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@3: 1020) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@1: 1021) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}}: \"std/core/types/tuple3\".\"std/core/types/Tuple3\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"45\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"46\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"47\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple3((@pat@0@2: 1019) : a, (@pat@1@3: 1020) : a, (@x@1: 1021) : a) : (a, b, c) ) as @pat@5: (1019, 1020, 1021))\n     -> @x@1;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (thd) {\n  ((std/core/types/@Optional((@uniq-thd@995: 1021) : a) : ? a ) as @pat@3@0: ? 1021)\n     -> @uniq-thd@995;\n  ((@skip std/core/types/@None() : ? a ) as @pat@4: ? 1021)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple3((@pat@0@2: 1019) : a, (@pat@1@3: 1020) : a, (@x@1: 1021) : a) : (a, b, c) ) as @pat@5: (1019, 1020, 1021))\n         -> @x@1;\n    });\n}"}]},"annotation": "genExpr: std/core/types/Tuple3<a,a,a>((match (fst) {\n    ((std/core/types/@Optional((@uniq-fst@956: 1019) : a) : ? a ) as @pat: ? 1019)\n       -> @uniq-fst@956;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 1019)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple3((@x: 1019) : a, (@pat@0@0: 1020) : a, (@pat@1@0: 1021) : a) : (a, b, c) ) as @pat@1: (1019, 1020, 1021))\n           -> @x;\n      });\n  }), (match (snd) {\n    ((std/core/types/@Optional((@uniq-snd@979: 1020) : a) : ? a ) as @pat@1@1: ? 1020)\n       -> @uniq-snd@979;\n    ((@skip std/core/types/@None() : ? a ) as @pat@2: ? 1020)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple3((@pat@0@1: 1019) : a, (@x@0: 1020) : a, (@pat@1@2: 1021) : a) : (a, b, c) ) as @pat@3: (1019, 1020, 1021))\n           -> @x@0;\n      });\n  }), (match (thd) {\n    ((std/core/types/@Optional((@uniq-thd@995: 1021) : a) : ? a ) as @pat@3@0: ? 1021)\n       -> @uniq-thd@995;\n    ((@skip std/core/types/@None() : ? a ) as @pat@4: ? 1021)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple3((@pat@0@2: 1019) : a, (@pat@1@3: 1020) : a, (@x@1: 1021) : a) : (a, b, c) ) as @pat@5: (1019, 1020, 1021))\n           -> @x@1;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c> fn(@this: (a, b, c), fst: ? a, snd: ? b, thd: ? c){\n  std/core/types/Tuple3<a,b,c>((match (fst) {\n      ((std/core/types/@Optional((@uniq-fst@956: a) : a) : ? a ) as @pat: ? a)\n         -> @uniq-fst@956;\n      ((@skip std/core/types/@None() : ? a ) as @pat@0: ? a)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple3((@x: a) : a, (@pat@0@0: b) : b, (@pat@1@0: c) : c) : (a, b, c) ) as @pat@1: (a, b, c))\n             -> @x;\n        });\n    }), (match (snd) {\n      ((std/core/types/@Optional((@uniq-snd@979: b) : b) : ? b ) as @pat@1@1: ? b)\n         -> @uniq-snd@979;\n      ((@skip std/core/types/@None() : ? b ) as @pat@2: ? b)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple3((@pat@0@1: a) : a, (@x@0: b) : b, (@pat@1@2: c) : c) : (a, b, c) ) as @pat@3: (a, b, c))\n             -> @x@0;\n        });\n    }), (match (thd) {\n      ((std/core/types/@Optional((@uniq-thd@995: c) : c) : ? c ) as @pat@3@0: ? c)\n         -> @uniq-thd@995;\n      ((@skip std/core/types/@None() : ? c ) as @pat@4: ? c)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple3((@pat@0@2: a) : a, (@pat@1@3: b) : b, (@x@1: c) : c) : (a, b, c) ) as @pat@5: (a, b, c))\n             -> @x@1;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple3/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple3\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple3/@copy"]}, {"name": {"op": "Var","id": "std/core/types/tuple4/fst","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple4\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"48","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"49","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"50","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"51","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"48","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1055) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"48\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"48\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1055) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"49\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1056) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"50\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1057) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"51\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1058) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"48\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"49\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"50\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"51\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(tuple4: (a, b, c, d)){\n  (match (tuple4) {\n    ((@skip std/core/types/Tuple4((@x: a) : a, (@pat@0: b) : b, (@pat@1: c) : c, (@pat@2: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple4/fst\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple4/fst"]}, {"name": {"op": "Var","id": "std/core/types/tuple4/snd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple4\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"52","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"53","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"54","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"55","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"53","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1096) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"53\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"52\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1095) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"53\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1096) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"54\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1097) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"55\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1098) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"52\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"53\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"54\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"55\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(tuple4: (a, b, c, d)){\n  (match (tuple4) {\n    ((@skip std/core/types/Tuple4((@pat@0: a) : a, (@x: b) : b, (@pat@1: c) : c, (@pat@2: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple4/snd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple4/snd"]}, {"name": {"op": "Var","id": "std/core/types/tuple4/thd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple4\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"56","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"57","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"58","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"59","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"58","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1137) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"58\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"56\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1135) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"57\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1136) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"58\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1137) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"59\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1138) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"56\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"57\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"58\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"59\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(tuple4: (a, b, c, d)){\n  (match (tuple4) {\n    ((@skip std/core/types/Tuple4((@pat@0: a) : a, (@pat@1: b) : b, (@x: c) : c, (@pat@2: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple4/thd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple4/thd"]}, {"name": {"op": "Var","id": "std/core/types/tuple4/field4","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple4\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple4","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"60","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"61","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"62","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"63","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"63","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1178) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"63\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1175) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"61\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1176) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1177) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"63\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1178) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"61\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"63\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(tuple4: (a, b, c, d)){\n  (match (tuple4) {\n    ((@skip std/core/types/Tuple4((@pat@0: a) : a, (@pat@1: b) : b, (@pat@2: c) : c, (@x: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple4/field4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple4/field4"]}, {"name": {"op": "Var","id": "std/core/types/tuple4/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple4\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}}, {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "field4","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/types/Tuple4","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"64","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"64","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-fst@1228: 1339) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"64\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-fst@1228"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fst@1228,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"64\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fst@1228: 1339) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"64\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"65","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"66","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"67","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"68","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"65","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1339) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"65\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1339) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 1340) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"67\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 1341) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1342) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"66\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"67\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"68\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple4((@x: 1339) : a, (@pat@0@0: 1340) : a, (@pat@1@0: 1341) : a, (@pat@2: 1342) : a) : (a, b, c, d) ) as @pat@1: (1339, 1340, 1341, 1342))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (fst) {\n  ((std/core/types/@Optional((@uniq-fst@1228: 1339) : a) : ? a ) as @pat: ? 1339)\n     -> @uniq-fst@1228;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 1339)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple4((@x: 1339) : a, (@pat@0@0: 1340) : a, (@pat@1@0: 1341) : a, (@pat@2: 1342) : a) : (a, b, c, d) ) as @pat@1: (1339, 1340, 1341, 1342))\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"69","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"69","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-snd@1261: 1340) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-snd@1261"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-snd@1261,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-snd@1261: 1340) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"70","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"71","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"72","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"73","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"71","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 1340) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 1339) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 1340) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"72\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@2: 1341) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"73\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@1: 1342) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"72\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"73\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple4((@pat@0@1: 1339) : a, (@x@0: 1340) : a, (@pat@1@2: 1341) : a, (@pat@2@1: 1342) : a) : (a, b, c, d) ) as @pat@3: (1339, 1340, 1341, 1342))\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (snd) {\n  ((std/core/types/@Optional((@uniq-snd@1261: 1340) : a) : ? a ) as @pat@1@1: ? 1340)\n     -> @uniq-snd@1261;\n  ((@skip std/core/types/@None() : ? a ) as @pat@2@0: ? 1340)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple4((@pat@0@1: 1339) : a, (@x@0: 1340) : a, (@pat@1@2: 1341) : a, (@pat@2@1: 1342) : a) : (a, b, c, d) ) as @pat@3: (1339, 1340, 1341, 1342))\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"74","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"74","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-thd@1290: 1341) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-thd@1290"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-thd@1290,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-thd@1290: 1341) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"74\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"75","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"76","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"77","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"78","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"77","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@1: 1341) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"77\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"75\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@2: 1339) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"76\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@3: 1340) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@1: 1341) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"78\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@2: 1342) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"75\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"76\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"78\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple4((@pat@0@2: 1339) : a, (@pat@1@3: 1340) : a, (@x@1: 1341) : a, (@pat@2@2: 1342) : a) : (a, b, c, d) ) as @pat@5: (1339, 1340, 1341, 1342))\n     -> @x@1;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (thd) {\n  ((std/core/types/@Optional((@uniq-thd@1290: 1341) : a) : ? a ) as @pat@3@0: ? 1341)\n     -> @uniq-thd@1290;\n  ((@skip std/core/types/@None() : ? a ) as @pat@4: ? 1341)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple4((@pat@0@2: 1339) : a, (@pat@1@3: 1340) : a, (@x@1: 1341) : a, (@pat@2@2: 1342) : a) : (a, b, c, d) ) as @pat@5: (1339, 1340, 1341, 1342))\n         -> @x@1;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "field4","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"79","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"79","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-field4@1309: 1342) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-field4@1309"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-field4@1309,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-field4@1309: 1342) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "field4","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple4\""}},"type_tag": "std/core/types/tuple4","clauses": [{"tag": "std/core/types/Tuple4","params": [{"op": "Var","id": "@\"fst\"80","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"81","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"82","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"83","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"83","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@2: 1342) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"83\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@2"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"80\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@3: 1339) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"81\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@4: 1340) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"82\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@3: 1341) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"83\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@2: 1342) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}}: \"std/core/types/tuple4\".\"std/core/types/Tuple4\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"80\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"81\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"82\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"83\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple4((@pat@0@3: 1339) : a, (@pat@1@4: 1340) : a, (@pat@2@3: 1341) : a, (@x@2: 1342) : a) : (a, b, c, d) ) as @pat@7: (1339, 1340, 1341, 1342))\n     -> @x@2;\n}"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (field4) {\n  ((std/core/types/@Optional((@uniq-field4@1309: 1342) : a) : ? a ) as @pat@5@0: ? 1342)\n     -> @uniq-field4@1309;\n  ((@skip std/core/types/@None() : ? a ) as @pat@6: ? 1342)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple4((@pat@0@3: 1339) : a, (@pat@1@4: 1340) : a, (@pat@2@3: 1341) : a, (@x@2: 1342) : a) : (a, b, c, d) ) as @pat@7: (1339, 1340, 1341, 1342))\n         -> @x@2;\n    });\n}"}]},"annotation": "genExpr: std/core/types/Tuple4<a,a,a,a>((match (fst) {\n    ((std/core/types/@Optional((@uniq-fst@1228: 1339) : a) : ? a ) as @pat: ? 1339)\n       -> @uniq-fst@1228;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 1339)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple4((@x: 1339) : a, (@pat@0@0: 1340) : a, (@pat@1@0: 1341) : a, (@pat@2: 1342) : a) : (a, b, c, d) ) as @pat@1: (1339, 1340, 1341, 1342))\n           -> @x;\n      });\n  }), (match (snd) {\n    ((std/core/types/@Optional((@uniq-snd@1261: 1340) : a) : ? a ) as @pat@1@1: ? 1340)\n       -> @uniq-snd@1261;\n    ((@skip std/core/types/@None() : ? a ) as @pat@2@0: ? 1340)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple4((@pat@0@1: 1339) : a, (@x@0: 1340) : a, (@pat@1@2: 1341) : a, (@pat@2@1: 1342) : a) : (a, b, c, d) ) as @pat@3: (1339, 1340, 1341, 1342))\n           -> @x@0;\n      });\n  }), (match (thd) {\n    ((std/core/types/@Optional((@uniq-thd@1290: 1341) : a) : ? a ) as @pat@3@0: ? 1341)\n       -> @uniq-thd@1290;\n    ((@skip std/core/types/@None() : ? a ) as @pat@4: ? 1341)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple4((@pat@0@2: 1339) : a, (@pat@1@3: 1340) : a, (@x@1: 1341) : a, (@pat@2@2: 1342) : a) : (a, b, c, d) ) as @pat@5: (1339, 1340, 1341, 1342))\n           -> @x@1;\n      });\n  }), (match (field4) {\n    ((std/core/types/@Optional((@uniq-field4@1309: 1342) : a) : ? a ) as @pat@5@0: ? 1342)\n       -> @uniq-field4@1309;\n    ((@skip std/core/types/@None() : ? a ) as @pat@6: ? 1342)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple4((@pat@0@3: 1339) : a, (@pat@1@4: 1340) : a, (@pat@2@3: 1341) : a, (@x@2: 1342) : a) : (a, b, c, d) ) as @pat@7: (1339, 1340, 1341, 1342))\n           -> @x@2;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d> fn(@this: (a, b, c, d), fst: ? a, snd: ? b, thd: ? c, field4: ? d){\n  std/core/types/Tuple4<a,b,c,d>((match (fst) {\n      ((std/core/types/@Optional((@uniq-fst@1228: a) : a) : ? a ) as @pat: ? a)\n         -> @uniq-fst@1228;\n      ((@skip std/core/types/@None() : ? a ) as @pat@0: ? a)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple4((@x: a) : a, (@pat@0@0: b) : b, (@pat@1@0: c) : c, (@pat@2: d) : d) : (a, b, c, d) ) as @pat@1: (a, b, c, d))\n             -> @x;\n        });\n    }), (match (snd) {\n      ((std/core/types/@Optional((@uniq-snd@1261: b) : b) : ? b ) as @pat@1@1: ? b)\n         -> @uniq-snd@1261;\n      ((@skip std/core/types/@None() : ? b ) as @pat@2@0: ? b)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple4((@pat@0@1: a) : a, (@x@0: b) : b, (@pat@1@2: c) : c, (@pat@2@1: d) : d) : (a, b, c, d) ) as @pat@3: (a, b, c, d))\n             -> @x@0;\n        });\n    }), (match (thd) {\n      ((std/core/types/@Optional((@uniq-thd@1290: c) : c) : ? c ) as @pat@3@0: ? c)\n         -> @uniq-thd@1290;\n      ((@skip std/core/types/@None() : ? c ) as @pat@4: ? c)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple4((@pat@0@2: a) : a, (@pat@1@3: b) : b, (@x@1: c) : c, (@pat@2@2: d) : d) : (a, b, c, d) ) as @pat@5: (a, b, c, d))\n             -> @x@1;\n        });\n    }), (match (field4) {\n      ((std/core/types/@Optional((@uniq-field4@1309: d) : d) : ? d ) as @pat@5@0: ? d)\n         -> @uniq-field4@1309;\n      ((@skip std/core/types/@None() : ? d ) as @pat@6: ? d)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple4((@pat@0@3: a) : a, (@pat@1@4: b) : b, (@pat@2@3: c) : c, (@x@2: d) : d) : (a, b, c, d) ) as @pat@7: (a, b, c, d))\n             -> @x@2;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple4/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple4\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple4/@copy"]}, {"name": {"op": "Var","id": "std/core/types/tuple5/fst","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple5\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"84","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"85","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"86","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"87","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"88","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"84","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1383) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"84\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1383) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"85\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1384) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1385) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"87\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1386) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 1387) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"85\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"86\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"87\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"88\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1> fn(tuple5: (a, b, c, d, a1)){\n  (match (tuple5) {\n    ((@skip std/core/types/Tuple5((@x: a) : a, (@pat@0: b) : b, (@pat@1: c) : c, (@pat@2: d) : d, (@pat@3: a1) : a1) : (a, b, c, d, a1) ) as @pat: (a, b, c, d, a1))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple5/fst\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple5/fst"]}, {"name": {"op": "Var","id": "std/core/types/tuple5/snd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple5\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"89","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"90","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"91","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"92","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"93","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"90","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1432) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"90\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"89\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1431) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"90\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1432) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1433) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"92\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1434) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"93\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 1435) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"89\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"90\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"92\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"93\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1> fn(tuple5: (a, b, c, d, a1)){\n  (match (tuple5) {\n    ((@skip std/core/types/Tuple5((@pat@0: a) : a, (@x: b) : b, (@pat@1: c) : c, (@pat@2: d) : d, (@pat@3: a1) : a1) : (a, b, c, d, a1) ) as @pat: (a, b, c, d, a1))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple5/snd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple5/snd"]}, {"name": {"op": "Var","id": "std/core/types/tuple5/thd","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple5\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"94","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"95","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"96","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"97","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"98","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"96","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1481) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"96\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"94\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1479) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"95\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1480) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"96\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1481) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"97\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1482) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"98\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 1483) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"94\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"95\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"96\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"97\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"98\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1> fn(tuple5: (a, b, c, d, a1)){\n  (match (tuple5) {\n    ((@skip std/core/types/Tuple5((@pat@0: a) : a, (@pat@1: b) : b, (@x: c) : c, (@pat@2: d) : d, (@pat@3: a1) : a1) : (a, b, c, d, a1) ) as @pat: (a, b, c, d, a1))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple5/thd\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple5/thd"]}, {"name": {"op": "Var","id": "std/core/types/tuple5/field4","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple5\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"99","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"100","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"101","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"102","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"103","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"102","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1530) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"102\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1527) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"100\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1528) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1529) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"102\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1530) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"103\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 1531) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"100\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"101\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"102\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"103\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1> fn(tuple5: (a, b, c, d, a1)){\n  (match (tuple5) {\n    ((@skip std/core/types/Tuple5((@pat@0: a) : a, (@pat@1: b) : b, (@pat@2: c) : c, (@x: d) : d, (@pat@3: a1) : a1) : (a, b, c, d, a1) ) as @pat: (a, b, c, d, a1))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple5/field4\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple5/field4"]}, {"name": {"op": "Var","id": "std/core/types/tuple5/field5","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple5\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple5","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"104","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"105","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"106","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"107","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"108","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field5\"108","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1579) -> {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"108\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"104\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 1575) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"105\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1: 1576) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"106\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1577) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"107\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 1578) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"108\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1579) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"104\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"105\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"106\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"107\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"108\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1> fn(tuple5: (a, b, c, d, a1)){\n  (match (tuple5) {\n    ((@skip std/core/types/Tuple5((@pat@0: a) : a, (@pat@1: b) : b, (@pat@2: c) : c, (@pat@3: d) : d, (@x: a1) : a1) : (a, b, c, d, a1) ) as @pat: (a, b, c, d, a1))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple5/field5\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple5/field5"]}, {"name": {"op": "Var","id": "std/core/types/tuple5/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"tuple5\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple5\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}}, {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "field4","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "field5","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/types/Tuple5","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple5\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple5<a,a,a,a,a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"109","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"109","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-fst@1645: 1824) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-fst@1645"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fst@1645,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fst@1645: 1824) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fst","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"110","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"111","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"112","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"113","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"114","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"110","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 1824) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"110\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"110\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 1824) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: 1825) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"112\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@0: 1826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"113\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2: 1827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3: 1828) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"110\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"111\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"112\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"113\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"114\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple5((@x: 1824) : a, (@pat@0@0: 1825) : a, (@pat@1@0: 1826) : a, (@pat@2: 1827) : a, (@pat@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@1: (1824, 1825, 1826, 1827, 1828))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fst\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (fst) {\n  ((std/core/types/@Optional((@uniq-fst@1645: 1824) : a) : ? a ) as @pat: ? 1824)\n     -> @uniq-fst@1645;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 1824)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple5((@x: 1824) : a, (@pat@0@0: 1825) : a, (@pat@1@0: 1826) : a, (@pat@2: 1827) : a, (@pat@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@1: (1824, 1825, 1826, 1827, 1828))\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"115","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"115","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-snd@1690: 1825) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"115\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-snd@1690"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-snd@1690,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"115\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-snd@1690: 1825) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"115\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "snd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"116","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"117","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"118","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"119","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"120","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"117","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0: 1825) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"117\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"116\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 1824) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"117\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0: 1825) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"118\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@2: 1826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"118\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"119\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@1: 1827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3@0: 1828) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"116\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"117\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"118\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"119\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"120\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple5((@pat@0@1: 1824) : a, (@x@0: 1825) : a, (@pat@1@2: 1826) : a, (@pat@2@1: 1827) : a, (@pat@3@0: 1828) : a) : (a, b, c, d, a1) ) as @pat@4: (1824, 1825, 1826, 1827, 1828))\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"snd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (snd) {\n  ((std/core/types/@Optional((@uniq-snd@1690: 1825) : a) : ? a ) as @pat@1@1: ? 1825)\n     -> @uniq-snd@1690;\n  ((@skip std/core/types/@None() : ? a ) as @pat@2@0: ? 1825)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple5((@pat@0@1: 1824) : a, (@x@0: 1825) : a, (@pat@1@2: 1826) : a, (@pat@2@1: 1827) : a, (@pat@3@0: 1828) : a) : (a, b, c, d, a1) ) as @pat@4: (1824, 1825, 1826, 1827, 1828))\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"121","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"121","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-thd@1731: 1826) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-thd@1731"}}]},"annotation": "genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-thd@1731,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-thd@1731: 1826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"121\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "thd","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"122","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"123","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"124","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"125","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"126","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"thd\"124","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@1: 1826) -> {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"124\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@2: 1824) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"123\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@3: 1825) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@1: 1826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@2: 1827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3@2: 1828) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"122\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"123\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"124\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"125\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"126\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple5((@pat@0@2: 1824) : a, (@pat@1@3: 1825) : a, (@x@1: 1826) : a, (@pat@2@2: 1827) : a, (@pat@3@2: 1828) : a) : (a, b, c, d, a1) ) as @pat@5: (1824, 1825, 1826, 1827, 1828))\n     -> @x@1;\n}"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"thd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (thd) {\n  ((std/core/types/@Optional((@uniq-thd@1731: 1826) : a) : ? a ) as @pat@3@1: ? 1826)\n     -> @uniq-thd@1731;\n  ((@skip std/core/types/@None() : ? a ) as @pat@4@0: ? 1826)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple5((@pat@0@2: 1824) : a, (@pat@1@3: 1825) : a, (@x@1: 1826) : a, (@pat@2@2: 1827) : a, (@pat@3@2: 1828) : a) : (a, b, c, d, a1) ) as @pat@5: (1824, 1825, 1826, 1827, 1828))\n         -> @x@1;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "field4","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"127","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"127","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-field4@1766: 1827) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"127\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-field4@1766"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-field4@1766,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-field4@1766: 1827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"127\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "field4","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"128","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"129","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"130","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"131","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"132","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field4\"131","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@2: 1827) -> {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"131\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@2"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"128\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@3: 1824) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"129\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@4: 1825) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@3: 1826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@2: 1827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3@3: 1828) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"128\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"129\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"130\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"131\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"132\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple5((@pat@0@3: 1824) : a, (@pat@1@4: 1825) : a, (@pat@2@3: 1826) : a, (@x@2: 1827) : a, (@pat@3@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@7: (1824, 1825, 1826, 1827, 1828))\n     -> @x@2;\n}"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"field4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (field4) {\n  ((std/core/types/@Optional((@uniq-field4@1766: 1827) : a) : ? a ) as @pat@5@0: ? 1827)\n     -> @uniq-field4@1766;\n  ((@skip std/core/types/@None() : ? a ) as @pat@6: ? 1827)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple5((@pat@0@3: 1824) : a, (@pat@1@4: 1825) : a, (@pat@2@3: 1826) : a, (@x@2: 1827) : a, (@pat@3@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@7: (1824, 1825, 1826, 1827, 1828))\n         -> @x@2;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "field5","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"133","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"133","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-field5@1788: 1828) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"133\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-field5@1788"}}]},"annotation": "genBranch: [(@pat@7@0,{\"op\": \"Var\",\"id\": \"field5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-field5@1788,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"133\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-field5@1788: 1828) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"field5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"133\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "field5","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "\"tuple5\""}},"type_tag": "std/core/types/tuple5","clauses": [{"tag": "std/core/types/Tuple5","params": [{"op": "Var","id": "@\"fst\"134","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"135","type": {"op": "Top"}}, {"op": "Var","id": "@\"thd\"136","type": {"op": "Top"}}, {"op": "Var","id": "@\"field4\"137","type": {"op": "Top"}}, {"op": "Var","id": "@\"field5\"138","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"field5\"138","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@3: 1828) -> {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"138\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@3"}}]},"annotation": "genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: 1824) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@1@5: 1825) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@2@4: 1826) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"thd\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@3@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"137\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@3@4: 1827) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field4\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@3: 1828) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"field5\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}}: \"std/core/types/tuple5\".\"std/core/types/Tuple5\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"thd\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field4\\\"137\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"field5\\\"138\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/types/Tuple5((@pat@0@4: 1824) : a, (@pat@1@5: 1825) : a, (@pat@2@4: 1826) : a, (@pat@3@4: 1827) : a, (@x@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@9: (1824, 1825, 1826, 1827, 1828))\n     -> @x@3;\n}"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"field5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"field5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (field5) {\n  ((std/core/types/@Optional((@uniq-field5@1788: 1828) : a) : ? a ) as @pat@7@0: ? 1828)\n     -> @uniq-field5@1788;\n  ((@skip std/core/types/@None() : ? a ) as @pat@8: ? 1828)\n     -> (match (@this) {\n      ((@skip std/core/types/Tuple5((@pat@0@4: 1824) : a, (@pat@1@5: 1825) : a, (@pat@2@4: 1826) : a, (@pat@3@4: 1827) : a, (@x@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@9: (1824, 1825, 1826, 1827, 1828))\n         -> @x@3;\n    });\n}"}]},"annotation": "genExpr: std/core/types/Tuple5<a,a,a,a,a>((match (fst) {\n    ((std/core/types/@Optional((@uniq-fst@1645: 1824) : a) : ? a ) as @pat: ? 1824)\n       -> @uniq-fst@1645;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 1824)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple5((@x: 1824) : a, (@pat@0@0: 1825) : a, (@pat@1@0: 1826) : a, (@pat@2: 1827) : a, (@pat@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@1: (1824, 1825, 1826, 1827, 1828))\n           -> @x;\n      });\n  }), (match (snd) {\n    ((std/core/types/@Optional((@uniq-snd@1690: 1825) : a) : ? a ) as @pat@1@1: ? 1825)\n       -> @uniq-snd@1690;\n    ((@skip std/core/types/@None() : ? a ) as @pat@2@0: ? 1825)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple5((@pat@0@1: 1824) : a, (@x@0: 1825) : a, (@pat@1@2: 1826) : a, (@pat@2@1: 1827) : a, (@pat@3@0: 1828) : a) : (a, b, c, d, a1) ) as @pat@4: (1824, 1825, 1826, 1827, 1828))\n           -> @x@0;\n      });\n  }), (match (thd) {\n    ((std/core/types/@Optional((@uniq-thd@1731: 1826) : a) : ? a ) as @pat@3@1: ? 1826)\n       -> @uniq-thd@1731;\n    ((@skip std/core/types/@None() : ? a ) as @pat@4@0: ? 1826)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple5((@pat@0@2: 1824) : a, (@pat@1@3: 1825) : a, (@x@1: 1826) : a, (@pat@2@2: 1827) : a, (@pat@3@2: 1828) : a) : (a, b, c, d, a1) ) as @pat@5: (1824, 1825, 1826, 1827, 1828))\n           -> @x@1;\n      });\n  }), (match (field4) {\n    ((std/core/types/@Optional((@uniq-field4@1766: 1827) : a) : ? a ) as @pat@5@0: ? 1827)\n       -> @uniq-field4@1766;\n    ((@skip std/core/types/@None() : ? a ) as @pat@6: ? 1827)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple5((@pat@0@3: 1824) : a, (@pat@1@4: 1825) : a, (@pat@2@3: 1826) : a, (@x@2: 1827) : a, (@pat@3@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@7: (1824, 1825, 1826, 1827, 1828))\n           -> @x@2;\n      });\n  }), (match (field5) {\n    ((std/core/types/@Optional((@uniq-field5@1788: 1828) : a) : ? a ) as @pat@7@0: ? 1828)\n       -> @uniq-field5@1788;\n    ((@skip std/core/types/@None() : ? a ) as @pat@8: ? 1828)\n       -> (match (@this) {\n        ((@skip std/core/types/Tuple5((@pat@0@4: 1824) : a, (@pat@1@5: 1825) : a, (@pat@2@4: 1826) : a, (@pat@3@4: 1827) : a, (@x@3: 1828) : a) : (a, b, c, d, a1) ) as @pat@9: (1824, 1825, 1826, 1827, 1828))\n           -> @x@3;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,d,a1> fn(@this: (a, b, c, d, a1), fst: ? a, snd: ? b, thd: ? c, field4: ? d, field5: ? a1){\n  std/core/types/Tuple5<a,b,c,d,a1>((match (fst) {\n      ((std/core/types/@Optional((@uniq-fst@1645: a) : a) : ? a ) as @pat: ? a)\n         -> @uniq-fst@1645;\n      ((@skip std/core/types/@None() : ? a ) as @pat@0: ? a)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple5((@x: a) : a, (@pat@0@0: b) : b, (@pat@1@0: c) : c, (@pat@2: d) : d, (@pat@3: a1) : a1) : (a, b, c, d, a1) ) as @pat@1: (a, b, c, d, a1))\n             -> @x;\n        });\n    }), (match (snd) {\n      ((std/core/types/@Optional((@uniq-snd@1690: b) : b) : ? b ) as @pat@1@1: ? b)\n         -> @uniq-snd@1690;\n      ((@skip std/core/types/@None() : ? b ) as @pat@2@0: ? b)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple5((@pat@0@1: a) : a, (@x@0: b) : b, (@pat@1@2: c) : c, (@pat@2@1: d) : d, (@pat@3@0: a1) : a1) : (a, b, c, d, a1) ) as @pat@4: (a, b, c, d, a1))\n             -> @x@0;\n        });\n    }), (match (thd) {\n      ((std/core/types/@Optional((@uniq-thd@1731: c) : c) : ? c ) as @pat@3@1: ? c)\n         -> @uniq-thd@1731;\n      ((@skip std/core/types/@None() : ? c ) as @pat@4@0: ? c)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple5((@pat@0@2: a) : a, (@pat@1@3: b) : b, (@x@1: c) : c, (@pat@2@2: d) : d, (@pat@3@2: a1) : a1) : (a, b, c, d, a1) ) as @pat@5: (a, b, c, d, a1))\n             -> @x@1;\n        });\n    }), (match (field4) {\n      ((std/core/types/@Optional((@uniq-field4@1766: d) : d) : ? d ) as @pat@5@0: ? d)\n         -> @uniq-field4@1766;\n      ((@skip std/core/types/@None() : ? d ) as @pat@6: ? d)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple5((@pat@0@3: a) : a, (@pat@1@4: b) : b, (@pat@2@3: c) : c, (@x@2: d) : d, (@pat@3@3: a1) : a1) : (a, b, c, d, a1) ) as @pat@7: (a, b, c, d, a1))\n             -> @x@2;\n        });\n    }), (match (field5) {\n      ((std/core/types/@Optional((@uniq-field5@1788: a1) : a1) : ? a1 ) as @pat@7@0: ? a1)\n         -> @uniq-field5@1788;\n      ((@skip std/core/types/@None() : ? a1 ) as @pat@8: ? a1)\n         -> (match (@this) {\n          ((@skip std/core/types/Tuple5((@pat@0@4: a) : a, (@pat@1@5: b) : b, (@pat@2@4: c) : c, (@pat@3@4: d) : d, (@x@3: a1) : a1) : (a, b, c, d, a1) ) as @pat@9: (a, b, c, d, a1))\n             -> @x@3;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/tuple5/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple5\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/tuple5/@copy"]}, {"name": {"op": "Var","id": "std/core/types/unit/@copy","type": {"op": "Function","params": [{"op": "Unit"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Unit"}}],"body": {"op": "Literal","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@this: ()){\n  std/core/types/Unit;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/unit/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Unit\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/unit/@copy"]}, {"name": {"op": "Var","id": "std/core/types/@field-addr-of","type": {"op": "Function","params": [{"op": "Top"}, {"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "conname","type": {"op": "String"}}, {"op": "Var","id": "fieldname","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "conname","type": {"op": "String"}},"annotation": "genExpr: conname"}, {"op": "DebugWrap","inner": {"op": "Var","id": "fieldname","type": {"op": "String"}},"annotation": "genExpr: fieldname"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}}},"annotation": "genExpr: std/core/types/@extern-field-addr-of<a>(x, conname, fieldname)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, conname: string, fieldname: string){\n  std/core/types/@extern-field-addr-of<a>(x, conname, fieldname);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/@field-addr-of\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@field-addr\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/@field-addr-of"]}, {"name": {"op": "Var","id": "std/core/types/@make-ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/types/@extern-make-ssize_t","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(i: int){\n  std/core/types/@extern-make-ssize_t(i);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/@make-ssize_t\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/@make-ssize_t"]}, {"name": {"op": "Var","id": "std/core/types/@no-reuse","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"@reuse\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/core/types/@extern-no-reuse","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"@reuse\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"@reuse\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(){\n  std/core/types/@extern-no-reuse();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/@no-reuse\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@reuse\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/@no-reuse"]}, {"name": {"op": "Var","id": "std/core/types/@open","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),(e1 :: E),a,b> fn<(e1 :: E)>(x: a){\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/@open\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/@open"]}, {"name": {"op": "Var","id": "std/core/types/(&&)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> y;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/(&&)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/(&&)"]}, {"name": {"op": "Var","id": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "Primitive","name": "infixConcat(String, String): String","args": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  std/core/types/(@extern-x++)(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/(++)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/(++)"]}, {"name": {"op": "Var","id": "std/core/types/id","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a){\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/id\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/id"]}, {"name": {"op": "Var","id": "std/core/types/keep","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a){\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/keep\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/keep"]}, {"name": {"op": "Var","id": "std/core/types/local-scope","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: forall<(h :: H)> () -> <(local :: H -> X)<(h :: H)>|(e :: E)> a){\n  action();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/local-scope\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/local-scope"]}, {"name": {"op": "Var","id": "std/core/types/not","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "b","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(b: bool){\n  match (b) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/not\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/not"]}, {"name": {"op": "Var","id": "std/core/types/run","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/types/@extern-run","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/@extern-run<(e :: E),a>(action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn<(e :: E)>(action: forall<(h :: H)> () -> <(alloc :: H -> X)<(h :: H)>,(read :: H -> X)<(h :: H)>,(write :: H -> X)<(h :: H)>|(e :: E)> a){\n  std/core/types/@extern-run<(e :: E),a>(action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/run\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/run"]}, {"name": {"op": "Var","id": "std/core/types/(||)","type": {"op": "Function","params": [{"op": "Bool"}, {"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Bool"}}, {"op": "Var","id": "y","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "x","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Bool"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: bool, y: bool){\n  match (x) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/True;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> y;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/(||)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}, {\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/(||)"]}, {"name": {"op": "Var","id": "std/core/types/bool/(!)","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "b","type": {"op": "Bool"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(b: bool){\n  match (b) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/types/bool/(!)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Bool\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/types/bool/(!)"]}, {"name": {"op": "Var","id": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "value","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/@optional","tag": "std/core/types/@Optional","args": [{"op": "Var","id": "value","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/@Optional"]}, {"name": {"op": "Var","id": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/@optional","tag": "std/core/types/@None","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/@None"]}, {"name": {"op": "Var","id": "std/core/types/@Valueop","type": {"op": "Ptr","extern_ptr_name": "\"@valueop\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/@valueop","tag": "std/core/types/@Valueop","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/@Valueop"]}, {"name": {"op": "Var","id": "std/core/types/False","type": {"op": "Int"}},"value": {"op": "Literal","type": {"op": "Bool"},"value": false}}, {"name": {"op": "Var","id": "std/core/types/True","type": {"op": "Int"}},"value": {"op": "Literal","type": {"op": "Bool"},"value": true}}, {"name": {"op": "Var","id": "std/core/types/Box","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"box\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "unbox","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/box","tag": "std/core/types/Box","args": [{"op": "Var","id": "unbox","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Box"]}, {"name": {"op": "Var","id": "std/core/types/@Cctx","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}],"return": {"op": "Ptr","extern_ptr_name": "\"cctx\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "res","type": {"op": "Top"}}, {"op": "Var","id": "holeptr","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}}],"body": {"op": "Construct","type_tag": "std/core/types/cctx","tag": "std/core/types/@Cctx","args": [{"op": "Var","id": "res","type": {"op": "Top"}}, {"op": "Var","id": "holeptr","type": {"op": "Ptr","extern_ptr_name": "\"@field-addr\""}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/@Cctx"]}, {"name": {"op": "Var","id": "std/core/types/Left","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "left","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/either","tag": "std/core/types/Left","args": [{"op": "Var","id": "left","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Left"]}, {"name": {"op": "Var","id": "std/core/types/Right","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "right","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/either","tag": "std/core/types/Right","args": [{"op": "Var","id": "right","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Right"]}, {"name": {"op": "Var","id": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/list","tag": "std/core/types/Nil","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/Nil"]}, {"name": {"op": "Var","id": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "head","type": {"op": "Top"}}, {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "Construct","type_tag": "std/core/types/list","tag": "std/core/types/Cons","args": [{"op": "Var","id": "head","type": {"op": "Top"}}, {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Cons"]}, {"name": {"op": "Var","id": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/maybe","tag": "std/core/types/Nothing","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/Nothing"]}, {"name": {"op": "Var","id": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "value","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/maybe","tag": "std/core/types/Just","args": [{"op": "Var","id": "value","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Just"]}, {"name": {"op": "Var","id": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/order","tag": "std/core/types/Lt","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/Lt"]}, {"name": {"op": "Var","id": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/order","tag": "std/core/types/Eq","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/Eq"]}, {"name": {"op": "Var","id": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/order","tag": "std/core/types/Gt","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/Gt"]}, {"name": {"op": "Var","id": "std/core/types/Lt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lt","type": {"op": "Top"}}, {"op": "Var","id": "gt","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/order2","tag": "std/core/types/Lt2","args": [{"op": "Var","id": "lt","type": {"op": "Top"}}, {"op": "Var","id": "gt","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Lt2"]}, {"name": {"op": "Var","id": "std/core/types/Eq2","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "eq","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/order2","tag": "std/core/types/Eq2","args": [{"op": "Var","id": "eq","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Eq2"]}, {"name": {"op": "Var","id": "std/core/types/Gt2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "lt","type": {"op": "Top"}}, {"op": "Var","id": "gt","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/order2","tag": "std/core/types/Gt2","args": [{"op": "Var","id": "lt","type": {"op": "Top"}}, {"op": "Var","id": "gt","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Gt2"]}, {"name": {"op": "Var","id": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/tuple2","tag": "std/core/types/Tuple2","args": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Tuple2"]}, {"name": {"op": "Var","id": "std/core/types/Tuple3","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple3\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}, {"op": "Var","id": "thd","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/tuple3","tag": "std/core/types/Tuple3","args": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}, {"op": "Var","id": "thd","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Tuple3"]}, {"name": {"op": "Var","id": "std/core/types/Tuple4","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple4\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}, {"op": "Var","id": "thd","type": {"op": "Top"}}, {"op": "Var","id": "field4","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/tuple4","tag": "std/core/types/Tuple4","args": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}, {"op": "Var","id": "thd","type": {"op": "Top"}}, {"op": "Var","id": "field4","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Tuple4"]}, {"name": {"op": "Var","id": "std/core/types/Tuple5","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple5\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}, {"op": "Var","id": "thd","type": {"op": "Top"}}, {"op": "Var","id": "field4","type": {"op": "Top"}}, {"op": "Var","id": "field5","type": {"op": "Top"}}],"body": {"op": "Construct","type_tag": "std/core/types/tuple5","tag": "std/core/types/Tuple5","args": [{"op": "Var","id": "fst","type": {"op": "Top"}}, {"op": "Var","id": "snd","type": {"op": "Top"}}, {"op": "Var","id": "thd","type": {"op": "Top"}}, {"op": "Var","id": "field4","type": {"op": "Top"}}, {"op": "Var","id": "field5","type": {"op": "Top"}}]}},"annotation": "genConstr"},"export_as": ["std/core/types/Tuple5"]}, {"name": {"op": "Var","id": "std/core/types/Unit","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "std/core/types/unit","tag": "std/core/types/Unit","args": []},"annotation": "genConstr"},"export_as": ["std/core/types/Unit"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}