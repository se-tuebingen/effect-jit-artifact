{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core/string"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/string/string-cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-string-cmp","args": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  std/core/string/@extern-string-cmp(x, y);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/string-cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/string-cmp"]}, {"name": {"op": "Var","id": "std/core/string/count","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-count","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/@extern-count(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/count\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/count"]}, {"name": {"op": "Var","id": "std/core/string/is-empty","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/(==)(s, \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/is-empty\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/is-empty"]}, {"name": {"op": "Var","id": "std/core/string/is-notempty","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "(#1 != #2)","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/(!=)(s, \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/is-notempty\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/is-notempty"]}, {"name": {"op": "Var","id": "std/core/string/list","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-list","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/@extern-list(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/list\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/list"]}, {"name": {"op": "Var","id": "std/core/string/repeatz","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-repeatz","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, n: ssize_t){\n  std/core/string/@extern-repeatz(s, n);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/repeatz\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/repeatz"]}, {"name": {"op": "Var","id": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/#char/@extern-string","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  std/core/string/char/@extern-string(c);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/char/string\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/char/string"]}, {"name": {"op": "Var","id": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "cs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/#listchar/@extern-string","args": [{"op": "Var","id": "cs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(cs: (list :: V -> V)<char>){\n  std/core/string/listchar/@extern-string(cs);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/listchar/string\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/listchar/string"]}, {"name": {"op": "Var","id": "std/core/string/maybe/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"maybe\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ms","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ms","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ms","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ms\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(ms: (maybe :: V -> V)<string>){\n  match (ms) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Just((s: string) : string) : (maybe :: V -> V)<string> ) as @pat@0: ((maybe :: V -> V)<string>))\n       -> s;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/maybe/string\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/maybe/string"]}, {"name": {"op": "Var","id": "std/core/string/vector/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@arg-x1","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/#vector/@extern-string","args": [{"op": "Var","id": "@arg-x1","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@arg-x1: (vector :: V -> V)<char>){\n  std/core/string/vector/@extern-string(@arg-x1);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/vector/string\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/vector/string"]}, {"name": {"op": "Var","id": "std/core/string/to-lower","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-to-lower","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/@extern-to-lower(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/to-lower\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/to-lower"]}, {"name": {"op": "Var","id": "std/core/string/to-upper","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-to-upper","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/@extern-to-upper(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/to-upper\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/to-upper"]}, {"name": {"op": "Var","id": "std/core/string/trim","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/trim-right","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/trim-left","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}},"annotation": "genExpr: std/core/string/trim-left(s)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}},"annotation": "genExpr: std/core/string/trim-right((std/core/string/trim-left(s)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/trim-right((std/core/string/trim-left(s)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/trim\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/trim"]}, {"name": {"op": "Var","id": "std/core/string/vector","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/core/string/@extern-vector","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  std/core/string/@extern-vector(s);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/vector\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/vector"]}, {"name": {"op": "Var","id": "std/core/string/cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@10000","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/string-cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/string-cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/string/string-cmp(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@10000"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i@10000","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLt(Int, Int): Boolean","args": [{"op": "Var","id": "i@10000","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i@10000","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "i@10000","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"order\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Eq","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Eq"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(>)(i@10000, 0))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/types/Gt;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> std/core/types/Eq;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i@10000\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  val i@10000 : int\n        = std/core/string/string-cmp(x, y);\n  match ((std/core/int/(<)(i@10000, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Lt;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((std/core/int/(>)(i@10000, 0))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/types/Gt;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> std/core/types/Eq;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/cmp\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/cmp"]}, {"name": {"op": "Var","id": "std/core/string/(<)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/string/cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}]},"annotation": "genExpr: std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Lt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Lt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/(<)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/(<)"]}, {"name": {"op": "Var","id": "std/core/string/(<=)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(<)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(<)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/string/cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}]},"annotation": "genExpr: std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/(<=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/(<=)"]}, {"name": {"op": "Var","id": "std/core/string/(>)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/string/cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}]},"annotation": "genExpr: std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Gt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  std/core/order/(==)((std/core/string/cmp(x, y)), std/core/types/Gt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/(>)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/(>)"]}, {"name": {"op": "Var","id": "std/core/string/(>=)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(>)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(>)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/string/cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}]},"annotation": "genExpr: std/core/order/(>)((std/core/string/cmp(x, y)), std/core/types/Lt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  std/core/order/(>)((std/core/string/cmp(x, y)), std/core/types/Lt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/(>=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/(>=)"]}, {"name": {"op": "Var","id": "std/core/string/maybe","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<string>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/types/Just<string>(s)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  match ((std/core/string/(==)(s, \"\"))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Nothing<string>;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Just<string>(s);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/maybe"]}, {"name": {"op": "Var","id": "std/core/string/order2","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(<)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(<)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/cmp","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/string/cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}]},"annotation": "genExpr: std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>(x, y)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x1","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>(y, x)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x1\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  match ((std/core/order/(<)((std/core/string/cmp(x, y)), std/core/types/Gt))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/Tuple2<string,string>(x, y);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Tuple2<string,string>(y, x);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/order2\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/order2"]}, {"name": {"op": "Var","id": "std/core/string/repeat","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/repeatz","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/repeatz"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/ssize_t(n)"}]},"annotation": "genExpr: std/core/string/repeatz(s, (std/core/int/ssize_t(n)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, n: int){\n  std/core/string/repeatz(s, (std/core/int/ssize_t(n)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/repeat\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/repeat"]}, {"name": {"op": "Var","id": "std/core/string/pad-left","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "fill","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "n","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/count","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/count"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/string/count(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "s@0@10004","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fill","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"char\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-fill@332: char) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-fill@332"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fill@332,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fill@332: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fill","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"char\""},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": " "},"annotation": "genExpr: ' '"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@332: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@332;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}"}]},"annotation": "genExpr: std/core/string/char/string((match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@332: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@332;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@0@10004\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@0@10004"]}, {"name": {"op": "Var","id": "n@0@10005","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(width, n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@0@10005\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@0@10005"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/repeatz","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/repeatz"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s@0@10004","type": {"op": "String"}},"annotation": "genExpr: s@0@10004"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n@0@10005","type": {"op": "Int"}},"annotation": "genExpr: n@0@10005"}]},"annotation": "genExpr: std/core/int/ssize_t(n@0@10005)"}]},"annotation": "genExpr: std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s)"}},"annotation": "genExpr: val s@0@10004 : string;\nval n@0@10005 : int;\nstd/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, width: int, fill: ? char){\n  val n : int\n        = std/core/string/count(s);\n  match ((std/core/int/(<=)(width, n))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> s;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> val s@0@10004 : string;\n          val n@0@10005 : int;\n      std/core/types/(++)((std/core/string/repeatz(s@0@10004, (std/core/int/ssize_t(n@0@10005)))), s);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/pad-left\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/pad-left"]}, {"name": {"op": "Var","id": "std/core/string/pad-right","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "fill","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "n","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/count","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/count"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/string/count(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "s@0@10008","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fill","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"2","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"char\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-fill@378: char) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-fill@378"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-fill@378,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-fill@378: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "fill","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"char\""},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": " "},"annotation": "genExpr: ' '"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"fill\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@378: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@378;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}"}]},"annotation": "genExpr: std/core/string/char/string((match (fill) {\n  ((std/core/types/@Optional((@uniq-fill@378: char) : char) : ? char ) as @pat: ? char)\n     -> @uniq-fill@378;\n  ((@skip std/core/types/@None() : ? char ) as @pat@0: ? char)\n     -> ' ';\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@0@10008\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@0@10008"]}, {"name": {"op": "Var","id": "n@0@10009","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "width","type": {"op": "Int"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(width, n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"n@0@10009\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["n@0@10009"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/string/repeatz","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/repeatz"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s@0@10008","type": {"op": "String"}},"annotation": "genExpr: s@0@10008"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n@0@10009","type": {"op": "Int"}},"annotation": "genExpr: n@0@10009"}]},"annotation": "genExpr: std/core/int/ssize_t(n@0@10009)"}]},"annotation": "genExpr: std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))"}]},"annotation": "genExpr: std/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))))"}},"annotation": "genExpr: val s@0@10008 : string;\nval n@0@10009 : int;\nstd/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))))"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, width: int, fill: ? char){\n  val n : int\n        = std/core/string/count(s);\n  match ((std/core/int/(<=)(width, n))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> s;\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> val s@0@10008 : string;\n          val n@0@10009 : int;\n      std/core/types/(++)(s, (std/core/string/repeatz(s@0@10008, (std/core/int/ssize_t(n@0@10009)))));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/pad-right\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/pad-right"]}, {"name": {"op": "Var","id": "std/core/string/split","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sep","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sep","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s, sep)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, sep: string){\n  val v@10012 : (vector :: V -> V)<string>\n        = std/core/string/splitv(s, sep);\n  std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/split\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/split"]}, {"name": {"op": "Var","id": "std/core/string/(||)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Var","id": "y","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "String"}},"annotation": "genExpr: y"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "x","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: string, y: string){\n  match ((std/core/string/(==)(x, \"\"))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> y;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/(||)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/(||)"]}, {"name": {"op": "Var","id": "std/core/string/splitn/split","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "sep","type": {"op": "String"}}, {"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10014","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitvn","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Var","id": "sep","type": {"op": "String"}},"annotation": "genExpr: sep"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/ssize_t","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/ssize_t"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: std/core/int/ssize_t(n)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitvn(s, sep, (std/core/int/ssize_t(n)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10014\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10014"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10014","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10014"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10014, (std/core/types/@None<(list :: V -> V)<string>>))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string, sep: string, n: int){\n  val v@10014 : (vector :: V -> V)<string>\n        = std/core/string/splitvn(s, sep, (std/core/int/ssize_t(n)));\n  std/core/vector/vlist<string>(v@10014, (std/core/types/@None<(list :: V -> V)<string>>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/string/splitn/split\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/string/splitn/split"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}