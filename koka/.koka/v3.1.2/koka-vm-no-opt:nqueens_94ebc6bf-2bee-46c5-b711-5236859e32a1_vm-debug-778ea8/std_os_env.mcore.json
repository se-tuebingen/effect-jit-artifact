{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/os/env"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/os/path","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_os_path.rpyeffect"}}}, {"name": {"op": "Var","id": "std/os/env/os-get-argv","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "getArgs(): Array[String]","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-os-get-argv();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/os-get-argv\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/os-get-argv"]}, {"name": {"op": "Var","id": "std/os/env/os-get-env","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-os-get-env","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-os-get-env();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/os-get-env\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/os-get-env"]}, {"name": {"op": "Var","id": "std/os/env/get-cc-name","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cc-name","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cc-name();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cc-name\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cc-name"]}, {"name": {"op": "Var","id": "std/os/env/get-compiler-version","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-compiler-version","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-compiler-version();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-compiler-version\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-compiler-version"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-address-bits","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-address-bits","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-address-bits();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-address-bits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-address-bits"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-arch","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-arch","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-arch();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-arch\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-arch"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-boxed-bits","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-boxed-bits","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-boxed-bits();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-boxed-bits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-boxed-bits"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-count","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-count","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-count();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-count\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-count"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-int-bits","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-int-bits","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-int-bits();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-int-bits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-int-bits"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-is-little-endian","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-is-little-endian","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-is-little-endian();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-is-little-endian\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-is-little-endian"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-pointer-bits","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-pointer-bits","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-pointer-bits();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-pointer-bits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-pointer-bits"]}, {"name": {"op": "Var","id": "std/os/env/get-cpu-size-bits","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-cpu-size-bits","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-cpu-size-bits();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-cpu-size-bits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-cpu-size-bits"]}, {"name": {"op": "Var","id": "std/os/env/get-os-name","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/env/@extern-get-os-name","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/env/@extern-get-os-name();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-os-name\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-os-name"]}, {"name": {"op": "Var","id": "std/os/env/argv","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"name": "std/core/delayed/delay","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/delay<(list :: V -> V)<string>,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10000","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/os-get-argv","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/os-get-argv"},"args": []},"annotation": "genExpr: std/os/env/os-get-argv()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10000"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10000","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10000"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10000, (std/core/types/@None<(list :: V -> V)<string>>))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  val v@10000 : (vector :: V -> V)<string>\n        = std/os/env/os-get-argv();\n  std/core/vector/vlist<string>(v@10000, (std/core/types/@None<(list :: V -> V)<string>>));\n}"}]},"annotation": "genExpr: std/core/delayed/delay<(list :: V -> V)<string>,(ndet :: X)>((fn<(ndet :: X)>(){\n  val v@10000 : ((vector :: V -> V)<string>)\n        = (std/os/env/os-get-argv());\n  (std/core/vector/vlist<string>(v@10000, (std/core/types/@None<(list :: V -> V)<string>>)));\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/argv\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}"},"export_as": ["std/os/env/argv"]}, {"name": {"op": "Var","id": "std/os/env/to-tuples","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"0","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"1","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"1","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((std/core/types/Cons((value: string), (xx: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"2","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"3","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<(string, string)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (name: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: name"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"2","type": {"op": "Top"}},"annotation": "genTest: normal: (value: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: value"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>(name, value)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/to-tuples","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/to-tuples"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"3","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}]},"annotation": "genExpr: std/os/env/to-tuples(xx)"}]},"annotation": "genExpr: std/core/types/Cons<(string, string)>((std/core/types/Tuple2<string,string>(name, value)), (std/os/env/to-tuples(xx)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(name,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (name: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((value: string), (xx: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(value,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (value: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((value: string), (xx: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"4","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"5","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"5","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((@skip std/core/types/Nil() : list<string> ) as @pat@2: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<(string, string)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (name@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: name@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>(name@0, \"\")"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<(string, string)>"}]},"annotation": "genExpr: std/core/types/Cons<(string, string)>((std/core/types/Tuple2<string,string>(name@0, \"\")), (std/core/types/Nil<(string, string)>))"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(name@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (name@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Nil() : list<string> ) as @pat@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Nil() : list<string> ) as @pat@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"4\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<(string, string)>"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(xs: (list :: V -> V)<string>){\n  match (xs) {\n    ((std/core/types/Cons((name: string) : string, ((std/core/types/Cons((value: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n       -> std/core/types/Cons<(string, string)>((std/core/types/Tuple2<string,string>(name, value)), (std/os/env/to-tuples(xx)));\n    ((std/core/types/Cons((name@0: string) : string, ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> std/core/types/Cons<(string, string)>((std/core/types/Tuple2<string,string>(name@0, \"\")), (std/core/types/Nil<(string, string)>));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n       -> std/core/types/Nil<(string, string)>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/to-tuples\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/to-tuples"]}, {"name": {"op": "Var","id": "std/os/env/environ","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"name": "std/core/delayed/delay","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/delay<std/os/env/env,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10001","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/os-get-env","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"vector\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/os-get-env"},"args": []},"annotation": "genExpr: std/os/env/os-get-env()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10001\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10001"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/to-tuples","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/to-tuples"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10001","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10001"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10001, (std/core/types/@None<(list :: V -> V)<string>>))"}]},"annotation": "genExpr: std/os/env/to-tuples((std/core/vector/vlist<string>(v@10001, (std/core/types/@None<(list :: V -> V)<string>>))))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  val v@10001 : (vector :: V -> V)<string>\n        = std/os/env/os-get-env();\n  std/os/env/to-tuples((std/core/vector/vlist<string>(v@10001, (std/core/types/@None<(list :: V -> V)<string>>))));\n}"}]},"annotation": "genExpr: std/core/delayed/delay<std/os/env/env,(ndet :: X)>((fn<(ndet :: X)>(){\n  val v@10001 : ((vector :: V -> V)<string>)\n        = (std/os/env/os-get-env());\n  (std/os/env/to-tuples((std/core/vector/vlist<string>(v@10001, (std/core/types/@None<(list :: V -> V)<string>>)))));\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/environ\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/delayed/delayed\"}}"},"export_as": ["std/os/env/environ"]}, {"name": {"op": "Var","id": "std/os/env/get-argv","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"name": "std/core/delayed/force","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/force<(list :: V -> V)<string>,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/argv","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"annotation": "genExpr: std/os/env/argv"}]},"annotation": "genExpr: std/core/delayed/force<(list :: V -> V)<string>,(ndet :: X)>(std/os/env/argv)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/core/delayed/force<(list :: V -> V)<string>,(ndet :: X)>(std/os/env/argv);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-argv\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-argv"]}, {"name": {"op": "Var","id": "std/os/env/get-args","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "is-node","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"name": "std/core/host","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/host"},"args": []},"annotation": "genExpr: std/core/host()"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "node"},"annotation": "genExpr: \"node\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/host()), \"node\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"is-node\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["is-node"]}, {"name": {"op": "Var","id": "is-vm","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"name": "std/core/host","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/host"},"args": []},"annotation": "genExpr: std/core/host()"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "vm"},"annotation": "genExpr: \"vm\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/host()), \"vm\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"is-vm\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["is-vm"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x6","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"name": "std/core/delayed/force","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/force<(list :: V -> V)<string>,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/argv","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"annotation": "genExpr: std/os/env/argv"}]},"annotation": "genExpr: std/core/delayed/force<(list :: V -> V)<string>,(ndet :: X)>(std/os/env/argv)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x6","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"7","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"8","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "is-node","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/path","type": {"op": "Ptr"}},"name": "std/os/path/stemname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/stemname"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/path","type": {"op": "Ptr"}},"name": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"7","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/os/path/path(x)"}]},"annotation": "genExpr: std/os/path/stemname((std/os/path/path(x)))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "node"},"annotation": "genExpr: \"node\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/os/path/stemname((std/os/path/path(x)))), \"node\")"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"is-node\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"is-node\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (is-node) {\n  ((std/core/types/True() : bool ) as @pat@0: bool)\n     -> std/core/string/(==)((std/os/path/stemname((std/os/path/path(x)))), \"node\");\n  (@pat@1: bool)\n     -> std/core/types/False;\n}"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/drop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/drop<string>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"8","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}]},"annotation": "genExpr: std/core/list/drop<string>(xx, 1)"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "is-vm","type": {"op": "Bool"}},"annotation": "genExpr: is-vm"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x6","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(xs,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/drop","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/drop<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@x6","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}]},"annotation": "genExpr: std/core/list/drop<string>(xs@0, 1)"}}]},"annotation": "genBranch: [(xs@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  val is-node : bool;\n  val is-vm : bool;\n  match ((std/core/delayed/force<(list :: V -> V)<string>,(ndet :: X)>(std/os/env/argv))) {\n    ((std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n       | (match (is-node) {\n        ((std/core/types/True() : bool ) as @pat@0: bool)\n           -> std/core/string/(==)((std/os/path/stemname((std/os/path/path(x)))), \"node\");\n        (@pat@1: bool)\n           -> std/core/types/False;\n      }) -> std/core/list/drop<string>(xx, 1);\n    (xs: ((list :: V -> V)<string>))\n       | is-vm -> xs;\n    (xs@0: ((list :: V -> V)<string>))\n       -> std/core/list/drop<string>(xs@0, 1);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-args\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-args"]}, {"name": {"op": "Var","id": "std/os/env/get-env","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"name": "std/core/delayed/force","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/force<std/os/env/env,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/environ","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"annotation": "genExpr: std/os/env/environ"}]},"annotation": "genExpr: std/core/delayed/force<std/os/env/env,(ndet :: X)>(std/os/env/environ)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/core/delayed/force<std/os/env/env,(ndet :: X)>(std/os/env/environ);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-env\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-env"]}, {"name": {"op": "Var","id": "std/os/env/get-env-value","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "name","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/lookup","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/lookup<string,string,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"name": "std/core/delayed/force","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/delayed/force<std/os/env/env,(ndet :: X)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/env/environ","type": {"op": "Ptr","extern_ptr_name": "std/core/delayed/delayed"}},"annotation": "genExpr: std/os/env/environ"}]},"annotation": "genExpr: std/core/delayed/force<std/os/env/env,(ndet :: X)>(std/os/env/environ)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "nm","type": {"op": "String"}}],"body": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "nm","type": {"op": "String"}}, {"op": "Var","id": "name","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(nm: string){\n  std/core/string/(==)(nm, name);\n}"}]},"annotation": "genExpr: std/core/list/lookup<string,string,(ndet :: X)>((std/core/delayed/force<std/os/env/env,(ndet :: X)>(std/os/env/environ)), (fn<(ndet :: X)>(nm: string){\n    (std/core/string/(==)(nm, name));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(name: string){\n  std/core/list/lookup<string,string,(ndet :: X)>((std/core/delayed/force<std/os/env/env,(ndet :: X)>(std/os/env/environ)), (fn<(ndet :: X)>(nm: string){\n      (std/core/string/(==)(nm, name));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/env/get-env-value\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/env/get-env-value"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}